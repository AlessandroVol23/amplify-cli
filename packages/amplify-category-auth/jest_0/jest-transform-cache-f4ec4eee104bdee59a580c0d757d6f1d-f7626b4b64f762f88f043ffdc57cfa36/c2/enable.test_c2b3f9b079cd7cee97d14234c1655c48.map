{"version":3,"sources":["enable.test.js"],"names":["add","require","messages","describe","mockExecuteProviderUtils","jest","fn","mockGetProjectDetails","mockSelectionPrompt","Promise","resolve","mockProjectPath","mockContext","amplify","executeProviderUtils","getProjectDetails","serviceSelectionPrompt","print","warning","info","error","it","expect","run","toBeDefined","beforeEach","mockReturnValue","projectConfig","projectPath","amplifyMeta","auth","foo","toBeCalledWith","authExists","not","toBeCalled"],"mappings":"AAAA,MAAMA,MAAMC,QAAQ,4BAAR,CAAZ;AACA,MAAM,EAAEC,QAAF,KAAeD,QAAQ,2DAAR,CAArB;;AAGAE,SAAS,eAAT,EAA0B,MAAM;AAC9B,QAAMC,2BAA2BC,KAAKC,EAAL,EAAjC;AACA,QAAMC,wBAAwBF,KAAKC,EAAL,EAA9B;AACA,QAAME,sBAAsBH,KAAKC,EAAL,CAAQ,MAAMG,QAAQC,OAAR,CAAgB,EAAhB,CAAd,CAA5B;AACA,QAAMC,kBAAkB,8CAAxB;AACA,QAAMC,cAAc;AAClBC,aAAS;AACPC,4BAAsBV,wBADf;AAEPW,yBAAmBR,qBAFZ;AAGPS,8BAAwBR;AAHjB,KADS;AAMlBS,WAAO;AACLC,eAASb,KAAKC,EAAL,EADJ;AAELa,YAAMd,KAAKC,EAAL,EAFD;AAGLc,aAAOf,KAAKC,EAAL;AAHF;AANW,GAApB;;AAaAe,KAAG,gCAAH,EAAqC,MAAM;AACzCC,WAAOtB,IAAIuB,GAAX,EAAgBC,WAAhB;AACD,GAFD;;AAIArB,WAAS,4BAAT,EAAuC,MAAM;AAC3CsB,eAAW,MAAM;AACflB,4BAAsBmB,eAAtB,CAAsC;AACpCC,uBAAe;AACbC,uBAAajB;AADA,SADqB;AAIpCkB,qBAAa;AACXC,gBAAM;AACJC,iBAAK;AADD;AADK;AAJuB,OAAtC;AAUD,KAXD;AAYAV,OAAG,2FAAH,EAAgG,YAAY;AAC1G,YAAMrB,IAAIuB,GAAJ,CAAQX,WAAR,CAAN;AACAU,aAAOV,YAAYK,KAAZ,CAAkBC,OAAzB,EAAkCc,cAAlC,CAAiD9B,SAAS+B,UAA1D;AACAX,aAAOV,YAAYC,OAAZ,CAAoBG,sBAA3B,EAAmDkB,GAAnD,CAAuDC,UAAvD;AACD,KAJD;AAKD,GAlBD;;AAoBAhC,WAAS,4BAAT,EAAuC,MAAM;AAC3CsB,eAAW,MAAM;AACflB,4BAAsBmB,eAAtB,CAAsC;AACpCC,uBAAe;AACbC,uBAAajB;AADA,SADqB;AAIpCkB,qBAAa;AAJuB,OAAtC;AAMD,KAPD;AAQAR,OAAG,2CAAH,EAAgD,YAAY;AAC1D,YAAMrB,IAAIuB,GAAJ,CAAQX,WAAR,CAAN;AACAU,aAAOV,YAAYC,OAAZ,CAAoBG,sBAA3B,EAAmDmB,UAAnD;AACD,KAHD;AAID,GAbD;AAcD,CAxDD","file":"enable.test.js","sourcesContent":["const add = require('../../commands/auth/enable');\nconst { messages } = require('../../provider-utils/awscloudformation/assets/string-maps');\n\n\ndescribe('auth enable: ', () => {\n  const mockExecuteProviderUtils = jest.fn();\n  const mockGetProjectDetails = jest.fn();\n  const mockSelectionPrompt = jest.fn(() => Promise.resolve({}));\n  const mockProjectPath = '/User/someone/Documents/Project/amplify-test';\n  const mockContext = {\n    amplify: {\n      executeProviderUtils: mockExecuteProviderUtils,\n      getProjectDetails: mockGetProjectDetails,\n      serviceSelectionPrompt: mockSelectionPrompt,\n    },\n    print: {\n      warning: jest.fn(),\n      info: jest.fn(),\n      error: jest.fn(),\n    },\n  };\n\n  it('enable run method should exist', () => {\n    expect(add.run).toBeDefined();\n  });\n\n  describe('case: auth already enabled', () => {\n    beforeEach(() => {\n      mockGetProjectDetails.mockReturnValue({\n        projectConfig: {\n          projectPath: mockProjectPath,\n        },\n        amplifyMeta: {\n          auth: {\n            foo: 'bar',\n          },\n        },\n      });\n    });\n    it('enable method should detect existing auth metadata and return after printing warning text', async () => {\n      await add.run(mockContext);\n      expect(mockContext.print.warning).toBeCalledWith(messages.authExists);\n      expect(mockContext.amplify.serviceSelectionPrompt).not.toBeCalled();\n    });\n  });\n\n  describe('case: auth not yet enabled', () => {\n    beforeEach(() => {\n      mockGetProjectDetails.mockReturnValue({\n        projectConfig: {\n          projectPath: mockProjectPath,\n        },\n        amplifyMeta: {},\n      });\n    });\n    it('service selection prompt should be called', async () => {\n      await add.run(mockContext);\n      expect(mockContext.amplify.serviceSelectionPrompt).toBeCalled();\n    });\n  });\n});\n\n"]}