{"version":3,"sources":["update.test.js"],"names":["jest","mock","readFileSync","update","require","messages","describe","mockExecuteProviderUtils","fn","mockGetProjectDetails","mockSelectionPrompt","Promise","reject","Error","mockProjectPath","mockPluginInstance","loadResourceParameters","mockContext","amplify","executeProviderUtils","getProjectDetails","serviceSelectionPrompt","getPluginInstance","mockReturnValue","pathManager","getBackendDirPath","print","warning","info","error","dependencies","it","expect","run","toBeDefined","beforeEach","projectConfig","projectPath","amplifyMeta","auth","toBeCalledWith","forEach","d","foo","bar","Cognito","provider","dependenciesExists","toBeCalled"],"mappings":"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","file":"update.test.js","sourcesContent":["const update = require('../../commands/auth/update');\nconst { messages } = require('../../provider-utils/awscloudformation/assets/string-maps');\n\njest.mock('fs', () => ({\n  readFileSync: () => '{ \"Cognito\": { \"provider\": \"aws\"}}',\n}));\n\ndescribe('auth update: ', () => {\n  const mockExecuteProviderUtils = jest.fn();\n  const mockGetProjectDetails = jest.fn();\n  const mockSelectionPrompt = jest.fn(() => Promise.reject(new Error()));\n  const mockProjectPath = '/User/someone/Documents/Project/amplify-test';\n  const mockPluginInstance = { loadResourceParameters: jest.fn() };\n  const mockContext = {\n    amplify: {\n      executeProviderUtils: mockExecuteProviderUtils,\n      getProjectDetails: mockGetProjectDetails,\n      serviceSelectionPrompt: mockSelectionPrompt,\n      getPluginInstance: jest.fn().mockReturnValue(mockPluginInstance),\n      pathManager: {\n        getBackendDirPath: jest.fn(),\n      },\n    },\n    print: {\n      warning: jest.fn(),\n      info: jest.fn(),\n      error: jest.fn(),\n    },\n  };\n  const dependencies = ['analytics', 'api', 'function', 'storage'];\n\n  it('update run method should exist', async () => {\n    await expect(update.run).toBeDefined();\n  });\n\n  describe('case: auth resource does not exist', () => {\n    beforeEach(() => {\n      mockGetProjectDetails.mockReturnValue({\n        projectConfig: {\n          projectPath: mockProjectPath,\n        },\n        amplifyMeta: {\n          auth: {},\n        },\n      });\n    });\n    it('update run method should detect absence of auth resource and print a message', async () => {\n      await update.run(mockContext);\n      expect(mockContext.print.warning).toBeCalledWith('Auth has not yet been added to this project.');\n    });\n  });\n\n  describe('case: resources may rely on auth', () => {\n    dependencies.forEach((d) => {\n      beforeEach(() => {\n        const amplifyMeta = { auth: { foo: { bar: 'bar', Cognito: { provider: 'provider' } } } };\n        amplifyMeta[d] = {};\n        amplifyMeta[d].foo = 'bar';\n        mockGetProjectDetails.mockReturnValue({\n          projectConfig: {\n            projectPath: mockProjectPath,\n          },\n          amplifyMeta,\n        });\n      });\n      it(`update run method should detect presence of ${d} resource and print a message`, async () => {\n        await update.run(mockContext);\n        expect(mockContext.print.info).toBeCalledWith(messages.dependenciesExists);\n      });\n      it(`serviceSelectionPrompt should still be called even when warning displayed for existing ${d} resource`, async () => {\n        await update.run(mockContext);\n        expect(mockContext.amplify.serviceSelectionPrompt).toBeCalled();\n      });\n    });\n  });\n\n  describe('case: auth resource exists', () => {\n    beforeEach(() => {\n      mockGetProjectDetails.mockReturnValue({\n        projectConfig: {\n          projectPath: mockProjectPath,\n        },\n        amplifyMeta: {\n          auth: {\n            foo: 'bar',\n          },\n        },\n      });\n    });\n    it('update run method should detect presence of storage resource and print a message', async () => {\n      await update.run(mockContext);\n      expect(mockContext.amplify.serviceSelectionPrompt).toBeCalled();\n    });\n  });\n});\n"]}