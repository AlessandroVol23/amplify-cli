{"version":3,"sources":["core-questions.test.js"],"names":["coreQuestions","require","defaults","maps","defaultFileName","stringMapFileName","mockContext","mockAmplify","mappedOptions1","name","value","mappedOptions2","mappedOptions3","currentAnswers","describe","beforeEach","getWhen","jest","fn","inputValidation","getAllDefaults","getProjectDetails","mockReturnValue","Q1","getAllMaps","input","type","map","options","afterEach","updatingAuth","key","question","it","res","parseInputs","expect","toBeInstanceOf","Object","toEqual","message","toHaveBeenCalled","default","not","def","requiredOptions","val","choices","undefined","filter","toBeTruthy","requiredPresent","a","length","toBe","assign"],"mappings":"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","file":"core-questions.test.js","sourcesContent":["/* eslint-disable max-len */\n\nconst coreQuestions = require('../../provider-utils/awscloudformation/question-factories/core-questions');\nconst defaults = require('../../provider-utils/awscloudformation/assets/cognito-defaults');\nconst maps = require('../../provider-utils/awscloudformation/assets/string-maps');\n\n\nconst defaultFileName = 'cognito-defaults';\nconst stringMapFileName = 'string-maps';\nconst mockContext = {};\nlet mockAmplify = {};\nconst mappedOptions1 = [{ name: 'name1', value: 'value1' }];\nconst mappedOptions2 = [{ name: 'name1', value: 'value1' }];\nconst mappedOptions3 = [\n  { name: 'name1', value: 'value1' },\n  { name: 'name2', value: 'value2' },\n];\nlet currentAnswers = {};\n\ndescribe('When generating auth questions...', () => {\n  beforeEach(() => {\n    mockAmplify = {\n      getWhen: jest.fn(),\n      inputValidation: jest.fn(),\n      getAllDefaults: jest.fn(),\n      getProjectDetails: jest.fn(),\n    };\n    defaults.getAllDefaults = jest.fn();\n    defaults.getAllDefaults.mockReturnValue({ Q1: 'default' });\n    maps.getAllMaps = jest.fn();\n    maps.getAllMaps.mockReturnValue({ mappedOptions1, mappedOptions2, mappedOptions3 });\n    mockAmplify.getProjectDetails.mockReturnValue('testName');\n    delete input.type;\n    delete input.map;\n    delete input.options;\n  });\n  afterEach(() => {\n    delete mockContext.updatingAuth;\n    currentAnswers = {};\n  });\n\n\n  const key = 'Q1';\n  const question = 'What is your name?';\n\n  const input = {\n    key,\n    question,\n  };\n\n  describe('...and when generating simple inputs...', () => {\n    it('it should return a question object when passed a simple input without getWhen conditions.', () => {\n      const res = coreQuestions.parseInputs(input, mockAmplify, defaultFileName, stringMapFileName, currentAnswers, mockContext);\n      expect(res).toBeInstanceOf(Object);\n      expect(res.type).toEqual('input');\n      expect(res.name).toEqual(key);\n      expect(res.message).toEqual(question);\n    });\n\n    it('should try calling getWhen.', () => {\n      coreQuestions.parseInputs(input, mockAmplify, defaultFileName, stringMapFileName, currentAnswers, mockContext);\n      expect(mockAmplify.getWhen).toHaveBeenCalled();\n    });\n\n    it('should try calling inputValidation.', () => {\n      coreQuestions.parseInputs(input, mockAmplify, defaultFileName, stringMapFileName, currentAnswers, mockContext);\n      expect(mockAmplify.inputValidation).toHaveBeenCalled();\n    });\n\n    it('should try calling getAllDefaults if updatingAuth is not present in the context.', () => {\n      const res = coreQuestions.parseInputs(input, mockAmplify, defaultFileName, stringMapFileName, currentAnswers, mockContext);\n      res.default();\n      expect(defaults.getAllDefaults).toHaveBeenCalled();\n    });\n\n    it('should not getAllDefaults if updatingAuth is present in the context.', () => {\n      mockContext.updatingAuth = { Q1: 'my old answer' };\n      const res = coreQuestions.parseInputs(input, mockAmplify, defaultFileName, stringMapFileName, currentAnswers, mockContext);\n      res.default();\n      expect(defaults.getAllDefaults).not.toHaveBeenCalled();\n    });\n\n    it('should return the answer from context.updatingAuth if updatingAuth is present.', () => {\n      mockContext.updatingAuth = { Q1: 'my old answer' };\n      const res = coreQuestions.parseInputs(input, mockAmplify, defaultFileName, stringMapFileName, currentAnswers, mockContext);\n      const def = res.default();\n      expect(def).toEqual('my old answer');\n    });\n\n    it('should return the choices from the input.options if getWhen is false', () => {\n      mockAmplify.getWhen.mockReturnValue(() => false);\n      input.type = 'list';\n      input.requiredOptions = [{ key: 'required1' }];\n      input.options = [{ key: 'testkey', val: 'testval' }];\n      const res = coreQuestions.parseInputs(input, mockAmplify, defaultFileName, stringMapFileName, currentAnswers, mockContext);\n      expect(res.choices).toEqual(input.options);\n    });\n\n    it('should return the choices from the input.options if getWhen is false', () => {\n      mockAmplify.getWhen.mockReturnValue(() => true);\n      input.type = 'list';\n      input.requiredOptions = null;\n      input.options = [{ key: 'testkey', val: 'testval' }];\n      const res = coreQuestions.parseInputs(input, mockAmplify, defaultFileName, stringMapFileName, currentAnswers, mockContext);\n      expect(res.choices).toEqual(input.options);\n    });\n\n    it('should render inputs of type \"multiselect\" as type \"checkbox\"', () => {\n      input.type = 'multiselect';\n      const res = coreQuestions.parseInputs(input, mockAmplify, defaultFileName, stringMapFileName, currentAnswers, mockContext);\n      expect(res.type).toEqual('checkbox');\n    });\n\n    it('should render inputs of type \"confirm\" as type \"confirm\"', () => {\n      input.type = 'confirm';\n      const res = coreQuestions.parseInputs(input, mockAmplify, defaultFileName, stringMapFileName, currentAnswers, mockContext);\n      expect(res.type).toEqual('confirm');\n    });\n\n    it('should render inputs of type \"input\" as type \"input\"', () => {\n      input.type = 'input';\n      const res = coreQuestions.parseInputs(input, mockAmplify, defaultFileName, stringMapFileName, currentAnswers, mockContext);\n      expect(res.type).toEqual('input');\n    });\n\n    it('should render inputs without a type as type \"input\"', () => {\n      input.type = undefined;\n      const res = coreQuestions.parseInputs(input, mockAmplify, defaultFileName, stringMapFileName, currentAnswers, mockContext);\n      expect(res.type).toEqual('input');\n    });\n  });\n\n  describe('...and when generating complex inputs', () => {\n    it('should get mapped option values for list inputs with map values when getWhen is false but requiredOptions are present', () => {\n      mockAmplify.getWhen.mockReturnValue(() => false);\n      input.requiredOptions = 'keyone';\n      input.type = 'list';\n      input.map = 'mappedOptions1';\n      const res = coreQuestions.parseInputs(input, mockAmplify, defaultFileName, stringMapFileName, currentAnswers, mockContext);\n      expect(res.choices).toEqual(mappedOptions1);\n    });\n\n    it('should get mapped option values for list inputs with map values when getWhen is true but requiredOptions are missing ', () => {\n      mockAmplify.getWhen.mockReturnValue(() => true);\n      input.requiredOptions = undefined;\n      input.type = 'list';\n      input.map = 'mappedOptions1';\n      const res = coreQuestions.parseInputs(input, mockAmplify, defaultFileName, stringMapFileName, currentAnswers, mockContext);\n      expect(res.choices).toEqual(mappedOptions1);\n    });\n\n    it('should get mapped option values for list inputs with map value when getWhen is false and requiredOptions are missing ', () => {\n      mockAmplify.getWhen.mockReturnValue(() => false);\n      input.requiredOptions = undefined;\n      input.type = 'list';\n      input.map = 'mappedOptions1';\n      const res = coreQuestions.parseInputs(input, mockAmplify, defaultFileName, stringMapFileName, currentAnswers, mockContext);\n      expect(res.choices).toEqual(mappedOptions1);\n    });\n\n    it('should add required options to the inputs answers using the filter method', () => {\n      mockAmplify.getWhen.mockReturnValue(() => true);\n      input.map = 'mappedOptions1';\n      input.requiredOptions = 'mappedOptions2';\n      currentAnswers.mappedOptions2 = 'valueone';\n      input.type = 'list';\n      const res = coreQuestions.parseInputs(input, mockAmplify, defaultFileName, stringMapFileName, currentAnswers, mockContext);\n      expect(res.filter).toBeTruthy();\n    });\n\n    it('should remove required options from the choices presented to the user (currentAnswers variant)', () => {\n      mockAmplify.getWhen.mockReturnValue(() => true);\n      input.map = 'mappedOptions3';\n      input.requiredOptions = 'mappedOptions2';\n      currentAnswers.mappedOptions2 = 'value2';\n      input.type = 'list';\n      const res = coreQuestions.parseInputs(input, mockAmplify, defaultFileName, stringMapFileName, currentAnswers, mockContext);\n      const requiredPresent = res.choices.filter(a => a.name === 'name2').length > 0;\n      expect(requiredPresent).toBe(false);\n    });\n\n    it('should remove required options from the choices presented to the user (updatingAuth variant)', () => {\n      mockAmplify.getWhen.mockReturnValue(() => true);\n      input.map = 'mappedOptions3';\n      input.requiredOptions = 'mappedOptions2';\n      Object.assign(mockContext, { updatingAuth: { mappedOptions2: 'value2' } });\n      input.type = 'list';\n      const res = coreQuestions.parseInputs(input, mockAmplify, defaultFileName, stringMapFileName, currentAnswers, mockContext);\n      const requiredPresent = res.choices.filter(a => a.name === 'name2').length > 0;\n      expect(requiredPresent).toBe(false);\n    });\n  });\n});\n"]}