{"version":3,"sources":["cognito-defaults.js"],"names":["uuid","require","coreAttributes","appClientReadAttributes","booleanOptions","sharedId","split","roles","authRoleName","Ref","unauthRoleName","authRoleArn","unauthRoleArn","generalDefaults","resourceName","authSelections","userPoolDefaults","projectName","userPoolName","autoVerifiedAttributes","mfaConfiguration","mfaTypes","roleName","roleExternalId","policyName","smsAuthenticationMessage","smsVerificationMessage","emailVerificationSubject","emailVerificationMessage","defaultPasswordPolicy","find","b","value","passwordPolicyMinLength","passwordPolicyCharacters","requiredAttributes","name","userpoolClientName","userpoolClientGenerateSecret","userpoolClientRefreshTokenValidity","userpoolClientReadAttributes","d","mfaLambdaRole","mfaLambdaLogPolicy","mfaPassRolePolicy","mfaLambdaIAMPolicy","userpoolClientLambdaRole","userpoolClientLogPolicy","userpoolClientLambdaPolicy","userpoolClientSetAttributes","identityPoolDefaults","identityPoolName","allowUnauthenticatedIdentities","thirdPartyAuth","lambdaLogPolicy","openIdLambdaRoleName","openIdRolePolicy","openIdLambdaIAMPolicy","openIdLogPolicy","identityAndUserPoolDefaults","functionMap","userPoolOnly","identityPoolAndUserPool","identityPoolOnly","entityKeys","identityPoolKeys","Object","keys","userPoolKeys","getAllDefaults","disallowedChars","projectConfig","toLowerCase","substring","replace","target","sources","assign","module","exports"],"mappings":"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","file":"cognito-defaults.js","sourcesContent":["const uuid = require('uuid');\nconst { coreAttributes, appClientReadAttributes, booleanOptions } = require('./string-maps');\n\nconst [sharedId] = uuid().split('-');\n\nconst roles = {\n  authRoleName: {\n    Ref: 'AuthRoleName',\n  },\n  unauthRoleName: {\n    Ref: 'UnauthRoleName',\n  },\n  authRoleArn: {\n    'Fn::GetAtt': [\n      'AuthRole',\n      'Arn',\n    ],\n  },\n  unauthRoleArn: {\n    'Fn::GetAtt': [\n      'UnauthRole',\n      'Arn',\n    ],\n  },\n};\n\nconst generalDefaults = () => ({\n  resourceName: `cognito${sharedId}`,\n  authSelections: 'identityPoolAndUserPool',\n  ...roles,\n});\n\nconst userPoolDefaults = projectName => ({\n  userPoolName: `${projectName}_userpool_${sharedId}`,\n  autoVerifiedAttributes: ['email'],\n  mfaConfiguration: 'OFF',\n  mfaTypes: ['SMS Text Message'],\n  roleName: `${projectName}_sns-role`,\n  roleExternalId: `${projectName}_role_external_id`,\n  policyName: `${projectName}-sns-policy`,\n  smsAuthenticationMessage: 'Your authentication code is {####}',\n  smsVerificationMessage: 'Your verification code is {####}',\n  emailVerificationSubject: 'Your verification code',\n  emailVerificationMessage: 'Your verification code is {####}',\n  defaultPasswordPolicy: booleanOptions.find(b => b.value === false).value,\n  passwordPolicyMinLength: 8,\n  passwordPolicyCharacters: [\n    'Requires Lowercase',\n    'Requires Uppercase',\n    'Requires Numbers',\n    'Requires Symbols',\n  ],\n  requiredAttributes: [\n    coreAttributes.find(b => b.name === 'Email').value,\n  ],\n  userpoolClientName: `${projectName}_app_client`,\n  userpoolClientGenerateSecret: true,\n  userpoolClientRefreshTokenValidity: 30,\n  userpoolClientReadAttributes: [\n    appClientReadAttributes.find(d => d.name === 'Email').value,\n  ],\n  mfaLambdaRole: `${projectName}_totp_lambda_role`,\n  mfaLambdaLogPolicy: `${projectName}_totp_lambda_log_policy`,\n  mfaPassRolePolicy: `${projectName}_totp_pass_role_policy`,\n  mfaLambdaIAMPolicy: `${projectName}_totp_lambda_iam_policy`,\n  userpoolClientLambdaRole: `${projectName}_userpoolclient_lambda_role`,\n  userpoolClientLogPolicy: `${projectName}_userpoolclient_lambda_log_policy`,\n  userpoolClientLambdaPolicy: `${projectName}_userpoolclient_lambda_iam_policy`,\n  userpoolClientSetAttributes: false,\n});\n\nconst identityPoolDefaults = projectName => ({\n  identityPoolName: `${projectName}_identitypool_${sharedId}`,\n  allowUnauthenticatedIdentities: booleanOptions.find(b => b.value === false).value,\n  thirdPartyAuth: booleanOptions.find(b => b.value === false).value,\n  lambdaLogPolicy: `${projectName}_lambda_log_policy`,\n  openIdLambdaRoleName: `${projectName}_openid_lambda_role`,\n  openIdRolePolicy: `${projectName}_openid_pass_role_policy`,\n  openIdLambdaIAMPolicy: `${projectName}_openid_lambda_iam_policy`,\n  openIdLogPolicy: `${projectName}_openid_lambda_log_policy`,\n\n});\n\nconst identityAndUserPoolDefaults = projectName => ({\n  // replace dashes with underscores for id pool regex constraint\n  ...identityPoolDefaults(projectName),\n  ...userPoolDefaults(projectName),\n});\n\nconst functionMap = {\n  userPoolOnly: userPoolDefaults,\n  identityPoolAndUserPool: identityAndUserPoolDefaults,\n  identityPoolOnly: identityPoolDefaults,\n};\n\nconst entityKeys = {\n  identityPoolKeys: Object.keys(identityPoolDefaults('')),\n  userPoolKeys: Object.keys(userPoolDefaults('')),\n};\n\nconst getAllDefaults = (name) => {\n  const disallowedChars = /[^A-Za-z0-9_]+/g;\n  let projectName = name.projectConfig ? `${name.projectConfig.projectName.toLowerCase().substring(0, 100)}${sharedId}` : name.substring(0, 100);\n  projectName = projectName.replace(disallowedChars, '_');\n  const target = generalDefaults(projectName);\n  const sources = [\n    userPoolDefaults(projectName),\n    identityAndUserPoolDefaults(projectName),\n  ];\n\n  return Object.assign(target, ...sources);\n};\n\nmodule.exports = {\n  getAllDefaults,\n  functionMap,\n  generalDefaults,\n  entityKeys,\n  roles,\n};\n"]}