{"version":3,"sources":["core-questions.js"],"names":["inquirer","require","parseInputs","input","amplify","defaultValuesFilename","stringMapsFilename","currentAnswers","context","defaultValuesSrc","__dirname","stringMapsSrc","getAllDefaults","getAllMaps","question","name","key","message","prefix","suffix","when","getWhen","updatingAuth","validate","inputValidation","default","answers","undefined","getProjectDetails","type","includes","requiredOptions","Object","assign","choices","map","options","sourceValues","filter","x","value","trueOptions","Separator","requiredOptionsMsg","t","join","concat","z","module","exports"],"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","file":"core-questions.js","sourcesContent":["const inquirer = require('inquirer');\n\nfunction parseInputs(input, amplify, defaultValuesFilename, stringMapsFilename, currentAnswers, context) { // eslint-disable-line max-len\n  const defaultValuesSrc = `${__dirname}/../assets/${defaultValuesFilename}`;\n  const stringMapsSrc = `${__dirname}/../assets/${stringMapsFilename}`;\n  const { getAllDefaults } = require(defaultValuesSrc);\n  const { getAllMaps } = require(stringMapsSrc);\n\n  // Can have a cool question builder function here based on input json - will iterate on this\n  // Can also have some validations here based on the input json\n  // Uncool implementation here\n\n  let question = {\n    name: input.key,\n    message: input.question,\n    prefix: input.prefix,\n    suffix: input.suffix,\n    when: amplify.getWhen(input, currentAnswers, context.updatingAuth, amplify),\n    validate: amplify.inputValidation(input),\n    default: (answers) => { // eslint-disable-line no-unused-vars\n      // if the user is editing and there is a previous value, this is alwasys the default\n      if (context.updatingAuth && context.updatingAuth[input.key] !== undefined) {\n        return context.updatingAuth[input.key];\n      }\n\n      // if not editing or no previous value, get defaults\n      return getAllDefaults(amplify.getProjectDetails(amplify))[input.key];\n    },\n  };\n\n  if (input.type && ['list', 'multiselect'].includes(input.type)) {\n    if (!input.requiredOptions || !question.when()) {\n      question = Object.assign({\n        choices: input.map ? getAllMaps(context.updatingAuth)[input.map] : input.options,\n      }, question);\n    } else {\n      const sourceValues = currentAnswers[input.requiredOptions] ||\n      context.updatingAuth[input.requiredOptions] ||\n      [];\n      const requiredOptions = getAllMaps()[input.map]\n        .filter(x => sourceValues\n          .includes(x.value));\n      const trueOptions = getAllMaps()[input.map]\n        .filter(x => !sourceValues\n          .includes(x.value));\n      /*eslint-disable*/\n      question = Object.assign(question, {\n        choices: [new inquirer.Separator(`--- ${input.requiredOptionsMsg} ${requiredOptions.map(t => t.name).join(', ')}   ---`), ...trueOptions],\n        filter: ((input) => { // eslint-disable-line no-shadow\n          input = input.concat(...requiredOptions.map(z => z.value));\n          return input;\n        }),\n      });\n      /* eslint-enable */\n    }\n  }\n\n  if (input.type && input.type === 'list') {\n    question = Object.assign({\n      type: 'list',\n    }, question);\n  } else if (input.type && input.type === 'multiselect') {\n    question = Object.assign({\n      type: 'checkbox',\n    }, question);\n  } else if (input.type && input.type === 'confirm') {\n    question = Object.assign({\n      type: 'confirm',\n    }, question);\n  } else {\n    question = Object.assign({\n      type: 'input',\n    }, question);\n  }\n\n  return question;\n}\n\nmodule.exports = { parseInputs };\n"]}