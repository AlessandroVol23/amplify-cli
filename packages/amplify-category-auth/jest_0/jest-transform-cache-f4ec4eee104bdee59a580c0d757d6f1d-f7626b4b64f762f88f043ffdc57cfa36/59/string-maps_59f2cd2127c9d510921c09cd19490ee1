b494131d99e21db7109d7b8486f99ec2
/* istanbul ignore next */var cov_2cblaafqw3 = function () {
  var path = '/c/Users/Sandro/repo/amplify-cli/packages/amplify-category-auth/provider-utils/awscloudformation/assets/string-maps.js',
      hash = '4685d8380e71e37f95c1253c13a0b8fd104f84da',
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = '__coverage__',
      coverageData = {
    path: '/c/Users/Sandro/repo/amplify-cli/packages/amplify-category-auth/provider-utils/awscloudformation/assets/string-maps.js',
    statementMap: {
      '0': {
        start: {
          line: 1,
          column: 17
        },
        end: {
          line: 4,
          column: 1
        }
      },
      '1': {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 2
        }
      },
      '2': {
        start: {
          line: 11,
          column: 24
        },
        end: {
          line: 21,
          column: 1
        }
      },
      '3': {
        start: {
          line: 23,
          column: 23
        },
        end: {
          line: 33,
          column: 1
        }
      },
      '4': {
        start: {
          line: 35,
          column: 19
        },
        end: {
          line: 49,
          column: 1
        }
      },
      '5': {
        start: {
          line: 51,
          column: 19
        },
        end: {
          line: 60,
          column: 1
        }
      },
      '6': {
        start: {
          line: 62,
          column: 26
        },
        end: {
          line: 71,
          column: 1
        }
      },
      '7': {
        start: {
          line: 73,
          column: 25
        },
        end: {
          line: 87,
          column: 1
        }
      },
      '8': {
        start: {
          line: 89,
          column: 23
        },
        end: {
          line: 140,
          column: 1
        }
      },
      '9': {
        start: {
          line: 142,
          column: 32
        },
        end: {
          line: 151,
          column: 1
        }
      },
      '10': {
        start: {
          line: 153,
          column: 22
        },
        end: {
          line: 169,
          column: 1
        }
      },
      '11': {
        start: {
          line: 171,
          column: 29
        },
        end: {
          line: 173,
          column: 1
        }
      },
      '12': {
        start: {
          line: 172,
          column: 2
        },
        end: {
          line: 172,
          column: 57
        }
      },
      '13': {
        start: {
          line: 172,
          column: 23
        },
        end: {
          line: 172,
          column: 39
        }
      },
      '14': {
        start: {
          line: 175,
          column: 20
        },
        end: {
          line: 190,
          column: 1
        }
      },
      '15': {
        start: {
          line: 176,
          column: 2
        },
        end: {
          line: 178,
          column: 3
        }
      },
      '16': {
        start: {
          line: 177,
          column: 4
        },
        end: {
          line: 177,
          column: 27
        }
      },
      '17': {
        start: {
          line: 179,
          column: 2
        },
        end: {
          line: 189,
          column: 4
        }
      },
      '18': {
        start: {
          line: 192,
          column: 0
        },
        end: {
          line: 204,
          column: 2
        }
      }
    },
    fnMap: {
      '0': {
        name: '(anonymous_0)',
        decl: {
          start: {
            line: 171,
            column: 29
          },
          end: {
            line: 171,
            column: 30
          }
        },
        loc: {
          start: {
            line: 171,
            column: 35
          },
          end: {
            line: 173,
            column: 1
          }
        },
        line: 171
      },
      '1': {
        name: '(anonymous_1)',
        decl: {
          start: {
            line: 172,
            column: 18
          },
          end: {
            line: 172,
            column: 19
          }
        },
        loc: {
          start: {
            line: 172,
            column: 23
          },
          end: {
            line: 172,
            column: 39
          }
        },
        line: 172
      },
      '2': {
        name: '(anonymous_2)',
        decl: {
          start: {
            line: 175,
            column: 20
          },
          end: {
            line: 175,
            column: 21
          }
        },
        loc: {
          start: {
            line: 175,
            column: 30
          },
          end: {
            line: 190,
            column: 1
          }
        },
        line: 175
      }
    },
    branchMap: {
      '0': {
        loc: {
          start: {
            line: 176,
            column: 2
          },
          end: {
            line: 178,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 176,
            column: 2
          },
          end: {
            line: 178,
            column: 3
          }
        }, {
          start: {
            line: 176,
            column: 2
          },
          end: {
            line: 178,
            column: 3
          }
        }],
        line: 176
      }
    },
    s: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0,
      '10': 0,
      '11': 0,
      '12': 0,
      '13': 0,
      '14': 0,
      '15': 0,
      '16': 0,
      '17': 0,
      '18': 0
    },
    f: {
      '0': 0,
      '1': 0,
      '2': 0
    },
    b: {
      '0': [0, 0]
    },
    _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

const messages = /* istanbul ignore next */(cov_2cblaafqw3.s[0]++, {
  authExists: 'Auth has already been added to this project. To update run amplify update auth.',
  dependenciesExists: '\nYou have configured resources that might depend on this Cognito resource.  Updating this Cognito resource could have unintended side effects.\n'
});

const learnMoreOption = /* istanbul ignore next */(cov_2cblaafqw3.s[1]++, [{
  name: 'I want to learn more.',
  value: 'learnMore'
}]);

const defaultPrompMap = /* istanbul ignore next */(cov_2cblaafqw3.s[2]++, [{
  name: 'Yes, use the default configuration.',
  value: 'default'
}, {
  name: 'No, I will set up my own configuration.',
  value: 'manual'
}, ...learnMoreOption]);

const booleanOptions = /* istanbul ignore next */(cov_2cblaafqw3.s[3]++, [{
  name: 'Yes',
  value: true
}, {
  name: 'No',
  value: false
}, ...learnMoreOption]);

const mfaOptions = /* istanbul ignore next */(cov_2cblaafqw3.s[4]++, [{
  name: 'OFF',
  value: 'OFF'
}, {
  name: 'ON (Required for all logins, can not be enabled later)',
  value: 'ON'
}, {
  name: 'OPTIONAL (Individual users can use MFA)',
  value: 'OPTIONAL'
}, ...learnMoreOption]);

const mfaMethods = /* istanbul ignore next */(cov_2cblaafqw3.s[5]++, [{
  name: 'SMS Text Message',
  value: 'SMS Text Message'
}, {
  name: 'Time-Based One-Time Password (TOTP)',
  value: 'TOTP'
}]);

const emailRegistration = /* istanbul ignore next */(cov_2cblaafqw3.s[6]++, [{
  name: 'Enabled (Requires per-user email entry at registration)',
  value: ['email']
}, {
  name: 'Disabled (Uses SMS/TOTP as an alternative)',
  value: ['phone_number']
}]);

const authSelectionMap = /* istanbul ignore next */(cov_2cblaafqw3.s[7]++, [{
  name: 'User Sign-Up, Sign-In, connected with AWS IAM controls (Enables per-user Storage features for images or other content, Analytics, and more)',
  value: 'identityPoolAndUserPool'
}, {
  name: 'User Sign-Up & Sign-In only (Best used with a cloud API only)',
  value: 'userPoolOnly'
},
// {
//   name: 'Identity Pool Only',
//   value: 'identityPoolOnly',
// },
...learnMoreOption]);

const coreAttributes = /* istanbul ignore next */(cov_2cblaafqw3.s[8]++, [{
  name: 'Address',
  value: 'address'
}, {
  name: 'Birthdate',
  value: 'birthdate'
}, {
  name: 'Email',
  value: 'email'
}, {
  name: 'Family Name',
  value: 'family_name'
}, {
  name: 'Given Name',
  value: 'given_name'
}, {
  name: 'Locale',
  value: 'locale'
}, {
  name: 'Middle Name',
  value: 'middle_name'
}, {
  name: 'Name',
  value: 'name'
}, {
  name: 'Nickname',
  value: 'nickname'
}, {
  name: 'Phone Number',
  value: 'phone_number'
}, {
  name: 'Preferred Username',
  value: 'preferred_username'
}, {
  name: 'Picture',
  value: 'picture'
}, {
  name: 'Profile',
  value: 'profile'
}, {
  name: 'Updated At',
  value: 'updated_at'
}, {
  name: 'Website',
  value: 'website'
}, {
  name: 'Zone Info',
  value: 'zoneinfo'
}]);

const appClientReadAttributes = /* istanbul ignore next */(cov_2cblaafqw3.s[9]++, [...coreAttributes, {
  name: 'Email Verified?',
  value: 'email_verified'
}, {
  name: 'Phone Number Verified?',
  value: 'phone_number_verified'
}]);

const authProviders = /* istanbul ignore next */(cov_2cblaafqw3.s[10]++, [{
  name: 'Facebook',
  value: 'graph.facebook.com',
  answerHashKey: 'facebookAppId'
}, {
  name: 'Google',
  value: 'accounts.google.com',
  answerHashKey: 'googleClientId'
}, {
  name: 'Amazon',
  value: 'www.amazon.com',
  answerHashKey: 'amazonAppId'
}]);

/* istanbul ignore next */cov_2cblaafqw3.s[11]++;
const disableOptionsOnEdit = () => {
  /* istanbul ignore next */cov_2cblaafqw3.f[0]++;
  cov_2cblaafqw3.s[12]++;

  mfaOptions.find(i => {
    /* istanbul ignore next */cov_2cblaafqw3.f[1]++;
    cov_2cblaafqw3.s[13]++;
    return i.value === 'ON';
  }).disabled = true;
};

/* istanbul ignore next */cov_2cblaafqw3.s[14]++;
const getAllMaps = edit => {
  /* istanbul ignore next */cov_2cblaafqw3.f[2]++;
  cov_2cblaafqw3.s[15]++;

  if (edit) {
    /* istanbul ignore next */cov_2cblaafqw3.b[0][0]++;
    cov_2cblaafqw3.s[16]++;

    disableOptionsOnEdit();
  } else /* istanbul ignore next */{
    cov_2cblaafqw3.b[0][1]++;
  }
  cov_2cblaafqw3.s[17]++;
  return {
    coreAttributes,
    authSelectionMap,
    appClientReadAttributes,
    authProviders,
    mfaOptions,
    mfaMethods,
    emailRegistration,
    defaultPrompMap,
    booleanOptions
  };
};

/* istanbul ignore next */cov_2cblaafqw3.s[18]++;
module.exports = {
  coreAttributes,
  appClientReadAttributes,
  authSelectionMap,
  getAllMaps,
  authProviders,
  mfaOptions,
  mfaMethods,
  emailRegistration,
  defaultPrompMap,
  booleanOptions,
  messages
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,