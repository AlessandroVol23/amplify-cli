8d393b1df15d79fcacc073d9c3ba9199
'use strict';
require('ts-jest').install("/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-docs-generator/src/generator/utils/isRequired.ts", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst graphql_1 = require(\"graphql\");\nfunction isRequired(typeObj) {\n    if (graphql_1.isNonNullType(typeObj) && graphql_1.isListType(typeObj.ofType)) {\n        // See if it's a Non-null List of Non-null Types\n        return isRequired(typeObj.ofType.ofType);\n    }\n    else if (graphql_1.isListType(typeObj)) {\n        // See if it's a Nullable List of Non-null Types\n        return graphql_1.isNonNullType(typeObj.ofType);\n    }\n    return graphql_1.isNonNullType(typeObj);\n}\nexports.default = isRequired;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXNSZXF1aXJlZC5qcyIsInNvdXJjZVJvb3QiOiIvYy9Vc2Vycy9TYW5kcm8vcmVwby9hbXBsaWZ5LWNsaS9wYWNrYWdlcy9hbXBsaWZ5LWdyYXBocWwtZG9jcy1nZW5lcmF0b3Ivc3JjLyIsInNvdXJjZXMiOlsiaXNSZXF1aXJlZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHFDQUFpRTtBQUNqRSxvQkFBbUMsT0FBb0I7SUFDckQsSUFBSSx1QkFBYSxDQUFDLE9BQU8sQ0FBQyxJQUFJLG9CQUFVLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQ3hELGdEQUFnRDtRQUNoRCxPQUFPLFVBQVUsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0tBQ3pDO1NBQU0sSUFBSSxvQkFBVSxDQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQzlCLGdEQUFnRDtRQUNoRCxPQUFPLHVCQUFhLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQ3RDO0lBQ0QsT0FBTyx1QkFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ2hDLENBQUM7QUFURCw2QkFTQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEdyYXBoUUxUeXBlLCBpc05vbk51bGxUeXBlLCBpc0xpc3RUeXBlIH0gZnJvbSBcImdyYXBocWxcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzUmVxdWlyZWQodHlwZU9iajogR3JhcGhRTFR5cGUpOiBib29sZWFuIHtcbiAgaWYgKGlzTm9uTnVsbFR5cGUodHlwZU9iaikgJiYgaXNMaXN0VHlwZSh0eXBlT2JqLm9mVHlwZSkpIHtcbiAgICAvLyBTZWUgaWYgaXQncyBhIE5vbi1udWxsIExpc3Qgb2YgTm9uLW51bGwgVHlwZXNcbiAgICByZXR1cm4gaXNSZXF1aXJlZCh0eXBlT2JqLm9mVHlwZS5vZlR5cGUpXG4gIH0gZWxzZSBpZiAoaXNMaXN0VHlwZSh0eXBlT2JqKSkge1xuICAgIC8vIFNlZSBpZiBpdCdzIGEgTnVsbGFibGUgTGlzdCBvZiBOb24tbnVsbCBUeXBlc1xuICAgIHJldHVybiBpc05vbk51bGxUeXBlKHR5cGVPYmoub2ZUeXBlKTtcbiAgfVxuICByZXR1cm4gaXNOb25OdWxsVHlwZSh0eXBlT2JqKTtcbn1cbiJdfQ==");"use strict"; /* istanbul ignore next */var cov_trl8qeu9f = function () {
    var path = "/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-docs-generator/src/generator/utils/isRequired.ts",
        hash = "305e20ee631d72d2e3fc1e7f05d046d673b9457a",
        Function = function () {}.constructor,
        global = new Function('return this')(),
        gcv = "__coverage__",
        coverageData = { path: "/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-docs-generator/src/generator/utils/isRequired.ts", statementMap: { "0": { start: { line: 2, column: 0 }, end: { line: 2, column: 62 } }, "1": { start: { line: 3, column: 18 }, end: { line: 3, column: 36 } }, "2": { start: { line: 5, column: 4 }, end: { line: 12, column: 5 } }, "3": { start: { line: 7, column: 8 }, end: { line: 7, column: 49 } }, "4": { start: { line: 9, column: 9 }, end: { line: 12, column: 5 } }, "5": { start: { line: 11, column: 8 }, end: { line: 11, column: 55 } }, "6": { start: { line: 13, column: 4 }, end: { line: 13, column: 44 } }, "7": { start: { line: 15, column: 0 }, end: { line: 15, column: 29 } } }, fnMap: { "0": { name: "isRequired", decl: { start: { line: 4, column: 9 }, end: { line: 4, column: 19 } }, loc: { start: { line: 4, column: 29 }, end: { line: 14, column: 1 } }, line: 4 } }, branchMap: { "0": { loc: { start: { line: 5, column: 4 }, end: { line: 12, column: 5 } }, type: "if", locations: [{ start: { line: 5, column: 4 }, end: { line: 12, column: 5 } }, { start: { line: 5, column: 4 }, end: { line: 12, column: 5 } }], line: 5 }, "1": { loc: { start: { line: 5, column: 8 }, end: { line: 5, column: 80 } }, type: "binary-expr", locations: [{ start: { line: 5, column: 8 }, end: { line: 5, column: 40 } }, { start: { line: 5, column: 44 }, end: { line: 5, column: 80 } }], line: 5 }, "2": { loc: { start: { line: 9, column: 9 }, end: { line: 12, column: 5 } }, type: "if", locations: [{ start: { line: 9, column: 9 }, end: { line: 12, column: 5 } }, { start: { line: 9, column: 9 }, end: { line: 12, column: 5 } }], line: 9 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0 }, f: { "0": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0] }, inputSourceMap: { version: 3, file: "isRequired.js", sourceRoot: "/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-docs-generator/src/", sources: ["isRequired.ts"], names: [], mappings: ";;AAAA,qCAAiE;AACjE,oBAAmC,OAAoB;IACrD,IAAI,uBAAa,CAAC,OAAO,CAAC,IAAI,oBAAU,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;QACxD,gDAAgD;QAChD,OAAO,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAA;KACzC;SAAM,IAAI,oBAAU,CAAC,OAAO,CAAC,EAAE;QAC9B,gDAAgD;QAChD,OAAO,uBAAa,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;KACtC;IACD,OAAO,uBAAa,CAAC,OAAO,CAAC,CAAC;AAChC,CAAC;AATD,6BASC", sourcesContent: ["import { GraphQLType, isNonNullType, isListType } from \"graphql\";\nexport default function isRequired(typeObj: GraphQLType): boolean {\n  if (isNonNullType(typeObj) && isListType(typeObj.ofType)) {\n    // See if it's a Non-null List of Non-null Types\n    return isRequired(typeObj.ofType.ofType)\n  } else if (isListType(typeObj)) {\n    // See if it's a Nullable List of Non-null Types\n    return isNonNullType(typeObj.ofType);\n  }\n  return isNonNullType(typeObj);\n}\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
        coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
        return coverage[path];
    }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_trl8qeu9f.s[0]++;
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = ( /* istanbul ignore next */cov_trl8qeu9f.s[1]++, require("graphql"));
function isRequired(typeObj) {
    /* istanbul ignore next */cov_trl8qeu9f.f[0]++;cov_trl8qeu9f.s[2]++;
    if ( /* istanbul ignore next */(cov_trl8qeu9f.b[1][0]++, graphql_1.isNonNullType(typeObj)) && ( /* istanbul ignore next */cov_trl8qeu9f.b[1][1]++, graphql_1.isListType(typeObj.ofType))) {
        /* istanbul ignore next */cov_trl8qeu9f.b[0][0]++;cov_trl8qeu9f.s[3]++;
        // See if it's a Non-null List of Non-null Types
        return isRequired(typeObj.ofType.ofType);
    } else {
        /* istanbul ignore next */cov_trl8qeu9f.b[0][1]++;cov_trl8qeu9f.s[4]++;if (graphql_1.isListType(typeObj)) {
            /* istanbul ignore next */cov_trl8qeu9f.b[2][0]++;cov_trl8qeu9f.s[5]++;
            // See if it's a Nullable List of Non-null Types
            return graphql_1.isNonNullType(typeObj.ofType);
        } else /* istanbul ignore next */{
                cov_trl8qeu9f.b[2][1]++;
            }
    } /* istanbul ignore next */cov_trl8qeu9f.s[6]++;
    return graphql_1.isNonNullType(typeObj);
} /* istanbul ignore next */cov_trl8qeu9f.s[7]++;
exports.default = isRequired;