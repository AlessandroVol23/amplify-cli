{"version":3,"sources":["generateAllOperations.ts"],"names":[],"mappings":";;AACA,MAAM,8DAAa,QAAQ,aAAR,CAAb,CAAN;AAEA,MAAA,uEAAA,QAAA,qBAAA,CAAA,CAAA;AACA,MAAA,2DAAA,QAAA,SAAA,CAAA,CAAA;AAEA,SAAA,eAAA,CACE,OADF,EAEE,MAFF,EAGE,QAHF,EAIE,OAJF,EAI4B;AAE1B,QAAI,OAAJ,EAAa;AACX,cAAM,8DAAa,QAAQ,SAAR,EAAb,CAAN;AACA,cAAM,oEAAyC,OAAO,IAAP,CAAY,UAAZ,EAAwB,GAAxB,CAA6B,SAAD,IAAc;AACvF,kBAAM,wDAA6B,QAAA,oBAAA,CAAqB,KAAlD,CAAN;AACA,kBAAM,sDAAK,oBAAA,OAAA,CAAkB,WAAW,SAAX,CAAlB,EAAyC,MAAzC,EAAiD,QAAjD,EAA2D,OAA3D,CAAL,CAAN;AACA,kBAAM,wDAAe,WAAW,SAAX,CAAf,CAAN,CAHuF;AAIvF,mBAAA,OAAA,MAAA,CAAA,EAAS,IAAT,EAAe,IAAf,EAAA,EAAwB,EAAxB,CAAA;AACD,SAL8C,CAAzC,CAAN,CAFW;AAQX,eAAO,gBAAP;AACD,KATD;AAUD,C;AAhBD,QAAA,eAAA,GAAA,eAAA;AAkBA,SAAA,iBAAA,CACE,SADF,EAEE,MAFF,EAGE,QAHF,EAIE,OAJF,EAI4B;AAG1B,QAAI,SAAJ,EAAe;AACb,cAAM,iEAAe,UAAU,SAAV,EAAf,CAAN;AACA,cAAM,uEAAqB,OAAO,IAAP,CAAY,YAAZ,EAA0B,GAA1B,CAA+B,YAAD,IAAiB;AACxE,kBAAM,yDAA6B,QAAA,oBAAA,CAAqB,QAAlD,CAAN;AACA,kBAAM,uDAAK,oBAAA,OAAA,CAAkB,aAAa,YAAb,CAAlB,EAA8C,MAA9C,EAAsD,QAAtD,EAAgE,OAAhE,CAAL,CAAN;AACA,kBAAM,yDAAO,WAAW,YAAX,CAAP,CAAN,CAHwE;AAIxE,mBAAA,OAAA,MAAA,CAAA,EAAS,IAAT,EAAe,IAAf,EAAA,EAAwB,EAAxB,CAAA;AACD,SAL0B,CAArB,CAAN,CAFa;AAQb,eAAO,kBAAP;AACD,KATD;AAUD,C;AAjBD,QAAA,iBAAA,GAAA,iBAAA;AAmBA,SAAA,qBAAA,CACE,aADF,EAEE,MAFF,EAGE,QAHF,EAIE,OAJF,EAI4B;AAE1B,QAAI,aAAJ,EAAmB;AACjB,cAAM,qEAAmB,cAAc,SAAd,EAAnB,CAAN;AACA,cAAM,uEAAqB,OAAO,IAAP,CAAY,gBAAZ,EAA8B,GAA9B,CAAmC,gBAAD,IAAqB;AAChF,kBAAM,yDAA6B,QAAA,oBAAA,CAAqB,YAAlD,CAAN;AACA,kBAAM,uDAAK,oBAAA,OAAA,CAAkB,iBAAiB,gBAAjB,CAAlB,EAAsD,MAAtD,EAA8D,QAA9D,EAAwE,OAAxE,CAAL,CAAN;AACA,kBAAM,yDAAO,WAAW,gBAAX,CAAP,CAAN,CAHgF;AAIhF,mBAAA,OAAA,MAAA,CAAA,EAAS,IAAT,EAAe,IAAf,EAAA,EAAwB,EAAxB,CAAA;AACD,SAL0B,CAArB,CAAN,CAFiB;AAQjB,eAAO,kBAAP;AACD,KATD;AAUD,C;AAhBD,QAAA,qBAAA,GAAA,qBAAA;AAkBA,SAAA,wBAAA,CAAyC,iEAA8B,EAA9B,CAAzC,EAAyE;AACvE,UAAM,8DAAY,EAAZ,CAAN,CADuE;AAEvE,eAAW,OAAX,CAAoB,EAAD,IAAO;AACxB,4BAAoB,GAAG,IAAvB,EAA6B,SAA7B;AACD,KAFD,EAFuE;AAKvE,WAAO,OAAO,MAAP,CAAc,SAAd,CAAP;AACD,C;AAND,QAAA,wBAAA,GAAA,wBAAA;AAQA,SAAA,mBAAA,CAA6B,KAA7B,EAAsD,wEAA4B,EAA5B,CAAtD,EAAoF;AAClF,UAAM,SAAN,CAAgB,MAAhB,CAAwB,QAAD,IACrB,sFAAS,QAAT,CAAiB,CADnB,EAEE,MAFF,CAES,CAAC,GAAD,EAAM,GAAN,KAAa;AACpB,YAAI,IAAI,IAAR,IAAgB,GAAhB,CADoB;AAEpB,eAAO,GAAP;AACD,KALD,EAKG,iBALH,EADkF;AAOlF,UAAM,MAAN,CAAa,OAAb,CAAsB,CAAD,IAAM;AACzB,4BAAoB,CAApB,EAAuB,iBAAvB;AACD,KAFD,EAPkF;AAWlF,WAAO,iBAAP;AACD","sourcesContent":["import { GraphQLObjectType, GraphQLSchema } from 'graphql'\nconst pascalCase = require('pascal-case')\n\nimport generateOperation from './generateOperation'\nimport { GQLTemplateOp, GQLOperationTypeEnum, GQLTemplateGenericOp, GQLTemplateField, GQLTemplateFragment, GQLDocsGenOptions } from './types'\n\nexport function generateQueries(\n  queries: GraphQLObjectType,\n  schema: GraphQLSchema,\n  maxDepth: number,\n  options: GQLDocsGenOptions\n): Array<GQLTemplateOp> | undefined {\n  if (queries) {\n    const allQueries = queries.getFields()\n    const processedQueries: Array<GQLTemplateOp> = Object.keys(allQueries).map((queryName) => {\n      const type: GQLOperationTypeEnum = GQLOperationTypeEnum.QUERY\n      const op = generateOperation(allQueries[queryName], schema, maxDepth, options)\n      const name: string = pascalCase(queryName)\n      return { type, name, ...op }\n    })\n    return processedQueries\n  }\n}\n\nexport function generateMutations(\n  mutations: GraphQLObjectType,\n  schema: GraphQLSchema,\n  maxDepth: number,\n  options: GQLDocsGenOptions\n\n): Array<any> {\n  if (mutations) {\n    const allMutations = mutations.getFields()\n    const processedMutations = Object.keys(allMutations).map((mutationName) => {\n      const type: GQLOperationTypeEnum = GQLOperationTypeEnum.MUTATION\n      const op = generateOperation(allMutations[mutationName], schema, maxDepth, options)\n      const name = pascalCase(mutationName)\n      return { type, name, ...op }\n    })\n    return processedMutations\n  }\n}\n\nexport function generateSubscriptions(\n  subscriptions: GraphQLObjectType,\n  schema: GraphQLSchema,\n  maxDepth: number,\n  options: GQLDocsGenOptions\n): Array<any> {\n  if (subscriptions) {\n    const allSubscriptions = subscriptions.getFields()\n    const processedMutations = Object.keys(allSubscriptions).map((subscriptionName) => {\n      const type: GQLOperationTypeEnum = GQLOperationTypeEnum.SUBSCRIPTION\n      const op = generateOperation(allSubscriptions[subscriptionName], schema, maxDepth, options)\n      const name = pascalCase(subscriptionName)\n      return { type, name, ...op }\n    })\n    return processedMutations\n  }\n}\n\nexport function collectExternalFragments(operations: GQLTemplateOp[] = []): GQLTemplateFragment[] {\n  const fragments = {};\n  operations.forEach((op) => {\n    getExternalFragment(op.body, fragments);\n  });\n  return Object.values(fragments);\n}\n\nfunction getExternalFragment(field: GQLTemplateField, externalFragments: object = {}) {\n  field.fragments.filter((fragment) =>\n    fragment.external\n  ).reduce((acc, val) => {\n    acc[val.name] = val;\n    return acc;\n  }, externalFragments);\n  field.fields.forEach((f) => {\n    getExternalFragment(f, externalFragments);\n  });\n\n  return externalFragments;\n}"],"sourceRoot":"/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-docs-generator/src/"}