{"version":3,"sources":["e2e.test.ts"],"names":[],"mappings":";;AAAA,MAAA,SAAA,QAAA,MAAA,CAAA;AACA,MAAA,KAAA,QAAA,IAAA,CAAA;AACA,MAAA,QAAA,QAAA,QAAA,CAAA;AAEA,SAAS,iBAAT,EAA4B,MAAK;AAC/B,UAAM,aAAa,OAAA,OAAA,CAAQ,SAAR,EAAmB,yBAAnB,CAAnB;AACA,UAAM,aAAa,OAAA,OAAA,CAAQ,SAAR,EAAmB,kBAAnB,CAAnB;AAEA,cAAU,MAAK;AACb;AACA,YAAI;AACF,eAAG,UAAH,CAAc,UAAd;AACD;AAAC,eAAO,CAAP,EAAU;AACV;AACD;AACF,KAPD;AASA,OAAG,4BAAH,EAAiC,MAAK;AACpC,cAAA,OAAA,CAAS,UAAT,EAAqB,UAArB,EAAiC,EAAE,eAAe,KAAjB,EAAwB,UAAU,CAAlC,EAAqC,UAAU,SAA/C,EAAjC;AACA,cAAM,kBAAkB,GAAG,YAAH,CAAgB,UAAhB,EAA4B,MAA5B,CAAxB;AACA,eAAO,eAAP,EAAwB,eAAxB;AACD,KAJD;AAMA,OAAG,kCAAH,EAAuC,MAAK;AAC1C,cAAA,OAAA,CAAS,UAAT,EAAqB,UAArB,EAAiC,EAAE,eAAe,KAAjB,EAAwB,UAAU,CAAlC,EAAqC,UAAU,YAA/C,EAAjC;AACA,cAAM,kBAAkB,GAAG,YAAH,CAAgB,UAAhB,EAA4B,MAA5B,CAAxB;AACA,eAAO,eAAP,EAAwB,eAAxB;AACD,KAJD;AAMA,OAAG,0CAAH,EAA+C,MAAK;AAClD,cAAA,OAAA,CAAS,UAAT,EAAqB,UAArB,EAAiC,EAAE,eAAe,KAAjB,EAAwB,UAAU,CAAlC,EAAqC,UAAU,YAA/C,EAAjC;AACA,cAAM,kBAAkB,GAAG,YAAH,CAAgB,UAAhB,EAA4B,MAA5B,CAAxB;AACA,eAAO,eAAP,EAAwB,eAAxB;AACD,KAJD;AAMA,OAAG,oCAAH,EAAyC,MAAK;AAC5C,cAAA,OAAA,CAAS,UAAT,EAAqB,UAArB,EAAiC,EAAE,eAAe,KAAjB,EAAwB,UAAU,CAAlC,EAAqC,UAAU,MAA/C,EAAjC;AACA,cAAM,kBAAkB,GAAG,YAAH,CAAgB,UAAhB,EAA4B,MAA5B,CAAxB;AACA,eAAO,eAAP,EAAwB,eAAxB;AACD,KAJD;AAKD,CApCD","sourcesContent":["import { resolve } from 'path'\nimport * as fs from 'fs';\nimport generate from '../src'\n\ndescribe('end 2 end tests', () => {\n  const schemaPath = resolve(__dirname, '../fixtures/schema.json');\n  const outputpath = resolve(__dirname, './output.graphql')\n\n  afterEach(() => {\n    // delete the generated file\n    try {\n      fs.unlinkSync(outputpath);\n    } catch (e) {\n      // CircleCI throws exception, no harm done if the file is not deleted\n    }\n  });\n\n  it('should generate statements', () => {\n    generate(schemaPath, outputpath, { separateFiles: false, maxDepth: 3, language: 'graphql' });\n    const generatedOutput = fs.readFileSync(outputpath, 'utf8');\n    expect(generatedOutput).toMatchSnapshot();\n  });\n\n  it('should generate statements in JS', () => {\n    generate(schemaPath, outputpath, { separateFiles: false, maxDepth: 3, language: 'javascript' });\n    const generatedOutput = fs.readFileSync(outputpath, 'utf8');\n    expect(generatedOutput).toMatchSnapshot();\n  })\n\n  it('should generate statements in Typescript', () => {\n    generate(schemaPath, outputpath, { separateFiles: false, maxDepth: 3, language: 'typescript' });\n    const generatedOutput = fs.readFileSync(outputpath, 'utf8');\n    expect(generatedOutput).toMatchSnapshot();\n  })\n\n  it('should generate statements in flow', () => {\n    generate(schemaPath, outputpath, { separateFiles: false, maxDepth: 3, language: 'flow' });\n    const generatedOutput = fs.readFileSync(outputpath, 'utf8');\n    expect(generatedOutput).toMatchSnapshot();\n  })\n})\n"],"sourceRoot":"/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-docs-generator/src/"}