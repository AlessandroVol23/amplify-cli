ba225e4cf5ca4cfc4af8cb5aa1e1aef0
'use strict';
require('ts-jest').install("/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-docs-generator/src/generator/generateAllOperations.ts", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst pascalCase = require('pascal-case');\nconst generateOperation_1 = require(\"./generateOperation\");\nconst types_1 = require(\"./types\");\nfunction generateQueries(queries, schema, maxDepth, options) {\n    if (queries) {\n        const allQueries = queries.getFields();\n        const processedQueries = Object.keys(allQueries).map((queryName) => {\n            const type = types_1.GQLOperationTypeEnum.QUERY;\n            const op = generateOperation_1.default(allQueries[queryName], schema, maxDepth, options);\n            const name = pascalCase(queryName);\n            return Object.assign({ type, name }, op);\n        });\n        return processedQueries;\n    }\n}\nexports.generateQueries = generateQueries;\nfunction generateMutations(mutations, schema, maxDepth, options) {\n    if (mutations) {\n        const allMutations = mutations.getFields();\n        const processedMutations = Object.keys(allMutations).map((mutationName) => {\n            const type = types_1.GQLOperationTypeEnum.MUTATION;\n            const op = generateOperation_1.default(allMutations[mutationName], schema, maxDepth, options);\n            const name = pascalCase(mutationName);\n            return Object.assign({ type, name }, op);\n        });\n        return processedMutations;\n    }\n}\nexports.generateMutations = generateMutations;\nfunction generateSubscriptions(subscriptions, schema, maxDepth, options) {\n    if (subscriptions) {\n        const allSubscriptions = subscriptions.getFields();\n        const processedMutations = Object.keys(allSubscriptions).map((subscriptionName) => {\n            const type = types_1.GQLOperationTypeEnum.SUBSCRIPTION;\n            const op = generateOperation_1.default(allSubscriptions[subscriptionName], schema, maxDepth, options);\n            const name = pascalCase(subscriptionName);\n            return Object.assign({ type, name }, op);\n        });\n        return processedMutations;\n    }\n}\nexports.generateSubscriptions = generateSubscriptions;\nfunction collectExternalFragments(operations = []) {\n    const fragments = {};\n    operations.forEach((op) => {\n        getExternalFragment(op.body, fragments);\n    });\n    return Object.values(fragments);\n}\nexports.collectExternalFragments = collectExternalFragments;\nfunction getExternalFragment(field, externalFragments = {}) {\n    field.fragments.filter((fragment) => fragment.external).reduce((acc, val) => {\n        acc[val.name] = val;\n        return acc;\n    }, externalFragments);\n    field.fields.forEach((f) => {\n        getExternalFragment(f, externalFragments);\n    });\n    return externalFragments;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGVBbGxPcGVyYXRpb25zLmpzIiwic291cmNlUm9vdCI6Ii9jL1VzZXJzL1NhbmRyby9yZXBvL2FtcGxpZnktY2xpL3BhY2thZ2VzL2FtcGxpZnktZ3JhcGhxbC1kb2NzLWdlbmVyYXRvci9zcmMvIiwic291cmNlcyI6WyJnZW5lcmF0ZUFsbE9wZXJhdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUE7QUFFekMsMkRBQW1EO0FBQ25ELG1DQUE2STtBQUU3SSx5QkFDRSxPQUEwQixFQUMxQixNQUFxQixFQUNyQixRQUFnQixFQUNoQixPQUEwQjtJQUUxQixJQUFJLE9BQU8sRUFBRTtRQUNYLE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxTQUFTLEVBQUUsQ0FBQTtRQUN0QyxNQUFNLGdCQUFnQixHQUF5QixNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFNBQVMsRUFBRSxFQUFFO1lBQ3ZGLE1BQU0sSUFBSSxHQUF5Qiw0QkFBb0IsQ0FBQyxLQUFLLENBQUE7WUFDN0QsTUFBTSxFQUFFLEdBQUcsMkJBQWlCLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUE7WUFDOUUsTUFBTSxJQUFJLEdBQVcsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFBO1lBQzFDLHVCQUFTLElBQUksRUFBRSxJQUFJLElBQUssRUFBRSxFQUFFO1FBQzlCLENBQUMsQ0FBQyxDQUFBO1FBQ0YsT0FBTyxnQkFBZ0IsQ0FBQTtLQUN4QjtBQUNILENBQUM7QUFoQkQsMENBZ0JDO0FBRUQsMkJBQ0UsU0FBNEIsRUFDNUIsTUFBcUIsRUFDckIsUUFBZ0IsRUFDaEIsT0FBMEI7SUFHMUIsSUFBSSxTQUFTLEVBQUU7UUFDYixNQUFNLFlBQVksR0FBRyxTQUFTLENBQUMsU0FBUyxFQUFFLENBQUE7UUFDMUMsTUFBTSxrQkFBa0IsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFlBQVksRUFBRSxFQUFFO1lBQ3hFLE1BQU0sSUFBSSxHQUF5Qiw0QkFBb0IsQ0FBQyxRQUFRLENBQUE7WUFDaEUsTUFBTSxFQUFFLEdBQUcsMkJBQWlCLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUE7WUFDbkYsTUFBTSxJQUFJLEdBQUcsVUFBVSxDQUFDLFlBQVksQ0FBQyxDQUFBO1lBQ3JDLHVCQUFTLElBQUksRUFBRSxJQUFJLElBQUssRUFBRSxFQUFFO1FBQzlCLENBQUMsQ0FBQyxDQUFBO1FBQ0YsT0FBTyxrQkFBa0IsQ0FBQTtLQUMxQjtBQUNILENBQUM7QUFqQkQsOENBaUJDO0FBRUQsK0JBQ0UsYUFBZ0MsRUFDaEMsTUFBcUIsRUFDckIsUUFBZ0IsRUFDaEIsT0FBMEI7SUFFMUIsSUFBSSxhQUFhLEVBQUU7UUFDakIsTUFBTSxnQkFBZ0IsR0FBRyxhQUFhLENBQUMsU0FBUyxFQUFFLENBQUE7UUFDbEQsTUFBTSxrQkFBa0IsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsZ0JBQWdCLEVBQUUsRUFBRTtZQUNoRixNQUFNLElBQUksR0FBeUIsNEJBQW9CLENBQUMsWUFBWSxDQUFBO1lBQ3BFLE1BQU0sRUFBRSxHQUFHLDJCQUFpQixDQUFDLGdCQUFnQixDQUFDLGdCQUFnQixDQUFDLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQTtZQUMzRixNQUFNLElBQUksR0FBRyxVQUFVLENBQUMsZ0JBQWdCLENBQUMsQ0FBQTtZQUN6Qyx1QkFBUyxJQUFJLEVBQUUsSUFBSSxJQUFLLEVBQUUsRUFBRTtRQUM5QixDQUFDLENBQUMsQ0FBQTtRQUNGLE9BQU8sa0JBQWtCLENBQUE7S0FDMUI7QUFDSCxDQUFDO0FBaEJELHNEQWdCQztBQUVELGtDQUF5QyxhQUE4QixFQUFFO0lBQ3ZFLE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQztJQUNyQixVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUU7UUFDeEIsbUJBQW1CLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztJQUMxQyxDQUFDLENBQUMsQ0FBQztJQUNILE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUNsQyxDQUFDO0FBTkQsNERBTUM7QUFFRCw2QkFBNkIsS0FBdUIsRUFBRSxvQkFBNEIsRUFBRTtJQUNsRixLQUFLLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQ2xDLFFBQVEsQ0FBQyxRQUFRLENBQ2xCLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFO1FBQ3BCLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ3BCLE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQyxFQUFFLGlCQUFpQixDQUFDLENBQUM7SUFDdEIsS0FBSyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtRQUN6QixtQkFBbUIsQ0FBQyxDQUFDLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztJQUM1QyxDQUFDLENBQUMsQ0FBQztJQUVILE9BQU8saUJBQWlCLENBQUM7QUFDM0IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEdyYXBoUUxPYmplY3RUeXBlLCBHcmFwaFFMU2NoZW1hIH0gZnJvbSAnZ3JhcGhxbCdcbmNvbnN0IHBhc2NhbENhc2UgPSByZXF1aXJlKCdwYXNjYWwtY2FzZScpXG5cbmltcG9ydCBnZW5lcmF0ZU9wZXJhdGlvbiBmcm9tICcuL2dlbmVyYXRlT3BlcmF0aW9uJ1xuaW1wb3J0IHsgR1FMVGVtcGxhdGVPcCwgR1FMT3BlcmF0aW9uVHlwZUVudW0sIEdRTFRlbXBsYXRlR2VuZXJpY09wLCBHUUxUZW1wbGF0ZUZpZWxkLCBHUUxUZW1wbGF0ZUZyYWdtZW50LCBHUUxEb2NzR2VuT3B0aW9ucyB9IGZyb20gJy4vdHlwZXMnXG5cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZVF1ZXJpZXMoXG4gIHF1ZXJpZXM6IEdyYXBoUUxPYmplY3RUeXBlLFxuICBzY2hlbWE6IEdyYXBoUUxTY2hlbWEsXG4gIG1heERlcHRoOiBudW1iZXIsXG4gIG9wdGlvbnM6IEdRTERvY3NHZW5PcHRpb25zXG4pOiBBcnJheTxHUUxUZW1wbGF0ZU9wPiB8IHVuZGVmaW5lZCB7XG4gIGlmIChxdWVyaWVzKSB7XG4gICAgY29uc3QgYWxsUXVlcmllcyA9IHF1ZXJpZXMuZ2V0RmllbGRzKClcbiAgICBjb25zdCBwcm9jZXNzZWRRdWVyaWVzOiBBcnJheTxHUUxUZW1wbGF0ZU9wPiA9IE9iamVjdC5rZXlzKGFsbFF1ZXJpZXMpLm1hcCgocXVlcnlOYW1lKSA9PiB7XG4gICAgICBjb25zdCB0eXBlOiBHUUxPcGVyYXRpb25UeXBlRW51bSA9IEdRTE9wZXJhdGlvblR5cGVFbnVtLlFVRVJZXG4gICAgICBjb25zdCBvcCA9IGdlbmVyYXRlT3BlcmF0aW9uKGFsbFF1ZXJpZXNbcXVlcnlOYW1lXSwgc2NoZW1hLCBtYXhEZXB0aCwgb3B0aW9ucylcbiAgICAgIGNvbnN0IG5hbWU6IHN0cmluZyA9IHBhc2NhbENhc2UocXVlcnlOYW1lKVxuICAgICAgcmV0dXJuIHsgdHlwZSwgbmFtZSwgLi4ub3AgfVxuICAgIH0pXG4gICAgcmV0dXJuIHByb2Nlc3NlZFF1ZXJpZXNcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVNdXRhdGlvbnMoXG4gIG11dGF0aW9uczogR3JhcGhRTE9iamVjdFR5cGUsXG4gIHNjaGVtYTogR3JhcGhRTFNjaGVtYSxcbiAgbWF4RGVwdGg6IG51bWJlcixcbiAgb3B0aW9uczogR1FMRG9jc0dlbk9wdGlvbnNcblxuKTogQXJyYXk8YW55PiB7XG4gIGlmIChtdXRhdGlvbnMpIHtcbiAgICBjb25zdCBhbGxNdXRhdGlvbnMgPSBtdXRhdGlvbnMuZ2V0RmllbGRzKClcbiAgICBjb25zdCBwcm9jZXNzZWRNdXRhdGlvbnMgPSBPYmplY3Qua2V5cyhhbGxNdXRhdGlvbnMpLm1hcCgobXV0YXRpb25OYW1lKSA9PiB7XG4gICAgICBjb25zdCB0eXBlOiBHUUxPcGVyYXRpb25UeXBlRW51bSA9IEdRTE9wZXJhdGlvblR5cGVFbnVtLk1VVEFUSU9OXG4gICAgICBjb25zdCBvcCA9IGdlbmVyYXRlT3BlcmF0aW9uKGFsbE11dGF0aW9uc1ttdXRhdGlvbk5hbWVdLCBzY2hlbWEsIG1heERlcHRoLCBvcHRpb25zKVxuICAgICAgY29uc3QgbmFtZSA9IHBhc2NhbENhc2UobXV0YXRpb25OYW1lKVxuICAgICAgcmV0dXJuIHsgdHlwZSwgbmFtZSwgLi4ub3AgfVxuICAgIH0pXG4gICAgcmV0dXJuIHByb2Nlc3NlZE11dGF0aW9uc1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZVN1YnNjcmlwdGlvbnMoXG4gIHN1YnNjcmlwdGlvbnM6IEdyYXBoUUxPYmplY3RUeXBlLFxuICBzY2hlbWE6IEdyYXBoUUxTY2hlbWEsXG4gIG1heERlcHRoOiBudW1iZXIsXG4gIG9wdGlvbnM6IEdRTERvY3NHZW5PcHRpb25zXG4pOiBBcnJheTxhbnk+IHtcbiAgaWYgKHN1YnNjcmlwdGlvbnMpIHtcbiAgICBjb25zdCBhbGxTdWJzY3JpcHRpb25zID0gc3Vic2NyaXB0aW9ucy5nZXRGaWVsZHMoKVxuICAgIGNvbnN0IHByb2Nlc3NlZE11dGF0aW9ucyA9IE9iamVjdC5rZXlzKGFsbFN1YnNjcmlwdGlvbnMpLm1hcCgoc3Vic2NyaXB0aW9uTmFtZSkgPT4ge1xuICAgICAgY29uc3QgdHlwZTogR1FMT3BlcmF0aW9uVHlwZUVudW0gPSBHUUxPcGVyYXRpb25UeXBlRW51bS5TVUJTQ1JJUFRJT05cbiAgICAgIGNvbnN0IG9wID0gZ2VuZXJhdGVPcGVyYXRpb24oYWxsU3Vic2NyaXB0aW9uc1tzdWJzY3JpcHRpb25OYW1lXSwgc2NoZW1hLCBtYXhEZXB0aCwgb3B0aW9ucylcbiAgICAgIGNvbnN0IG5hbWUgPSBwYXNjYWxDYXNlKHN1YnNjcmlwdGlvbk5hbWUpXG4gICAgICByZXR1cm4geyB0eXBlLCBuYW1lLCAuLi5vcCB9XG4gICAgfSlcbiAgICByZXR1cm4gcHJvY2Vzc2VkTXV0YXRpb25zXG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbGxlY3RFeHRlcm5hbEZyYWdtZW50cyhvcGVyYXRpb25zOiBHUUxUZW1wbGF0ZU9wW10gPSBbXSk6IEdRTFRlbXBsYXRlRnJhZ21lbnRbXSB7XG4gIGNvbnN0IGZyYWdtZW50cyA9IHt9O1xuICBvcGVyYXRpb25zLmZvckVhY2goKG9wKSA9PiB7XG4gICAgZ2V0RXh0ZXJuYWxGcmFnbWVudChvcC5ib2R5LCBmcmFnbWVudHMpO1xuICB9KTtcbiAgcmV0dXJuIE9iamVjdC52YWx1ZXMoZnJhZ21lbnRzKTtcbn1cblxuZnVuY3Rpb24gZ2V0RXh0ZXJuYWxGcmFnbWVudChmaWVsZDogR1FMVGVtcGxhdGVGaWVsZCwgZXh0ZXJuYWxGcmFnbWVudHM6IG9iamVjdCA9IHt9KSB7XG4gIGZpZWxkLmZyYWdtZW50cy5maWx0ZXIoKGZyYWdtZW50KSA9PlxuICAgIGZyYWdtZW50LmV4dGVybmFsXG4gICkucmVkdWNlKChhY2MsIHZhbCkgPT4ge1xuICAgIGFjY1t2YWwubmFtZV0gPSB2YWw7XG4gICAgcmV0dXJuIGFjYztcbiAgfSwgZXh0ZXJuYWxGcmFnbWVudHMpO1xuICBmaWVsZC5maWVsZHMuZm9yRWFjaCgoZikgPT4ge1xuICAgIGdldEV4dGVybmFsRnJhZ21lbnQoZiwgZXh0ZXJuYWxGcmFnbWVudHMpO1xuICB9KTtcblxuICByZXR1cm4gZXh0ZXJuYWxGcmFnbWVudHM7XG59Il19");"use strict"; /* istanbul ignore next */var cov_qni4b0z4w = function () {
    var path = "/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-docs-generator/src/generator/generateAllOperations.ts",
        hash = "5406e35094a818ca4da3cf97d68149d8a1e89e60",
        Function = function () {}.constructor,
        global = new Function('return this')(),
        gcv = "__coverage__",
        coverageData = { path: "/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-docs-generator/src/generator/generateAllOperations.ts", statementMap: { "0": { start: { line: 2, column: 0 }, end: { line: 2, column: 62 } }, "1": { start: { line: 3, column: 19 }, end: { line: 3, column: 41 } }, "2": { start: { line: 4, column: 28 }, end: { line: 4, column: 58 } }, "3": { start: { line: 5, column: 16 }, end: { line: 5, column: 34 } }, "4": { start: { line: 7, column: 4 }, end: { line: 16, column: 5 } }, "5": { start: { line: 8, column: 27 }, end: { line: 8, column: 46 } }, "6": { start: { line: 9, column: 33 }, end: { line: 14, column: 10 } }, "7": { start: { line: 10, column: 25 }, end: { line: 10, column: 59 } }, "8": { start: { line: 11, column: 23 }, end: { line: 11, column: 100 } }, "9": { start: { line: 12, column: 25 }, end: { line: 12, column: 46 } }, "10": { start: { line: 13, column: 12 }, end: { line: 13, column: 53 } }, "11": { start: { line: 15, column: 8 }, end: { line: 15, column: 32 } }, "12": { start: { line: 18, column: 0 }, end: { line: 18, column: 42 } }, "13": { start: { line: 20, column: 4 }, end: { line: 29, column: 5 } }, "14": { start: { line: 21, column: 29 }, end: { line: 21, column: 50 } }, "15": { start: { line: 22, column: 35 }, end: { line: 27, column: 10 } }, "16": { start: { line: 23, column: 25 }, end: { line: 23, column: 62 } }, "17": { start: { line: 24, column: 23 }, end: { line: 24, column: 105 } }, "18": { start: { line: 25, column: 25 }, end: { line: 25, column: 49 } }, "19": { start: { line: 26, column: 12 }, end: { line: 26, column: 53 } }, "20": { start: { line: 28, column: 8 }, end: { line: 28, column: 34 } }, "21": { start: { line: 31, column: 0 }, end: { line: 31, column: 46 } }, "22": { start: { line: 33, column: 4 }, end: { line: 42, column: 5 } }, "23": { start: { line: 34, column: 33 }, end: { line: 34, column: 58 } }, "24": { start: { line: 35, column: 35 }, end: { line: 40, column: 10 } }, "25": { start: { line: 36, column: 25 }, end: { line: 36, column: 66 } }, "26": { start: { line: 37, column: 23 }, end: { line: 37, column: 113 } }, "27": { start: { line: 38, column: 25 }, end: { line: 38, column: 53 } }, "28": { start: { line: 39, column: 12 }, end: { line: 39, column: 53 } }, "29": { start: { line: 41, column: 8 }, end: { line: 41, column: 34 } }, "30": { start: { line: 44, column: 0 }, end: { line: 44, column: 54 } }, "31": { start: { line: 46, column: 22 }, end: { line: 46, column: 24 } }, "32": { start: { line: 47, column: 4 }, end: { line: 49, column: 7 } }, "33": { start: { line: 48, column: 8 }, end: { line: 48, column: 48 } }, "34": { start: { line: 50, column: 4 }, end: { line: 50, column: 36 } }, "35": { start: { line: 52, column: 0 }, end: { line: 52, column: 60 } }, "36": { start: { line: 54, column: 4 }, end: { line: 57, column: 26 } }, "37": { start: { line: 54, column: 41 }, end: { line: 54, column: 58 } }, "38": { start: { line: 55, column: 8 }, end: { line: 55, column: 28 } }, "39": { start: { line: 56, column: 8 }, end: { line: 56, column: 19 } }, "40": { start: { line: 58, column: 4 }, end: { line: 60, column: 7 } }, "41": { start: { line: 59, column: 8 }, end: { line: 59, column: 50 } }, "42": { start: { line: 61, column: 4 }, end: { line: 61, column: 29 } } }, fnMap: { "0": { name: "generateQueries", decl: { start: { line: 6, column: 9 }, end: { line: 6, column: 24 } }, loc: { start: { line: 6, column: 61 }, end: { line: 17, column: 1 } }, line: 6 }, "1": { name: "(anonymous_1)", decl: { start: { line: 9, column: 61 }, end: { line: 9, column: 62 } }, loc: { start: { line: 9, column: 76 }, end: { line: 14, column: 9 } }, line: 9 }, "2": { name: "generateMutations", decl: { start: { line: 19, column: 9 }, end: { line: 19, column: 26 } }, loc: { start: { line: 19, column: 65 }, end: { line: 30, column: 1 } }, line: 19 }, "3": { name: "(anonymous_3)", decl: { start: { line: 22, column: 65 }, end: { line: 22, column: 66 } }, loc: { start: { line: 22, column: 83 }, end: { line: 27, column: 9 } }, line: 22 }, "4": { name: "generateSubscriptions", decl: { start: { line: 32, column: 9 }, end: { line: 32, column: 30 } }, loc: { start: { line: 32, column: 73 }, end: { line: 43, column: 1 } }, line: 32 }, "5": { name: "(anonymous_5)", decl: { start: { line: 35, column: 69 }, end: { line: 35, column: 70 } }, loc: { start: { line: 35, column: 91 }, end: { line: 40, column: 9 } }, line: 35 }, "6": { name: "collectExternalFragments", decl: { start: { line: 45, column: 9 }, end: { line: 45, column: 33 } }, loc: { start: { line: 45, column: 51 }, end: { line: 51, column: 1 } }, line: 45 }, "7": { name: "(anonymous_7)", decl: { start: { line: 47, column: 23 }, end: { line: 47, column: 24 } }, loc: { start: { line: 47, column: 31 }, end: { line: 49, column: 5 } }, line: 47 }, "8": { name: "getExternalFragment", decl: { start: { line: 53, column: 9 }, end: { line: 53, column: 28 } }, loc: { start: { line: 53, column: 60 }, end: { line: 62, column: 1 } }, line: 53 }, "9": { name: "(anonymous_9)", decl: { start: { line: 54, column: 27 }, end: { line: 54, column: 28 } }, loc: { start: { line: 54, column: 41 }, end: { line: 54, column: 58 } }, line: 54 }, "10": { name: "(anonymous_10)", decl: { start: { line: 54, column: 67 }, end: { line: 54, column: 68 } }, loc: { start: { line: 54, column: 81 }, end: { line: 57, column: 5 } }, line: 54 }, "11": { name: "(anonymous_11)", decl: { start: { line: 58, column: 25 }, end: { line: 58, column: 26 } }, loc: { start: { line: 58, column: 32 }, end: { line: 60, column: 5 } }, line: 58 } }, branchMap: { "0": { loc: { start: { line: 7, column: 4 }, end: { line: 16, column: 5 } }, type: "if", locations: [{ start: { line: 7, column: 4 }, end: { line: 16, column: 5 } }, { start: { line: 7, column: 4 }, end: { line: 16, column: 5 } }], line: 7 }, "1": { loc: { start: { line: 20, column: 4 }, end: { line: 29, column: 5 } }, type: "if", locations: [{ start: { line: 20, column: 4 }, end: { line: 29, column: 5 } }, { start: { line: 20, column: 4 }, end: { line: 29, column: 5 } }], line: 20 }, "2": { loc: { start: { line: 33, column: 4 }, end: { line: 42, column: 5 } }, type: "if", locations: [{ start: { line: 33, column: 4 }, end: { line: 42, column: 5 } }, { start: { line: 33, column: 4 }, end: { line: 42, column: 5 } }], line: 33 }, "3": { loc: { start: { line: 45, column: 34 }, end: { line: 45, column: 49 } }, type: "default-arg", locations: [{ start: { line: 45, column: 47 }, end: { line: 45, column: 49 } }], line: 45 }, "4": { loc: { start: { line: 53, column: 36 }, end: { line: 53, column: 58 } }, type: "default-arg", locations: [{ start: { line: 53, column: 56 }, end: { line: 53, column: 58 } }], line: 53 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0], "4": [0] }, inputSourceMap: { version: 3, file: "generateAllOperations.js", sourceRoot: "/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-docs-generator/src/", sources: ["generateAllOperations.ts"], names: [], mappings: "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", sourcesContent: ["import { GraphQLObjectType, GraphQLSchema } from 'graphql'\nconst pascalCase = require('pascal-case')\n\nimport generateOperation from './generateOperation'\nimport { GQLTemplateOp, GQLOperationTypeEnum, GQLTemplateGenericOp, GQLTemplateField, GQLTemplateFragment, GQLDocsGenOptions } from './types'\n\nexport function generateQueries(\n  queries: GraphQLObjectType,\n  schema: GraphQLSchema,\n  maxDepth: number,\n  options: GQLDocsGenOptions\n): Array<GQLTemplateOp> | undefined {\n  if (queries) {\n    const allQueries = queries.getFields()\n    const processedQueries: Array<GQLTemplateOp> = Object.keys(allQueries).map((queryName) => {\n      const type: GQLOperationTypeEnum = GQLOperationTypeEnum.QUERY\n      const op = generateOperation(allQueries[queryName], schema, maxDepth, options)\n      const name: string = pascalCase(queryName)\n      return { type, name, ...op }\n    })\n    return processedQueries\n  }\n}\n\nexport function generateMutations(\n  mutations: GraphQLObjectType,\n  schema: GraphQLSchema,\n  maxDepth: number,\n  options: GQLDocsGenOptions\n\n): Array<any> {\n  if (mutations) {\n    const allMutations = mutations.getFields()\n    const processedMutations = Object.keys(allMutations).map((mutationName) => {\n      const type: GQLOperationTypeEnum = GQLOperationTypeEnum.MUTATION\n      const op = generateOperation(allMutations[mutationName], schema, maxDepth, options)\n      const name = pascalCase(mutationName)\n      return { type, name, ...op }\n    })\n    return processedMutations\n  }\n}\n\nexport function generateSubscriptions(\n  subscriptions: GraphQLObjectType,\n  schema: GraphQLSchema,\n  maxDepth: number,\n  options: GQLDocsGenOptions\n): Array<any> {\n  if (subscriptions) {\n    const allSubscriptions = subscriptions.getFields()\n    const processedMutations = Object.keys(allSubscriptions).map((subscriptionName) => {\n      const type: GQLOperationTypeEnum = GQLOperationTypeEnum.SUBSCRIPTION\n      const op = generateOperation(allSubscriptions[subscriptionName], schema, maxDepth, options)\n      const name = pascalCase(subscriptionName)\n      return { type, name, ...op }\n    })\n    return processedMutations\n  }\n}\n\nexport function collectExternalFragments(operations: GQLTemplateOp[] = []): GQLTemplateFragment[] {\n  const fragments = {};\n  operations.forEach((op) => {\n    getExternalFragment(op.body, fragments);\n  });\n  return Object.values(fragments);\n}\n\nfunction getExternalFragment(field: GQLTemplateField, externalFragments: object = {}) {\n  field.fragments.filter((fragment) =>\n    fragment.external\n  ).reduce((acc, val) => {\n    acc[val.name] = val;\n    return acc;\n  }, externalFragments);\n  field.fields.forEach((f) => {\n    getExternalFragment(f, externalFragments);\n  });\n\n  return externalFragments;\n}"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
        coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
        return coverage[path];
    }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_qni4b0z4w.s[0]++;
Object.defineProperty(exports, "__esModule", { value: true });
const pascalCase = ( /* istanbul ignore next */cov_qni4b0z4w.s[1]++, require('pascal-case'));
const generateOperation_1 = ( /* istanbul ignore next */cov_qni4b0z4w.s[2]++, require("./generateOperation"));
const types_1 = ( /* istanbul ignore next */cov_qni4b0z4w.s[3]++, require("./types"));
function generateQueries(queries, schema, maxDepth, options) {
    /* istanbul ignore next */cov_qni4b0z4w.f[0]++;cov_qni4b0z4w.s[4]++;
    if (queries) {
        /* istanbul ignore next */cov_qni4b0z4w.b[0][0]++;
        const allQueries = ( /* istanbul ignore next */cov_qni4b0z4w.s[5]++, queries.getFields());
        const processedQueries = ( /* istanbul ignore next */cov_qni4b0z4w.s[6]++, Object.keys(allQueries).map(queryName => {
            /* istanbul ignore next */cov_qni4b0z4w.f[1]++;
            const type = ( /* istanbul ignore next */cov_qni4b0z4w.s[7]++, types_1.GQLOperationTypeEnum.QUERY);
            const op = ( /* istanbul ignore next */cov_qni4b0z4w.s[8]++, generateOperation_1.default(allQueries[queryName], schema, maxDepth, options));
            const name = ( /* istanbul ignore next */cov_qni4b0z4w.s[9]++, pascalCase(queryName)); /* istanbul ignore next */cov_qni4b0z4w.s[10]++;
            return Object.assign({ type, name }, op);
        })); /* istanbul ignore next */cov_qni4b0z4w.s[11]++;
        return processedQueries;
    } else /* istanbul ignore next */{
            cov_qni4b0z4w.b[0][1]++;
        }
} /* istanbul ignore next */cov_qni4b0z4w.s[12]++;
exports.generateQueries = generateQueries;
function generateMutations(mutations, schema, maxDepth, options) {
    /* istanbul ignore next */cov_qni4b0z4w.f[2]++;cov_qni4b0z4w.s[13]++;
    if (mutations) {
        /* istanbul ignore next */cov_qni4b0z4w.b[1][0]++;
        const allMutations = ( /* istanbul ignore next */cov_qni4b0z4w.s[14]++, mutations.getFields());
        const processedMutations = ( /* istanbul ignore next */cov_qni4b0z4w.s[15]++, Object.keys(allMutations).map(mutationName => {
            /* istanbul ignore next */cov_qni4b0z4w.f[3]++;
            const type = ( /* istanbul ignore next */cov_qni4b0z4w.s[16]++, types_1.GQLOperationTypeEnum.MUTATION);
            const op = ( /* istanbul ignore next */cov_qni4b0z4w.s[17]++, generateOperation_1.default(allMutations[mutationName], schema, maxDepth, options));
            const name = ( /* istanbul ignore next */cov_qni4b0z4w.s[18]++, pascalCase(mutationName)); /* istanbul ignore next */cov_qni4b0z4w.s[19]++;
            return Object.assign({ type, name }, op);
        })); /* istanbul ignore next */cov_qni4b0z4w.s[20]++;
        return processedMutations;
    } else /* istanbul ignore next */{
            cov_qni4b0z4w.b[1][1]++;
        }
} /* istanbul ignore next */cov_qni4b0z4w.s[21]++;
exports.generateMutations = generateMutations;
function generateSubscriptions(subscriptions, schema, maxDepth, options) {
    /* istanbul ignore next */cov_qni4b0z4w.f[4]++;cov_qni4b0z4w.s[22]++;
    if (subscriptions) {
        /* istanbul ignore next */cov_qni4b0z4w.b[2][0]++;
        const allSubscriptions = ( /* istanbul ignore next */cov_qni4b0z4w.s[23]++, subscriptions.getFields());
        const processedMutations = ( /* istanbul ignore next */cov_qni4b0z4w.s[24]++, Object.keys(allSubscriptions).map(subscriptionName => {
            /* istanbul ignore next */cov_qni4b0z4w.f[5]++;
            const type = ( /* istanbul ignore next */cov_qni4b0z4w.s[25]++, types_1.GQLOperationTypeEnum.SUBSCRIPTION);
            const op = ( /* istanbul ignore next */cov_qni4b0z4w.s[26]++, generateOperation_1.default(allSubscriptions[subscriptionName], schema, maxDepth, options));
            const name = ( /* istanbul ignore next */cov_qni4b0z4w.s[27]++, pascalCase(subscriptionName)); /* istanbul ignore next */cov_qni4b0z4w.s[28]++;
            return Object.assign({ type, name }, op);
        })); /* istanbul ignore next */cov_qni4b0z4w.s[29]++;
        return processedMutations;
    } else /* istanbul ignore next */{
            cov_qni4b0z4w.b[2][1]++;
        }
} /* istanbul ignore next */cov_qni4b0z4w.s[30]++;
exports.generateSubscriptions = generateSubscriptions;
function collectExternalFragments(operations = ( /* istanbul ignore next */cov_qni4b0z4w.b[3][0]++, [])) {
    /* istanbul ignore next */cov_qni4b0z4w.f[6]++;
    const fragments = ( /* istanbul ignore next */cov_qni4b0z4w.s[31]++, {}); /* istanbul ignore next */cov_qni4b0z4w.s[32]++;
    operations.forEach(op => {
        /* istanbul ignore next */cov_qni4b0z4w.f[7]++;cov_qni4b0z4w.s[33]++;
        getExternalFragment(op.body, fragments);
    }); /* istanbul ignore next */cov_qni4b0z4w.s[34]++;
    return Object.values(fragments);
} /* istanbul ignore next */cov_qni4b0z4w.s[35]++;
exports.collectExternalFragments = collectExternalFragments;
function getExternalFragment(field, externalFragments = ( /* istanbul ignore next */cov_qni4b0z4w.b[4][0]++, {})) {
    /* istanbul ignore next */cov_qni4b0z4w.f[8]++;cov_qni4b0z4w.s[36]++;
    field.fragments.filter(fragment => {
        /* istanbul ignore next */cov_qni4b0z4w.f[9]++;cov_qni4b0z4w.s[37]++;return fragment.external;
    }).reduce((acc, val) => {
        /* istanbul ignore next */cov_qni4b0z4w.f[10]++;cov_qni4b0z4w.s[38]++;
        acc[val.name] = val; /* istanbul ignore next */cov_qni4b0z4w.s[39]++;
        return acc;
    }, externalFragments); /* istanbul ignore next */cov_qni4b0z4w.s[40]++;
    field.fields.forEach(f => {
        /* istanbul ignore next */cov_qni4b0z4w.f[11]++;cov_qni4b0z4w.s[41]++;
        getExternalFragment(f, externalFragments);
    }); /* istanbul ignore next */cov_qni4b0z4w.s[42]++;
    return externalFragments;
}