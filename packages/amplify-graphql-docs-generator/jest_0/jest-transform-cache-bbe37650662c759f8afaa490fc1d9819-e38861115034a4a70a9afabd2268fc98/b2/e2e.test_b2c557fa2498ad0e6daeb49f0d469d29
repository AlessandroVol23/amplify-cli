0808afa394a3824dbd2439ebbee1fadb
'use strict';require('ts-jest').install("/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-docs-generator/__integration__/e2e.test.ts", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst path_1 = require(\"path\");\nconst fs = require(\"fs\");\nconst src_1 = require(\"../src\");\ndescribe('end 2 end tests', () => {\n    const schemaPath = path_1.resolve(__dirname, '../fixtures/schema.json');\n    const outputpath = path_1.resolve(__dirname, './output.graphql');\n    afterEach(() => {\n        // delete the generated file\n        try {\n            fs.unlinkSync(outputpath);\n        }\n        catch (e) {\n            // CircleCI throws exception, no harm done if the file is not deleted\n        }\n    });\n    it('should generate statements', () => {\n        src_1.default(schemaPath, outputpath, { separateFiles: false, maxDepth: 3, language: 'graphql' });\n        const generatedOutput = fs.readFileSync(outputpath, 'utf8');\n        expect(generatedOutput).toMatchSnapshot();\n    });\n    it('should generate statements in JS', () => {\n        src_1.default(schemaPath, outputpath, { separateFiles: false, maxDepth: 3, language: 'javascript' });\n        const generatedOutput = fs.readFileSync(outputpath, 'utf8');\n        expect(generatedOutput).toMatchSnapshot();\n    });\n    it('should generate statements in Typescript', () => {\n        src_1.default(schemaPath, outputpath, { separateFiles: false, maxDepth: 3, language: 'typescript' });\n        const generatedOutput = fs.readFileSync(outputpath, 'utf8');\n        expect(generatedOutput).toMatchSnapshot();\n    });\n    it('should generate statements in flow', () => {\n        src_1.default(schemaPath, outputpath, { separateFiles: false, maxDepth: 3, language: 'flow' });\n        const generatedOutput = fs.readFileSync(outputpath, 'utf8');\n        expect(generatedOutput).toMatchSnapshot();\n    });\n});\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZTJlLnRlc3QuanMiLCJzb3VyY2VSb290IjoiL2MvVXNlcnMvU2FuZHJvL3JlcG8vYW1wbGlmeS1jbGkvcGFja2FnZXMvYW1wbGlmeS1ncmFwaHFsLWRvY3MtZ2VuZXJhdG9yL3NyYy8iLCJzb3VyY2VzIjpbImUyZS50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0JBQThCO0FBQzlCLHlCQUF5QjtBQUN6QixnQ0FBNkI7QUFFN0IsUUFBUSxDQUFDLGlCQUFpQixFQUFFLEdBQUcsRUFBRTtJQUMvQixNQUFNLFVBQVUsR0FBRyxjQUFPLENBQUMsU0FBUyxFQUFFLHlCQUF5QixDQUFDLENBQUM7SUFDakUsTUFBTSxVQUFVLEdBQUcsY0FBTyxDQUFDLFNBQVMsRUFBRSxrQkFBa0IsQ0FBQyxDQUFBO0lBRXpELFNBQVMsQ0FBQyxHQUFHLEVBQUU7UUFDYiw0QkFBNEI7UUFDNUIsSUFBSTtZQUNGLEVBQUUsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDM0I7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNWLHFFQUFxRTtTQUN0RTtJQUNILENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLDRCQUE0QixFQUFFLEdBQUcsRUFBRTtRQUNwQyxhQUFRLENBQUMsVUFBVSxFQUFFLFVBQVUsRUFBRSxFQUFFLGFBQWEsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUM3RixNQUFNLGVBQWUsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLFVBQVUsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUM1RCxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDNUMsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsa0NBQWtDLEVBQUUsR0FBRyxFQUFFO1FBQzFDLGFBQVEsQ0FBQyxVQUFVLEVBQUUsVUFBVSxFQUFFLEVBQUUsYUFBYSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxZQUFZLEVBQUUsQ0FBQyxDQUFDO1FBQ2hHLE1BQU0sZUFBZSxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzVELE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUM1QyxDQUFDLENBQUMsQ0FBQTtJQUVGLEVBQUUsQ0FBQywwQ0FBMEMsRUFBRSxHQUFHLEVBQUU7UUFDbEQsYUFBUSxDQUFDLFVBQVUsRUFBRSxVQUFVLEVBQUUsRUFBRSxhQUFhLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLFlBQVksRUFBRSxDQUFDLENBQUM7UUFDaEcsTUFBTSxlQUFlLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDNUQsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQzVDLENBQUMsQ0FBQyxDQUFBO0lBRUYsRUFBRSxDQUFDLG9DQUFvQyxFQUFFLEdBQUcsRUFBRTtRQUM1QyxhQUFRLENBQUMsVUFBVSxFQUFFLFVBQVUsRUFBRSxFQUFFLGFBQWEsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztRQUMxRixNQUFNLGVBQWUsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLFVBQVUsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUM1RCxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDNUMsQ0FBQyxDQUFDLENBQUE7QUFDSixDQUFDLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlc29sdmUgfSBmcm9tICdwYXRoJ1xuaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnO1xuaW1wb3J0IGdlbmVyYXRlIGZyb20gJy4uL3NyYydcblxuZGVzY3JpYmUoJ2VuZCAyIGVuZCB0ZXN0cycsICgpID0+IHtcbiAgY29uc3Qgc2NoZW1hUGF0aCA9IHJlc29sdmUoX19kaXJuYW1lLCAnLi4vZml4dHVyZXMvc2NoZW1hLmpzb24nKTtcbiAgY29uc3Qgb3V0cHV0cGF0aCA9IHJlc29sdmUoX19kaXJuYW1lLCAnLi9vdXRwdXQuZ3JhcGhxbCcpXG5cbiAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICAvLyBkZWxldGUgdGhlIGdlbmVyYXRlZCBmaWxlXG4gICAgdHJ5IHtcbiAgICAgIGZzLnVubGlua1N5bmMob3V0cHV0cGF0aCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gQ2lyY2xlQ0kgdGhyb3dzIGV4Y2VwdGlvbiwgbm8gaGFybSBkb25lIGlmIHRoZSBmaWxlIGlzIG5vdCBkZWxldGVkXG4gICAgfVxuICB9KTtcblxuICBpdCgnc2hvdWxkIGdlbmVyYXRlIHN0YXRlbWVudHMnLCAoKSA9PiB7XG4gICAgZ2VuZXJhdGUoc2NoZW1hUGF0aCwgb3V0cHV0cGF0aCwgeyBzZXBhcmF0ZUZpbGVzOiBmYWxzZSwgbWF4RGVwdGg6IDMsIGxhbmd1YWdlOiAnZ3JhcGhxbCcgfSk7XG4gICAgY29uc3QgZ2VuZXJhdGVkT3V0cHV0ID0gZnMucmVhZEZpbGVTeW5jKG91dHB1dHBhdGgsICd1dGY4Jyk7XG4gICAgZXhwZWN0KGdlbmVyYXRlZE91dHB1dCkudG9NYXRjaFNuYXBzaG90KCk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgZ2VuZXJhdGUgc3RhdGVtZW50cyBpbiBKUycsICgpID0+IHtcbiAgICBnZW5lcmF0ZShzY2hlbWFQYXRoLCBvdXRwdXRwYXRoLCB7IHNlcGFyYXRlRmlsZXM6IGZhbHNlLCBtYXhEZXB0aDogMywgbGFuZ3VhZ2U6ICdqYXZhc2NyaXB0JyB9KTtcbiAgICBjb25zdCBnZW5lcmF0ZWRPdXRwdXQgPSBmcy5yZWFkRmlsZVN5bmMob3V0cHV0cGF0aCwgJ3V0ZjgnKTtcbiAgICBleHBlY3QoZ2VuZXJhdGVkT3V0cHV0KS50b01hdGNoU25hcHNob3QoKTtcbiAgfSlcblxuICBpdCgnc2hvdWxkIGdlbmVyYXRlIHN0YXRlbWVudHMgaW4gVHlwZXNjcmlwdCcsICgpID0+IHtcbiAgICBnZW5lcmF0ZShzY2hlbWFQYXRoLCBvdXRwdXRwYXRoLCB7IHNlcGFyYXRlRmlsZXM6IGZhbHNlLCBtYXhEZXB0aDogMywgbGFuZ3VhZ2U6ICd0eXBlc2NyaXB0JyB9KTtcbiAgICBjb25zdCBnZW5lcmF0ZWRPdXRwdXQgPSBmcy5yZWFkRmlsZVN5bmMob3V0cHV0cGF0aCwgJ3V0ZjgnKTtcbiAgICBleHBlY3QoZ2VuZXJhdGVkT3V0cHV0KS50b01hdGNoU25hcHNob3QoKTtcbiAgfSlcblxuICBpdCgnc2hvdWxkIGdlbmVyYXRlIHN0YXRlbWVudHMgaW4gZmxvdycsICgpID0+IHtcbiAgICBnZW5lcmF0ZShzY2hlbWFQYXRoLCBvdXRwdXRwYXRoLCB7IHNlcGFyYXRlRmlsZXM6IGZhbHNlLCBtYXhEZXB0aDogMywgbGFuZ3VhZ2U6ICdmbG93JyB9KTtcbiAgICBjb25zdCBnZW5lcmF0ZWRPdXRwdXQgPSBmcy5yZWFkRmlsZVN5bmMob3V0cHV0cGF0aCwgJ3V0ZjgnKTtcbiAgICBleHBlY3QoZ2VuZXJhdGVkT3V0cHV0KS50b01hdGNoU25hcHNob3QoKTtcbiAgfSlcbn0pXG4iXX0=");"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const fs = require("fs");
const src_1 = require("../src");
describe('end 2 end tests', () => {
    const schemaPath = path_1.resolve(__dirname, '../fixtures/schema.json');
    const outputpath = path_1.resolve(__dirname, './output.graphql');
    afterEach(() => {
        // delete the generated file
        try {
            fs.unlinkSync(outputpath);
        }
        catch (e) {
            // CircleCI throws exception, no harm done if the file is not deleted
        }
    });
    it('should generate statements', () => {
        src_1.default(schemaPath, outputpath, { separateFiles: false, maxDepth: 3, language: 'graphql' });
        const generatedOutput = fs.readFileSync(outputpath, 'utf8');
        expect(generatedOutput).toMatchSnapshot();
    });
    it('should generate statements in JS', () => {
        src_1.default(schemaPath, outputpath, { separateFiles: false, maxDepth: 3, language: 'javascript' });
        const generatedOutput = fs.readFileSync(outputpath, 'utf8');
        expect(generatedOutput).toMatchSnapshot();
    });
    it('should generate statements in Typescript', () => {
        src_1.default(schemaPath, outputpath, { separateFiles: false, maxDepth: 3, language: 'typescript' });
        const generatedOutput = fs.readFileSync(outputpath, 'utf8');
        expect(generatedOutput).toMatchSnapshot();
    });
    it('should generate statements in flow', () => {
        src_1.default(schemaPath, outputpath, { separateFiles: false, maxDepth: 3, language: 'flow' });
        const generatedOutput = fs.readFileSync(outputpath, 'utf8');
        expect(generatedOutput).toMatchSnapshot();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImUyZS50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBQSxTQUFBLFFBQUEsTUFBQSxDQUFBO0FBQ0EsTUFBQSxLQUFBLFFBQUEsSUFBQSxDQUFBO0FBQ0EsTUFBQSxRQUFBLFFBQUEsUUFBQSxDQUFBO0FBRUEsU0FBUyxpQkFBVCxFQUE0QixNQUFLO0FBQy9CLFVBQU0sYUFBYSxPQUFBLE9BQUEsQ0FBUSxTQUFSLEVBQW1CLHlCQUFuQixDQUFuQjtBQUNBLFVBQU0sYUFBYSxPQUFBLE9BQUEsQ0FBUSxTQUFSLEVBQW1CLGtCQUFuQixDQUFuQjtBQUVBLGNBQVUsTUFBSztBQUNiO0FBQ0EsWUFBSTtBQUNGLGVBQUcsVUFBSCxDQUFjLFVBQWQ7QUFDRDtBQUFDLGVBQU8sQ0FBUCxFQUFVO0FBQ1Y7QUFDRDtBQUNGLEtBUEQ7QUFTQSxPQUFHLDRCQUFILEVBQWlDLE1BQUs7QUFDcEMsY0FBQSxPQUFBLENBQVMsVUFBVCxFQUFxQixVQUFyQixFQUFpQyxFQUFFLGVBQWUsS0FBakIsRUFBd0IsVUFBVSxDQUFsQyxFQUFxQyxVQUFVLFNBQS9DLEVBQWpDO0FBQ0EsY0FBTSxrQkFBa0IsR0FBRyxZQUFILENBQWdCLFVBQWhCLEVBQTRCLE1BQTVCLENBQXhCO0FBQ0EsZUFBTyxlQUFQLEVBQXdCLGVBQXhCO0FBQ0QsS0FKRDtBQU1BLE9BQUcsa0NBQUgsRUFBdUMsTUFBSztBQUMxQyxjQUFBLE9BQUEsQ0FBUyxVQUFULEVBQXFCLFVBQXJCLEVBQWlDLEVBQUUsZUFBZSxLQUFqQixFQUF3QixVQUFVLENBQWxDLEVBQXFDLFVBQVUsWUFBL0MsRUFBakM7QUFDQSxjQUFNLGtCQUFrQixHQUFHLFlBQUgsQ0FBZ0IsVUFBaEIsRUFBNEIsTUFBNUIsQ0FBeEI7QUFDQSxlQUFPLGVBQVAsRUFBd0IsZUFBeEI7QUFDRCxLQUpEO0FBTUEsT0FBRywwQ0FBSCxFQUErQyxNQUFLO0FBQ2xELGNBQUEsT0FBQSxDQUFTLFVBQVQsRUFBcUIsVUFBckIsRUFBaUMsRUFBRSxlQUFlLEtBQWpCLEVBQXdCLFVBQVUsQ0FBbEMsRUFBcUMsVUFBVSxZQUEvQyxFQUFqQztBQUNBLGNBQU0sa0JBQWtCLEdBQUcsWUFBSCxDQUFnQixVQUFoQixFQUE0QixNQUE1QixDQUF4QjtBQUNBLGVBQU8sZUFBUCxFQUF3QixlQUF4QjtBQUNELEtBSkQ7QUFNQSxPQUFHLG9DQUFILEVBQXlDLE1BQUs7QUFDNUMsY0FBQSxPQUFBLENBQVMsVUFBVCxFQUFxQixVQUFyQixFQUFpQyxFQUFFLGVBQWUsS0FBakIsRUFBd0IsVUFBVSxDQUFsQyxFQUFxQyxVQUFVLE1BQS9DLEVBQWpDO0FBQ0EsY0FBTSxrQkFBa0IsR0FBRyxZQUFILENBQWdCLFVBQWhCLEVBQTRCLE1BQTVCLENBQXhCO0FBQ0EsZUFBTyxlQUFQLEVBQXdCLGVBQXhCO0FBQ0QsS0FKRDtBQUtELENBcENEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVzb2x2ZSB9IGZyb20gJ3BhdGgnXG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XG5pbXBvcnQgZ2VuZXJhdGUgZnJvbSAnLi4vc3JjJ1xuXG5kZXNjcmliZSgnZW5kIDIgZW5kIHRlc3RzJywgKCkgPT4ge1xuICBjb25zdCBzY2hlbWFQYXRoID0gcmVzb2x2ZShfX2Rpcm5hbWUsICcuLi9maXh0dXJlcy9zY2hlbWEuanNvbicpO1xuICBjb25zdCBvdXRwdXRwYXRoID0gcmVzb2x2ZShfX2Rpcm5hbWUsICcuL291dHB1dC5ncmFwaHFsJylcblxuICBhZnRlckVhY2goKCkgPT4ge1xuICAgIC8vIGRlbGV0ZSB0aGUgZ2VuZXJhdGVkIGZpbGVcbiAgICB0cnkge1xuICAgICAgZnMudW5saW5rU3luYyhvdXRwdXRwYXRoKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBDaXJjbGVDSSB0aHJvd3MgZXhjZXB0aW9uLCBubyBoYXJtIGRvbmUgaWYgdGhlIGZpbGUgaXMgbm90IGRlbGV0ZWRcbiAgICB9XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgZ2VuZXJhdGUgc3RhdGVtZW50cycsICgpID0+IHtcbiAgICBnZW5lcmF0ZShzY2hlbWFQYXRoLCBvdXRwdXRwYXRoLCB7IHNlcGFyYXRlRmlsZXM6IGZhbHNlLCBtYXhEZXB0aDogMywgbGFuZ3VhZ2U6ICdncmFwaHFsJyB9KTtcbiAgICBjb25zdCBnZW5lcmF0ZWRPdXRwdXQgPSBmcy5yZWFkRmlsZVN5bmMob3V0cHV0cGF0aCwgJ3V0ZjgnKTtcbiAgICBleHBlY3QoZ2VuZXJhdGVkT3V0cHV0KS50b01hdGNoU25hcHNob3QoKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBnZW5lcmF0ZSBzdGF0ZW1lbnRzIGluIEpTJywgKCkgPT4ge1xuICAgIGdlbmVyYXRlKHNjaGVtYVBhdGgsIG91dHB1dHBhdGgsIHsgc2VwYXJhdGVGaWxlczogZmFsc2UsIG1heERlcHRoOiAzLCBsYW5ndWFnZTogJ2phdmFzY3JpcHQnIH0pO1xuICAgIGNvbnN0IGdlbmVyYXRlZE91dHB1dCA9IGZzLnJlYWRGaWxlU3luYyhvdXRwdXRwYXRoLCAndXRmOCcpO1xuICAgIGV4cGVjdChnZW5lcmF0ZWRPdXRwdXQpLnRvTWF0Y2hTbmFwc2hvdCgpO1xuICB9KVxuXG4gIGl0KCdzaG91bGQgZ2VuZXJhdGUgc3RhdGVtZW50cyBpbiBUeXBlc2NyaXB0JywgKCkgPT4ge1xuICAgIGdlbmVyYXRlKHNjaGVtYVBhdGgsIG91dHB1dHBhdGgsIHsgc2VwYXJhdGVGaWxlczogZmFsc2UsIG1heERlcHRoOiAzLCBsYW5ndWFnZTogJ3R5cGVzY3JpcHQnIH0pO1xuICAgIGNvbnN0IGdlbmVyYXRlZE91dHB1dCA9IGZzLnJlYWRGaWxlU3luYyhvdXRwdXRwYXRoLCAndXRmOCcpO1xuICAgIGV4cGVjdChnZW5lcmF0ZWRPdXRwdXQpLnRvTWF0Y2hTbmFwc2hvdCgpO1xuICB9KVxuXG4gIGl0KCdzaG91bGQgZ2VuZXJhdGUgc3RhdGVtZW50cyBpbiBmbG93JywgKCkgPT4ge1xuICAgIGdlbmVyYXRlKHNjaGVtYVBhdGgsIG91dHB1dHBhdGgsIHsgc2VwYXJhdGVGaWxlczogZmFsc2UsIG1heERlcHRoOiAzLCBsYW5ndWFnZTogJ2Zsb3cnIH0pO1xuICAgIGNvbnN0IGdlbmVyYXRlZE91dHB1dCA9IGZzLnJlYWRGaWxlU3luYyhvdXRwdXRwYXRoLCAndXRmOCcpO1xuICAgIGV4cGVjdChnZW5lcmF0ZWRPdXRwdXQpLnRvTWF0Y2hTbmFwc2hvdCgpO1xuICB9KVxufSlcbiJdLCJzb3VyY2VSb290IjoiL2MvVXNlcnMvU2FuZHJvL3JlcG8vYW1wbGlmeS1jbGkvcGFja2FnZXMvYW1wbGlmeS1ncmFwaHFsLWRvY3MtZ2VuZXJhdG9yL3NyYy8ifQ==