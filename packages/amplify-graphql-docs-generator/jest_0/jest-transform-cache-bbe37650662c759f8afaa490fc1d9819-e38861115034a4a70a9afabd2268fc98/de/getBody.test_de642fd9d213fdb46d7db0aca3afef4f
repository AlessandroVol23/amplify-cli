840514232cda8576b37ea24334c579cf
'use strict';require('ts-jest').install("/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-docs-generator/__tests__/generator/getBody.test.ts", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst graphql_1 = require(\"graphql\");\nconst getFields_1 = require(\"../../src/generator/getFields\");\nconst getBody_1 = require(\"../../src/generator/getBody\");\njest.mock('../../src/generator/getFields');\nconst maxDepth = 2;\ndescribe('getBody', () => {\n    const arg = {\n        name: 'id',\n        type: graphql_1.GraphQLID,\n    };\n    const blogArticle = new graphql_1.GraphQLObjectType({\n        name: 'BlogArticle',\n        fields: {\n            id: { type: graphql_1.GraphQLID },\n            content: { type: graphql_1.GraphQLString },\n        },\n    });\n    const schema = new graphql_1.GraphQLSchema({\n        query: new graphql_1.GraphQLObjectType({\n            name: 'Query',\n            fields: {\n                article: {\n                    args: { id: { type: graphql_1.GraphQLID } },\n                    type: blogArticle,\n                },\n            },\n        }),\n    });\n    const mockFields = {\n        filed1: 'field1',\n        field2: 'field2',\n    };\n    beforeEach(() => {\n        getFields_1.default.mockReturnValue(mockFields);\n    });\n    it('should return a list of arguments', () => {\n        const query = schema.getQueryType().getFields().article;\n        expect(getBody_1.default(query, schema, maxDepth, { useExternalFragmentForS3Object: true })).toEqual(Object.assign({ args: [{ name: 'id', value: '$id' }] }, mockFields));\n        expect(getFields_1.default).toHaveBeenCalledWith(query, schema, maxDepth, { useExternalFragmentForS3Object: true });\n    });\n});\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0Qm9keS50ZXN0LmpzIiwic291cmNlUm9vdCI6Ii9jL1VzZXJzL1NhbmRyby9yZXBvL2FtcGxpZnktY2xpL3BhY2thZ2VzL2FtcGxpZnktZ3JhcGhxbC1kb2NzLWdlbmVyYXRvci9zcmMvIiwic291cmNlcyI6WyJnZXRCb2R5LnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxxQ0FPZ0I7QUFFaEIsNkRBQXFEO0FBTXJELHlEQUFpRDtBQUVqRCxJQUFJLENBQUMsSUFBSSxDQUFDLCtCQUErQixDQUFDLENBQUE7QUFDMUMsTUFBTSxRQUFRLEdBQUcsQ0FBQyxDQUFBO0FBRWxCLFFBQVEsQ0FBQyxTQUFTLEVBQUUsR0FBRyxFQUFFO0lBQ3ZCLE1BQU0sR0FBRyxHQUFvQjtRQUMzQixJQUFJLEVBQUUsSUFBSTtRQUNWLElBQUksRUFBRSxtQkFBUztLQUNoQixDQUFBO0lBQ0QsTUFBTSxXQUFXLEdBQUcsSUFBSSwyQkFBaUIsQ0FBQztRQUN4QyxJQUFJLEVBQUUsYUFBYTtRQUNuQixNQUFNLEVBQUU7WUFDTixFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsbUJBQVMsRUFBRTtZQUN2QixPQUFPLEVBQUUsRUFBRSxJQUFJLEVBQUUsdUJBQWEsRUFBRTtTQUNqQztLQUNGLENBQUMsQ0FBQTtJQUVGLE1BQU0sTUFBTSxHQUFHLElBQUksdUJBQWEsQ0FBQztRQUMvQixLQUFLLEVBQUUsSUFBSSwyQkFBaUIsQ0FBQztZQUMzQixJQUFJLEVBQUUsT0FBTztZQUNiLE1BQU0sRUFBRTtnQkFDTixPQUFPLEVBQUU7b0JBQ1AsSUFBSSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLG1CQUFTLEVBQUUsRUFBRTtvQkFDakMsSUFBSSxFQUFFLFdBQVc7aUJBQ2xCO2FBQ0Y7U0FDRixDQUFDO0tBQ0gsQ0FBQyxDQUFBO0lBQ0YsTUFBTSxVQUFVLEdBQUc7UUFDakIsTUFBTSxFQUFFLFFBQVE7UUFDaEIsTUFBTSxFQUFFLFFBQVE7S0FDakIsQ0FBQTtJQUVELFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDZCxtQkFBUyxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUN2QyxDQUFDLENBQUMsQ0FBQTtJQUVGLEVBQUUsQ0FBQyxtQ0FBbUMsRUFBRSxHQUFHLEVBQUU7UUFDM0MsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLE9BQU8sQ0FBQTtRQUN2RCxNQUFNLENBQUMsaUJBQU8sQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxFQUFFLDhCQUE4QixFQUFFLElBQUksRUFBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLGlCQUN2RixJQUFJLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxDQUFDLElBQ2pDLFVBQVUsRUFDYixDQUFBO1FBQ0YsTUFBTSxDQUFDLG1CQUFTLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxFQUFFLDhCQUE4QixFQUFFLElBQUksRUFBQyxDQUFDLENBQUE7SUFDMUcsQ0FBQyxDQUFDLENBQUE7QUFDSixDQUFDLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEdyYXBoUUxGaWVsZCxcbiAgR3JhcGhRTFNjaGVtYSxcbiAgR3JhcGhRTE9iamVjdFR5cGUsXG4gIEdyYXBoUUxBcmd1bWVudCxcbiAgR3JhcGhRTFN0cmluZyxcbiAgR3JhcGhRTElELFxufSBmcm9tICdncmFwaHFsJ1xuXG5pbXBvcnQgZ2V0RmllbGRzIGZyb20gJy4uLy4uL3NyYy9nZW5lcmF0b3IvZ2V0RmllbGRzJ1xuaW1wb3J0IHtcbiAgR1FMVGVtcGxhdGVPcEJvZHksXG4gIEdRTFRlbXBsYXRlQXJnSW52b2NhdGlvbixcbiAgR1FMVGVtcGxhdGVGaWVsZCxcbn0gZnJvbSAnLi4vLi4vc3JjL2dlbmVyYXRvci90eXBlcydcbmltcG9ydCBnZXRCb2R5IGZyb20gJy4uLy4uL3NyYy9nZW5lcmF0b3IvZ2V0Qm9keSdcblxuamVzdC5tb2NrKCcuLi8uLi9zcmMvZ2VuZXJhdG9yL2dldEZpZWxkcycpXG5jb25zdCBtYXhEZXB0aCA9IDJcblxuZGVzY3JpYmUoJ2dldEJvZHknLCAoKSA9PiB7XG4gIGNvbnN0IGFyZzogR3JhcGhRTEFyZ3VtZW50ID0ge1xuICAgIG5hbWU6ICdpZCcsXG4gICAgdHlwZTogR3JhcGhRTElELFxuICB9XG4gIGNvbnN0IGJsb2dBcnRpY2xlID0gbmV3IEdyYXBoUUxPYmplY3RUeXBlKHtcbiAgICBuYW1lOiAnQmxvZ0FydGljbGUnLFxuICAgIGZpZWxkczoge1xuICAgICAgaWQ6IHsgdHlwZTogR3JhcGhRTElEIH0sXG4gICAgICBjb250ZW50OiB7IHR5cGU6IEdyYXBoUUxTdHJpbmcgfSxcbiAgICB9LFxuICB9KVxuXG4gIGNvbnN0IHNjaGVtYSA9IG5ldyBHcmFwaFFMU2NoZW1hKHtcbiAgICBxdWVyeTogbmV3IEdyYXBoUUxPYmplY3RUeXBlKHtcbiAgICAgIG5hbWU6ICdRdWVyeScsXG4gICAgICBmaWVsZHM6IHtcbiAgICAgICAgYXJ0aWNsZToge1xuICAgICAgICAgIGFyZ3M6IHsgaWQ6IHsgdHlwZTogR3JhcGhRTElEIH0gfSxcbiAgICAgICAgICB0eXBlOiBibG9nQXJ0aWNsZSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSksXG4gIH0pXG4gIGNvbnN0IG1vY2tGaWVsZHMgPSB7XG4gICAgZmlsZWQxOiAnZmllbGQxJyxcbiAgICBmaWVsZDI6ICdmaWVsZDInLFxuICB9XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgZ2V0RmllbGRzLm1vY2tSZXR1cm5WYWx1ZShtb2NrRmllbGRzKVxuICB9KVxuXG4gIGl0KCdzaG91bGQgcmV0dXJuIGEgbGlzdCBvZiBhcmd1bWVudHMnLCAoKSA9PiB7XG4gICAgY29uc3QgcXVlcnkgPSBzY2hlbWEuZ2V0UXVlcnlUeXBlKCkuZ2V0RmllbGRzKCkuYXJ0aWNsZVxuICAgIGV4cGVjdChnZXRCb2R5KHF1ZXJ5LCBzY2hlbWEsIG1heERlcHRoLCB7wqB1c2VFeHRlcm5hbEZyYWdtZW50Rm9yUzNPYmplY3Q6IHRydWV9KSkudG9FcXVhbCh7XG4gICAgICBhcmdzOiBbeyBuYW1lOiAnaWQnLCB2YWx1ZTogJyRpZCcgfV0sXG4gICAgICAuLi5tb2NrRmllbGRzLFxuICAgIH0pXG4gICAgZXhwZWN0KGdldEZpZWxkcykudG9IYXZlQmVlbkNhbGxlZFdpdGgocXVlcnksIHNjaGVtYSwgbWF4RGVwdGgsIHvCoHVzZUV4dGVybmFsRnJhZ21lbnRGb3JTM09iamVjdDogdHJ1ZX0pXG4gIH0pXG59KVxuIl19");"use strict";




jest.mock('../../src/generator/getFields');Object.defineProperty(exports, "__esModule", { value: true });const graphql_1 = require("graphql");const getFields_1 = require("../../src/generator/getFields");const getBody_1 = require("../../src/generator/getBody");
const maxDepth = 2;
describe('getBody', () => {
    const arg = {
        name: 'id',
        type: graphql_1.GraphQLID };

    const blogArticle = new graphql_1.GraphQLObjectType({
        name: 'BlogArticle',
        fields: {
            id: { type: graphql_1.GraphQLID },
            content: { type: graphql_1.GraphQLString } } });


    const schema = new graphql_1.GraphQLSchema({
        query: new graphql_1.GraphQLObjectType({
            name: 'Query',
            fields: {
                article: {
                    args: { id: { type: graphql_1.GraphQLID } },
                    type: blogArticle } } }) });




    const mockFields = {
        filed1: 'field1',
        field2: 'field2' };

    beforeEach(() => {
        getFields_1.default.mockReturnValue(mockFields);
    });
    it('should return a list of arguments', () => {
        const query = schema.getQueryType().getFields().article;
        expect(getBody_1.default(query, schema, maxDepth, { useExternalFragmentForS3Object: true })).toEqual(Object.assign({ args: [{ name: 'id', value: '$id' }] }, mockFields));
        expect(getFields_1.default).toHaveBeenCalledWith(query, schema, maxDepth, { useExternalFragmentForS3Object: true });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdldEJvZHkudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQWlCQSxLQUFLLElBQUwsQ0FBVSwrQkFBVixFLDhEQWpCQSxNQUFBLFlBQUEsUUFBQSxTQUFBLENBQUEsQ0FTQSxNQUFBLGNBQUEsUUFBQSwrQkFBQSxDQUFBLENBTUEsTUFBQSxZQUFBLFFBQUEsNkJBQUEsQ0FBQTtBQUdBLE1BQU0sV0FBVyxDQUFqQjtBQUVBLFNBQVMsU0FBVCxFQUFvQixNQUFLO0FBQ3ZCLFVBQU0sTUFBdUI7QUFDM0IsY0FBTSxJQURxQjtBQUUzQixjQUFNLFVBQUEsU0FGcUIsRUFBN0I7O0FBSUEsVUFBTSxjQUFjLElBQUksVUFBQSxpQkFBSixDQUFzQjtBQUN4QyxjQUFNLGFBRGtDO0FBRXhDLGdCQUFRO0FBQ04sZ0JBQUksRUFBRSxNQUFNLFVBQUEsU0FBUixFQURFO0FBRU4scUJBQVMsRUFBRSxNQUFNLFVBQUEsYUFBUixFQUZILEVBRmdDLEVBQXRCLENBQXBCOzs7QUFRQSxVQUFNLFNBQVMsSUFBSSxVQUFBLGFBQUosQ0FBa0I7QUFDL0IsZUFBTyxJQUFJLFVBQUEsaUJBQUosQ0FBc0I7QUFDM0Isa0JBQU0sT0FEcUI7QUFFM0Isb0JBQVE7QUFDTix5QkFBUztBQUNQLDBCQUFNLEVBQUUsSUFBSSxFQUFFLE1BQU0sVUFBQSxTQUFSLEVBQU4sRUFEQztBQUVQLDBCQUFNLFdBRkMsRUFESCxFQUZtQixFQUF0QixDQUR3QixFQUFsQixDQUFmOzs7OztBQVdBLFVBQU0sYUFBYTtBQUNqQixnQkFBUSxRQURTO0FBRWpCLGdCQUFRLFFBRlMsRUFBbkI7O0FBS0EsZUFBVyxNQUFLO0FBQ2Qsb0JBQUEsT0FBQSxDQUFVLGVBQVYsQ0FBMEIsVUFBMUI7QUFDRCxLQUZEO0FBSUEsT0FBRyxtQ0FBSCxFQUF3QyxNQUFLO0FBQzNDLGNBQU0sUUFBUSxPQUFPLFlBQVAsR0FBc0IsU0FBdEIsR0FBa0MsT0FBaEQ7QUFDQSxlQUFPLFVBQUEsT0FBQSxDQUFRLEtBQVIsRUFBZSxNQUFmLEVBQXVCLFFBQXZCLEVBQWlDLEVBQUUsZ0NBQWdDLElBQWxDLEVBQWpDLENBQVAsRUFBa0YsT0FBbEYsQ0FBeUYsT0FBQSxNQUFBLENBQUEsRUFDdkYsTUFBTSxDQUFDLEVBQUUsTUFBTSxJQUFSLEVBQWMsT0FBTyxLQUFyQixFQUFELENBRGlGLEVBQUEsRUFFcEYsVUFGb0YsQ0FBekY7QUFJQSxlQUFPLFlBQUEsT0FBUCxFQUFrQixvQkFBbEIsQ0FBdUMsS0FBdkMsRUFBOEMsTUFBOUMsRUFBc0QsUUFBdEQsRUFBZ0UsRUFBRSxnQ0FBZ0MsSUFBbEMsRUFBaEU7QUFDRCxLQVBEO0FBUUQsQ0F6Q0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBHcmFwaFFMRmllbGQsXG4gIEdyYXBoUUxTY2hlbWEsXG4gIEdyYXBoUUxPYmplY3RUeXBlLFxuICBHcmFwaFFMQXJndW1lbnQsXG4gIEdyYXBoUUxTdHJpbmcsXG4gIEdyYXBoUUxJRCxcbn0gZnJvbSAnZ3JhcGhxbCdcblxuaW1wb3J0IGdldEZpZWxkcyBmcm9tICcuLi8uLi9zcmMvZ2VuZXJhdG9yL2dldEZpZWxkcydcbmltcG9ydCB7XG4gIEdRTFRlbXBsYXRlT3BCb2R5LFxuICBHUUxUZW1wbGF0ZUFyZ0ludm9jYXRpb24sXG4gIEdRTFRlbXBsYXRlRmllbGQsXG59IGZyb20gJy4uLy4uL3NyYy9nZW5lcmF0b3IvdHlwZXMnXG5pbXBvcnQgZ2V0Qm9keSBmcm9tICcuLi8uLi9zcmMvZ2VuZXJhdG9yL2dldEJvZHknXG5cbmplc3QubW9jaygnLi4vLi4vc3JjL2dlbmVyYXRvci9nZXRGaWVsZHMnKVxuY29uc3QgbWF4RGVwdGggPSAyXG5cbmRlc2NyaWJlKCdnZXRCb2R5JywgKCkgPT4ge1xuICBjb25zdCBhcmc6IEdyYXBoUUxBcmd1bWVudCA9IHtcbiAgICBuYW1lOiAnaWQnLFxuICAgIHR5cGU6IEdyYXBoUUxJRCxcbiAgfVxuICBjb25zdCBibG9nQXJ0aWNsZSA9IG5ldyBHcmFwaFFMT2JqZWN0VHlwZSh7XG4gICAgbmFtZTogJ0Jsb2dBcnRpY2xlJyxcbiAgICBmaWVsZHM6IHtcbiAgICAgIGlkOiB7IHR5cGU6IEdyYXBoUUxJRCB9LFxuICAgICAgY29udGVudDogeyB0eXBlOiBHcmFwaFFMU3RyaW5nIH0sXG4gICAgfSxcbiAgfSlcblxuICBjb25zdCBzY2hlbWEgPSBuZXcgR3JhcGhRTFNjaGVtYSh7XG4gICAgcXVlcnk6IG5ldyBHcmFwaFFMT2JqZWN0VHlwZSh7XG4gICAgICBuYW1lOiAnUXVlcnknLFxuICAgICAgZmllbGRzOiB7XG4gICAgICAgIGFydGljbGU6IHtcbiAgICAgICAgICBhcmdzOiB7IGlkOiB7IHR5cGU6IEdyYXBoUUxJRCB9IH0sXG4gICAgICAgICAgdHlwZTogYmxvZ0FydGljbGUsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pLFxuICB9KVxuICBjb25zdCBtb2NrRmllbGRzID0ge1xuICAgIGZpbGVkMTogJ2ZpZWxkMScsXG4gICAgZmllbGQyOiAnZmllbGQyJyxcbiAgfVxuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGdldEZpZWxkcy5tb2NrUmV0dXJuVmFsdWUobW9ja0ZpZWxkcylcbiAgfSlcblxuICBpdCgnc2hvdWxkIHJldHVybiBhIGxpc3Qgb2YgYXJndW1lbnRzJywgKCkgPT4ge1xuICAgIGNvbnN0IHF1ZXJ5ID0gc2NoZW1hLmdldFF1ZXJ5VHlwZSgpLmdldEZpZWxkcygpLmFydGljbGVcbiAgICBleHBlY3QoZ2V0Qm9keShxdWVyeSwgc2NoZW1hLCBtYXhEZXB0aCwge8KgdXNlRXh0ZXJuYWxGcmFnbWVudEZvclMzT2JqZWN0OiB0cnVlfSkpLnRvRXF1YWwoe1xuICAgICAgYXJnczogW3sgbmFtZTogJ2lkJywgdmFsdWU6ICckaWQnIH1dLFxuICAgICAgLi4ubW9ja0ZpZWxkcyxcbiAgICB9KVxuICAgIGV4cGVjdChnZXRGaWVsZHMpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHF1ZXJ5LCBzY2hlbWEsIG1heERlcHRoLCB7wqB1c2VFeHRlcm5hbEZyYWdtZW50Rm9yUzNPYmplY3Q6IHRydWV9KVxuICB9KVxufSlcbiJdLCJzb3VyY2VSb290IjoiL2MvVXNlcnMvU2FuZHJvL3JlcG8vYW1wbGlmeS1jbGkvcGFja2FnZXMvYW1wbGlmeS1ncmFwaHFsLWRvY3MtZ2VuZXJhdG9yL3NyYy8ifQ==