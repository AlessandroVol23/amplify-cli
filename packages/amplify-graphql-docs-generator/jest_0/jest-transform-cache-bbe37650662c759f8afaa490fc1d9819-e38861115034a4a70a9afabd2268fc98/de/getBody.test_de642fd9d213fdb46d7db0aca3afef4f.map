{"version":3,"sources":["getBody.test.ts"],"names":[],"mappings":";;;;;AAiBA,KAAK,IAAL,CAAU,+BAAV,E,8DAjBA,MAAA,YAAA,QAAA,SAAA,CAAA,CASA,MAAA,cAAA,QAAA,+BAAA,CAAA,CAMA,MAAA,YAAA,QAAA,6BAAA,CAAA;AAGA,MAAM,WAAW,CAAjB;AAEA,SAAS,SAAT,EAAoB,MAAK;AACvB,UAAM,MAAuB;AAC3B,cAAM,IADqB;AAE3B,cAAM,UAAA,SAFqB,EAA7B;;AAIA,UAAM,cAAc,IAAI,UAAA,iBAAJ,CAAsB;AACxC,cAAM,aADkC;AAExC,gBAAQ;AACN,gBAAI,EAAE,MAAM,UAAA,SAAR,EADE;AAEN,qBAAS,EAAE,MAAM,UAAA,aAAR,EAFH,EAFgC,EAAtB,CAApB;;;AAQA,UAAM,SAAS,IAAI,UAAA,aAAJ,CAAkB;AAC/B,eAAO,IAAI,UAAA,iBAAJ,CAAsB;AAC3B,kBAAM,OADqB;AAE3B,oBAAQ;AACN,yBAAS;AACP,0BAAM,EAAE,IAAI,EAAE,MAAM,UAAA,SAAR,EAAN,EADC;AAEP,0BAAM,WAFC,EADH,EAFmB,EAAtB,CADwB,EAAlB,CAAf;;;;;AAWA,UAAM,aAAa;AACjB,gBAAQ,QADS;AAEjB,gBAAQ,QAFS,EAAnB;;AAKA,eAAW,MAAK;AACd,oBAAA,OAAA,CAAU,eAAV,CAA0B,UAA1B;AACD,KAFD;AAIA,OAAG,mCAAH,EAAwC,MAAK;AAC3C,cAAM,QAAQ,OAAO,YAAP,GAAsB,SAAtB,GAAkC,OAAhD;AACA,eAAO,UAAA,OAAA,CAAQ,KAAR,EAAe,MAAf,EAAuB,QAAvB,EAAiC,EAAE,gCAAgC,IAAlC,EAAjC,CAAP,EAAkF,OAAlF,CAAyF,OAAA,MAAA,CAAA,EACvF,MAAM,CAAC,EAAE,MAAM,IAAR,EAAc,OAAO,KAArB,EAAD,CADiF,EAAA,EAEpF,UAFoF,CAAzF;AAIA,eAAO,YAAA,OAAP,EAAkB,oBAAlB,CAAuC,KAAvC,EAA8C,MAA9C,EAAsD,QAAtD,EAAgE,EAAE,gCAAgC,IAAlC,EAAhE;AACD,KAPD;AAQD,CAzCD","sourcesContent":["import {\n  GraphQLField,\n  GraphQLSchema,\n  GraphQLObjectType,\n  GraphQLArgument,\n  GraphQLString,\n  GraphQLID,\n} from 'graphql'\n\nimport getFields from '../../src/generator/getFields'\nimport {\n  GQLTemplateOpBody,\n  GQLTemplateArgInvocation,\n  GQLTemplateField,\n} from '../../src/generator/types'\nimport getBody from '../../src/generator/getBody'\n\njest.mock('../../src/generator/getFields')\nconst maxDepth = 2\n\ndescribe('getBody', () => {\n  const arg: GraphQLArgument = {\n    name: 'id',\n    type: GraphQLID,\n  }\n  const blogArticle = new GraphQLObjectType({\n    name: 'BlogArticle',\n    fields: {\n      id: { type: GraphQLID },\n      content: { type: GraphQLString },\n    },\n  })\n\n  const schema = new GraphQLSchema({\n    query: new GraphQLObjectType({\n      name: 'Query',\n      fields: {\n        article: {\n          args: { id: { type: GraphQLID } },\n          type: blogArticle,\n        },\n      },\n    }),\n  })\n  const mockFields = {\n    filed1: 'field1',\n    field2: 'field2',\n  }\n\n  beforeEach(() => {\n    getFields.mockReturnValue(mockFields)\n  })\n\n  it('should return a list of arguments', () => {\n    const query = schema.getQueryType().getFields().article\n    expect(getBody(query, schema, maxDepth, { useExternalFragmentForS3Object: true})).toEqual({\n      args: [{ name: 'id', value: '$id' }],\n      ...mockFields,\n    })\n    expect(getFields).toHaveBeenCalledWith(query, schema, maxDepth, { useExternalFragmentForS3Object: true})\n  })\n})\n"],"sourceRoot":"/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-docs-generator/src/"}