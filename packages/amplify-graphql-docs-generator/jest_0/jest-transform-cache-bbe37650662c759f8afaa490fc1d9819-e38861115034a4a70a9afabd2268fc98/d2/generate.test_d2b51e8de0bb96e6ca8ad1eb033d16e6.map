{"version":3,"sources":["generate.test.ts"],"names":[],"mappings":";;;;;AASA,KAAK,IAAL,CAAU,2CAAV;AACA,KAAK,IAAL,CAAU,SAAV,E,8DAVA,MAAA,aAAA,QAAA,8BAAA,CAAA,CACA,MAAA,0BAAA,QAAA,2CAAA,CAAA,CAKA,MAAA,YAAA,QAAA,SAAA,CAAA;AAKA,SAAS,UAAT,EAAqB,MAAK;AACxB,UAAM,kBAAkB,iBAAxB;AACA,UAAM,eAAe,KAAK,EAAL,EAArB;AACA,UAAM,kBAAkB,KAAK,EAAL,EAAxB;AACA,UAAM,sBAAsB,KAAK,EAAL,EAA5B;AAEA,UAAM,aAAa;AACjB,oBADiB;AAEjB,uBAFiB;AAGjB,2BAHiB,EAAnB;;AAKA,UAAM,WAAW,CAAjB;AACA,UAAM,iBAAoC,EAAE,gCAAgC,IAAlC,EAA1C;AACA,eAAW,MAAK;AACd,aAAK,aAAL;AACA,qBAAa,eAAb,CAA6B,YAA7B;AACA,wBAAgB,eAAhB,CAAgC,eAAhC;AACA,4BAAoB,eAApB,CAAoC,mBAApC;AAEA,kBAAA,iBAAA,CAAkB,eAAlB,CAAkC,UAAlC;AACA,gCAAA,eAAA,CAAgB,eAAhB,CAAgC,sBAAhC;AACA,gCAAA,iBAAA,CAAkB,eAAlB,CAAkC,yBAAlC;AACA,gCAAA,qBAAA,CAAsB,eAAtB,CAAsC,6BAAtC;AACD,KAVD;AAYA,OAAG,qDAAH,EAA0D,MAAK;AAC7D,mBAAA,OAAA,CAAS,eAAT,EAA0B,QAA1B,EAAoC,cAApC;AACA,eAAO,UAAA,iBAAP,EAA0B,oBAA1B,CAA+C,eAA/C;AACD,KAHD;AAKA,OAAG,qDAAH,EAA0D,MAAK;AAC7D,mBAAA,OAAA,CAAS,eAAT,EAA0B,QAA1B,EAAoC,cAApC;AACA,eAAO,wBAAA,eAAP,EAAwB,oBAAxB,CACE,WAAW,YAAX,EADF,EAEE,UAFF,EAGE,QAHF,EAIE,cAJF;AAMA,eAAO,wBAAA,iBAAP,EAA0B,oBAA1B,CACE,WAAW,eAAX,EADF,EAEE,UAFF,EAGE,QAHF,EAIE,cAJF;AAMA,eAAO,wBAAA,qBAAP,EAA8B,oBAA9B,CACE,WAAW,mBAAX,EADF,EAEE,UAFF,EAGE,QAHF,EAIE,cAJF;AAMD,KApBD;AAsBA,OAAG,+EAAH,EAAoF,MAAK;AACvF,eAAO,WAAA,OAAA,CAAS,eAAT,EAA0B,QAA1B,EAAoC,cAApC,CAAP,EAA4D,OAA5D,CAAoE;AAClE,qBAAS,sBADyD;AAElE,2BAAe,6BAFmD;AAGlE,uBAAW,yBAHuD,EAApE;;AAKD,KAND;AAOD,CA3DD","sourcesContent":["import generate from '../../src/generator/generate'\nimport {\n  generateQueries,\n  generateMutations,\n  generateSubscriptions,\n} from '../../src/generator/generateAllOperations'\nimport { buildClientSchema } from 'graphql'\nimport { GQLDocsGenOptions } from '../../src/generator/types'\n\njest.mock('../../src/generator/generateAllOperations')\njest.mock('graphql')\ndescribe('generate', () => {\n  const MOCK_SCHEMA_DOC = 'MOCK_SCHEMA_DOC'\n  const getQueryType = jest.fn()\n  const getMutationType = jest.fn()\n  const getSubscriptionType = jest.fn()\n\n  const mockSchema = {\n    getQueryType,\n    getMutationType,\n    getSubscriptionType,\n  }\n  const maxDepth = 4\n  const generateOption: GQLDocsGenOptions = { useExternalFragmentForS3Object: true }\n  beforeEach(() => {\n    jest.resetAllMocks()\n    getQueryType.mockReturnValue('QUERY_TYPE')\n    getMutationType.mockReturnValue('MUTATION_TYPE')\n    getSubscriptionType.mockReturnValue('SUBSCRIPTION_TYPE')\n\n    buildClientSchema.mockReturnValue(mockSchema)\n    generateQueries.mockReturnValue('MOCK_GENERATED_QUERY')\n    generateMutations.mockReturnValue('MOCK_GENERATED_MUTATION')\n    generateSubscriptions.mockReturnValue('MOCK_GENERATED_SUBSCRIPTION')\n  })\n\n  it('should build the client schema from schema document', () => {\n    generate(MOCK_SCHEMA_DOC, maxDepth, generateOption)\n    expect(buildClientSchema).toHaveBeenCalledWith(MOCK_SCHEMA_DOC)\n  })\n\n  it('should generate operations using the helper methods', () => {\n    generate(MOCK_SCHEMA_DOC, maxDepth, generateOption)\n    expect(generateQueries).toHaveBeenCalledWith(\n      mockSchema.getQueryType(),\n      mockSchema,\n      maxDepth,\n      generateOption\n    )\n    expect(generateMutations).toHaveBeenCalledWith(\n      mockSchema.getMutationType(),\n      mockSchema,\n      maxDepth,\n      generateOption\n    )\n    expect(generateSubscriptions).toHaveBeenCalledWith(\n      mockSchema.getSubscriptionType(),\n      mockSchema,\n      maxDepth,\n      generateOption\n    )\n  })\n\n  it('should call the individual operation generator and return the value from them', () => {\n    expect(generate(MOCK_SCHEMA_DOC, maxDepth, generateOption)).toEqual({\n      queries: 'MOCK_GENERATED_QUERY',\n      subscriptions: 'MOCK_GENERATED_SUBSCRIPTION',\n      mutations: 'MOCK_GENERATED_MUTATION',\n    })\n  })\n})\n"],"sourceRoot":"/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-docs-generator/src/"}