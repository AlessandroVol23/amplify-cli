59204e920f8b7c2f68f4096da3033ed3
'use strict';require('ts-jest').install("/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-docs-generator/__tests__/generator/generate.test.ts", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst generate_1 = require(\"../../src/generator/generate\");\nconst generateAllOperations_1 = require(\"../../src/generator/generateAllOperations\");\nconst graphql_1 = require(\"graphql\");\njest.mock('../../src/generator/generateAllOperations');\njest.mock('graphql');\ndescribe('generate', () => {\n    const MOCK_SCHEMA_DOC = 'MOCK_SCHEMA_DOC';\n    const getQueryType = jest.fn();\n    const getMutationType = jest.fn();\n    const getSubscriptionType = jest.fn();\n    const mockSchema = {\n        getQueryType,\n        getMutationType,\n        getSubscriptionType,\n    };\n    const maxDepth = 4;\n    const generateOption = { useExternalFragmentForS3Object: true };\n    beforeEach(() => {\n        jest.resetAllMocks();\n        getQueryType.mockReturnValue('QUERY_TYPE');\n        getMutationType.mockReturnValue('MUTATION_TYPE');\n        getSubscriptionType.mockReturnValue('SUBSCRIPTION_TYPE');\n        graphql_1.buildClientSchema.mockReturnValue(mockSchema);\n        generateAllOperations_1.generateQueries.mockReturnValue('MOCK_GENERATED_QUERY');\n        generateAllOperations_1.generateMutations.mockReturnValue('MOCK_GENERATED_MUTATION');\n        generateAllOperations_1.generateSubscriptions.mockReturnValue('MOCK_GENERATED_SUBSCRIPTION');\n    });\n    it('should build the client schema from schema document', () => {\n        generate_1.default(MOCK_SCHEMA_DOC, maxDepth, generateOption);\n        expect(graphql_1.buildClientSchema).toHaveBeenCalledWith(MOCK_SCHEMA_DOC);\n    });\n    it('should generate operations using the helper methods', () => {\n        generate_1.default(MOCK_SCHEMA_DOC, maxDepth, generateOption);\n        expect(generateAllOperations_1.generateQueries).toHaveBeenCalledWith(mockSchema.getQueryType(), mockSchema, maxDepth, generateOption);\n        expect(generateAllOperations_1.generateMutations).toHaveBeenCalledWith(mockSchema.getMutationType(), mockSchema, maxDepth, generateOption);\n        expect(generateAllOperations_1.generateSubscriptions).toHaveBeenCalledWith(mockSchema.getSubscriptionType(), mockSchema, maxDepth, generateOption);\n    });\n    it('should call the individual operation generator and return the value from them', () => {\n        expect(generate_1.default(MOCK_SCHEMA_DOC, maxDepth, generateOption)).toEqual({\n            queries: 'MOCK_GENERATED_QUERY',\n            subscriptions: 'MOCK_GENERATED_SUBSCRIPTION',\n            mutations: 'MOCK_GENERATED_MUTATION',\n        });\n    });\n});\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGUudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIvYy9Vc2Vycy9TYW5kcm8vcmVwby9hbXBsaWZ5LWNsaS9wYWNrYWdlcy9hbXBsaWZ5LWdyYXBocWwtZG9jcy1nZW5lcmF0b3Ivc3JjLyIsInNvdXJjZXMiOlsiZ2VuZXJhdGUudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDJEQUFtRDtBQUNuRCxxRkFJa0Q7QUFDbEQscUNBQTJDO0FBRzNDLElBQUksQ0FBQyxJQUFJLENBQUMsMkNBQTJDLENBQUMsQ0FBQTtBQUN0RCxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFBO0FBQ3BCLFFBQVEsQ0FBQyxVQUFVLEVBQUUsR0FBRyxFQUFFO0lBQ3hCLE1BQU0sZUFBZSxHQUFHLGlCQUFpQixDQUFBO0lBQ3pDLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQTtJQUM5QixNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUE7SUFDakMsTUFBTSxtQkFBbUIsR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUE7SUFFckMsTUFBTSxVQUFVLEdBQUc7UUFDakIsWUFBWTtRQUNaLGVBQWU7UUFDZixtQkFBbUI7S0FDcEIsQ0FBQTtJQUNELE1BQU0sUUFBUSxHQUFHLENBQUMsQ0FBQTtJQUNsQixNQUFNLGNBQWMsR0FBc0IsRUFBRSw4QkFBOEIsRUFBRSxJQUFJLEVBQUUsQ0FBQTtJQUNsRixVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ2QsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFBO1FBQ3BCLFlBQVksQ0FBQyxlQUFlLENBQUMsWUFBWSxDQUFDLENBQUE7UUFDMUMsZUFBZSxDQUFDLGVBQWUsQ0FBQyxlQUFlLENBQUMsQ0FBQTtRQUNoRCxtQkFBbUIsQ0FBQyxlQUFlLENBQUMsbUJBQW1CLENBQUMsQ0FBQTtRQUV4RCwyQkFBaUIsQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFDLENBQUE7UUFDN0MsdUNBQWUsQ0FBQyxlQUFlLENBQUMsc0JBQXNCLENBQUMsQ0FBQTtRQUN2RCx5Q0FBaUIsQ0FBQyxlQUFlLENBQUMseUJBQXlCLENBQUMsQ0FBQTtRQUM1RCw2Q0FBcUIsQ0FBQyxlQUFlLENBQUMsNkJBQTZCLENBQUMsQ0FBQTtJQUN0RSxDQUFDLENBQUMsQ0FBQTtJQUVGLEVBQUUsQ0FBQyxxREFBcUQsRUFBRSxHQUFHLEVBQUU7UUFDN0Qsa0JBQVEsQ0FBQyxlQUFlLEVBQUUsUUFBUSxFQUFFLGNBQWMsQ0FBQyxDQUFBO1FBQ25ELE1BQU0sQ0FBQywyQkFBaUIsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLGVBQWUsQ0FBQyxDQUFBO0lBQ2pFLENBQUMsQ0FBQyxDQUFBO0lBRUYsRUFBRSxDQUFDLHFEQUFxRCxFQUFFLEdBQUcsRUFBRTtRQUM3RCxrQkFBUSxDQUFDLGVBQWUsRUFBRSxRQUFRLEVBQUUsY0FBYyxDQUFDLENBQUE7UUFDbkQsTUFBTSxDQUFDLHVDQUFlLENBQUMsQ0FBQyxvQkFBb0IsQ0FDMUMsVUFBVSxDQUFDLFlBQVksRUFBRSxFQUN6QixVQUFVLEVBQ1YsUUFBUSxFQUNSLGNBQWMsQ0FDZixDQUFBO1FBQ0QsTUFBTSxDQUFDLHlDQUFpQixDQUFDLENBQUMsb0JBQW9CLENBQzVDLFVBQVUsQ0FBQyxlQUFlLEVBQUUsRUFDNUIsVUFBVSxFQUNWLFFBQVEsRUFDUixjQUFjLENBQ2YsQ0FBQTtRQUNELE1BQU0sQ0FBQyw2Q0FBcUIsQ0FBQyxDQUFDLG9CQUFvQixDQUNoRCxVQUFVLENBQUMsbUJBQW1CLEVBQUUsRUFDaEMsVUFBVSxFQUNWLFFBQVEsRUFDUixjQUFjLENBQ2YsQ0FBQTtJQUNILENBQUMsQ0FBQyxDQUFBO0lBRUYsRUFBRSxDQUFDLCtFQUErRSxFQUFFLEdBQUcsRUFBRTtRQUN2RixNQUFNLENBQUMsa0JBQVEsQ0FBQyxlQUFlLEVBQUUsUUFBUSxFQUFFLGNBQWMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO1lBQ2xFLE9BQU8sRUFBRSxzQkFBc0I7WUFDL0IsYUFBYSxFQUFFLDZCQUE2QjtZQUM1QyxTQUFTLEVBQUUseUJBQXlCO1NBQ3JDLENBQUMsQ0FBQTtJQUNKLENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZ2VuZXJhdGUgZnJvbSAnLi4vLi4vc3JjL2dlbmVyYXRvci9nZW5lcmF0ZSdcbmltcG9ydCB7XG4gIGdlbmVyYXRlUXVlcmllcyxcbiAgZ2VuZXJhdGVNdXRhdGlvbnMsXG4gIGdlbmVyYXRlU3Vic2NyaXB0aW9ucyxcbn0gZnJvbSAnLi4vLi4vc3JjL2dlbmVyYXRvci9nZW5lcmF0ZUFsbE9wZXJhdGlvbnMnXG5pbXBvcnQgeyBidWlsZENsaWVudFNjaGVtYSB9IGZyb20gJ2dyYXBocWwnXG5pbXBvcnQgeyBHUUxEb2NzR2VuT3B0aW9ucyB9IGZyb20gJy4uLy4uL3NyYy9nZW5lcmF0b3IvdHlwZXMnXG5cbmplc3QubW9jaygnLi4vLi4vc3JjL2dlbmVyYXRvci9nZW5lcmF0ZUFsbE9wZXJhdGlvbnMnKVxuamVzdC5tb2NrKCdncmFwaHFsJylcbmRlc2NyaWJlKCdnZW5lcmF0ZScsICgpID0+IHtcbiAgY29uc3QgTU9DS19TQ0hFTUFfRE9DID0gJ01PQ0tfU0NIRU1BX0RPQydcbiAgY29uc3QgZ2V0UXVlcnlUeXBlID0gamVzdC5mbigpXG4gIGNvbnN0IGdldE11dGF0aW9uVHlwZSA9IGplc3QuZm4oKVxuICBjb25zdCBnZXRTdWJzY3JpcHRpb25UeXBlID0gamVzdC5mbigpXG5cbiAgY29uc3QgbW9ja1NjaGVtYSA9IHtcbiAgICBnZXRRdWVyeVR5cGUsXG4gICAgZ2V0TXV0YXRpb25UeXBlLFxuICAgIGdldFN1YnNjcmlwdGlvblR5cGUsXG4gIH1cbiAgY29uc3QgbWF4RGVwdGggPSA0XG4gIGNvbnN0IGdlbmVyYXRlT3B0aW9uOiBHUUxEb2NzR2VuT3B0aW9ucyA9IHsgdXNlRXh0ZXJuYWxGcmFnbWVudEZvclMzT2JqZWN0OiB0cnVlIH1cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgamVzdC5yZXNldEFsbE1vY2tzKClcbiAgICBnZXRRdWVyeVR5cGUubW9ja1JldHVyblZhbHVlKCdRVUVSWV9UWVBFJylcbiAgICBnZXRNdXRhdGlvblR5cGUubW9ja1JldHVyblZhbHVlKCdNVVRBVElPTl9UWVBFJylcbiAgICBnZXRTdWJzY3JpcHRpb25UeXBlLm1vY2tSZXR1cm5WYWx1ZSgnU1VCU0NSSVBUSU9OX1RZUEUnKVxuXG4gICAgYnVpbGRDbGllbnRTY2hlbWEubW9ja1JldHVyblZhbHVlKG1vY2tTY2hlbWEpXG4gICAgZ2VuZXJhdGVRdWVyaWVzLm1vY2tSZXR1cm5WYWx1ZSgnTU9DS19HRU5FUkFURURfUVVFUlknKVxuICAgIGdlbmVyYXRlTXV0YXRpb25zLm1vY2tSZXR1cm5WYWx1ZSgnTU9DS19HRU5FUkFURURfTVVUQVRJT04nKVxuICAgIGdlbmVyYXRlU3Vic2NyaXB0aW9ucy5tb2NrUmV0dXJuVmFsdWUoJ01PQ0tfR0VORVJBVEVEX1NVQlNDUklQVElPTicpXG4gIH0pXG5cbiAgaXQoJ3Nob3VsZCBidWlsZCB0aGUgY2xpZW50IHNjaGVtYSBmcm9tIHNjaGVtYSBkb2N1bWVudCcsICgpID0+IHtcbiAgICBnZW5lcmF0ZShNT0NLX1NDSEVNQV9ET0MsIG1heERlcHRoLCBnZW5lcmF0ZU9wdGlvbilcbiAgICBleHBlY3QoYnVpbGRDbGllbnRTY2hlbWEpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKE1PQ0tfU0NIRU1BX0RPQylcbiAgfSlcblxuICBpdCgnc2hvdWxkIGdlbmVyYXRlIG9wZXJhdGlvbnMgdXNpbmcgdGhlIGhlbHBlciBtZXRob2RzJywgKCkgPT4ge1xuICAgIGdlbmVyYXRlKE1PQ0tfU0NIRU1BX0RPQywgbWF4RGVwdGgsIGdlbmVyYXRlT3B0aW9uKVxuICAgIGV4cGVjdChnZW5lcmF0ZVF1ZXJpZXMpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgbW9ja1NjaGVtYS5nZXRRdWVyeVR5cGUoKSxcbiAgICAgIG1vY2tTY2hlbWEsXG4gICAgICBtYXhEZXB0aCxcbiAgICAgIGdlbmVyYXRlT3B0aW9uXG4gICAgKVxuICAgIGV4cGVjdChnZW5lcmF0ZU11dGF0aW9ucykudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICBtb2NrU2NoZW1hLmdldE11dGF0aW9uVHlwZSgpLFxuICAgICAgbW9ja1NjaGVtYSxcbiAgICAgIG1heERlcHRoLFxuICAgICAgZ2VuZXJhdGVPcHRpb25cbiAgICApXG4gICAgZXhwZWN0KGdlbmVyYXRlU3Vic2NyaXB0aW9ucykudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICBtb2NrU2NoZW1hLmdldFN1YnNjcmlwdGlvblR5cGUoKSxcbiAgICAgIG1vY2tTY2hlbWEsXG4gICAgICBtYXhEZXB0aCxcbiAgICAgIGdlbmVyYXRlT3B0aW9uXG4gICAgKVxuICB9KVxuXG4gIGl0KCdzaG91bGQgY2FsbCB0aGUgaW5kaXZpZHVhbCBvcGVyYXRpb24gZ2VuZXJhdG9yIGFuZCByZXR1cm4gdGhlIHZhbHVlIGZyb20gdGhlbScsICgpID0+IHtcbiAgICBleHBlY3QoZ2VuZXJhdGUoTU9DS19TQ0hFTUFfRE9DLCBtYXhEZXB0aCwgZ2VuZXJhdGVPcHRpb24pKS50b0VxdWFsKHtcbiAgICAgIHF1ZXJpZXM6ICdNT0NLX0dFTkVSQVRFRF9RVUVSWScsXG4gICAgICBzdWJzY3JpcHRpb25zOiAnTU9DS19HRU5FUkFURURfU1VCU0NSSVBUSU9OJyxcbiAgICAgIG11dGF0aW9uczogJ01PQ0tfR0VORVJBVEVEX01VVEFUSU9OJyxcbiAgICB9KVxuICB9KVxufSlcbiJdfQ==");"use strict";




jest.mock('../../src/generator/generateAllOperations');
jest.mock('graphql');Object.defineProperty(exports, "__esModule", { value: true });const generate_1 = require("../../src/generator/generate");const generateAllOperations_1 = require("../../src/generator/generateAllOperations");const graphql_1 = require("graphql");
describe('generate', () => {
    const MOCK_SCHEMA_DOC = 'MOCK_SCHEMA_DOC';
    const getQueryType = jest.fn();
    const getMutationType = jest.fn();
    const getSubscriptionType = jest.fn();
    const mockSchema = {
        getQueryType,
        getMutationType,
        getSubscriptionType };

    const maxDepth = 4;
    const generateOption = { useExternalFragmentForS3Object: true };
    beforeEach(() => {
        jest.resetAllMocks();
        getQueryType.mockReturnValue('QUERY_TYPE');
        getMutationType.mockReturnValue('MUTATION_TYPE');
        getSubscriptionType.mockReturnValue('SUBSCRIPTION_TYPE');
        graphql_1.buildClientSchema.mockReturnValue(mockSchema);
        generateAllOperations_1.generateQueries.mockReturnValue('MOCK_GENERATED_QUERY');
        generateAllOperations_1.generateMutations.mockReturnValue('MOCK_GENERATED_MUTATION');
        generateAllOperations_1.generateSubscriptions.mockReturnValue('MOCK_GENERATED_SUBSCRIPTION');
    });
    it('should build the client schema from schema document', () => {
        generate_1.default(MOCK_SCHEMA_DOC, maxDepth, generateOption);
        expect(graphql_1.buildClientSchema).toHaveBeenCalledWith(MOCK_SCHEMA_DOC);
    });
    it('should generate operations using the helper methods', () => {
        generate_1.default(MOCK_SCHEMA_DOC, maxDepth, generateOption);
        expect(generateAllOperations_1.generateQueries).toHaveBeenCalledWith(mockSchema.getQueryType(), mockSchema, maxDepth, generateOption);
        expect(generateAllOperations_1.generateMutations).toHaveBeenCalledWith(mockSchema.getMutationType(), mockSchema, maxDepth, generateOption);
        expect(generateAllOperations_1.generateSubscriptions).toHaveBeenCalledWith(mockSchema.getSubscriptionType(), mockSchema, maxDepth, generateOption);
    });
    it('should call the individual operation generator and return the value from them', () => {
        expect(generate_1.default(MOCK_SCHEMA_DOC, maxDepth, generateOption)).toEqual({
            queries: 'MOCK_GENERATED_QUERY',
            subscriptions: 'MOCK_GENERATED_SUBSCRIPTION',
            mutations: 'MOCK_GENERATED_MUTATION' });

    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdlbmVyYXRlLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFTQSxLQUFLLElBQUwsQ0FBVSwyQ0FBVjtBQUNBLEtBQUssSUFBTCxDQUFVLFNBQVYsRSw4REFWQSxNQUFBLGFBQUEsUUFBQSw4QkFBQSxDQUFBLENBQ0EsTUFBQSwwQkFBQSxRQUFBLDJDQUFBLENBQUEsQ0FLQSxNQUFBLFlBQUEsUUFBQSxTQUFBLENBQUE7QUFLQSxTQUFTLFVBQVQsRUFBcUIsTUFBSztBQUN4QixVQUFNLGtCQUFrQixpQkFBeEI7QUFDQSxVQUFNLGVBQWUsS0FBSyxFQUFMLEVBQXJCO0FBQ0EsVUFBTSxrQkFBa0IsS0FBSyxFQUFMLEVBQXhCO0FBQ0EsVUFBTSxzQkFBc0IsS0FBSyxFQUFMLEVBQTVCO0FBRUEsVUFBTSxhQUFhO0FBQ2pCLG9CQURpQjtBQUVqQix1QkFGaUI7QUFHakIsMkJBSGlCLEVBQW5COztBQUtBLFVBQU0sV0FBVyxDQUFqQjtBQUNBLFVBQU0saUJBQW9DLEVBQUUsZ0NBQWdDLElBQWxDLEVBQTFDO0FBQ0EsZUFBVyxNQUFLO0FBQ2QsYUFBSyxhQUFMO0FBQ0EscUJBQWEsZUFBYixDQUE2QixZQUE3QjtBQUNBLHdCQUFnQixlQUFoQixDQUFnQyxlQUFoQztBQUNBLDRCQUFvQixlQUFwQixDQUFvQyxtQkFBcEM7QUFFQSxrQkFBQSxpQkFBQSxDQUFrQixlQUFsQixDQUFrQyxVQUFsQztBQUNBLGdDQUFBLGVBQUEsQ0FBZ0IsZUFBaEIsQ0FBZ0Msc0JBQWhDO0FBQ0EsZ0NBQUEsaUJBQUEsQ0FBa0IsZUFBbEIsQ0FBa0MseUJBQWxDO0FBQ0EsZ0NBQUEscUJBQUEsQ0FBc0IsZUFBdEIsQ0FBc0MsNkJBQXRDO0FBQ0QsS0FWRDtBQVlBLE9BQUcscURBQUgsRUFBMEQsTUFBSztBQUM3RCxtQkFBQSxPQUFBLENBQVMsZUFBVCxFQUEwQixRQUExQixFQUFvQyxjQUFwQztBQUNBLGVBQU8sVUFBQSxpQkFBUCxFQUEwQixvQkFBMUIsQ0FBK0MsZUFBL0M7QUFDRCxLQUhEO0FBS0EsT0FBRyxxREFBSCxFQUEwRCxNQUFLO0FBQzdELG1CQUFBLE9BQUEsQ0FBUyxlQUFULEVBQTBCLFFBQTFCLEVBQW9DLGNBQXBDO0FBQ0EsZUFBTyx3QkFBQSxlQUFQLEVBQXdCLG9CQUF4QixDQUNFLFdBQVcsWUFBWCxFQURGLEVBRUUsVUFGRixFQUdFLFFBSEYsRUFJRSxjQUpGO0FBTUEsZUFBTyx3QkFBQSxpQkFBUCxFQUEwQixvQkFBMUIsQ0FDRSxXQUFXLGVBQVgsRUFERixFQUVFLFVBRkYsRUFHRSxRQUhGLEVBSUUsY0FKRjtBQU1BLGVBQU8sd0JBQUEscUJBQVAsRUFBOEIsb0JBQTlCLENBQ0UsV0FBVyxtQkFBWCxFQURGLEVBRUUsVUFGRixFQUdFLFFBSEYsRUFJRSxjQUpGO0FBTUQsS0FwQkQ7QUFzQkEsT0FBRywrRUFBSCxFQUFvRixNQUFLO0FBQ3ZGLGVBQU8sV0FBQSxPQUFBLENBQVMsZUFBVCxFQUEwQixRQUExQixFQUFvQyxjQUFwQyxDQUFQLEVBQTRELE9BQTVELENBQW9FO0FBQ2xFLHFCQUFTLHNCQUR5RDtBQUVsRSwyQkFBZSw2QkFGbUQ7QUFHbEUsdUJBQVcseUJBSHVELEVBQXBFOztBQUtELEtBTkQ7QUFPRCxDQTNERCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBnZW5lcmF0ZSBmcm9tICcuLi8uLi9zcmMvZ2VuZXJhdG9yL2dlbmVyYXRlJ1xuaW1wb3J0IHtcbiAgZ2VuZXJhdGVRdWVyaWVzLFxuICBnZW5lcmF0ZU11dGF0aW9ucyxcbiAgZ2VuZXJhdGVTdWJzY3JpcHRpb25zLFxufSBmcm9tICcuLi8uLi9zcmMvZ2VuZXJhdG9yL2dlbmVyYXRlQWxsT3BlcmF0aW9ucydcbmltcG9ydCB7IGJ1aWxkQ2xpZW50U2NoZW1hIH0gZnJvbSAnZ3JhcGhxbCdcbmltcG9ydCB7IEdRTERvY3NHZW5PcHRpb25zIH0gZnJvbSAnLi4vLi4vc3JjL2dlbmVyYXRvci90eXBlcydcblxuamVzdC5tb2NrKCcuLi8uLi9zcmMvZ2VuZXJhdG9yL2dlbmVyYXRlQWxsT3BlcmF0aW9ucycpXG5qZXN0Lm1vY2soJ2dyYXBocWwnKVxuZGVzY3JpYmUoJ2dlbmVyYXRlJywgKCkgPT4ge1xuICBjb25zdCBNT0NLX1NDSEVNQV9ET0MgPSAnTU9DS19TQ0hFTUFfRE9DJ1xuICBjb25zdCBnZXRRdWVyeVR5cGUgPSBqZXN0LmZuKClcbiAgY29uc3QgZ2V0TXV0YXRpb25UeXBlID0gamVzdC5mbigpXG4gIGNvbnN0IGdldFN1YnNjcmlwdGlvblR5cGUgPSBqZXN0LmZuKClcblxuICBjb25zdCBtb2NrU2NoZW1hID0ge1xuICAgIGdldFF1ZXJ5VHlwZSxcbiAgICBnZXRNdXRhdGlvblR5cGUsXG4gICAgZ2V0U3Vic2NyaXB0aW9uVHlwZSxcbiAgfVxuICBjb25zdCBtYXhEZXB0aCA9IDRcbiAgY29uc3QgZ2VuZXJhdGVPcHRpb246IEdRTERvY3NHZW5PcHRpb25zID0geyB1c2VFeHRlcm5hbEZyYWdtZW50Rm9yUzNPYmplY3Q6IHRydWUgfVxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBqZXN0LnJlc2V0QWxsTW9ja3MoKVxuICAgIGdldFF1ZXJ5VHlwZS5tb2NrUmV0dXJuVmFsdWUoJ1FVRVJZX1RZUEUnKVxuICAgIGdldE11dGF0aW9uVHlwZS5tb2NrUmV0dXJuVmFsdWUoJ01VVEFUSU9OX1RZUEUnKVxuICAgIGdldFN1YnNjcmlwdGlvblR5cGUubW9ja1JldHVyblZhbHVlKCdTVUJTQ1JJUFRJT05fVFlQRScpXG5cbiAgICBidWlsZENsaWVudFNjaGVtYS5tb2NrUmV0dXJuVmFsdWUobW9ja1NjaGVtYSlcbiAgICBnZW5lcmF0ZVF1ZXJpZXMubW9ja1JldHVyblZhbHVlKCdNT0NLX0dFTkVSQVRFRF9RVUVSWScpXG4gICAgZ2VuZXJhdGVNdXRhdGlvbnMubW9ja1JldHVyblZhbHVlKCdNT0NLX0dFTkVSQVRFRF9NVVRBVElPTicpXG4gICAgZ2VuZXJhdGVTdWJzY3JpcHRpb25zLm1vY2tSZXR1cm5WYWx1ZSgnTU9DS19HRU5FUkFURURfU1VCU0NSSVBUSU9OJylcbiAgfSlcblxuICBpdCgnc2hvdWxkIGJ1aWxkIHRoZSBjbGllbnQgc2NoZW1hIGZyb20gc2NoZW1hIGRvY3VtZW50JywgKCkgPT4ge1xuICAgIGdlbmVyYXRlKE1PQ0tfU0NIRU1BX0RPQywgbWF4RGVwdGgsIGdlbmVyYXRlT3B0aW9uKVxuICAgIGV4cGVjdChidWlsZENsaWVudFNjaGVtYSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoTU9DS19TQ0hFTUFfRE9DKVxuICB9KVxuXG4gIGl0KCdzaG91bGQgZ2VuZXJhdGUgb3BlcmF0aW9ucyB1c2luZyB0aGUgaGVscGVyIG1ldGhvZHMnLCAoKSA9PiB7XG4gICAgZ2VuZXJhdGUoTU9DS19TQ0hFTUFfRE9DLCBtYXhEZXB0aCwgZ2VuZXJhdGVPcHRpb24pXG4gICAgZXhwZWN0KGdlbmVyYXRlUXVlcmllcykudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICBtb2NrU2NoZW1hLmdldFF1ZXJ5VHlwZSgpLFxuICAgICAgbW9ja1NjaGVtYSxcbiAgICAgIG1heERlcHRoLFxuICAgICAgZ2VuZXJhdGVPcHRpb25cbiAgICApXG4gICAgZXhwZWN0KGdlbmVyYXRlTXV0YXRpb25zKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgIG1vY2tTY2hlbWEuZ2V0TXV0YXRpb25UeXBlKCksXG4gICAgICBtb2NrU2NoZW1hLFxuICAgICAgbWF4RGVwdGgsXG4gICAgICBnZW5lcmF0ZU9wdGlvblxuICAgIClcbiAgICBleHBlY3QoZ2VuZXJhdGVTdWJzY3JpcHRpb25zKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgIG1vY2tTY2hlbWEuZ2V0U3Vic2NyaXB0aW9uVHlwZSgpLFxuICAgICAgbW9ja1NjaGVtYSxcbiAgICAgIG1heERlcHRoLFxuICAgICAgZ2VuZXJhdGVPcHRpb25cbiAgICApXG4gIH0pXG5cbiAgaXQoJ3Nob3VsZCBjYWxsIHRoZSBpbmRpdmlkdWFsIG9wZXJhdGlvbiBnZW5lcmF0b3IgYW5kIHJldHVybiB0aGUgdmFsdWUgZnJvbSB0aGVtJywgKCkgPT4ge1xuICAgIGV4cGVjdChnZW5lcmF0ZShNT0NLX1NDSEVNQV9ET0MsIG1heERlcHRoLCBnZW5lcmF0ZU9wdGlvbikpLnRvRXF1YWwoe1xuICAgICAgcXVlcmllczogJ01PQ0tfR0VORVJBVEVEX1FVRVJZJyxcbiAgICAgIHN1YnNjcmlwdGlvbnM6ICdNT0NLX0dFTkVSQVRFRF9TVUJTQ1JJUFRJT04nLFxuICAgICAgbXV0YXRpb25zOiAnTU9DS19HRU5FUkFURURfTVVUQVRJT04nLFxuICAgIH0pXG4gIH0pXG59KVxuIl0sInNvdXJjZVJvb3QiOiIvYy9Vc2Vycy9TYW5kcm8vcmVwby9hbXBsaWZ5LWNsaS9wYWNrYWdlcy9hbXBsaWZ5LWdyYXBocWwtZG9jcy1nZW5lcmF0b3Ivc3JjLyJ9