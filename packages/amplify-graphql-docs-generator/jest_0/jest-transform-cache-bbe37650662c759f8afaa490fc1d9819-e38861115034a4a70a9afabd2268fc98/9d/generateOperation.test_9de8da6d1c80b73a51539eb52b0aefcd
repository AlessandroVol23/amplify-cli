a5602edcfed497391849c934fa9ab1c0
'use strict';require('ts-jest').install("/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-docs-generator/__tests__/generator/generateOperation.test.ts", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst generateOperation_1 = require(\"../../src/generator/generateOperation\");\nconst getArgs_1 = require(\"../../src/generator/getArgs\");\nconst getBody_1 = require(\"../../src/generator/getBody\");\njest.mock('../../src/generator/getArgs');\njest.mock('../../src/generator/getBody');\nconst maxDepth = 4;\nconst generateOption = { useExternalFragmentForS3Object: true };\ndescribe('generateOperation', () => {\n    beforeEach(() => {\n        jest.resetAllMocks();\n        getArgs_1.default.mockReturnValue(['MOCK_ARG']);\n        getBody_1.default.mockReturnValue('MOCK_BODY');\n    });\n    it('should generate operation', () => {\n        const op = {\n            args: ['arg1'],\n        };\n        const doc = 'MOCK_DOCUMENT';\n        expect(generateOperation_1.default(op, 'MOCK_DOCUMENT', maxDepth, generateOption)).toEqual({\n            args: ['MOCK_ARG'],\n            body: 'MOCK_BODY',\n        });\n        expect(getArgs_1.default).toHaveBeenCalledWith(op.args);\n        expect(getBody_1.default).toBeCalledWith(op, doc, maxDepth, generateOption);\n    });\n});\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGVPcGVyYXRpb24udGVzdC5qcyIsInNvdXJjZVJvb3QiOiIvYy9Vc2Vycy9TYW5kcm8vcmVwby9hbXBsaWZ5LWNsaS9wYWNrYWdlcy9hbXBsaWZ5LWdyYXBocWwtZG9jcy1nZW5lcmF0b3Ivc3JjLyIsInNvdXJjZXMiOlsiZ2VuZXJhdGVPcGVyYXRpb24udGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZFQUFxRTtBQUNyRSx5REFBaUQ7QUFDakQseURBQWlEO0FBR2pELElBQUksQ0FBQyxJQUFJLENBQUMsNkJBQTZCLENBQUMsQ0FBQTtBQUN4QyxJQUFJLENBQUMsSUFBSSxDQUFDLDZCQUE2QixDQUFDLENBQUE7QUFFeEMsTUFBTSxRQUFRLEdBQUcsQ0FBQyxDQUFBO0FBQ2xCLE1BQU0sY0FBYyxHQUFzQixFQUFFLDhCQUE4QixFQUFFLElBQUksRUFBRSxDQUFBO0FBQ2xGLFFBQVEsQ0FBQyxtQkFBbUIsRUFBRSxHQUFHLEVBQUU7SUFDakMsVUFBVSxDQUFDLEdBQUcsRUFBRTtRQUNkLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQTtRQUNwQixpQkFBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUE7UUFDckMsaUJBQU8sQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDLENBQUE7SUFDdEMsQ0FBQyxDQUFDLENBQUE7SUFFRixFQUFFLENBQUMsMkJBQTJCLEVBQUUsR0FBRyxFQUFFO1FBQ25DLE1BQU0sRUFBRSxHQUFHO1lBQ1QsSUFBSSxFQUFFLENBQUMsTUFBTSxDQUFDO1NBQ2YsQ0FBQTtRQUNELE1BQU0sR0FBRyxHQUFHLGVBQWUsQ0FBQTtRQUMzQixNQUFNLENBQUMsMkJBQWlCLENBQUMsRUFBRSxFQUFFLGVBQWUsRUFBRSxRQUFRLEVBQUUsY0FBYyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7WUFDL0UsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDO1lBQ2xCLElBQUksRUFBRSxXQUFXO1NBQ2xCLENBQUMsQ0FBQTtRQUVGLE1BQU0sQ0FBQyxpQkFBTyxDQUFDLENBQUMsb0JBQW9CLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQzdDLE1BQU0sQ0FBQyxpQkFBTyxDQUFDLENBQUMsY0FBYyxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLGNBQWMsQ0FBQyxDQUFBO0lBQ25FLENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZ2VuZXJhdGVPcGVyYXRpb24gZnJvbSAnLi4vLi4vc3JjL2dlbmVyYXRvci9nZW5lcmF0ZU9wZXJhdGlvbidcbmltcG9ydCBnZXRBcmdzIGZyb20gJy4uLy4uL3NyYy9nZW5lcmF0b3IvZ2V0QXJncydcbmltcG9ydCBnZXRCb2R5IGZyb20gJy4uLy4uL3NyYy9nZW5lcmF0b3IvZ2V0Qm9keSdcbmltcG9ydCB7IEdRTERvY3NHZW5PcHRpb25zIH0gZnJvbSAnLi4vLi4vc3JjL2dlbmVyYXRvci90eXBlcyc7XG5cbmplc3QubW9jaygnLi4vLi4vc3JjL2dlbmVyYXRvci9nZXRBcmdzJylcbmplc3QubW9jaygnLi4vLi4vc3JjL2dlbmVyYXRvci9nZXRCb2R5JylcblxuY29uc3QgbWF4RGVwdGggPSA0XG5jb25zdCBnZW5lcmF0ZU9wdGlvbjogR1FMRG9jc0dlbk9wdGlvbnMgPSB7IHVzZUV4dGVybmFsRnJhZ21lbnRGb3JTM09iamVjdDogdHJ1ZSB9XG5kZXNjcmliZSgnZ2VuZXJhdGVPcGVyYXRpb24nLCAoKSA9PiB7XG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGplc3QucmVzZXRBbGxNb2NrcygpXG4gICAgZ2V0QXJncy5tb2NrUmV0dXJuVmFsdWUoWydNT0NLX0FSRyddKVxuICAgIGdldEJvZHkubW9ja1JldHVyblZhbHVlKCdNT0NLX0JPRFknKVxuICB9KVxuXG4gIGl0KCdzaG91bGQgZ2VuZXJhdGUgb3BlcmF0aW9uJywgKCkgPT4ge1xuICAgIGNvbnN0IG9wID0ge1xuICAgICAgYXJnczogWydhcmcxJ10sXG4gICAgfVxuICAgIGNvbnN0IGRvYyA9ICdNT0NLX0RPQ1VNRU5UJ1xuICAgIGV4cGVjdChnZW5lcmF0ZU9wZXJhdGlvbihvcCwgJ01PQ0tfRE9DVU1FTlQnLCBtYXhEZXB0aCwgZ2VuZXJhdGVPcHRpb24pKS50b0VxdWFsKHtcbiAgICAgIGFyZ3M6IFsnTU9DS19BUkcnXSxcbiAgICAgIGJvZHk6ICdNT0NLX0JPRFknLFxuICAgIH0pXG5cbiAgICBleHBlY3QoZ2V0QXJncykudG9IYXZlQmVlbkNhbGxlZFdpdGgob3AuYXJncylcbiAgICBleHBlY3QoZ2V0Qm9keSkudG9CZUNhbGxlZFdpdGgob3AsIGRvYywgbWF4RGVwdGgsIGdlbmVyYXRlT3B0aW9uKVxuICB9KVxufSlcbiJdfQ==");"use strict";




jest.mock('../../src/generator/getArgs');
jest.mock('../../src/generator/getBody');Object.defineProperty(exports, "__esModule", { value: true });const generateOperation_1 = require("../../src/generator/generateOperation");const getArgs_1 = require("../../src/generator/getArgs");const getBody_1 = require("../../src/generator/getBody");
const maxDepth = 4;
const generateOption = { useExternalFragmentForS3Object: true };
describe('generateOperation', () => {
    beforeEach(() => {
        jest.resetAllMocks();
        getArgs_1.default.mockReturnValue(['MOCK_ARG']);
        getBody_1.default.mockReturnValue('MOCK_BODY');
    });
    it('should generate operation', () => {
        const op = {
            args: ['arg1'] };

        const doc = 'MOCK_DOCUMENT';
        expect(generateOperation_1.default(op, 'MOCK_DOCUMENT', maxDepth, generateOption)).toEqual({
            args: ['MOCK_ARG'],
            body: 'MOCK_BODY' });

        expect(getArgs_1.default).toHaveBeenCalledWith(op.args);
        expect(getBody_1.default).toBeCalledWith(op, doc, maxDepth, generateOption);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdlbmVyYXRlT3BlcmF0aW9uLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFLQSxLQUFLLElBQUwsQ0FBVSw2QkFBVjtBQUNBLEtBQUssSUFBTCxDQUFVLDZCQUFWLEUsOERBTkEsTUFBQSxzQkFBQSxRQUFBLHVDQUFBLENBQUEsQ0FDQSxNQUFBLFlBQUEsUUFBQSw2QkFBQSxDQUFBLENBQ0EsTUFBQSxZQUFBLFFBQUEsNkJBQUEsQ0FBQTtBQU1BLE1BQU0sV0FBVyxDQUFqQjtBQUNBLE1BQU0saUJBQW9DLEVBQUUsZ0NBQWdDLElBQWxDLEVBQTFDO0FBQ0EsU0FBUyxtQkFBVCxFQUE4QixNQUFLO0FBQ2pDLGVBQVcsTUFBSztBQUNkLGFBQUssYUFBTDtBQUNBLGtCQUFBLE9BQUEsQ0FBUSxlQUFSLENBQXdCLENBQUMsVUFBRCxDQUF4QjtBQUNBLGtCQUFBLE9BQUEsQ0FBUSxlQUFSLENBQXdCLFdBQXhCO0FBQ0QsS0FKRDtBQU1BLE9BQUcsMkJBQUgsRUFBZ0MsTUFBSztBQUNuQyxjQUFNLEtBQUs7QUFDVCxrQkFBTSxDQUFDLE1BQUQsQ0FERyxFQUFYOztBQUdBLGNBQU0sTUFBTSxlQUFaO0FBQ0EsZUFBTyxvQkFBQSxPQUFBLENBQWtCLEVBQWxCLEVBQXNCLGVBQXRCLEVBQXVDLFFBQXZDLEVBQWlELGNBQWpELENBQVAsRUFBeUUsT0FBekUsQ0FBaUY7QUFDL0Usa0JBQU0sQ0FBQyxVQUFELENBRHlFO0FBRS9FLGtCQUFNLFdBRnlFLEVBQWpGOztBQUtBLGVBQU8sVUFBQSxPQUFQLEVBQWdCLG9CQUFoQixDQUFxQyxHQUFHLElBQXhDO0FBQ0EsZUFBTyxVQUFBLE9BQVAsRUFBZ0IsY0FBaEIsQ0FBK0IsRUFBL0IsRUFBbUMsR0FBbkMsRUFBd0MsUUFBeEMsRUFBa0QsY0FBbEQ7QUFDRCxLQVpEO0FBYUQsQ0FwQkQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZ2VuZXJhdGVPcGVyYXRpb24gZnJvbSAnLi4vLi4vc3JjL2dlbmVyYXRvci9nZW5lcmF0ZU9wZXJhdGlvbidcbmltcG9ydCBnZXRBcmdzIGZyb20gJy4uLy4uL3NyYy9nZW5lcmF0b3IvZ2V0QXJncydcbmltcG9ydCBnZXRCb2R5IGZyb20gJy4uLy4uL3NyYy9nZW5lcmF0b3IvZ2V0Qm9keSdcbmltcG9ydCB7IEdRTERvY3NHZW5PcHRpb25zIH0gZnJvbSAnLi4vLi4vc3JjL2dlbmVyYXRvci90eXBlcyc7XG5cbmplc3QubW9jaygnLi4vLi4vc3JjL2dlbmVyYXRvci9nZXRBcmdzJylcbmplc3QubW9jaygnLi4vLi4vc3JjL2dlbmVyYXRvci9nZXRCb2R5JylcblxuY29uc3QgbWF4RGVwdGggPSA0XG5jb25zdCBnZW5lcmF0ZU9wdGlvbjogR1FMRG9jc0dlbk9wdGlvbnMgPSB7IHVzZUV4dGVybmFsRnJhZ21lbnRGb3JTM09iamVjdDogdHJ1ZSB9XG5kZXNjcmliZSgnZ2VuZXJhdGVPcGVyYXRpb24nLCAoKSA9PiB7XG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGplc3QucmVzZXRBbGxNb2NrcygpXG4gICAgZ2V0QXJncy5tb2NrUmV0dXJuVmFsdWUoWydNT0NLX0FSRyddKVxuICAgIGdldEJvZHkubW9ja1JldHVyblZhbHVlKCdNT0NLX0JPRFknKVxuICB9KVxuXG4gIGl0KCdzaG91bGQgZ2VuZXJhdGUgb3BlcmF0aW9uJywgKCkgPT4ge1xuICAgIGNvbnN0IG9wID0ge1xuICAgICAgYXJnczogWydhcmcxJ10sXG4gICAgfVxuICAgIGNvbnN0IGRvYyA9ICdNT0NLX0RPQ1VNRU5UJ1xuICAgIGV4cGVjdChnZW5lcmF0ZU9wZXJhdGlvbihvcCwgJ01PQ0tfRE9DVU1FTlQnLCBtYXhEZXB0aCwgZ2VuZXJhdGVPcHRpb24pKS50b0VxdWFsKHtcbiAgICAgIGFyZ3M6IFsnTU9DS19BUkcnXSxcbiAgICAgIGJvZHk6ICdNT0NLX0JPRFknLFxuICAgIH0pXG5cbiAgICBleHBlY3QoZ2V0QXJncykudG9IYXZlQmVlbkNhbGxlZFdpdGgob3AuYXJncylcbiAgICBleHBlY3QoZ2V0Qm9keSkudG9CZUNhbGxlZFdpdGgob3AsIGRvYywgbWF4RGVwdGgsIGdlbmVyYXRlT3B0aW9uKVxuICB9KVxufSlcbiJdLCJzb3VyY2VSb290IjoiL2MvVXNlcnMvU2FuZHJvL3JlcG8vYW1wbGlmeS1jbGkvcGFja2FnZXMvYW1wbGlmeS1ncmFwaHFsLWRvY3MtZ2VuZXJhdG9yL3NyYy8ifQ==