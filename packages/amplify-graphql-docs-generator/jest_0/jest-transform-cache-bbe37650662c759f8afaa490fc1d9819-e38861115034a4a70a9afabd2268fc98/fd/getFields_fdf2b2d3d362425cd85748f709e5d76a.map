{"version":3,"sources":["getFields.ts"],"names":[],"mappings":";;AAAA,MAAA,8DAAA,QAAA,SAAA,CAAA,CAAA;AAYA,MAAA,kEAAA,QAAA,eAAA,CAAA,CAAA;AAEA,MAAA,8DAAA,QAAA,iBAAA,CAAA,CAAA;AACA,MAAA,iEAAA,QAAA,oBAAA,CAAA,CAAA;AAEA,SAAA,SAAA,CACE,KADF,EAEE,MAFF,EAGE,6DAAgB,CAAhB,CAHF,EAIE,OAJF,EAI4B;AAE1B,UAAM,8DAA6B,UAAA,OAAA,CAAQ,MAAM,IAAd,CAA7B,CAAN;AACA,UAAM,0EAAwB,6DAAQ,8BAAR,0DAA0C,aAAA,OAAA,CAAW,SAAX,CAA1C,CAAxB,CAAN;AACA,UAAM,8DACJ,sDAAC,qBAAD,MAA2B,gEAAA,YAAA,CAAa,SAAb,2DAA2B,UAAA,eAAA,CAAgB,SAAhB,CAA3B,CAA3B;AACI,cAAU,SAAV,EADJ;AAEI,MAFJ,CADI,CAAN;AAKA,UAAM,iEACJ,+DAAA,eAAA,CAAgB,SAAhB,2DAA8B,UAAA,WAAA,CAAY,SAAZ,CAA9B;AACI,WAAO,gBAAP,CAAwB,SAAxB,CADJ;AAEI,MAFJ,CADI,CAAN,CAT0B;AAc1B,QAAI,8DAAQ,CAAR,0DAAa,EAAE,qBAAqB,UAAA,iBAAvB,CAAb,CAAJ,EAA4D;AAC1D;AACD,KAFD;AAIA,UAAM,4DAAkC,OAAO,IAAP,CAAY,SAAZ;AACrC,OADqC,CAChC,SAAD,IAAc;AACjB,cAAM,8DAAW,UAAU,SAAV,CAAX,CAAN,CADiB;AAEjB,eAAO,UAAU,QAAV,EAAoB,MAApB,EAA4B,QAAQ,CAApC,EAAuC,OAAvC,CAAP;AACD,KAJqC;AAKrC,UALqC,CAK7B,KAAD,IAAW,qFAAK,CALc,CAAlC,CAAN;AAMA,UAAM,+DAAwC,OAAO,IAAP,CAAY,YAAZ;AAC3C,OAD2C,CACtC,QAAD,IAAc,6FAAA,OAAA,CAAY,aAAa,QAAb,CAAZ,EAAoC,MAApC,EAA4C,KAA5C,EAAmD,MAAnD,EAA2D,IAA3D,EAAiE,KAAjE,EAAwE,OAAxE,EAAgF,CADvD;AAE3C,UAF2C,CAEnC,KAAD,IAAW,qFAAK,CAFoB,CAAxC,CAAN;AAIA;AACA;AA7B0B,qDA8B1B,IAAI,qBAAJ,EAA2B;AACzB,kBAAU,IAAV,CAAe,cAAA,OAAA,CAAY,SAAZ,EAA4C,MAA5C,EAAoD,KAApD,EAA2D,EAA3D,EAA+D,UAA/D,EAA2E,IAA3E,EAAiF,OAAjF,CAAf;AACD,KAFD,2DA9B0B;AAkC1B,WAAO;AACL,cAAM,MAAM,IADP;AAEL,cAFK;AAGL,iBAHK;AAIL,iBAAS,CAAC,EAAE,6DAAO,MAAP,0DAAiB,UAAU,MAA3B,CAAF,CAJL,EAAP;;AAMD,C;AA5CD,QAAA,OAAA,GAAA,SAAA","sourcesContent":["import {\n  GraphQLField,\n  GraphQLInterfaceType,\n  GraphQLObjectType,\n  GraphQLScalarType,\n  GraphQLSchema,\n  GraphQLUnionType,\n  GraphQLList,\n  isObjectType,\n  isInterfaceType,\n  isUnionType\n} from 'graphql'\nimport getFragment from './getFragment'\nimport { GQLConcreteType, GQLTemplateField, GQLTemplateFragment, GQLDocsGenOptions } from './types'\nimport getType from './utils/getType'\nimport isS3Object from './utils/isS3Object';\n\nexport default function getFields(\n  field: GraphQLField<any, any>,\n  schema: GraphQLSchema,\n  depth: number = 2,\n  options: GQLDocsGenOptions\n): GQLTemplateField {\n  const fieldType: GQLConcreteType = getType(field.type)\n  const renderS3FieldFragment = options.useExternalFragmentForS3Object && isS3Object(fieldType);\n  const subFields =\n    !renderS3FieldFragment && (isObjectType(fieldType) || isInterfaceType(fieldType))\n      ? fieldType.getFields()\n      : []\n\n  const subFragments: any =\n    isInterfaceType(fieldType) || isUnionType(fieldType)\n      ? schema.getPossibleTypes(fieldType)\n      : {};\n\n  if (depth < 1 && !(fieldType instanceof GraphQLScalarType)) {\n    return\n  }\n\n  const fields: Array<GQLTemplateField> = Object.keys(subFields)\n    .map((fieldName) => {\n      const subField = subFields[fieldName];\n      return getFields(subField, schema, depth - 1, options);\n    })\n    .filter((field) => field)\n  const fragments: Array<GQLTemplateFragment> = Object.keys(subFragments)\n    .map((fragment) => getFragment(subFragments[fragment], schema, depth, fields, null, false, options))\n    .filter((field) => field)\n\n  // Special treatment for S3 input\n  // Swift SDK needs S3 Object to have fragment\n  if (renderS3FieldFragment) {\n    fragments.push(getFragment(fieldType as GraphQLObjectType, schema, depth, [], 'S3Object', true, options));\n  }\n\n  return {\n    name: field.name,\n    fields,\n    fragments,\n    hasBody: !!(fields.length || fragments.length),\n  }\n}\n"],"sourceRoot":"/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-docs-generator/src/"}