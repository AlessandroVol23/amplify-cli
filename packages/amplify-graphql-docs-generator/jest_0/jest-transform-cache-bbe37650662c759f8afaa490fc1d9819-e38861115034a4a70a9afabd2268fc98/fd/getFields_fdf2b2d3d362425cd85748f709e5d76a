5ce56165b0abad84fe24579260d1cb2e
'use strict';
require('ts-jest').install("/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-docs-generator/src/generator/getFields.ts", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst graphql_1 = require(\"graphql\");\nconst getFragment_1 = require(\"./getFragment\");\nconst getType_1 = require(\"./utils/getType\");\nconst isS3Object_1 = require(\"./utils/isS3Object\");\nfunction getFields(field, schema, depth = 2, options) {\n    const fieldType = getType_1.default(field.type);\n    const renderS3FieldFragment = options.useExternalFragmentForS3Object && isS3Object_1.default(fieldType);\n    const subFields = !renderS3FieldFragment && (graphql_1.isObjectType(fieldType) || graphql_1.isInterfaceType(fieldType))\n        ? fieldType.getFields()\n        : [];\n    const subFragments = graphql_1.isInterfaceType(fieldType) || graphql_1.isUnionType(fieldType)\n        ? schema.getPossibleTypes(fieldType)\n        : {};\n    if (depth < 1 && !(fieldType instanceof graphql_1.GraphQLScalarType)) {\n        return;\n    }\n    const fields = Object.keys(subFields)\n        .map((fieldName) => {\n        const subField = subFields[fieldName];\n        return getFields(subField, schema, depth - 1, options);\n    })\n        .filter((field) => field);\n    const fragments = Object.keys(subFragments)\n        .map((fragment) => getFragment_1.default(subFragments[fragment], schema, depth, fields, null, false, options))\n        .filter((field) => field);\n    // Special treatment for S3 input\n    // Swift SDK needs S3 Object to have fragment\n    if (renderS3FieldFragment) {\n        fragments.push(getFragment_1.default(fieldType, schema, depth, [], 'S3Object', true, options));\n    }\n    return {\n        name: field.name,\n        fields,\n        fragments,\n        hasBody: !!(fields.length || fragments.length),\n    };\n}\nexports.default = getFields;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0RmllbGRzLmpzIiwic291cmNlUm9vdCI6Ii9jL1VzZXJzL1NhbmRyby9yZXBvL2FtcGxpZnktY2xpL3BhY2thZ2VzL2FtcGxpZnktZ3JhcGhxbC1kb2NzLWdlbmVyYXRvci9zcmMvIiwic291cmNlcyI6WyJnZXRGaWVsZHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxxQ0FXZ0I7QUFDaEIsK0NBQXVDO0FBRXZDLDZDQUFxQztBQUNyQyxtREFBNEM7QUFFNUMsbUJBQ0UsS0FBNkIsRUFDN0IsTUFBcUIsRUFDckIsUUFBZ0IsQ0FBQyxFQUNqQixPQUEwQjtJQUUxQixNQUFNLFNBQVMsR0FBb0IsaUJBQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDdEQsTUFBTSxxQkFBcUIsR0FBRyxPQUFPLENBQUMsOEJBQThCLElBQUksb0JBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUM5RixNQUFNLFNBQVMsR0FDYixDQUFDLHFCQUFxQixJQUFJLENBQUMsc0JBQVksQ0FBQyxTQUFTLENBQUMsSUFBSSx5QkFBZSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQy9FLENBQUMsQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFO1FBQ3ZCLENBQUMsQ0FBQyxFQUFFLENBQUE7SUFFUixNQUFNLFlBQVksR0FDaEIseUJBQWUsQ0FBQyxTQUFTLENBQUMsSUFBSSxxQkFBVyxDQUFDLFNBQVMsQ0FBQztRQUNsRCxDQUFDLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQztRQUNwQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBRVQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLFlBQVksMkJBQWlCLENBQUMsRUFBRTtRQUMxRCxPQUFNO0tBQ1A7SUFFRCxNQUFNLE1BQU0sR0FBNEIsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7U0FDM0QsR0FBRyxDQUFDLENBQUMsU0FBUyxFQUFFLEVBQUU7UUFDakIsTUFBTSxRQUFRLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3RDLE9BQU8sU0FBUyxDQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUUsS0FBSyxHQUFHLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN6RCxDQUFDLENBQUM7U0FDRCxNQUFNLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQzNCLE1BQU0sU0FBUyxHQUErQixNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQztTQUNwRSxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLHFCQUFXLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7U0FDbkcsTUFBTSxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUUzQixpQ0FBaUM7SUFDakMsNkNBQTZDO0lBQzdDLElBQUkscUJBQXFCLEVBQUU7UUFDekIsU0FBUyxDQUFDLElBQUksQ0FBQyxxQkFBVyxDQUFDLFNBQThCLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0tBQzNHO0lBRUQsT0FBTztRQUNMLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSTtRQUNoQixNQUFNO1FBQ04sU0FBUztRQUNULE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxJQUFJLFNBQVMsQ0FBQyxNQUFNLENBQUM7S0FDL0MsQ0FBQTtBQUNILENBQUM7QUE1Q0QsNEJBNENDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgR3JhcGhRTEZpZWxkLFxuICBHcmFwaFFMSW50ZXJmYWNlVHlwZSxcbiAgR3JhcGhRTE9iamVjdFR5cGUsXG4gIEdyYXBoUUxTY2FsYXJUeXBlLFxuICBHcmFwaFFMU2NoZW1hLFxuICBHcmFwaFFMVW5pb25UeXBlLFxuICBHcmFwaFFMTGlzdCxcbiAgaXNPYmplY3RUeXBlLFxuICBpc0ludGVyZmFjZVR5cGUsXG4gIGlzVW5pb25UeXBlXG59IGZyb20gJ2dyYXBocWwnXG5pbXBvcnQgZ2V0RnJhZ21lbnQgZnJvbSAnLi9nZXRGcmFnbWVudCdcbmltcG9ydCB7IEdRTENvbmNyZXRlVHlwZSwgR1FMVGVtcGxhdGVGaWVsZCwgR1FMVGVtcGxhdGVGcmFnbWVudCwgR1FMRG9jc0dlbk9wdGlvbnMgfSBmcm9tICcuL3R5cGVzJ1xuaW1wb3J0IGdldFR5cGUgZnJvbSAnLi91dGlscy9nZXRUeXBlJ1xuaW1wb3J0IGlzUzNPYmplY3QgZnJvbSAnLi91dGlscy9pc1MzT2JqZWN0JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0RmllbGRzKFxuICBmaWVsZDogR3JhcGhRTEZpZWxkPGFueSwgYW55PixcbiAgc2NoZW1hOiBHcmFwaFFMU2NoZW1hLFxuICBkZXB0aDogbnVtYmVyID0gMixcbiAgb3B0aW9uczogR1FMRG9jc0dlbk9wdGlvbnNcbik6IEdRTFRlbXBsYXRlRmllbGQge1xuICBjb25zdCBmaWVsZFR5cGU6IEdRTENvbmNyZXRlVHlwZSA9IGdldFR5cGUoZmllbGQudHlwZSlcbiAgY29uc3QgcmVuZGVyUzNGaWVsZEZyYWdtZW50ID0gb3B0aW9ucy51c2VFeHRlcm5hbEZyYWdtZW50Rm9yUzNPYmplY3QgJiYgaXNTM09iamVjdChmaWVsZFR5cGUpO1xuICBjb25zdCBzdWJGaWVsZHMgPVxuICAgICFyZW5kZXJTM0ZpZWxkRnJhZ21lbnQgJiYgKGlzT2JqZWN0VHlwZShmaWVsZFR5cGUpIHx8IGlzSW50ZXJmYWNlVHlwZShmaWVsZFR5cGUpKVxuICAgICAgPyBmaWVsZFR5cGUuZ2V0RmllbGRzKClcbiAgICAgIDogW11cblxuICBjb25zdCBzdWJGcmFnbWVudHM6IGFueSA9XG4gICAgaXNJbnRlcmZhY2VUeXBlKGZpZWxkVHlwZSkgfHwgaXNVbmlvblR5cGUoZmllbGRUeXBlKVxuICAgICAgPyBzY2hlbWEuZ2V0UG9zc2libGVUeXBlcyhmaWVsZFR5cGUpXG4gICAgICA6IHt9O1xuXG4gIGlmIChkZXB0aCA8IDEgJiYgIShmaWVsZFR5cGUgaW5zdGFuY2VvZiBHcmFwaFFMU2NhbGFyVHlwZSkpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIGNvbnN0IGZpZWxkczogQXJyYXk8R1FMVGVtcGxhdGVGaWVsZD4gPSBPYmplY3Qua2V5cyhzdWJGaWVsZHMpXG4gICAgLm1hcCgoZmllbGROYW1lKSA9PiB7XG4gICAgICBjb25zdCBzdWJGaWVsZCA9IHN1YkZpZWxkc1tmaWVsZE5hbWVdO1xuICAgICAgcmV0dXJuIGdldEZpZWxkcyhzdWJGaWVsZCwgc2NoZW1hLCBkZXB0aCAtIDEsIG9wdGlvbnMpO1xuICAgIH0pXG4gICAgLmZpbHRlcigoZmllbGQpID0+IGZpZWxkKVxuICBjb25zdCBmcmFnbWVudHM6IEFycmF5PEdRTFRlbXBsYXRlRnJhZ21lbnQ+ID0gT2JqZWN0LmtleXMoc3ViRnJhZ21lbnRzKVxuICAgIC5tYXAoKGZyYWdtZW50KSA9PiBnZXRGcmFnbWVudChzdWJGcmFnbWVudHNbZnJhZ21lbnRdLCBzY2hlbWEsIGRlcHRoLCBmaWVsZHMsIG51bGwsIGZhbHNlLCBvcHRpb25zKSlcbiAgICAuZmlsdGVyKChmaWVsZCkgPT4gZmllbGQpXG5cbiAgLy8gU3BlY2lhbCB0cmVhdG1lbnQgZm9yIFMzIGlucHV0XG4gIC8vIFN3aWZ0IFNESyBuZWVkcyBTMyBPYmplY3QgdG8gaGF2ZSBmcmFnbWVudFxuICBpZiAocmVuZGVyUzNGaWVsZEZyYWdtZW50KSB7XG4gICAgZnJhZ21lbnRzLnB1c2goZ2V0RnJhZ21lbnQoZmllbGRUeXBlIGFzIEdyYXBoUUxPYmplY3RUeXBlLCBzY2hlbWEsIGRlcHRoLCBbXSwgJ1MzT2JqZWN0JywgdHJ1ZSwgb3B0aW9ucykpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBmaWVsZC5uYW1lLFxuICAgIGZpZWxkcyxcbiAgICBmcmFnbWVudHMsXG4gICAgaGFzQm9keTogISEoZmllbGRzLmxlbmd0aCB8fCBmcmFnbWVudHMubGVuZ3RoKSxcbiAgfVxufVxuIl19");"use strict"; /* istanbul ignore next */var cov_2atysrsg19 = function () {
    var path = "/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-docs-generator/src/generator/getFields.ts",
        hash = "6dd1f462e66189d2a7e2314b8f315355af8564ac",
        Function = function () {}.constructor,
        global = new Function('return this')(),
        gcv = "__coverage__",
        coverageData = { path: "/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-docs-generator/src/generator/getFields.ts", statementMap: { "0": { start: { line: 2, column: 0 }, end: { line: 2, column: 62 } }, "1": { start: { line: 3, column: 18 }, end: { line: 3, column: 36 } }, "2": { start: { line: 4, column: 22 }, end: { line: 4, column: 46 } }, "3": { start: { line: 5, column: 18 }, end: { line: 5, column: 44 } }, "4": { start: { line: 6, column: 21 }, end: { line: 6, column: 50 } }, "5": { start: { line: 8, column: 22 }, end: { line: 8, column: 51 } }, "6": { start: { line: 9, column: 34 }, end: { line: 9, column: 107 } }, "7": { start: { line: 10, column: 22 }, end: { line: 12, column: 12 } }, "8": { start: { line: 13, column: 25 }, end: { line: 15, column: 12 } }, "9": { start: { line: 16, column: 4 }, end: { line: 18, column: 5 } }, "10": { start: { line: 17, column: 8 }, end: { line: 17, column: 15 } }, "11": { start: { line: 19, column: 19 }, end: { line: 24, column: 33 } }, "12": { start: { line: 21, column: 25 }, end: { line: 21, column: 45 } }, "13": { start: { line: 22, column: 8 }, end: { line: 22, column: 63 } }, "14": { start: { line: 24, column: 27 }, end: { line: 24, column: 32 } }, "15": { start: { line: 25, column: 22 }, end: { line: 27, column: 33 } }, "16": { start: { line: 26, column: 27 }, end: { line: 26, column: 117 } }, "17": { start: { line: 27, column: 27 }, end: { line: 27, column: 32 } }, "18": { start: { line: 30, column: 4 }, end: { line: 32, column: 5 } }, "19": { start: { line: 31, column: 8 }, end: { line: 31, column: 103 } }, "20": { start: { line: 33, column: 4 }, end: { line: 38, column: 6 } }, "21": { start: { line: 40, column: 0 }, end: { line: 40, column: 28 } } }, fnMap: { "0": { name: "getFields", decl: { start: { line: 7, column: 9 }, end: { line: 7, column: 18 } }, loc: { start: { line: 7, column: 54 }, end: { line: 39, column: 1 } }, line: 7 }, "1": { name: "(anonymous_1)", decl: { start: { line: 20, column: 13 }, end: { line: 20, column: 14 } }, loc: { start: { line: 20, column: 28 }, end: { line: 23, column: 5 } }, line: 20 }, "2": { name: "(anonymous_2)", decl: { start: { line: 24, column: 16 }, end: { line: 24, column: 17 } }, loc: { start: { line: 24, column: 27 }, end: { line: 24, column: 32 } }, line: 24 }, "3": { name: "(anonymous_3)", decl: { start: { line: 26, column: 13 }, end: { line: 26, column: 14 } }, loc: { start: { line: 26, column: 27 }, end: { line: 26, column: 117 } }, line: 26 }, "4": { name: "(anonymous_4)", decl: { start: { line: 27, column: 16 }, end: { line: 27, column: 17 } }, loc: { start: { line: 27, column: 27 }, end: { line: 27, column: 32 } }, line: 27 } }, branchMap: { "0": { loc: { start: { line: 7, column: 34 }, end: { line: 7, column: 43 } }, type: "default-arg", locations: [{ start: { line: 7, column: 42 }, end: { line: 7, column: 43 } }], line: 7 }, "1": { loc: { start: { line: 9, column: 34 }, end: { line: 9, column: 107 } }, type: "binary-expr", locations: [{ start: { line: 9, column: 34 }, end: { line: 9, column: 72 } }, { start: { line: 9, column: 76 }, end: { line: 9, column: 107 } }], line: 9 }, "2": { loc: { start: { line: 10, column: 22 }, end: { line: 12, column: 12 } }, type: "cond-expr", locations: [{ start: { line: 11, column: 10 }, end: { line: 11, column: 31 } }, { start: { line: 12, column: 10 }, end: { line: 12, column: 12 } }], line: 10 }, "3": { loc: { start: { line: 10, column: 22 }, end: { line: 10, column: 123 } }, type: "binary-expr", locations: [{ start: { line: 10, column: 22 }, end: { line: 10, column: 44 } }, { start: { line: 10, column: 49 }, end: { line: 10, column: 82 } }, { start: { line: 10, column: 86 }, end: { line: 10, column: 122 } }], line: 10 }, "4": { loc: { start: { line: 13, column: 25 }, end: { line: 15, column: 12 } }, type: "cond-expr", locations: [{ start: { line: 14, column: 10 }, end: { line: 14, column: 44 } }, { start: { line: 15, column: 10 }, end: { line: 15, column: 12 } }], line: 13 }, "5": { loc: { start: { line: 13, column: 25 }, end: { line: 13, column: 97 } }, type: "binary-expr", locations: [{ start: { line: 13, column: 25 }, end: { line: 13, column: 61 } }, { start: { line: 13, column: 65 }, end: { line: 13, column: 97 } }], line: 13 }, "6": { loc: { start: { line: 16, column: 4 }, end: { line: 18, column: 5 } }, type: "if", locations: [{ start: { line: 16, column: 4 }, end: { line: 18, column: 5 } }, { start: { line: 16, column: 4 }, end: { line: 18, column: 5 } }], line: 16 }, "7": { loc: { start: { line: 16, column: 8 }, end: { line: 16, column: 72 } }, type: "binary-expr", locations: [{ start: { line: 16, column: 8 }, end: { line: 16, column: 17 } }, { start: { line: 16, column: 21 }, end: { line: 16, column: 72 } }], line: 16 }, "8": { loc: { start: { line: 30, column: 4 }, end: { line: 32, column: 5 } }, type: "if", locations: [{ start: { line: 30, column: 4 }, end: { line: 32, column: 5 } }, { start: { line: 30, column: 4 }, end: { line: 32, column: 5 } }], line: 30 }, "9": { loc: { start: { line: 37, column: 20 }, end: { line: 37, column: 53 } }, type: "binary-expr", locations: [{ start: { line: 37, column: 20 }, end: { line: 37, column: 33 } }, { start: { line: 37, column: 37 }, end: { line: 37, column: 53 } }], line: 37 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0 }, b: { "0": [0], "1": [0, 0], "2": [0, 0], "3": [0, 0, 0], "4": [0, 0], "5": [0, 0], "6": [0, 0], "7": [0, 0], "8": [0, 0], "9": [0, 0] }, inputSourceMap: { version: 3, file: "getFields.js", sourceRoot: "/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-docs-generator/src/", sources: ["getFields.ts"], names: [], mappings: ";;AAAA,qCAWgB;AAChB,+CAAuC;AAEvC,6CAAqC;AACrC,mDAA4C;AAE5C,mBACE,KAA6B,EAC7B,MAAqB,EACrB,QAAgB,CAAC,EACjB,OAA0B;IAE1B,MAAM,SAAS,GAAoB,iBAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;IACtD,MAAM,qBAAqB,GAAG,OAAO,CAAC,8BAA8B,IAAI,oBAAU,CAAC,SAAS,CAAC,CAAC;IAC9F,MAAM,SAAS,GACb,CAAC,qBAAqB,IAAI,CAAC,sBAAY,CAAC,SAAS,CAAC,IAAI,yBAAe,CAAC,SAAS,CAAC,CAAC;QAC/E,CAAC,CAAC,SAAS,CAAC,SAAS,EAAE;QACvB,CAAC,CAAC,EAAE,CAAA;IAER,MAAM,YAAY,GAChB,yBAAe,CAAC,SAAS,CAAC,IAAI,qBAAW,CAAC,SAAS,CAAC;QAClD,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,SAAS,CAAC;QACpC,CAAC,CAAC,EAAE,CAAC;IAET,IAAI,KAAK,GAAG,CAAC,IAAI,CAAC,CAAC,SAAS,YAAY,2BAAiB,CAAC,EAAE;QAC1D,OAAM;KACP;IAED,MAAM,MAAM,GAA4B,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;SAC3D,GAAG,CAAC,CAAC,SAAS,EAAE,EAAE;QACjB,MAAM,QAAQ,GAAG,SAAS,CAAC,SAAS,CAAC,CAAC;QACtC,OAAO,SAAS,CAAC,QAAQ,EAAE,MAAM,EAAE,KAAK,GAAG,CAAC,EAAE,OAAO,CAAC,CAAC;IACzD,CAAC,CAAC;SACD,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,CAAA;IAC3B,MAAM,SAAS,GAA+B,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;SACpE,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,qBAAW,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;SACnG,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,CAAA;IAE3B,iCAAiC;IACjC,6CAA6C;IAC7C,IAAI,qBAAqB,EAAE;QACzB,SAAS,CAAC,IAAI,CAAC,qBAAW,CAAC,SAA8B,EAAE,MAAM,EAAE,KAAK,EAAE,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC;KAC3G;IAED,OAAO;QACL,IAAI,EAAE,KAAK,CAAC,IAAI;QAChB,MAAM;QACN,SAAS;QACT,OAAO,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,IAAI,SAAS,CAAC,MAAM,CAAC;KAC/C,CAAA;AACH,CAAC;AA5CD,4BA4CC", sourcesContent: ["import {\n  GraphQLField,\n  GraphQLInterfaceType,\n  GraphQLObjectType,\n  GraphQLScalarType,\n  GraphQLSchema,\n  GraphQLUnionType,\n  GraphQLList,\n  isObjectType,\n  isInterfaceType,\n  isUnionType\n} from 'graphql'\nimport getFragment from './getFragment'\nimport { GQLConcreteType, GQLTemplateField, GQLTemplateFragment, GQLDocsGenOptions } from './types'\nimport getType from './utils/getType'\nimport isS3Object from './utils/isS3Object';\n\nexport default function getFields(\n  field: GraphQLField<any, any>,\n  schema: GraphQLSchema,\n  depth: number = 2,\n  options: GQLDocsGenOptions\n): GQLTemplateField {\n  const fieldType: GQLConcreteType = getType(field.type)\n  const renderS3FieldFragment = options.useExternalFragmentForS3Object && isS3Object(fieldType);\n  const subFields =\n    !renderS3FieldFragment && (isObjectType(fieldType) || isInterfaceType(fieldType))\n      ? fieldType.getFields()\n      : []\n\n  const subFragments: any =\n    isInterfaceType(fieldType) || isUnionType(fieldType)\n      ? schema.getPossibleTypes(fieldType)\n      : {};\n\n  if (depth < 1 && !(fieldType instanceof GraphQLScalarType)) {\n    return\n  }\n\n  const fields: Array<GQLTemplateField> = Object.keys(subFields)\n    .map((fieldName) => {\n      const subField = subFields[fieldName];\n      return getFields(subField, schema, depth - 1, options);\n    })\n    .filter((field) => field)\n  const fragments: Array<GQLTemplateFragment> = Object.keys(subFragments)\n    .map((fragment) => getFragment(subFragments[fragment], schema, depth, fields, null, false, options))\n    .filter((field) => field)\n\n  // Special treatment for S3 input\n  // Swift SDK needs S3 Object to have fragment\n  if (renderS3FieldFragment) {\n    fragments.push(getFragment(fieldType as GraphQLObjectType, schema, depth, [], 'S3Object', true, options));\n  }\n\n  return {\n    name: field.name,\n    fields,\n    fragments,\n    hasBody: !!(fields.length || fragments.length),\n  }\n}\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
        coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
        return coverage[path];
    }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_2atysrsg19.s[0]++;
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = ( /* istanbul ignore next */cov_2atysrsg19.s[1]++, require("graphql"));
const getFragment_1 = ( /* istanbul ignore next */cov_2atysrsg19.s[2]++, require("./getFragment"));
const getType_1 = ( /* istanbul ignore next */cov_2atysrsg19.s[3]++, require("./utils/getType"));
const isS3Object_1 = ( /* istanbul ignore next */cov_2atysrsg19.s[4]++, require("./utils/isS3Object"));
function getFields(field, schema, depth = ( /* istanbul ignore next */cov_2atysrsg19.b[0][0]++, 2), options) {
    /* istanbul ignore next */cov_2atysrsg19.f[0]++;
    const fieldType = ( /* istanbul ignore next */cov_2atysrsg19.s[5]++, getType_1.default(field.type));
    const renderS3FieldFragment = ( /* istanbul ignore next */cov_2atysrsg19.s[6]++, /* istanbul ignore next */(cov_2atysrsg19.b[1][0]++, options.useExternalFragmentForS3Object) && ( /* istanbul ignore next */cov_2atysrsg19.b[1][1]++, isS3Object_1.default(fieldType)));
    const subFields = ( /* istanbul ignore next */cov_2atysrsg19.s[7]++, /* istanbul ignore next */(cov_2atysrsg19.b[3][0]++, !renderS3FieldFragment) && ( /* istanbul ignore next */(cov_2atysrsg19.b[3][1]++, graphql_1.isObjectType(fieldType)) || ( /* istanbul ignore next */cov_2atysrsg19.b[3][2]++, graphql_1.isInterfaceType(fieldType))) ? ( /* istanbul ignore next */cov_2atysrsg19.b[2][0]++, fieldType.getFields()) : ( /* istanbul ignore next */cov_2atysrsg19.b[2][1]++, []));
    const subFragments = ( /* istanbul ignore next */cov_2atysrsg19.s[8]++, /* istanbul ignore next */(cov_2atysrsg19.b[5][0]++, graphql_1.isInterfaceType(fieldType)) || ( /* istanbul ignore next */cov_2atysrsg19.b[5][1]++, graphql_1.isUnionType(fieldType)) ? ( /* istanbul ignore next */cov_2atysrsg19.b[4][0]++, schema.getPossibleTypes(fieldType)) : ( /* istanbul ignore next */cov_2atysrsg19.b[4][1]++, {})); /* istanbul ignore next */cov_2atysrsg19.s[9]++;
    if ( /* istanbul ignore next */(cov_2atysrsg19.b[7][0]++, depth < 1) && ( /* istanbul ignore next */cov_2atysrsg19.b[7][1]++, !(fieldType instanceof graphql_1.GraphQLScalarType))) {
        /* istanbul ignore next */cov_2atysrsg19.b[6][0]++;cov_2atysrsg19.s[10]++;
        return;
    } else /* istanbul ignore next */{
            cov_2atysrsg19.b[6][1]++;
        }
    const fields = ( /* istanbul ignore next */cov_2atysrsg19.s[11]++, Object.keys(subFields).map(fieldName => {
        /* istanbul ignore next */cov_2atysrsg19.f[1]++;
        const subField = ( /* istanbul ignore next */cov_2atysrsg19.s[12]++, subFields[fieldName]); /* istanbul ignore next */cov_2atysrsg19.s[13]++;
        return getFields(subField, schema, depth - 1, options);
    }).filter(field => {
        /* istanbul ignore next */cov_2atysrsg19.f[2]++;cov_2atysrsg19.s[14]++;return field;
    }));
    const fragments = ( /* istanbul ignore next */cov_2atysrsg19.s[15]++, Object.keys(subFragments).map(fragment => {
        /* istanbul ignore next */cov_2atysrsg19.f[3]++;cov_2atysrsg19.s[16]++;return getFragment_1.default(subFragments[fragment], schema, depth, fields, null, false, options);
    }).filter(field => {
        /* istanbul ignore next */cov_2atysrsg19.f[4]++;cov_2atysrsg19.s[17]++;return field;
    }));
    // Special treatment for S3 input
    // Swift SDK needs S3 Object to have fragment
    /* istanbul ignore next */cov_2atysrsg19.s[18]++;if (renderS3FieldFragment) {
        /* istanbul ignore next */cov_2atysrsg19.b[8][0]++;cov_2atysrsg19.s[19]++;
        fragments.push(getFragment_1.default(fieldType, schema, depth, [], 'S3Object', true, options));
    } else /* istanbul ignore next */{
            cov_2atysrsg19.b[8][1]++;
        }cov_2atysrsg19.s[20]++;
    return {
        name: field.name,
        fields,
        fragments,
        hasBody: !!( /* istanbul ignore next */(cov_2atysrsg19.b[9][0]++, fields.length) || ( /* istanbul ignore next */cov_2atysrsg19.b[9][1]++, fragments.length)) };
} /* istanbul ignore next */cov_2atysrsg19.s[21]++;
exports.default = getFields;