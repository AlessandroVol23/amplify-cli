{"version":3,"sources":["getType.test.ts"],"names":[],"mappings":";;AAAA,MAAA,YAAA,QAAA,sCAAA,CAAA;AACA,MAAA,YAAA,QAAA,SAAA,CAAA;AASA,SAAS,SAAT,EAAoB,MAAK;AACvB,UAAM,UAAU,IAAI,UAAA,iBAAJ,CAAsB;AACpC,cAAM,SAD8B;AAEpC,gBAAQ;AACN,oBAAQ,EAAE,MAAM,UAAA,aAAR,EADF;AAEN,oBAAQ,EAAE,MAAM,UAAA,UAAR,EAFF;AAGN,yBAAa,EAAE,MAAM,IAAI,UAAA,cAAJ,CAAmB,UAAA,UAAnB,CAAR,EAHP;AAIN,uBAAW,EAAE,MAAM,IAAI,UAAA,WAAJ,CAAgB,UAAA,UAAhB,CAAR,EAJL;AAKN,8BAAkB,EAAE,MAAM,IAAI,UAAA,cAAJ,CAAmB,IAAI,UAAA,WAAJ,CAAgB,UAAA,UAAhB,CAAnB,CAAR,EALZ,EAF4B,EAAtB,CAAhB;;;AAWA,OAAG,sCAAH,EAA2C,MAAK;AAC9C,eAAO,UAAA,OAAA,CAAQ,QAAQ,SAAR,GAAoB,MAApB,CAA2B,IAAnC,CAAP,EAAiD,OAAjD,CAAyD,UAAA,aAAzD;AACD,KAFD;AAIA,OAAG,uCAAH,EAA4C,MAAK;AAC/C,eAAO,UAAA,OAAA,CAAQ,QAAQ,SAAR,GAAoB,MAApB,CAA2B,IAAnC,CAAP,EAAiD,OAAjD,CAAyD,UAAA,UAAzD;AACD,KAFD;AAIA,OAAG,mDAAH,EAAwD,MAAK;AAC3D,eAAO,UAAA,OAAA,CAAQ,QAAQ,SAAR,GAAoB,WAApB,CAAgC,IAAxC,CAAP,EAAsD,OAAtD,CAA8D,UAAA,UAA9D;AACD,KAFD;AAIA,OAAG,qDAAH,EAA0D,MAAK;AAC7D,eAAO,UAAA,OAAA,CAAQ,QAAQ,SAAR,GAAoB,SAApB,CAA8B,IAAtC,CAAP,EAAoD,OAApD,CAA4D,UAAA,UAA5D;AACD,KAFD;AAIA,OAAG,gEAAH,EAAqE,MAAK;AACxE,eAAO,UAAA,OAAA,CAAQ,QAAQ,SAAR,GAAoB,gBAApB,CAAqC,IAA7C,CAAP,EAA2D,OAA3D,CAAmE,UAAA,UAAnE;AACD,KAFD;AAGD,CA/BD","sourcesContent":["import  getType from \"../../../src/generator/utils/getType\";\nimport {\n  GraphQLScalarType,\n  Kind,\n  GraphQLInt,\n  GraphQLObjectType,\n  GraphQLString,\n  GraphQLNonNull,\n  GraphQLList\n} from \"graphql\";\ndescribe(\"getType\", () => {\n  const testObj = new GraphQLObjectType({\n    name: \"Address\",\n    fields: {\n      street: { type: GraphQLString },\n      number: { type: GraphQLInt },\n      requiredInt: { type: new GraphQLNonNull(GraphQLInt) },\n      listOfInt: { type: new GraphQLList(GraphQLInt) },\n      listOfNonNullInt: { type: new GraphQLNonNull(new GraphQLList(GraphQLInt)) }\n    }\n  });\n\n  it(\"should return string type for street\", () => {\n    expect(getType(testObj.getFields().street.type)).toEqual(GraphQLString);\n  });\n\n  it(\"should return integer type for number\", () => {\n    expect(getType(testObj.getFields().number.type)).toEqual(GraphQLInt);\n  });\n\n  it(\"should return integer type for a Non-Null integer\", () => {\n    expect(getType(testObj.getFields().requiredInt.type)).toEqual(GraphQLInt);\n  });\n\n  it(\"should return integer type for list of integer type\", () => {\n    expect(getType(testObj.getFields().listOfInt.type)).toEqual(GraphQLInt);\n  });\n\n  it(\"should return integer type for a list of non null integer type\", () => {\n    expect(getType(testObj.getFields().listOfNonNullInt.type)).toEqual(GraphQLInt);\n  });\n});\n"],"sourceRoot":"/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-docs-generator/src/"}