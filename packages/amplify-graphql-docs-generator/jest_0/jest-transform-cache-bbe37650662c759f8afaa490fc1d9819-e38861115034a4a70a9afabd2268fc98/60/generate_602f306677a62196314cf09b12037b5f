3046dca6291d07fa7f5d7828536b0c54
'use strict';
require('ts-jest').install("/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-docs-generator/src/generator/generate.ts", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst graphql_1 = require(\"graphql\");\nconst generateAllOperations_1 = require(\"./generateAllOperations\");\nfunction generate(schemaDocument, maxDepth, options) {\n    try {\n        const schemaDoc = graphql_1.buildClientSchema(schemaDocument);\n        const queryTypes = schemaDoc.getQueryType();\n        const mutationType = schemaDoc.getMutationType();\n        const subscriptionType = schemaDoc.getSubscriptionType();\n        const queries = generateAllOperations_1.generateQueries(queryTypes, schemaDoc, maxDepth, options) || [];\n        const mutations = generateAllOperations_1.generateMutations(mutationType, schemaDoc, maxDepth, options) || [];\n        const subscriptions = generateAllOperations_1.generateSubscriptions(subscriptionType, schemaDoc, maxDepth, options) || [];\n        const fragments = options.useExternalFragmentForS3Object ? generateAllOperations_1.collectExternalFragments([...queries, ...mutations, ...subscriptions]) : [];\n        return { queries, mutations, subscriptions, fragments };\n    }\n    catch (e) {\n        throw new Error('GraphQL schema file should contain a valid GraphQL introspection query result');\n    }\n}\nexports.default = generate;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGUuanMiLCJzb3VyY2VSb290IjoiL2MvVXNlcnMvU2FuZHJvL3JlcG8vYW1wbGlmeS1jbGkvcGFja2FnZXMvYW1wbGlmeS1ncmFwaHFsLWRvY3MtZ2VuZXJhdG9yL3NyYy8iLCJzb3VyY2VzIjpbImdlbmVyYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEscUNBQWlHO0FBRWpHLG1FQUE2SDtBQUU3SCxrQkFDRSxjQUFrQyxFQUNsQyxRQUFnQixFQUNoQixPQUEwQjtJQUUxQixJQUFJO1FBQ0YsTUFBTSxTQUFTLEdBQWtCLDJCQUFpQixDQUFDLGNBQWMsQ0FBQyxDQUFBO1FBQ2xFLE1BQU0sVUFBVSxHQUFzQixTQUFTLENBQUMsWUFBWSxFQUFFLENBQUE7UUFDOUQsTUFBTSxZQUFZLEdBQXNCLFNBQVMsQ0FBQyxlQUFlLEVBQUUsQ0FBQTtRQUNuRSxNQUFNLGdCQUFnQixHQUFzQixTQUFTLENBQUMsbUJBQW1CLEVBQUUsQ0FBQTtRQUMzRSxNQUFNLE9BQU8sR0FBRyx1Q0FBZSxDQUFDLFVBQVUsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQTtRQUMvRSxNQUFNLFNBQVMsR0FBRyx5Q0FBaUIsQ0FBQyxZQUFZLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUE7UUFDckYsTUFBTSxhQUFhLEdBQUcsNkNBQXFCLENBQUMsZ0JBQWdCLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUE7UUFDakcsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLDhCQUE4QixDQUFDLENBQUMsQ0FBQyxnREFBd0IsQ0FBQyxDQUFDLEdBQUcsT0FBTyxFQUFFLEdBQUcsU0FBUyxFQUFFLEdBQUcsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ3ZJLE9BQU8sRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLGFBQWEsRUFBRSxTQUFTLEVBQUUsQ0FBQTtLQUN4RDtJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1YsTUFBTSxJQUFJLEtBQUssQ0FBQywrRUFBK0UsQ0FBQyxDQUFBO0tBQ2pHO0FBQ0gsQ0FBQztBQWxCRCwyQkFrQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBidWlsZENsaWVudFNjaGVtYSwgR3JhcGhRTE9iamVjdFR5cGUsIEdyYXBoUUxTY2hlbWEsIEludHJvc3BlY3Rpb25RdWVyeSB9IGZyb20gJ2dyYXBocWwnXG5cbmltcG9ydCB7IGdlbmVyYXRlUXVlcmllcywgZ2VuZXJhdGVNdXRhdGlvbnMsIGdlbmVyYXRlU3Vic2NyaXB0aW9ucywgY29sbGVjdEV4dGVybmFsRnJhZ21lbnRzIH0gZnJvbSAnLi9nZW5lcmF0ZUFsbE9wZXJhdGlvbnMnXG5pbXBvcnQgeyBHUUxEb2NzR2VuT3B0aW9ucywgR1FMQWxsT3BlcmF0aW9uc30gZnJvbSAnLi90eXBlcydcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdlbmVyYXRlKFxuICBzY2hlbWFEb2N1bWVudDogSW50cm9zcGVjdGlvblF1ZXJ5LFxuICBtYXhEZXB0aDogbnVtYmVyLFxuICBvcHRpb25zOiBHUUxEb2NzR2VuT3B0aW9uc1xuKTogR1FMQWxsT3BlcmF0aW9ucyB7XG4gIHRyeSB7XG4gICAgY29uc3Qgc2NoZW1hRG9jOiBHcmFwaFFMU2NoZW1hID0gYnVpbGRDbGllbnRTY2hlbWEoc2NoZW1hRG9jdW1lbnQpXG4gICAgY29uc3QgcXVlcnlUeXBlczogR3JhcGhRTE9iamVjdFR5cGUgPSBzY2hlbWFEb2MuZ2V0UXVlcnlUeXBlKClcbiAgICBjb25zdCBtdXRhdGlvblR5cGU6IEdyYXBoUUxPYmplY3RUeXBlID0gc2NoZW1hRG9jLmdldE11dGF0aW9uVHlwZSgpXG4gICAgY29uc3Qgc3Vic2NyaXB0aW9uVHlwZTogR3JhcGhRTE9iamVjdFR5cGUgPSBzY2hlbWFEb2MuZ2V0U3Vic2NyaXB0aW9uVHlwZSgpXG4gICAgY29uc3QgcXVlcmllcyA9IGdlbmVyYXRlUXVlcmllcyhxdWVyeVR5cGVzLCBzY2hlbWFEb2MsIG1heERlcHRoLCBvcHRpb25zKSB8fCBbXVxuICAgIGNvbnN0IG11dGF0aW9ucyA9IGdlbmVyYXRlTXV0YXRpb25zKG11dGF0aW9uVHlwZSwgc2NoZW1hRG9jLCBtYXhEZXB0aCwgb3B0aW9ucykgfHwgW11cbiAgICBjb25zdCBzdWJzY3JpcHRpb25zID0gZ2VuZXJhdGVTdWJzY3JpcHRpb25zKHN1YnNjcmlwdGlvblR5cGUsIHNjaGVtYURvYywgbWF4RGVwdGgsIG9wdGlvbnMpIHx8IFtdXG4gICAgY29uc3QgZnJhZ21lbnRzID0gb3B0aW9ucy51c2VFeHRlcm5hbEZyYWdtZW50Rm9yUzNPYmplY3QgPyBjb2xsZWN0RXh0ZXJuYWxGcmFnbWVudHMoWy4uLnF1ZXJpZXMsIC4uLm11dGF0aW9ucywgLi4uc3Vic2NyaXB0aW9uc10pIDogW107XG4gICAgcmV0dXJuIHsgcXVlcmllcywgbXV0YXRpb25zLCBzdWJzY3JpcHRpb25zLCBmcmFnbWVudHMgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdHcmFwaFFMIHNjaGVtYSBmaWxlIHNob3VsZCBjb250YWluIGEgdmFsaWQgR3JhcGhRTCBpbnRyb3NwZWN0aW9uIHF1ZXJ5IHJlc3VsdCcpXG4gIH1cbn1cbiJdfQ==");"use strict"; /* istanbul ignore next */var cov_1o0o2lh7bz = function () {
    var path = "/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-docs-generator/src/generator/generate.ts",
        hash = "1e5321225c827f7ea6784eff2a8457162881a4e3",
        Function = function () {}.constructor,
        global = new Function('return this')(),
        gcv = "__coverage__",
        coverageData = { path: "/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-docs-generator/src/generator/generate.ts", statementMap: { "0": { start: { line: 2, column: 0 }, end: { line: 2, column: 62 } }, "1": { start: { line: 3, column: 18 }, end: { line: 3, column: 36 } }, "2": { start: { line: 4, column: 32 }, end: { line: 4, column: 66 } }, "3": { start: { line: 6, column: 4 }, end: { line: 19, column: 5 } }, "4": { start: { line: 7, column: 26 }, end: { line: 7, column: 69 } }, "5": { start: { line: 8, column: 27 }, end: { line: 8, column: 51 } }, "6": { start: { line: 9, column: 29 }, end: { line: 9, column: 56 } }, "7": { start: { line: 10, column: 33 }, end: { line: 10, column: 64 } }, "8": { start: { line: 11, column: 24 }, end: { line: 11, column: 111 } }, "9": { start: { line: 12, column: 26 }, end: { line: 12, column: 117 } }, "10": { start: { line: 13, column: 30 }, end: { line: 13, column: 129 } }, "11": { start: { line: 14, column: 26 }, end: { line: 14, column: 166 } }, "12": { start: { line: 15, column: 8 }, end: { line: 15, column: 64 } }, "13": { start: { line: 18, column: 8 }, end: { line: 18, column: 105 } }, "14": { start: { line: 21, column: 0 }, end: { line: 21, column: 27 } } }, fnMap: { "0": { name: "generate", decl: { start: { line: 5, column: 9 }, end: { line: 5, column: 17 } }, loc: { start: { line: 5, column: 53 }, end: { line: 20, column: 1 } }, line: 5 } }, branchMap: { "0": { loc: { start: { line: 11, column: 24 }, end: { line: 11, column: 111 } }, type: "binary-expr", locations: [{ start: { line: 11, column: 24 }, end: { line: 11, column: 105 } }, { start: { line: 11, column: 109 }, end: { line: 11, column: 111 } }], line: 11 }, "1": { loc: { start: { line: 12, column: 26 }, end: { line: 12, column: 117 } }, type: "binary-expr", locations: [{ start: { line: 12, column: 26 }, end: { line: 12, column: 111 } }, { start: { line: 12, column: 115 }, end: { line: 12, column: 117 } }], line: 12 }, "2": { loc: { start: { line: 13, column: 30 }, end: { line: 13, column: 129 } }, type: "binary-expr", locations: [{ start: { line: 13, column: 30 }, end: { line: 13, column: 123 } }, { start: { line: 13, column: 127 }, end: { line: 13, column: 129 } }], line: 13 }, "3": { loc: { start: { line: 14, column: 26 }, end: { line: 14, column: 166 } }, type: "cond-expr", locations: [{ start: { line: 14, column: 67 }, end: { line: 14, column: 161 } }, { start: { line: 14, column: 164 }, end: { line: 14, column: 166 } }], line: 14 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0 }, f: { "0": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0] }, inputSourceMap: { version: 3, file: "generate.js", sourceRoot: "/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-docs-generator/src/", sources: ["generate.ts"], names: [], mappings: ";;AAAA,qCAAiG;AAEjG,mEAA6H;AAE7H,kBACE,cAAkC,EAClC,QAAgB,EAChB,OAA0B;IAE1B,IAAI;QACF,MAAM,SAAS,GAAkB,2BAAiB,CAAC,cAAc,CAAC,CAAA;QAClE,MAAM,UAAU,GAAsB,SAAS,CAAC,YAAY,EAAE,CAAA;QAC9D,MAAM,YAAY,GAAsB,SAAS,CAAC,eAAe,EAAE,CAAA;QACnE,MAAM,gBAAgB,GAAsB,SAAS,CAAC,mBAAmB,EAAE,CAAA;QAC3E,MAAM,OAAO,GAAG,uCAAe,CAAC,UAAU,EAAE,SAAS,EAAE,QAAQ,EAAE,OAAO,CAAC,IAAI,EAAE,CAAA;QAC/E,MAAM,SAAS,GAAG,yCAAiB,CAAC,YAAY,EAAE,SAAS,EAAE,QAAQ,EAAE,OAAO,CAAC,IAAI,EAAE,CAAA;QACrF,MAAM,aAAa,GAAG,6CAAqB,CAAC,gBAAgB,EAAE,SAAS,EAAE,QAAQ,EAAE,OAAO,CAAC,IAAI,EAAE,CAAA;QACjG,MAAM,SAAS,GAAG,OAAO,CAAC,8BAA8B,CAAC,CAAC,CAAC,gDAAwB,CAAC,CAAC,GAAG,OAAO,EAAE,GAAG,SAAS,EAAE,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QACvI,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,aAAa,EAAE,SAAS,EAAE,CAAA;KACxD;IAAC,OAAO,CAAC,EAAE;QACV,MAAM,IAAI,KAAK,CAAC,+EAA+E,CAAC,CAAA;KACjG;AACH,CAAC;AAlBD,2BAkBC", sourcesContent: ["import { buildClientSchema, GraphQLObjectType, GraphQLSchema, IntrospectionQuery } from 'graphql'\n\nimport { generateQueries, generateMutations, generateSubscriptions, collectExternalFragments } from './generateAllOperations'\nimport { GQLDocsGenOptions, GQLAllOperations} from './types'\nexport default function generate(\n  schemaDocument: IntrospectionQuery,\n  maxDepth: number,\n  options: GQLDocsGenOptions\n): GQLAllOperations {\n  try {\n    const schemaDoc: GraphQLSchema = buildClientSchema(schemaDocument)\n    const queryTypes: GraphQLObjectType = schemaDoc.getQueryType()\n    const mutationType: GraphQLObjectType = schemaDoc.getMutationType()\n    const subscriptionType: GraphQLObjectType = schemaDoc.getSubscriptionType()\n    const queries = generateQueries(queryTypes, schemaDoc, maxDepth, options) || []\n    const mutations = generateMutations(mutationType, schemaDoc, maxDepth, options) || []\n    const subscriptions = generateSubscriptions(subscriptionType, schemaDoc, maxDepth, options) || []\n    const fragments = options.useExternalFragmentForS3Object ? collectExternalFragments([...queries, ...mutations, ...subscriptions]) : [];\n    return { queries, mutations, subscriptions, fragments }\n  } catch (e) {\n    throw new Error('GraphQL schema file should contain a valid GraphQL introspection query result')\n  }\n}\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
        coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
        return coverage[path];
    }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_1o0o2lh7bz.s[0]++;
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = ( /* istanbul ignore next */cov_1o0o2lh7bz.s[1]++, require("graphql"));
const generateAllOperations_1 = ( /* istanbul ignore next */cov_1o0o2lh7bz.s[2]++, require("./generateAllOperations"));
function generate(schemaDocument, maxDepth, options) {
    /* istanbul ignore next */cov_1o0o2lh7bz.f[0]++;cov_1o0o2lh7bz.s[3]++;
    try {
        const schemaDoc = ( /* istanbul ignore next */cov_1o0o2lh7bz.s[4]++, graphql_1.buildClientSchema(schemaDocument));
        const queryTypes = ( /* istanbul ignore next */cov_1o0o2lh7bz.s[5]++, schemaDoc.getQueryType());
        const mutationType = ( /* istanbul ignore next */cov_1o0o2lh7bz.s[6]++, schemaDoc.getMutationType());
        const subscriptionType = ( /* istanbul ignore next */cov_1o0o2lh7bz.s[7]++, schemaDoc.getSubscriptionType());
        const queries = ( /* istanbul ignore next */cov_1o0o2lh7bz.s[8]++, /* istanbul ignore next */(cov_1o0o2lh7bz.b[0][0]++, generateAllOperations_1.generateQueries(queryTypes, schemaDoc, maxDepth, options)) || ( /* istanbul ignore next */cov_1o0o2lh7bz.b[0][1]++, []));
        const mutations = ( /* istanbul ignore next */cov_1o0o2lh7bz.s[9]++, /* istanbul ignore next */(cov_1o0o2lh7bz.b[1][0]++, generateAllOperations_1.generateMutations(mutationType, schemaDoc, maxDepth, options)) || ( /* istanbul ignore next */cov_1o0o2lh7bz.b[1][1]++, []));
        const subscriptions = ( /* istanbul ignore next */cov_1o0o2lh7bz.s[10]++, /* istanbul ignore next */(cov_1o0o2lh7bz.b[2][0]++, generateAllOperations_1.generateSubscriptions(subscriptionType, schemaDoc, maxDepth, options)) || ( /* istanbul ignore next */cov_1o0o2lh7bz.b[2][1]++, []));
        const fragments = ( /* istanbul ignore next */cov_1o0o2lh7bz.s[11]++, options.useExternalFragmentForS3Object ? ( /* istanbul ignore next */cov_1o0o2lh7bz.b[3][0]++, generateAllOperations_1.collectExternalFragments([...queries, ...mutations, ...subscriptions])) : ( /* istanbul ignore next */cov_1o0o2lh7bz.b[3][1]++, [])); /* istanbul ignore next */cov_1o0o2lh7bz.s[12]++;
        return { queries, mutations, subscriptions, fragments };
    } catch (e) {
        /* istanbul ignore next */cov_1o0o2lh7bz.s[13]++;
        throw new Error('GraphQL schema file should contain a valid GraphQL introspection query result');
    }
} /* istanbul ignore next */cov_1o0o2lh7bz.s[14]++;
exports.default = generate;