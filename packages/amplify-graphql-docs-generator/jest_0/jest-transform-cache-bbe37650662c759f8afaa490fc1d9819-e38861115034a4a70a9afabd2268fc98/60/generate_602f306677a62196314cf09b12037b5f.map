{"version":3,"sources":["generate.ts"],"names":[],"mappings":";;AAAA,MAAA,8DAAA,QAAA,SAAA,CAAA,CAAA;AAEA,MAAA,4EAAA,QAAA,yBAAA,CAAA,CAAA;AAEA,SAAA,QAAA,CACE,cADF,EAEE,QAFF,EAGE,OAHF,EAG4B;AAE1B,QAAI;AACF,cAAM,8DAA2B,UAAA,iBAAA,CAAkB,cAAlB,CAA3B,CAAN;AACA,cAAM,+DAAgC,UAAU,YAAV,EAAhC,CAAN;AACA,cAAM,iEAAkC,UAAU,eAAV,EAAlC,CAAN;AACA,cAAM,qEAAsC,UAAU,mBAAV,EAAtC,CAAN;AACA,cAAM,4DAAU,6EAAA,eAAA,CAAgB,UAAhB,EAA4B,SAA5B,EAAuC,QAAvC,EAAiD,OAAjD,2DAA6D,EAA7D,CAAV,CAAN;AACA,cAAM,8DAAY,6EAAA,iBAAA,CAAkB,YAAlB,EAAgC,SAAhC,EAA2C,QAA3C,EAAqD,OAArD,2DAAiE,EAAjE,CAAZ,CAAN;AACA,cAAM,mEAAgB,6EAAA,qBAAA,CAAsB,gBAAtB,EAAwC,SAAxC,EAAmD,QAAnD,EAA6D,OAA7D,2DAAyE,EAAzE,CAAhB,CAAN;AACA,cAAM,+DAAY,QAAQ,8BAAR,wDAAyC,wBAAA,wBAAA,CAAyB,CAAC,GAAG,OAAJ,EAAa,GAAG,SAAhB,EAA2B,GAAG,aAA9B,CAAzB,CAAzC,yDAAkH,EAAlH,CAAZ,CAAN,CARE;AASF,eAAO,EAAE,OAAF,EAAW,SAAX,EAAsB,aAAtB,EAAqC,SAArC,EAAP;AACD;AAAC,WAAO,CAAP,EAAU;AACV,cAAM,IAAI,KAAJ,CAAU,+EAAV,CAAN;AACD;AACF,C;AAlBD,QAAA,OAAA,GAAA,QAAA","sourcesContent":["import { buildClientSchema, GraphQLObjectType, GraphQLSchema, IntrospectionQuery } from 'graphql'\n\nimport { generateQueries, generateMutations, generateSubscriptions, collectExternalFragments } from './generateAllOperations'\nimport { GQLDocsGenOptions, GQLAllOperations} from './types'\nexport default function generate(\n  schemaDocument: IntrospectionQuery,\n  maxDepth: number,\n  options: GQLDocsGenOptions\n): GQLAllOperations {\n  try {\n    const schemaDoc: GraphQLSchema = buildClientSchema(schemaDocument)\n    const queryTypes: GraphQLObjectType = schemaDoc.getQueryType()\n    const mutationType: GraphQLObjectType = schemaDoc.getMutationType()\n    const subscriptionType: GraphQLObjectType = schemaDoc.getSubscriptionType()\n    const queries = generateQueries(queryTypes, schemaDoc, maxDepth, options) || []\n    const mutations = generateMutations(mutationType, schemaDoc, maxDepth, options) || []\n    const subscriptions = generateSubscriptions(subscriptionType, schemaDoc, maxDepth, options) || []\n    const fragments = options.useExternalFragmentForS3Object ? collectExternalFragments([...queries, ...mutations, ...subscriptions]) : [];\n    return { queries, mutations, subscriptions, fragments }\n  } catch (e) {\n    throw new Error('GraphQL schema file should contain a valid GraphQL introspection query result')\n  }\n}\n"],"sourceRoot":"/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-docs-generator/src/"}