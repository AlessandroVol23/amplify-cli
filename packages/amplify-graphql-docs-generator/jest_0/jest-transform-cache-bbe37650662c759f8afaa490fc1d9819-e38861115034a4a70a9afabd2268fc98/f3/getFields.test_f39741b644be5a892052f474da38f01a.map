{"version":3,"sources":["getFields.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  GraphQLSchema,\n  GraphQLObjectType,\n  GraphQLString,\n  GraphQLInt,\n  GraphQLInterfaceType,\n  GraphQLUnionType,\n} from 'graphql'\n\nimport getFields from '../../src/generator/getFields'\nimport getFragment from '../../src/generator/getFragment'\nimport getType from '../../src/generator/utils/getType'\n\njest.mock('../../src/generator/getFragment')\ndescribe('getField', () => {\n  const nestedType = new GraphQLObjectType({\n    name: 'NestedObject',\n    fields: () => ({\n      level: { type: GraphQLInt },\n      subObj: { type: nestedType },\n    }),\n  })\n\n  const schema = new GraphQLSchema({\n    query: new GraphQLObjectType({\n      name: 'Query',\n      fields: {\n        foo: { type: GraphQLInt },\n        nested: { type: nestedType },\n      },\n    }),\n  })\n\n  it('should support simple scalar', () => {\n    const queries = schema.getQueryType().getFields()\n    expect(getFields(queries.foo, schema, 3, {useExternalFragmentForS3Object: false})).toEqual({\n      name: 'foo',\n      fields: [],\n      fragments: [],\n      hasBody: false,\n    })\n    expect(getFragment).not.toHaveBeenCalled()\n  })\n\n  it('it should recursively resolve fields up to max depth', () => {\n    const queries = schema.getQueryType().getFields()\n    expect(getFields(queries.nested, schema, 2, { useExternalFragmentForS3Object: false})).toEqual({\n      name: 'nested',\n      fields: [\n        {\n          name: 'level',\n          fields: [],\n          fragments: [],\n          hasBody: false,\n        },\n        {\n          name: 'subObj',\n          fields: [\n            {\n              name: 'level',\n              fields: [],\n              fragments: [],\n              hasBody: false,\n            },\n          ],\n          fragments: [],\n          hasBody: true,\n        },\n      ],\n      fragments: [],\n      hasBody: true,\n    })\n  })\n\n  it('should not return anything for complex type when the depth is < 1', () => {\n    const queries = schema.getQueryType().getFields()\n    expect(getFields(queries.nested, schema, 0, { useExternalFragmentForS3Object: false})).toBeUndefined()\n  })\n  describe('When type is an Interface', () => {\n    beforeEach(() => {\n      jest.resetAllMocks()\n    })\n    const shapeInterfaceType = new GraphQLInterfaceType({\n      name: 'Entity',\n      fields: {\n        name: { type: GraphQLString },\n      },\n    })\n    const rectangleType = new GraphQLObjectType({\n      name: 'Rectangle',\n      fields: {\n        name: { type: GraphQLString },\n        length: { type: GraphQLInt },\n        width: { type: GraphQLInt },\n      },\n      interfaces: () => [shapeInterfaceType],\n    })\n\n    const circleType = new GraphQLObjectType({\n      name: 'Circle',\n      fields: {\n        name: { type: GraphQLString },\n        radius: { type: GraphQLInt },\n      },\n      interfaces: () => [shapeInterfaceType],\n    })\n\n    const schema = new GraphQLSchema({\n      query: new GraphQLObjectType({\n        name: 'Query',\n        fields: {\n          shapeInterface: { type: shapeInterfaceType },\n        },\n      }),\n      types: [circleType, rectangleType],\n    })\n\n    it('interface - should return fragments of all the implementations', () => {\n      const maxDepth = 2\n      const getPossibleTypeSpy = jest.spyOn(schema, 'getPossibleTypes')\n      getFields(schema.getQueryType().getFields().shapeInterface, schema, maxDepth, { useExternalFragmentForS3Object: false})\n      expect(getPossibleTypeSpy).toHaveBeenCalled()\n      expect(getFragment).toHaveBeenCalled()\n\n      const commonField = {\n        name: 'name',\n        fragments: [],\n        hasBody: false,\n        fields: [],\n      }\n\n      expect(getFragment.mock.calls[0][0]).toEqual(circleType)\n      expect(getFragment.mock.calls[0][1]).toEqual(schema)\n      expect(getFragment.mock.calls[0][2]).toEqual(maxDepth)\n      expect(getFragment.mock.calls[0][3]).toEqual([commonField])\n\n      expect(getFragment.mock.calls[1][0]).toEqual(rectangleType)\n      expect(getFragment.mock.calls[1][1]).toEqual(schema)\n      expect(getFragment.mock.calls[1][2]).toEqual(maxDepth)\n      expect(getFragment.mock.calls[1][3]).toEqual([commonField])\n    })\n  })\n  describe('When type is an union', () => {\n    beforeEach(() => {\n      jest.resetAllMocks()\n    })\n    const rectangleType = new GraphQLObjectType({\n      name: 'Rectangle',\n      fields: {\n        length: { type: GraphQLInt },\n        width: { type: GraphQLInt },\n      },\n    })\n\n    const circleType = new GraphQLObjectType({\n      name: 'Circle',\n      fields: {\n        radius: { type: GraphQLInt },\n      },\n    })\n    const shapeResultUnion = new GraphQLUnionType({\n      name: 'ShapeResultUnion',\n      types: [circleType, rectangleType],\n    })\n\n    const schema = new GraphQLSchema({\n      query: new GraphQLObjectType({\n        name: 'Query',\n        fields: {\n          shapeResult: { type: shapeResultUnion },\n        },\n      }),\n    })\n\n    it('union - should return fragments of all the types', () => {\n      const maxDepth = 2\n      const getPossibleTypeSpy = jest.spyOn(schema, 'getPossibleTypes')\n      getFields(schema.getQueryType().getFields().shapeResult, schema, maxDepth, { useExternalFragmentForS3Object: false})\n      expect(getPossibleTypeSpy).toHaveBeenCalled()\n      expect(getFragment).toHaveBeenCalled()\n\n      const commonField = [] // unions don't have to have common field\n\n      expect(getFragment.mock.calls[0][0]).toEqual(circleType)\n      expect(getFragment.mock.calls[0][1]).toEqual(schema)\n      expect(getFragment.mock.calls[0][2]).toEqual(maxDepth)\n      expect(getFragment.mock.calls[0][3]).toEqual(commonField)\n\n      expect(getFragment.mock.calls[1][0]).toEqual(rectangleType)\n      expect(getFragment.mock.calls[1][1]).toEqual(schema)\n      expect(getFragment.mock.calls[1][2]).toEqual(maxDepth)\n      expect(getFragment.mock.calls[1][3]).toEqual(commonField)\n    })\n  })\n})\n"],"sourceRoot":"/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-docs-generator/src/"}