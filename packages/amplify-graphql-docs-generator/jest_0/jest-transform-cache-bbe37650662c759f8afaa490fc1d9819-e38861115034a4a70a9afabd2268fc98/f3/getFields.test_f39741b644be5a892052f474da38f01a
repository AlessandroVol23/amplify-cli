dbdac7e1784bbce2ef5587c673ddca85
'use strict';require('ts-jest').install("/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-docs-generator/__tests__/generator/getFields.test.ts", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst graphql_1 = require(\"graphql\");\nconst getFields_1 = require(\"../../src/generator/getFields\");\nconst getFragment_1 = require(\"../../src/generator/getFragment\");\njest.mock('../../src/generator/getFragment');\ndescribe('getField', () => {\n    const nestedType = new graphql_1.GraphQLObjectType({\n        name: 'NestedObject',\n        fields: () => ({\n            level: { type: graphql_1.GraphQLInt },\n            subObj: { type: nestedType },\n        }),\n    });\n    const schema = new graphql_1.GraphQLSchema({\n        query: new graphql_1.GraphQLObjectType({\n            name: 'Query',\n            fields: {\n                foo: { type: graphql_1.GraphQLInt },\n                nested: { type: nestedType },\n            },\n        }),\n    });\n    it('should support simple scalar', () => {\n        const queries = schema.getQueryType().getFields();\n        expect(getFields_1.default(queries.foo, schema, 3, { useExternalFragmentForS3Object: false })).toEqual({\n            name: 'foo',\n            fields: [],\n            fragments: [],\n            hasBody: false,\n        });\n        expect(getFragment_1.default).not.toHaveBeenCalled();\n    });\n    it('it should recursively resolve fields up to max depth', () => {\n        const queries = schema.getQueryType().getFields();\n        expect(getFields_1.default(queries.nested, schema, 2, { useExternalFragmentForS3Object: false })).toEqual({\n            name: 'nested',\n            fields: [\n                {\n                    name: 'level',\n                    fields: [],\n                    fragments: [],\n                    hasBody: false,\n                },\n                {\n                    name: 'subObj',\n                    fields: [\n                        {\n                            name: 'level',\n                            fields: [],\n                            fragments: [],\n                            hasBody: false,\n                        },\n                    ],\n                    fragments: [],\n                    hasBody: true,\n                },\n            ],\n            fragments: [],\n            hasBody: true,\n        });\n    });\n    it('should not return anything for complex type when the depth is < 1', () => {\n        const queries = schema.getQueryType().getFields();\n        expect(getFields_1.default(queries.nested, schema, 0, { useExternalFragmentForS3Object: false })).toBeUndefined();\n    });\n    describe('When type is an Interface', () => {\n        beforeEach(() => {\n            jest.resetAllMocks();\n        });\n        const shapeInterfaceType = new graphql_1.GraphQLInterfaceType({\n            name: 'Entity',\n            fields: {\n                name: { type: graphql_1.GraphQLString },\n            },\n        });\n        const rectangleType = new graphql_1.GraphQLObjectType({\n            name: 'Rectangle',\n            fields: {\n                name: { type: graphql_1.GraphQLString },\n                length: { type: graphql_1.GraphQLInt },\n                width: { type: graphql_1.GraphQLInt },\n            },\n            interfaces: () => [shapeInterfaceType],\n        });\n        const circleType = new graphql_1.GraphQLObjectType({\n            name: 'Circle',\n            fields: {\n                name: { type: graphql_1.GraphQLString },\n                radius: { type: graphql_1.GraphQLInt },\n            },\n            interfaces: () => [shapeInterfaceType],\n        });\n        const schema = new graphql_1.GraphQLSchema({\n            query: new graphql_1.GraphQLObjectType({\n                name: 'Query',\n                fields: {\n                    shapeInterface: { type: shapeInterfaceType },\n                },\n            }),\n            types: [circleType, rectangleType],\n        });\n        it('interface - should return fragments of all the implementations', () => {\n            const maxDepth = 2;\n            const getPossibleTypeSpy = jest.spyOn(schema, 'getPossibleTypes');\n            getFields_1.default(schema.getQueryType().getFields().shapeInterface, schema, maxDepth, { useExternalFragmentForS3Object: false });\n            expect(getPossibleTypeSpy).toHaveBeenCalled();\n            expect(getFragment_1.default).toHaveBeenCalled();\n            const commonField = {\n                name: 'name',\n                fragments: [],\n                hasBody: false,\n                fields: [],\n            };\n            expect(getFragment_1.default.mock.calls[0][0]).toEqual(circleType);\n            expect(getFragment_1.default.mock.calls[0][1]).toEqual(schema);\n            expect(getFragment_1.default.mock.calls[0][2]).toEqual(maxDepth);\n            expect(getFragment_1.default.mock.calls[0][3]).toEqual([commonField]);\n            expect(getFragment_1.default.mock.calls[1][0]).toEqual(rectangleType);\n            expect(getFragment_1.default.mock.calls[1][1]).toEqual(schema);\n            expect(getFragment_1.default.mock.calls[1][2]).toEqual(maxDepth);\n            expect(getFragment_1.default.mock.calls[1][3]).toEqual([commonField]);\n        });\n    });\n    describe('When type is an union', () => {\n        beforeEach(() => {\n            jest.resetAllMocks();\n        });\n        const rectangleType = new graphql_1.GraphQLObjectType({\n            name: 'Rectangle',\n            fields: {\n                length: { type: graphql_1.GraphQLInt },\n                width: { type: graphql_1.GraphQLInt },\n            },\n        });\n        const circleType = new graphql_1.GraphQLObjectType({\n            name: 'Circle',\n            fields: {\n                radius: { type: graphql_1.GraphQLInt },\n            },\n        });\n        const shapeResultUnion = new graphql_1.GraphQLUnionType({\n            name: 'ShapeResultUnion',\n            types: [circleType, rectangleType],\n        });\n        const schema = new graphql_1.GraphQLSchema({\n            query: new graphql_1.GraphQLObjectType({\n                name: 'Query',\n                fields: {\n                    shapeResult: { type: shapeResultUnion },\n                },\n            }),\n        });\n        it('union - should return fragments of all the types', () => {\n            const maxDepth = 2;\n            const getPossibleTypeSpy = jest.spyOn(schema, 'getPossibleTypes');\n            getFields_1.default(schema.getQueryType().getFields().shapeResult, schema, maxDepth, { useExternalFragmentForS3Object: false });\n            expect(getPossibleTypeSpy).toHaveBeenCalled();\n            expect(getFragment_1.default).toHaveBeenCalled();\n            const commonField = []; // unions don't have to have common field\n            expect(getFragment_1.default.mock.calls[0][0]).toEqual(circleType);\n            expect(getFragment_1.default.mock.calls[0][1]).toEqual(schema);\n            expect(getFragment_1.default.mock.calls[0][2]).toEqual(maxDepth);\n            expect(getFragment_1.default.mock.calls[0][3]).toEqual(commonField);\n            expect(getFragment_1.default.mock.calls[1][0]).toEqual(rectangleType);\n            expect(getFragment_1.default.mock.calls[1][1]).toEqual(schema);\n            expect(getFragment_1.default.mock.calls[1][2]).toEqual(maxDepth);\n            expect(getFragment_1.default.mock.calls[1][3]).toEqual(commonField);\n        });\n    });\n});\n//# sourceMappingURL=data:application/json;base64,");"use strict";




jest.mock('../../src/generator/getFragment');Object.defineProperty(exports, "__esModule", { value: true });const graphql_1 = require("graphql");const getFields_1 = require("../../src/generator/getFields");const getFragment_1 = require("../../src/generator/getFragment");
describe('getField', () => {
    const nestedType = new graphql_1.GraphQLObjectType({
        name: 'NestedObject',
        fields: () => ({
            level: { type: graphql_1.GraphQLInt },
            subObj: { type: nestedType } }) });


    const schema = new graphql_1.GraphQLSchema({
        query: new graphql_1.GraphQLObjectType({
            name: 'Query',
            fields: {
                foo: { type: graphql_1.GraphQLInt },
                nested: { type: nestedType } } }) });



    it('should support simple scalar', () => {
        const queries = schema.getQueryType().getFields();
        expect(getFields_1.default(queries.foo, schema, 3, { useExternalFragmentForS3Object: false })).toEqual({
            name: 'foo',
            fields: [],
            fragments: [],
            hasBody: false });

        expect(getFragment_1.default).not.toHaveBeenCalled();
    });
    it('it should recursively resolve fields up to max depth', () => {
        const queries = schema.getQueryType().getFields();
        expect(getFields_1.default(queries.nested, schema, 2, { useExternalFragmentForS3Object: false })).toEqual({
            name: 'nested',
            fields: [
            {
                name: 'level',
                fields: [],
                fragments: [],
                hasBody: false },

            {
                name: 'subObj',
                fields: [
                {
                    name: 'level',
                    fields: [],
                    fragments: [],
                    hasBody: false }],


                fragments: [],
                hasBody: true }],


            fragments: [],
            hasBody: true });

    });
    it('should not return anything for complex type when the depth is < 1', () => {
        const queries = schema.getQueryType().getFields();
        expect(getFields_1.default(queries.nested, schema, 0, { useExternalFragmentForS3Object: false })).toBeUndefined();
    });
    describe('When type is an Interface', () => {
        beforeEach(() => {
            jest.resetAllMocks();
        });
        const shapeInterfaceType = new graphql_1.GraphQLInterfaceType({
            name: 'Entity',
            fields: {
                name: { type: graphql_1.GraphQLString } } });


        const rectangleType = new graphql_1.GraphQLObjectType({
            name: 'Rectangle',
            fields: {
                name: { type: graphql_1.GraphQLString },
                length: { type: graphql_1.GraphQLInt },
                width: { type: graphql_1.GraphQLInt } },

            interfaces: () => [shapeInterfaceType] });

        const circleType = new graphql_1.GraphQLObjectType({
            name: 'Circle',
            fields: {
                name: { type: graphql_1.GraphQLString },
                radius: { type: graphql_1.GraphQLInt } },

            interfaces: () => [shapeInterfaceType] });

        const schema = new graphql_1.GraphQLSchema({
            query: new graphql_1.GraphQLObjectType({
                name: 'Query',
                fields: {
                    shapeInterface: { type: shapeInterfaceType } } }),


            types: [circleType, rectangleType] });

        it('interface - should return fragments of all the implementations', () => {
            const maxDepth = 2;
            const getPossibleTypeSpy = jest.spyOn(schema, 'getPossibleTypes');
            getFields_1.default(schema.getQueryType().getFields().shapeInterface, schema, maxDepth, { useExternalFragmentForS3Object: false });
            expect(getPossibleTypeSpy).toHaveBeenCalled();
            expect(getFragment_1.default).toHaveBeenCalled();
            const commonField = {
                name: 'name',
                fragments: [],
                hasBody: false,
                fields: [] };

            expect(getFragment_1.default.mock.calls[0][0]).toEqual(circleType);
            expect(getFragment_1.default.mock.calls[0][1]).toEqual(schema);
            expect(getFragment_1.default.mock.calls[0][2]).toEqual(maxDepth);
            expect(getFragment_1.default.mock.calls[0][3]).toEqual([commonField]);
            expect(getFragment_1.default.mock.calls[1][0]).toEqual(rectangleType);
            expect(getFragment_1.default.mock.calls[1][1]).toEqual(schema);
            expect(getFragment_1.default.mock.calls[1][2]).toEqual(maxDepth);
            expect(getFragment_1.default.mock.calls[1][3]).toEqual([commonField]);
        });
    });
    describe('When type is an union', () => {
        beforeEach(() => {
            jest.resetAllMocks();
        });
        const rectangleType = new graphql_1.GraphQLObjectType({
            name: 'Rectangle',
            fields: {
                length: { type: graphql_1.GraphQLInt },
                width: { type: graphql_1.GraphQLInt } } });


        const circleType = new graphql_1.GraphQLObjectType({
            name: 'Circle',
            fields: {
                radius: { type: graphql_1.GraphQLInt } } });


        const shapeResultUnion = new graphql_1.GraphQLUnionType({
            name: 'ShapeResultUnion',
            types: [circleType, rectangleType] });

        const schema = new graphql_1.GraphQLSchema({
            query: new graphql_1.GraphQLObjectType({
                name: 'Query',
                fields: {
                    shapeResult: { type: shapeResultUnion } } }) });



        it('union - should return fragments of all the types', () => {
            const maxDepth = 2;
            const getPossibleTypeSpy = jest.spyOn(schema, 'getPossibleTypes');
            getFields_1.default(schema.getQueryType().getFields().shapeResult, schema, maxDepth, { useExternalFragmentForS3Object: false });
            expect(getPossibleTypeSpy).toHaveBeenCalled();
            expect(getFragment_1.default).toHaveBeenCalled();
            const commonField = []; // unions don't have to have common field
            expect(getFragment_1.default.mock.calls[0][0]).toEqual(circleType);
            expect(getFragment_1.default.mock.calls[0][1]).toEqual(schema);
            expect(getFragment_1.default.mock.calls[0][2]).toEqual(maxDepth);
            expect(getFragment_1.default.mock.calls[0][3]).toEqual(commonField);
            expect(getFragment_1.default.mock.calls[1][0]).toEqual(rectangleType);
            expect(getFragment_1.default.mock.calls[1][1]).toEqual(schema);
            expect(getFragment_1.default.mock.calls[1][2]).toEqual(maxDepth);
            expect(getFragment_1.default.mock.calls[1][3]).toEqual(commonField);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,