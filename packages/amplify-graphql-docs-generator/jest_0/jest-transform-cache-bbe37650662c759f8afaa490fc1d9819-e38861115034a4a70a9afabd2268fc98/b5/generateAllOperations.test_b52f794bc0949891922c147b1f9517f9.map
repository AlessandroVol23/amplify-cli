{"version":3,"sources":["generateAllOperations.test.ts"],"names":[],"mappings":";;;;AASA,KAAK,IAAL,CAAU,uCAAV,E,8DATA,MAAA,0BAAA,QAAA,2CAAA,CAAA,CAMA,MAAA,sBAAA,QAAA,uCAAA,CAAA;AAIA,MAAM,sBAAsB;AAC1B,UAAM,CAAC,UAAD,CADoB;AAE1B,UAAM,WAFoB,EAA5B;;AAIA,oBAAA,OAAA,CAAkB,eAAlB,CAAkC,mBAAlC;AAEA,MAAM,aAAa;AACjB,QAAI,IADa,EAAnB;;AAGA,MAAM,YAAY,KAAK,EAAL,EAAlB;AACA,UAAU,eAAV,CAA0B,UAA1B;AAEA,MAAM,aAAa;AACjB,aADiB,EAAnB;;AAGA,MAAM,WAAW,EAAjB;AAEA,MAAM,aAAa,aAAnB;AACA,MAAM,kBAAqC,EAAE,gCAAgC,IAAlC,EAA3C;AACA,SAAS,uBAAT,EAAkC,MAAK;AACrC,eAAW,MAAK;AACd,aAAK,aAAL;AACD,KAFD;AAIA,OAAG,iDAAH,EAAsD,MAAK;AACzD,eAAO,wBAAA,eAAA,CAAgB,UAAhB,EAA4B,UAA5B,EAAwC,QAAxC,EAAkD,eAAlD,CAAP,EAA2E,OAA3E,CAAmF;wBAE/E,MAAM,O,EACN,MAAM,I,IACH,mB,CAJ4E,CAAnF;;AAOA,eAAO,oBAAA,OAAP,EAA0B,oBAA1B,CACE,WAAW,EADb,EAEE,UAFF,EAGE,QAHF,EAIE,eAJF;AAMA,eAAO,SAAP,EAAkB,gBAAlB;AACA,eAAO,oBAAA,OAAP,EAA0B,qBAA1B,CAAgD,CAAhD;AACA,eAAO,SAAP,EAAkB,qBAAlB,CAAwC,CAAxC;AACD,KAjBD;AAmBA,OAAG,kDAAH,EAAuD,MAAK;AAC1D,eAAO,wBAAA,iBAAA,CAAkB,UAAlB,EAA8B,UAA9B,EAA0C,QAA1C,EAAoD,eAApD,CAAP,EAA6E,OAA7E,CAAqF;wBAEjF,MAAM,U,EACN,MAAM,I,IACH,mB,CAJ8E,CAArF;;AAOA,eAAO,oBAAA,OAAP,EAA0B,oBAA1B,CACE,WAAW,EADb,EAEE,UAFF,EAGE,QAHF,EAIE,eAJF;AAMA,eAAO,SAAP,EAAkB,gBAAlB;AACA,eAAO,oBAAA,OAAP,EAA0B,qBAA1B,CAAgD,CAAhD;AACA,eAAO,SAAP,EAAkB,qBAAlB,CAAwC,CAAxC;AACD,KAjBD;AAmBA,OAAG,sDAAH,EAA2D,MAAK;AAC9D,eAAO,wBAAA,qBAAA,CAAsB,UAAtB,EAAkC,UAAlC,EAA8C,QAA9C,EAAwD,eAAxD,CAAP,EAAiF,OAAjF,CAAyF;wBAErF,MAAM,c,EACN,MAAM,I,IACH,mB,CAJkF,CAAzF;;AAOA,eAAO,oBAAA,OAAP,EAA0B,qBAA1B,CAAgD,CAAhD;AACA,eAAO,SAAP,EAAkB,qBAAlB,CAAwC,CAAxC;AACA,eAAO,oBAAA,OAAP,EAA0B,oBAA1B,CACE,WAAW,EADb,EAEE,UAFF,EAGE,QAHF,EAIE,eAJF;AAMD,KAhBD;AAiBD,CA5DD","sourcesContent":["import {\n  generateQueries,\n  generateMutations,\n  generateSubscriptions,\n} from '../../src/generator/generateAllOperations'\n\nimport generateOperation from '../../src/generator/generateOperation'\nimport { GQLDocsGenOptions } from '../../src/generator/types'\n\njest.mock('../../src/generator/generateOperation')\nconst mockOperationResult = {\n  args: ['MOCK_ARG'],\n  body: 'MOCK_BODY',\n}\ngenerateOperation.mockReturnValue(mockOperationResult)\n\nconst mockFields = {\n  f1: 'f1',\n}\nconst getFields = jest.fn()\ngetFields.mockReturnValue(mockFields)\n\nconst operations = {\n  getFields,\n}\nconst maxDepth = 10\n\nconst mockSchema = 'MOCK_SCHEMA'\nconst generateOptions: GQLDocsGenOptions = { useExternalFragmentForS3Object: true }\ndescribe('generateAllOperations', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n\n  it('generateQueries - should call generateOperation', () => {\n    expect(generateQueries(operations, mockSchema, maxDepth, generateOptions)).toEqual([\n      {\n        type: 'query',\n        name: 'F1',\n        ...mockOperationResult,\n      },\n    ])\n    expect(generateOperation).toHaveBeenCalledWith(\n      mockFields.f1,\n      mockSchema,\n      maxDepth,\n      generateOptions\n    )\n    expect(getFields).toHaveBeenCalled()\n    expect(generateOperation).toHaveBeenCalledTimes(1)\n    expect(getFields).toHaveBeenCalledTimes(1)\n  })\n\n  it('generateMutation - should call generateOperation', () => {\n    expect(generateMutations(operations, mockSchema, maxDepth, generateOptions)).toEqual([\n      {\n        type: 'mutation',\n        name: 'F1',\n        ...mockOperationResult,\n      },\n    ])\n    expect(generateOperation).toHaveBeenCalledWith(\n      mockFields.f1,\n      mockSchema,\n      maxDepth,\n      generateOptions\n    )\n    expect(getFields).toHaveBeenCalled()\n    expect(generateOperation).toHaveBeenCalledTimes(1)\n    expect(getFields).toHaveBeenCalledTimes(1)\n  })\n\n  it('generateSubscription - should call generateOperation', () => {\n    expect(generateSubscriptions(operations, mockSchema, maxDepth, generateOptions)).toEqual([\n      {\n        type: 'subscription',\n        name: 'F1',\n        ...mockOperationResult,\n      },\n    ])\n    expect(generateOperation).toHaveBeenCalledTimes(1)\n    expect(getFields).toHaveBeenCalledTimes(1)\n    expect(generateOperation).toHaveBeenCalledWith(\n      mockFields.f1,\n      mockSchema,\n      maxDepth,\n      generateOptions\n    )\n  })\n})\n"],"sourceRoot":"/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-docs-generator/src/"}