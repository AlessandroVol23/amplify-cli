eef5361d9aa9d0f9f06a363d3d9dcce7
'use strict';require('ts-jest').install("/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-docs-generator/__tests__/generator/generateAllOperations.test.ts", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst generateAllOperations_1 = require(\"../../src/generator/generateAllOperations\");\nconst generateOperation_1 = require(\"../../src/generator/generateOperation\");\njest.mock('../../src/generator/generateOperation');\nconst mockOperationResult = {\n    args: ['MOCK_ARG'],\n    body: 'MOCK_BODY',\n};\ngenerateOperation_1.default.mockReturnValue(mockOperationResult);\nconst mockFields = {\n    f1: 'f1',\n};\nconst getFields = jest.fn();\ngetFields.mockReturnValue(mockFields);\nconst operations = {\n    getFields,\n};\nconst maxDepth = 10;\nconst mockSchema = 'MOCK_SCHEMA';\nconst generateOptions = { useExternalFragmentForS3Object: true };\ndescribe('generateAllOperations', () => {\n    beforeEach(() => {\n        jest.clearAllMocks();\n    });\n    it('generateQueries - should call generateOperation', () => {\n        expect(generateAllOperations_1.generateQueries(operations, mockSchema, maxDepth, generateOptions)).toEqual([\n            Object.assign({ type: 'query', name: 'F1' }, mockOperationResult),\n        ]);\n        expect(generateOperation_1.default).toHaveBeenCalledWith(mockFields.f1, mockSchema, maxDepth, generateOptions);\n        expect(getFields).toHaveBeenCalled();\n        expect(generateOperation_1.default).toHaveBeenCalledTimes(1);\n        expect(getFields).toHaveBeenCalledTimes(1);\n    });\n    it('generateMutation - should call generateOperation', () => {\n        expect(generateAllOperations_1.generateMutations(operations, mockSchema, maxDepth, generateOptions)).toEqual([\n            Object.assign({ type: 'mutation', name: 'F1' }, mockOperationResult),\n        ]);\n        expect(generateOperation_1.default).toHaveBeenCalledWith(mockFields.f1, mockSchema, maxDepth, generateOptions);\n        expect(getFields).toHaveBeenCalled();\n        expect(generateOperation_1.default).toHaveBeenCalledTimes(1);\n        expect(getFields).toHaveBeenCalledTimes(1);\n    });\n    it('generateSubscription - should call generateOperation', () => {\n        expect(generateAllOperations_1.generateSubscriptions(operations, mockSchema, maxDepth, generateOptions)).toEqual([\n            Object.assign({ type: 'subscription', name: 'F1' }, mockOperationResult),\n        ]);\n        expect(generateOperation_1.default).toHaveBeenCalledTimes(1);\n        expect(getFields).toHaveBeenCalledTimes(1);\n        expect(generateOperation_1.default).toHaveBeenCalledWith(mockFields.f1, mockSchema, maxDepth, generateOptions);\n    });\n});\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGVBbGxPcGVyYXRpb25zLnRlc3QuanMiLCJzb3VyY2VSb290IjoiL2MvVXNlcnMvU2FuZHJvL3JlcG8vYW1wbGlmeS1jbGkvcGFja2FnZXMvYW1wbGlmeS1ncmFwaHFsLWRvY3MtZ2VuZXJhdG9yL3NyYy8iLCJzb3VyY2VzIjpbImdlbmVyYXRlQWxsT3BlcmF0aW9ucy50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEscUZBSWtEO0FBRWxELDZFQUFxRTtBQUdyRSxJQUFJLENBQUMsSUFBSSxDQUFDLHVDQUF1QyxDQUFDLENBQUE7QUFDbEQsTUFBTSxtQkFBbUIsR0FBRztJQUMxQixJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUM7SUFDbEIsSUFBSSxFQUFFLFdBQVc7Q0FDbEIsQ0FBQTtBQUNELDJCQUFpQixDQUFDLGVBQWUsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFBO0FBRXRELE1BQU0sVUFBVSxHQUFHO0lBQ2pCLEVBQUUsRUFBRSxJQUFJO0NBQ1QsQ0FBQTtBQUNELE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQTtBQUMzQixTQUFTLENBQUMsZUFBZSxDQUFDLFVBQVUsQ0FBQyxDQUFBO0FBRXJDLE1BQU0sVUFBVSxHQUFHO0lBQ2pCLFNBQVM7Q0FDVixDQUFBO0FBQ0QsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFBO0FBRW5CLE1BQU0sVUFBVSxHQUFHLGFBQWEsQ0FBQTtBQUNoQyxNQUFNLGVBQWUsR0FBc0IsRUFBRSw4QkFBOEIsRUFBRSxJQUFJLEVBQUUsQ0FBQTtBQUNuRixRQUFRLENBQUMsdUJBQXVCLEVBQUUsR0FBRyxFQUFFO0lBQ3JDLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDZCxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUE7SUFDdEIsQ0FBQyxDQUFDLENBQUE7SUFFRixFQUFFLENBQUMsaURBQWlELEVBQUUsR0FBRyxFQUFFO1FBQ3pELE1BQU0sQ0FBQyx1Q0FBZSxDQUFDLFVBQVUsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLGVBQWUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDOzRCQUUvRSxJQUFJLEVBQUUsT0FBTyxFQUNiLElBQUksRUFBRSxJQUFJLElBQ1AsbUJBQW1CO1NBRXpCLENBQUMsQ0FBQTtRQUNGLE1BQU0sQ0FBQywyQkFBaUIsQ0FBQyxDQUFDLG9CQUFvQixDQUM1QyxVQUFVLENBQUMsRUFBRSxFQUNiLFVBQVUsRUFDVixRQUFRLEVBQ1IsZUFBZSxDQUNoQixDQUFBO1FBQ0QsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLGdCQUFnQixFQUFFLENBQUE7UUFDcEMsTUFBTSxDQUFDLDJCQUFpQixDQUFDLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDbEQsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQzVDLENBQUMsQ0FBQyxDQUFBO0lBRUYsRUFBRSxDQUFDLGtEQUFrRCxFQUFFLEdBQUcsRUFBRTtRQUMxRCxNQUFNLENBQUMseUNBQWlCLENBQUMsVUFBVSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsZUFBZSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7NEJBRWpGLElBQUksRUFBRSxVQUFVLEVBQ2hCLElBQUksRUFBRSxJQUFJLElBQ1AsbUJBQW1CO1NBRXpCLENBQUMsQ0FBQTtRQUNGLE1BQU0sQ0FBQywyQkFBaUIsQ0FBQyxDQUFDLG9CQUFvQixDQUM1QyxVQUFVLENBQUMsRUFBRSxFQUNiLFVBQVUsRUFDVixRQUFRLEVBQ1IsZUFBZSxDQUNoQixDQUFBO1FBQ0QsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLGdCQUFnQixFQUFFLENBQUE7UUFDcEMsTUFBTSxDQUFDLDJCQUFpQixDQUFDLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDbEQsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQzVDLENBQUMsQ0FBQyxDQUFBO0lBRUYsRUFBRSxDQUFDLHNEQUFzRCxFQUFFLEdBQUcsRUFBRTtRQUM5RCxNQUFNLENBQUMsNkNBQXFCLENBQUMsVUFBVSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsZUFBZSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7NEJBRXJGLElBQUksRUFBRSxjQUFjLEVBQ3BCLElBQUksRUFBRSxJQUFJLElBQ1AsbUJBQW1CO1NBRXpCLENBQUMsQ0FBQTtRQUNGLE1BQU0sQ0FBQywyQkFBaUIsQ0FBQyxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ2xELE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUMxQyxNQUFNLENBQUMsMkJBQWlCLENBQUMsQ0FBQyxvQkFBb0IsQ0FDNUMsVUFBVSxDQUFDLEVBQUUsRUFDYixVQUFVLEVBQ1YsUUFBUSxFQUNSLGVBQWUsQ0FDaEIsQ0FBQTtJQUNILENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBnZW5lcmF0ZVF1ZXJpZXMsXG4gIGdlbmVyYXRlTXV0YXRpb25zLFxuICBnZW5lcmF0ZVN1YnNjcmlwdGlvbnMsXG59IGZyb20gJy4uLy4uL3NyYy9nZW5lcmF0b3IvZ2VuZXJhdGVBbGxPcGVyYXRpb25zJ1xuXG5pbXBvcnQgZ2VuZXJhdGVPcGVyYXRpb24gZnJvbSAnLi4vLi4vc3JjL2dlbmVyYXRvci9nZW5lcmF0ZU9wZXJhdGlvbidcbmltcG9ydCB7IEdRTERvY3NHZW5PcHRpb25zIH0gZnJvbSAnLi4vLi4vc3JjL2dlbmVyYXRvci90eXBlcydcblxuamVzdC5tb2NrKCcuLi8uLi9zcmMvZ2VuZXJhdG9yL2dlbmVyYXRlT3BlcmF0aW9uJylcbmNvbnN0IG1vY2tPcGVyYXRpb25SZXN1bHQgPSB7XG4gIGFyZ3M6IFsnTU9DS19BUkcnXSxcbiAgYm9keTogJ01PQ0tfQk9EWScsXG59XG5nZW5lcmF0ZU9wZXJhdGlvbi5tb2NrUmV0dXJuVmFsdWUobW9ja09wZXJhdGlvblJlc3VsdClcblxuY29uc3QgbW9ja0ZpZWxkcyA9IHtcbiAgZjE6ICdmMScsXG59XG5jb25zdCBnZXRGaWVsZHMgPSBqZXN0LmZuKClcbmdldEZpZWxkcy5tb2NrUmV0dXJuVmFsdWUobW9ja0ZpZWxkcylcblxuY29uc3Qgb3BlcmF0aW9ucyA9IHtcbiAgZ2V0RmllbGRzLFxufVxuY29uc3QgbWF4RGVwdGggPSAxMFxuXG5jb25zdCBtb2NrU2NoZW1hID0gJ01PQ0tfU0NIRU1BJ1xuY29uc3QgZ2VuZXJhdGVPcHRpb25zOiBHUUxEb2NzR2VuT3B0aW9ucyA9IHsgdXNlRXh0ZXJuYWxGcmFnbWVudEZvclMzT2JqZWN0OiB0cnVlIH1cbmRlc2NyaWJlKCdnZW5lcmF0ZUFsbE9wZXJhdGlvbnMnLCAoKSA9PiB7XG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpXG4gIH0pXG5cbiAgaXQoJ2dlbmVyYXRlUXVlcmllcyAtIHNob3VsZCBjYWxsIGdlbmVyYXRlT3BlcmF0aW9uJywgKCkgPT4ge1xuICAgIGV4cGVjdChnZW5lcmF0ZVF1ZXJpZXMob3BlcmF0aW9ucywgbW9ja1NjaGVtYSwgbWF4RGVwdGgsIGdlbmVyYXRlT3B0aW9ucykpLnRvRXF1YWwoW1xuICAgICAge1xuICAgICAgICB0eXBlOiAncXVlcnknLFxuICAgICAgICBuYW1lOiAnRjEnLFxuICAgICAgICAuLi5tb2NrT3BlcmF0aW9uUmVzdWx0LFxuICAgICAgfSxcbiAgICBdKVxuICAgIGV4cGVjdChnZW5lcmF0ZU9wZXJhdGlvbikudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICBtb2NrRmllbGRzLmYxLFxuICAgICAgbW9ja1NjaGVtYSxcbiAgICAgIG1heERlcHRoLFxuICAgICAgZ2VuZXJhdGVPcHRpb25zXG4gICAgKVxuICAgIGV4cGVjdChnZXRGaWVsZHMpLnRvSGF2ZUJlZW5DYWxsZWQoKVxuICAgIGV4cGVjdChnZW5lcmF0ZU9wZXJhdGlvbikudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpXG4gICAgZXhwZWN0KGdldEZpZWxkcykudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpXG4gIH0pXG5cbiAgaXQoJ2dlbmVyYXRlTXV0YXRpb24gLSBzaG91bGQgY2FsbCBnZW5lcmF0ZU9wZXJhdGlvbicsICgpID0+IHtcbiAgICBleHBlY3QoZ2VuZXJhdGVNdXRhdGlvbnMob3BlcmF0aW9ucywgbW9ja1NjaGVtYSwgbWF4RGVwdGgsIGdlbmVyYXRlT3B0aW9ucykpLnRvRXF1YWwoW1xuICAgICAge1xuICAgICAgICB0eXBlOiAnbXV0YXRpb24nLFxuICAgICAgICBuYW1lOiAnRjEnLFxuICAgICAgICAuLi5tb2NrT3BlcmF0aW9uUmVzdWx0LFxuICAgICAgfSxcbiAgICBdKVxuICAgIGV4cGVjdChnZW5lcmF0ZU9wZXJhdGlvbikudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICBtb2NrRmllbGRzLmYxLFxuICAgICAgbW9ja1NjaGVtYSxcbiAgICAgIG1heERlcHRoLFxuICAgICAgZ2VuZXJhdGVPcHRpb25zXG4gICAgKVxuICAgIGV4cGVjdChnZXRGaWVsZHMpLnRvSGF2ZUJlZW5DYWxsZWQoKVxuICAgIGV4cGVjdChnZW5lcmF0ZU9wZXJhdGlvbikudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpXG4gICAgZXhwZWN0KGdldEZpZWxkcykudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpXG4gIH0pXG5cbiAgaXQoJ2dlbmVyYXRlU3Vic2NyaXB0aW9uIC0gc2hvdWxkIGNhbGwgZ2VuZXJhdGVPcGVyYXRpb24nLCAoKSA9PiB7XG4gICAgZXhwZWN0KGdlbmVyYXRlU3Vic2NyaXB0aW9ucyhvcGVyYXRpb25zLCBtb2NrU2NoZW1hLCBtYXhEZXB0aCwgZ2VuZXJhdGVPcHRpb25zKSkudG9FcXVhbChbXG4gICAgICB7XG4gICAgICAgIHR5cGU6ICdzdWJzY3JpcHRpb24nLFxuICAgICAgICBuYW1lOiAnRjEnLFxuICAgICAgICAuLi5tb2NrT3BlcmF0aW9uUmVzdWx0LFxuICAgICAgfSxcbiAgICBdKVxuICAgIGV4cGVjdChnZW5lcmF0ZU9wZXJhdGlvbikudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpXG4gICAgZXhwZWN0KGdldEZpZWxkcykudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpXG4gICAgZXhwZWN0KGdlbmVyYXRlT3BlcmF0aW9uKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgIG1vY2tGaWVsZHMuZjEsXG4gICAgICBtb2NrU2NoZW1hLFxuICAgICAgbWF4RGVwdGgsXG4gICAgICBnZW5lcmF0ZU9wdGlvbnNcbiAgICApXG4gIH0pXG59KVxuIl19");"use strict";



jest.mock('../../src/generator/generateOperation');Object.defineProperty(exports, "__esModule", { value: true });const generateAllOperations_1 = require("../../src/generator/generateAllOperations");const generateOperation_1 = require("../../src/generator/generateOperation");
const mockOperationResult = {
    args: ['MOCK_ARG'],
    body: 'MOCK_BODY' };

generateOperation_1.default.mockReturnValue(mockOperationResult);
const mockFields = {
    f1: 'f1' };

const getFields = jest.fn();
getFields.mockReturnValue(mockFields);
const operations = {
    getFields };

const maxDepth = 10;
const mockSchema = 'MOCK_SCHEMA';
const generateOptions = { useExternalFragmentForS3Object: true };
describe('generateAllOperations', () => {
    beforeEach(() => {
        jest.clearAllMocks();
    });
    it('generateQueries - should call generateOperation', () => {
        expect(generateAllOperations_1.generateQueries(operations, mockSchema, maxDepth, generateOptions)).toEqual([
        Object.assign({ type: 'query', name: 'F1' }, mockOperationResult)]);

        expect(generateOperation_1.default).toHaveBeenCalledWith(mockFields.f1, mockSchema, maxDepth, generateOptions);
        expect(getFields).toHaveBeenCalled();
        expect(generateOperation_1.default).toHaveBeenCalledTimes(1);
        expect(getFields).toHaveBeenCalledTimes(1);
    });
    it('generateMutation - should call generateOperation', () => {
        expect(generateAllOperations_1.generateMutations(operations, mockSchema, maxDepth, generateOptions)).toEqual([
        Object.assign({ type: 'mutation', name: 'F1' }, mockOperationResult)]);

        expect(generateOperation_1.default).toHaveBeenCalledWith(mockFields.f1, mockSchema, maxDepth, generateOptions);
        expect(getFields).toHaveBeenCalled();
        expect(generateOperation_1.default).toHaveBeenCalledTimes(1);
        expect(getFields).toHaveBeenCalledTimes(1);
    });
    it('generateSubscription - should call generateOperation', () => {
        expect(generateAllOperations_1.generateSubscriptions(operations, mockSchema, maxDepth, generateOptions)).toEqual([
        Object.assign({ type: 'subscription', name: 'F1' }, mockOperationResult)]);

        expect(generateOperation_1.default).toHaveBeenCalledTimes(1);
        expect(getFields).toHaveBeenCalledTimes(1);
        expect(generateOperation_1.default).toHaveBeenCalledWith(mockFields.f1, mockSchema, maxDepth, generateOptions);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdlbmVyYXRlQWxsT3BlcmF0aW9ucy50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFTQSxLQUFLLElBQUwsQ0FBVSx1Q0FBVixFLDhEQVRBLE1BQUEsMEJBQUEsUUFBQSwyQ0FBQSxDQUFBLENBTUEsTUFBQSxzQkFBQSxRQUFBLHVDQUFBLENBQUE7QUFJQSxNQUFNLHNCQUFzQjtBQUMxQixVQUFNLENBQUMsVUFBRCxDQURvQjtBQUUxQixVQUFNLFdBRm9CLEVBQTVCOztBQUlBLG9CQUFBLE9BQUEsQ0FBa0IsZUFBbEIsQ0FBa0MsbUJBQWxDO0FBRUEsTUFBTSxhQUFhO0FBQ2pCLFFBQUksSUFEYSxFQUFuQjs7QUFHQSxNQUFNLFlBQVksS0FBSyxFQUFMLEVBQWxCO0FBQ0EsVUFBVSxlQUFWLENBQTBCLFVBQTFCO0FBRUEsTUFBTSxhQUFhO0FBQ2pCLGFBRGlCLEVBQW5COztBQUdBLE1BQU0sV0FBVyxFQUFqQjtBQUVBLE1BQU0sYUFBYSxhQUFuQjtBQUNBLE1BQU0sa0JBQXFDLEVBQUUsZ0NBQWdDLElBQWxDLEVBQTNDO0FBQ0EsU0FBUyx1QkFBVCxFQUFrQyxNQUFLO0FBQ3JDLGVBQVcsTUFBSztBQUNkLGFBQUssYUFBTDtBQUNELEtBRkQ7QUFJQSxPQUFHLGlEQUFILEVBQXNELE1BQUs7QUFDekQsZUFBTyx3QkFBQSxlQUFBLENBQWdCLFVBQWhCLEVBQTRCLFVBQTVCLEVBQXdDLFFBQXhDLEVBQWtELGVBQWxELENBQVAsRUFBMkUsT0FBM0UsQ0FBbUY7d0JBRS9FLE1BQU0sTyxFQUNOLE1BQU0sSSxJQUNILG1CLENBSjRFLENBQW5GOztBQU9BLGVBQU8sb0JBQUEsT0FBUCxFQUEwQixvQkFBMUIsQ0FDRSxXQUFXLEVBRGIsRUFFRSxVQUZGLEVBR0UsUUFIRixFQUlFLGVBSkY7QUFNQSxlQUFPLFNBQVAsRUFBa0IsZ0JBQWxCO0FBQ0EsZUFBTyxvQkFBQSxPQUFQLEVBQTBCLHFCQUExQixDQUFnRCxDQUFoRDtBQUNBLGVBQU8sU0FBUCxFQUFrQixxQkFBbEIsQ0FBd0MsQ0FBeEM7QUFDRCxLQWpCRDtBQW1CQSxPQUFHLGtEQUFILEVBQXVELE1BQUs7QUFDMUQsZUFBTyx3QkFBQSxpQkFBQSxDQUFrQixVQUFsQixFQUE4QixVQUE5QixFQUEwQyxRQUExQyxFQUFvRCxlQUFwRCxDQUFQLEVBQTZFLE9BQTdFLENBQXFGO3dCQUVqRixNQUFNLFUsRUFDTixNQUFNLEksSUFDSCxtQixDQUo4RSxDQUFyRjs7QUFPQSxlQUFPLG9CQUFBLE9BQVAsRUFBMEIsb0JBQTFCLENBQ0UsV0FBVyxFQURiLEVBRUUsVUFGRixFQUdFLFFBSEYsRUFJRSxlQUpGO0FBTUEsZUFBTyxTQUFQLEVBQWtCLGdCQUFsQjtBQUNBLGVBQU8sb0JBQUEsT0FBUCxFQUEwQixxQkFBMUIsQ0FBZ0QsQ0FBaEQ7QUFDQSxlQUFPLFNBQVAsRUFBa0IscUJBQWxCLENBQXdDLENBQXhDO0FBQ0QsS0FqQkQ7QUFtQkEsT0FBRyxzREFBSCxFQUEyRCxNQUFLO0FBQzlELGVBQU8sd0JBQUEscUJBQUEsQ0FBc0IsVUFBdEIsRUFBa0MsVUFBbEMsRUFBOEMsUUFBOUMsRUFBd0QsZUFBeEQsQ0FBUCxFQUFpRixPQUFqRixDQUF5Rjt3QkFFckYsTUFBTSxjLEVBQ04sTUFBTSxJLElBQ0gsbUIsQ0FKa0YsQ0FBekY7O0FBT0EsZUFBTyxvQkFBQSxPQUFQLEVBQTBCLHFCQUExQixDQUFnRCxDQUFoRDtBQUNBLGVBQU8sU0FBUCxFQUFrQixxQkFBbEIsQ0FBd0MsQ0FBeEM7QUFDQSxlQUFPLG9CQUFBLE9BQVAsRUFBMEIsb0JBQTFCLENBQ0UsV0FBVyxFQURiLEVBRUUsVUFGRixFQUdFLFFBSEYsRUFJRSxlQUpGO0FBTUQsS0FoQkQ7QUFpQkQsQ0E1REQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBnZW5lcmF0ZVF1ZXJpZXMsXG4gIGdlbmVyYXRlTXV0YXRpb25zLFxuICBnZW5lcmF0ZVN1YnNjcmlwdGlvbnMsXG59IGZyb20gJy4uLy4uL3NyYy9nZW5lcmF0b3IvZ2VuZXJhdGVBbGxPcGVyYXRpb25zJ1xuXG5pbXBvcnQgZ2VuZXJhdGVPcGVyYXRpb24gZnJvbSAnLi4vLi4vc3JjL2dlbmVyYXRvci9nZW5lcmF0ZU9wZXJhdGlvbidcbmltcG9ydCB7IEdRTERvY3NHZW5PcHRpb25zIH0gZnJvbSAnLi4vLi4vc3JjL2dlbmVyYXRvci90eXBlcydcblxuamVzdC5tb2NrKCcuLi8uLi9zcmMvZ2VuZXJhdG9yL2dlbmVyYXRlT3BlcmF0aW9uJylcbmNvbnN0IG1vY2tPcGVyYXRpb25SZXN1bHQgPSB7XG4gIGFyZ3M6IFsnTU9DS19BUkcnXSxcbiAgYm9keTogJ01PQ0tfQk9EWScsXG59XG5nZW5lcmF0ZU9wZXJhdGlvbi5tb2NrUmV0dXJuVmFsdWUobW9ja09wZXJhdGlvblJlc3VsdClcblxuY29uc3QgbW9ja0ZpZWxkcyA9IHtcbiAgZjE6ICdmMScsXG59XG5jb25zdCBnZXRGaWVsZHMgPSBqZXN0LmZuKClcbmdldEZpZWxkcy5tb2NrUmV0dXJuVmFsdWUobW9ja0ZpZWxkcylcblxuY29uc3Qgb3BlcmF0aW9ucyA9IHtcbiAgZ2V0RmllbGRzLFxufVxuY29uc3QgbWF4RGVwdGggPSAxMFxuXG5jb25zdCBtb2NrU2NoZW1hID0gJ01PQ0tfU0NIRU1BJ1xuY29uc3QgZ2VuZXJhdGVPcHRpb25zOiBHUUxEb2NzR2VuT3B0aW9ucyA9IHsgdXNlRXh0ZXJuYWxGcmFnbWVudEZvclMzT2JqZWN0OiB0cnVlIH1cbmRlc2NyaWJlKCdnZW5lcmF0ZUFsbE9wZXJhdGlvbnMnLCAoKSA9PiB7XG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpXG4gIH0pXG5cbiAgaXQoJ2dlbmVyYXRlUXVlcmllcyAtIHNob3VsZCBjYWxsIGdlbmVyYXRlT3BlcmF0aW9uJywgKCkgPT4ge1xuICAgIGV4cGVjdChnZW5lcmF0ZVF1ZXJpZXMob3BlcmF0aW9ucywgbW9ja1NjaGVtYSwgbWF4RGVwdGgsIGdlbmVyYXRlT3B0aW9ucykpLnRvRXF1YWwoW1xuICAgICAge1xuICAgICAgICB0eXBlOiAncXVlcnknLFxuICAgICAgICBuYW1lOiAnRjEnLFxuICAgICAgICAuLi5tb2NrT3BlcmF0aW9uUmVzdWx0LFxuICAgICAgfSxcbiAgICBdKVxuICAgIGV4cGVjdChnZW5lcmF0ZU9wZXJhdGlvbikudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICBtb2NrRmllbGRzLmYxLFxuICAgICAgbW9ja1NjaGVtYSxcbiAgICAgIG1heERlcHRoLFxuICAgICAgZ2VuZXJhdGVPcHRpb25zXG4gICAgKVxuICAgIGV4cGVjdChnZXRGaWVsZHMpLnRvSGF2ZUJlZW5DYWxsZWQoKVxuICAgIGV4cGVjdChnZW5lcmF0ZU9wZXJhdGlvbikudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpXG4gICAgZXhwZWN0KGdldEZpZWxkcykudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpXG4gIH0pXG5cbiAgaXQoJ2dlbmVyYXRlTXV0YXRpb24gLSBzaG91bGQgY2FsbCBnZW5lcmF0ZU9wZXJhdGlvbicsICgpID0+IHtcbiAgICBleHBlY3QoZ2VuZXJhdGVNdXRhdGlvbnMob3BlcmF0aW9ucywgbW9ja1NjaGVtYSwgbWF4RGVwdGgsIGdlbmVyYXRlT3B0aW9ucykpLnRvRXF1YWwoW1xuICAgICAge1xuICAgICAgICB0eXBlOiAnbXV0YXRpb24nLFxuICAgICAgICBuYW1lOiAnRjEnLFxuICAgICAgICAuLi5tb2NrT3BlcmF0aW9uUmVzdWx0LFxuICAgICAgfSxcbiAgICBdKVxuICAgIGV4cGVjdChnZW5lcmF0ZU9wZXJhdGlvbikudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICBtb2NrRmllbGRzLmYxLFxuICAgICAgbW9ja1NjaGVtYSxcbiAgICAgIG1heERlcHRoLFxuICAgICAgZ2VuZXJhdGVPcHRpb25zXG4gICAgKVxuICAgIGV4cGVjdChnZXRGaWVsZHMpLnRvSGF2ZUJlZW5DYWxsZWQoKVxuICAgIGV4cGVjdChnZW5lcmF0ZU9wZXJhdGlvbikudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpXG4gICAgZXhwZWN0KGdldEZpZWxkcykudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpXG4gIH0pXG5cbiAgaXQoJ2dlbmVyYXRlU3Vic2NyaXB0aW9uIC0gc2hvdWxkIGNhbGwgZ2VuZXJhdGVPcGVyYXRpb24nLCAoKSA9PiB7XG4gICAgZXhwZWN0KGdlbmVyYXRlU3Vic2NyaXB0aW9ucyhvcGVyYXRpb25zLCBtb2NrU2NoZW1hLCBtYXhEZXB0aCwgZ2VuZXJhdGVPcHRpb25zKSkudG9FcXVhbChbXG4gICAgICB7XG4gICAgICAgIHR5cGU6ICdzdWJzY3JpcHRpb24nLFxuICAgICAgICBuYW1lOiAnRjEnLFxuICAgICAgICAuLi5tb2NrT3BlcmF0aW9uUmVzdWx0LFxuICAgICAgfSxcbiAgICBdKVxuICAgIGV4cGVjdChnZW5lcmF0ZU9wZXJhdGlvbikudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpXG4gICAgZXhwZWN0KGdldEZpZWxkcykudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpXG4gICAgZXhwZWN0KGdlbmVyYXRlT3BlcmF0aW9uKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgIG1vY2tGaWVsZHMuZjEsXG4gICAgICBtb2NrU2NoZW1hLFxuICAgICAgbWF4RGVwdGgsXG4gICAgICBnZW5lcmF0ZU9wdGlvbnNcbiAgICApXG4gIH0pXG59KVxuIl0sInNvdXJjZVJvb3QiOiIvYy9Vc2Vycy9TYW5kcm8vcmVwby9hbXBsaWZ5LWNsaS9wYWNrYWdlcy9hbXBsaWZ5LWdyYXBocWwtZG9jcy1nZW5lcmF0b3Ivc3JjLyJ9