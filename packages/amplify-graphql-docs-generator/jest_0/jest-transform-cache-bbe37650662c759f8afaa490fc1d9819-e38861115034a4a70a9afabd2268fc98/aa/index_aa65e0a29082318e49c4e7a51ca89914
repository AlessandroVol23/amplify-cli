104cd0b62d03037785a4dda9d964d7b6
'use strict';
require('ts-jest').install("/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-docs-generator/src/index.ts", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst handlebars = require(\"handlebars\");\nconst prettier = require(\"prettier\");\nconst camelCase = require('camel-case');\nconst generator_1 = require(\"./generator\");\nconst TEMPLATE_DIR = path.resolve(path.join(__dirname, '../templates'));\nconst FILE_EXTENSION_MAP = {\n    javascript: 'js',\n    graphql: 'graphql',\n    flow: 'js',\n    typescript: 'ts',\n    angular: 'graphql',\n};\nfunction generate(schemaPath, outputPath, options) {\n    const language = options.language || 'graphql';\n    const schemaContent = fs.readFileSync(schemaPath, 'utf8').trim();\n    const schemaData = JSON.parse(schemaContent);\n    if (!schemaData.data && !schemaData.__schema) {\n        // tslint:disable-line\n        throw new Error('GraphQL schema file should contain a valid GraphQL introspection query result');\n    }\n    if (!Object.keys(FILE_EXTENSION_MAP).includes(language)) {\n        throw new Error(`Language ${language} not supported`);\n    }\n    const schema = schemaData.data || schemaData;\n    const maxDepth = options.maxDepth || 3;\n    const useExternalFragmentForS3Object = options.language === 'graphql';\n    const gqlOperations = generator_1.default(schema, maxDepth, {\n        useExternalFragmentForS3Object: useExternalFragmentForS3Object,\n    });\n    registerPartials();\n    registerHelpers();\n    const fileExtension = FILE_EXTENSION_MAP[language];\n    if (options.separateFiles) {\n        ['queries', 'mutations', 'subscriptions'].forEach((op) => {\n            const ops = gqlOperations[op];\n            if (ops.length) {\n                const gql = render({ operations: gqlOperations[op], fragments: [] }, language);\n                fs.writeFileSync(path.resolve(path.join(outputPath, `${op}.${fileExtension}`)), gql);\n            }\n        });\n        if (gqlOperations.fragments.length) {\n            const gql = render({ operations: [], fragments: gqlOperations.fragments }, language);\n            fs.writeFileSync(path.resolve(path.join(outputPath, `fragments.${fileExtension}`)), gql);\n        }\n    }\n    else {\n        const ops = [\n            ...gqlOperations.queries,\n            ...gqlOperations.mutations,\n            ...gqlOperations.subscriptions,\n        ];\n        if (ops.length) {\n            const gql = render({ operations: ops, fragments: gqlOperations.fragments }, language);\n            fs.writeFileSync(path.resolve(outputPath), gql);\n        }\n    }\n}\nfunction render(doc, language = 'graphql') {\n    const templateFiles = {\n        javascript: 'javascript.hbs',\n        graphql: 'graphql.hbs',\n        typescript: 'typescript.hbs',\n        flow: 'flow.hbs',\n        angular: 'graphql.hbs',\n    };\n    const templatePath = path.join(TEMPLATE_DIR, templateFiles[language]);\n    const templateStr = fs.readFileSync(templatePath, 'utf8');\n    const template = handlebars.compile(templateStr, {\n        noEscape: true,\n        preventIndent: true,\n    });\n    const gql = template(doc);\n    return format(gql, language);\n}\nfunction registerPartials() {\n    const partials = fs.readdirSync(TEMPLATE_DIR);\n    partials.forEach((partial) => {\n        if (!partial.startsWith('_') || !partial.endsWith('.hbs')) {\n            return;\n        }\n        const partialPath = path.join(TEMPLATE_DIR, partial);\n        const partialName = path.basename(partial).split('.')[0];\n        const partialContent = fs.readFileSync(partialPath, 'utf8');\n        handlebars.registerPartial(partialName.substring(1), partialContent);\n    });\n}\nfunction registerHelpers() {\n    handlebars.registerHelper('format', function (options) {\n        const result = options.fn(this);\n        return format(result);\n    });\n    handlebars.registerHelper('camelCase', camelCase);\n}\nfunction format(str, language = 'graphql') {\n    const parserMap = {\n        javascript: 'babel',\n        graphql: 'graphql',\n        typescript: 'typescript',\n        flow: 'flow',\n        angular: 'graphql',\n    };\n    return prettier.format(str, { parser: parserMap[language] });\n}\nexports.default = generate;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiL2MvVXNlcnMvU2FuZHJvL3JlcG8vYW1wbGlmeS1jbGkvcGFja2FnZXMvYW1wbGlmeS1ncmFwaHFsLWRvY3MtZ2VuZXJhdG9yL3NyYy8iLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEseUJBQXdCO0FBQ3hCLDZCQUE0QjtBQUM1Qix5Q0FBd0M7QUFDeEMscUNBQW9DO0FBQ3BDLE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQTtBQVV2QywyQ0FBa0c7QUFFbEcsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxjQUFjLENBQUMsQ0FBQyxDQUFBO0FBQ3ZFLE1BQU0sa0JBQWtCLEdBQUc7SUFDekIsVUFBVSxFQUFFLElBQUk7SUFDaEIsT0FBTyxFQUFFLFNBQVM7SUFDbEIsSUFBSSxFQUFFLElBQUk7SUFDVixVQUFVLEVBQUUsSUFBSTtJQUNoQixPQUFPLEVBQUUsU0FBUztDQUNuQixDQUFBO0FBRUQsa0JBQ0UsVUFBa0IsRUFDbEIsVUFBa0IsRUFDbEIsT0FBdUU7SUFFdkUsTUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLFFBQVEsSUFBSSxTQUFTLENBQUE7SUFDOUMsTUFBTSxhQUFhLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUE7SUFDaEUsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQTtJQUM1QyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUU7UUFDNUMsc0JBQXNCO1FBQ3RCLE1BQU0sSUFBSSxLQUFLLENBQUMsK0VBQStFLENBQUMsQ0FBQTtLQUNqRztJQUNELElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGtC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QUMvQixPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN2QixDQUFDLENBQUMsQ0FBQTtJQUVGLFVBQVUsQ0FBQyxjQUFjLENBQUMsV0FBVyxFQUFFLFNBQVMsQ0FBQyxDQUFBO0FBQ25ELENBQUM7QUFFRCxnQkFBZ0IsR0FBVyxFQUFFLFdBQW1CLFNBQVM7SUFDdkQsTUFBTSxTQUFTLEdBQUc7UUFDaEIsVUFBVSxFQUFFLE9BQU87UUFDbkIsT0FBTyxFQUFFLFNBQVM7UUFDbEIsVUFBVSxFQUFFLFlBQVk7UUFDeEIsSUFBSSxFQUFFLE1BQU07UUFDWixPQUFPLEVBQUUsU0FBUztLQUNuQixDQUFBO0lBQ0QsT0FBTyxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRSxTQUFTLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFBO0FBQzlELENBQUM7QUFFRCxrQkFBZSxRQUFRLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBmcyBmcm9tICdmcydcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCdcbmltcG9ydCAqIGFzIGhhbmRsZWJhcnMgZnJvbSAnaGFuZGxlYmFycydcbmltcG9ydCAqIGFzIHByZXR0aWVyIGZyb20gJ3ByZXR0aWVyJ1xuY29uc3QgY2FtZWxDYXNlID0gcmVxdWlyZSgnY2FtZWwtY2FzZScpXG5cbmltcG9ydCB7XG4gIGJ1aWxkQ2xpZW50U2NoZW1hLFxuICBEb2N1bWVudE5vZGUsXG4gIEdyYXBoUUxTY2hlbWEsXG4gIEludHJvc3BlY3Rpb25TY2hlbWEsXG4gIEludHJvc3BlY3Rpb25RdWVyeSxcbn0gZnJvbSAnZ3JhcGhxbCdcblxuaW1wb3J0IGdlbmVyYXRlQWxsT3BzLCB7IEdRTFRlbXBsYXRlT3AsIEdRTEFsbE9wZXJhdGlvbnMsIEdRTFRlbXBsYXRlRnJhZ21lbnQgfSBmcm9tICcuL2dlbmVyYXRvcidcblxuY29uc3QgVEVNUExBVEVfRElSID0gcGF0aC5yZXNvbHZlKHBhdGguam9pbihfX2Rpcm5hbWUsICcuLi90ZW1wbGF0ZXMnKSlcbmNvbnN0IEZJTEVfRVhURU5TSU9OX01BUCA9IHtcbiAgamF2YXNjcmlwdDogJ2pzJyxcbiAgZ3JhcGhxbDogJ2dyYXBocWwnLFxuICBmbG93OiAnanMnLFxuICB0eXBlc2NyaXB0OiAndHMnLFxuICBhbmd1bGFyOiAnZ3JhcGhxbCcsXG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlKFxuICBzY2hlbWFQYXRoOiBzdHJpbmcsXG4gIG91dHB1dFBhdGg6IHN0cmluZyxcbiAgb3B0aW9uczogeyBzZXBhcmF0ZUZpbGVzOiBib29sZWFuOyBsYW5ndWFnZTogc3RyaW5nOyBtYXhEZXB0aDogbnVtYmVyIH1cbik6IHZvaWQge1xuICBjb25zdCBsYW5ndWFnZSA9IG9wdGlvbnMubGFuZ3VhZ2UgfHwgJ2dyYXBocWwnXG4gIGNvbnN0IHNjaGVtYUNvbnRlbnQgPSBmcy5yZWFkRmlsZVN5bmMoc2NoZW1hUGF0aCwgJ3V0ZjgnKS50cmltKClcbiAgY29uc3Qgc2NoZW1hRGF0YSA9IEpTT04ucGFyc2Uoc2NoZW1hQ29udGVudClcbiAgaWYgKCFzY2hlbWFEYXRhLmRhdGEgJiYgIXNjaGVtYURhdGEuX19zY2hlbWEpIHtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1saW5lXG4gICAgdGhyb3cgbmV3IEVycm9yKCdHcmFwaFFMIHNjaGVtYSBmaWxlIHNob3VsZCBjb250YWluIGEgdmFsaWQgR3JhcGhRTCBpbnRyb3NwZWN0aW9uIHF1ZXJ5IHJlc3VsdCcpXG4gIH1cbiAgaWYgKCFPYmplY3Qua2V5cyhGSUxFX0VYVEVOU0lPTl9NQVApLmluY2x1ZGVzKGxhbmd1YWdlKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgTGFuZ3VhZ2UgJHtsYW5ndWFnZX0gbm90IHN1cHBvcnRlZGApXG4gIH1cblxuICBjb25zdCBzY2hlbWE6IEludHJvc3BlY3Rpb25RdWVyeSA9IHNjaGVtYURhdGEuZGF0YSB8fCBzY2hlbWFEYXRhXG4gIGNvbnN0IG1heERlcHRoID0gb3B0aW9ucy5tYXhEZXB0aCB8fCAzXG4gIGNvbnN0IHVzZUV4dGVybmFsRnJhZ21lbnRGb3JTM09iamVjdCA9IG9wdGlvbnMubGFuZ3VhZ2UgPT09ICdncmFwaHFsJ1xuICBjb25zdCBncWxPcGVyYXRpb25zOiBHUUxBbGxPcGVyYXRpb25zID0gZ2VuZXJhdGVBbGxPcHMoc2NoZW1hLCBtYXhEZXB0aCwge1xuICAgIHVzZUV4dGVybmFsRnJhZ21lbnRGb3JTM09iamVjdDogdXNlRXh0ZXJuYWxGcmFnbWVudEZvclMzT2JqZWN0LFxuICB9KVxuICByZWdpc3RlclBhcnRpYWxzKClcbiAgcmVnaXN0ZXJIZWxwZXJzKClcblxuICBjb25zdCBmaWxlRXh0ZW5zaW9uID0gRklMRV9FWFRFTlNJT05fTUFQW2xhbmd1YWdlXVxuICBpZiAob3B0aW9ucy5zZXBhcmF0ZUZpbGVzKSB7XG4gICAgWydxdWVyaWVzJywgJ211dGF0aW9ucycsICdzdWJzY3JpcHRpb25zJ10uZm9yRWFjaCgob3ApID0+IHtcbiAgICAgIGNvbnN0IG9wcyA9IGdxbE9wZXJhdGlvbnNbb3BdXG4gICAgICBpZiAob3BzLmxlbmd0aCkge1xuICAgICAgICBjb25zdCBncWwgPSByZW5kZXIoeyBvcGVyYXRpb25zOiBncWxPcGVyYXRpb25zW29wXSwgZnJhZ21lbnRzOiBbXSB9LCBsYW5ndWFnZSlcbiAgICAgICAgZnMud3JpdGVGaWxlU3luYyhwYXRoLnJlc29sdmUocGF0aC5qb2luKG91dHB1dFBhdGgsIGAke29wfS4ke2ZpbGVFeHRlbnNpb259YCkpLCBncWwpXG4gICAgICB9XG4gICAgfSlcblxuICAgIGlmIChncWxPcGVyYXRpb25zLmZyYWdtZW50cy5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IGdxbCA9IHJlbmRlcih7IG9wZXJhdGlvbnM6IFtdLCBmcmFnbWVudHM6IGdxbE9wZXJhdGlvbnMuZnJhZ21lbnRzIH0sIGxhbmd1YWdlKVxuICAgICAgZnMud3JpdGVGaWxlU3luYyhwYXRoLnJlc29sdmUocGF0aC5qb2luKG91dHB1dFBhdGgsIGBmcmFnbWVudHMuJHtmaWxlRXh0ZW5zaW9ufWApKSwgZ3FsKVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBjb25zdCBvcHMgPSBbXG4gICAgICAuLi5ncWxPcGVyYXRpb25zLnF1ZXJpZXMsXG4gICAgICAuLi5ncWxPcGVyYXRpb25zLm11dGF0aW9ucyxcbiAgICAgIC4uLmdxbE9wZXJhdGlvbnMuc3Vic2NyaXB0aW9ucyxcbiAgICBdXG4gICAgaWYgKG9wcy5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IGdxbCA9IHJlbmRlcih7IG9wZXJhdGlvbnM6IG9wcywgZnJhZ21lbnRzOiBncWxPcGVyYXRpb25zLmZyYWdtZW50cyB9LCBsYW5ndWFnZSlcbiAgICAgIGZzLndyaXRlRmlsZVN5bmMocGF0aC5yZXNvbHZlKG91dHB1dFBhdGgpLCBncWwpXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHJlbmRlcihcbiAgZG9jOiB7IG9wZXJhdGlvbnM6IEFycmF5PEdRTFRlbXBsYXRlT3A+OyBmcmFnbWVudHM/OiBHUUxUZW1wbGF0ZUZyYWdtZW50W10gfSxcbiAgbGFuZ3VhZ2U6IHN0cmluZyA9ICdncmFwaHFsJ1xuKSB7XG4gIGNvbnN0IHRlbXBsYXRlRmlsZXMgPSB7XG4gICAgamF2YXNjcmlwdDogJ2phdmFzY3JpcHQuaGJzJyxcbiAgICBncmFwaHFsOiAnZ3JhcGhxbC5oYnMnLFxuICAgIHR5cGVzY3JpcHQ6ICd0eXBlc2NyaXB0LmhicycsXG4gICAgZmxvdzogJ2Zsb3cuaGJzJyxcbiAgICBhbmd1bGFyOiAnZ3JhcGhxbC5oYnMnLFxuICB9XG5cbiAgY29uc3QgdGVtcGxhdGVQYXRoID0gcGF0aC5qb2luKFRFTVBMQVRFX0RJUiwgdGVtcGxhdGVGaWxlc1tsYW5ndWFnZV0pXG4gIGNvbnN0IHRlbXBsYXRlU3RyID0gZnMucmVhZEZpbGVTeW5jKHRlbXBsYXRlUGF0aCwgJ3V0ZjgnKVxuXG4gIGNvbnN0IHRlbXBsYXRlID0gaGFuZGxlYmFycy5jb21waWxlKHRlbXBsYXRlU3RyLCB7XG4gICAgbm9Fc2NhcGU6IHRydWUsXG4gICAgcHJldmVudEluZGVudDogdHJ1ZSxcbiAgfSlcbiAgY29uc3QgZ3FsID0gdGVtcGxhdGUoZG9jKVxuICByZXR1cm4gZm9ybWF0KGdxbCwgbGFuZ3VhZ2UpXG59XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyUGFydGlhbHMoKSB7XG4gIGNvbnN0IHBhcnRpYWxzID0gZnMucmVhZGRpclN5bmMoVEVNUExBVEVfRElSKVxuICBwYXJ0aWFscy5mb3JFYWNoKChwYXJ0aWFsKSA9PiB7XG4gICAgaWYgKCFwYXJ0aWFsLnN0YXJ0c1dpdGgoJ18nKSB8fCAhcGFydGlhbC5lbmRzV2l0aCgnLmhicycpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgY29uc3QgcGFydGlhbFBhdGggPSBwYXRoLmpvaW4oVEVNUExBVEVfRElSLCBwYXJ0aWFsKVxuICAgIGNvbnN0IHBhcnRpYWxOYW1lID0gcGF0aC5iYXNlbmFtZShwYXJ0aWFsKS5zcGxpdCgnLicpWzBdXG4gICAgY29uc3QgcGFydGlhbENvbnRlbnQgPSBmcy5yZWFkRmlsZVN5bmMocGFydGlhbFBhdGgsICd1dGY4JylcbiAgICBoYW5kbGViYXJzLnJlZ2lzdGVyUGFydGlhbChwYXJ0aWFsTmFtZS5zdWJzdHJpbmcoMSksIHBhcnRpYWxDb250ZW50KVxuICB9KVxufVxuXG5mdW5jdGlvbiByZWdpc3RlckhlbHBlcnMoKSB7XG4gIGhhbmRsZWJhcnMucmVnaXN0ZXJIZWxwZXIoJ2Zvcm1hdCcsIGZ1bmN0aW9uKG9wdGlvbnM6IGFueSkge1xuICAgIGNvbnN0IHJlc3VsdCA9IG9wdGlvbnMuZm4odGhpcylcbiAgICByZXR1cm4gZm9ybWF0KHJlc3VsdClcbiAgfSlcblxuICBoYW5kbGViYXJzLnJlZ2lzdGVySGVscGVyKCdjYW1lbENhc2UnLCBjYW1lbENhc2UpXG59XG5cbmZ1bmN0aW9uIGZvcm1hdChzdHI6IHN0cmluZywgbGFuZ3VhZ2U6IHN0cmluZyA9ICdncmFwaHFsJyk6IHN0cmluZyB7XG4gIGNvbnN0IHBhcnNlck1hcCA9IHtcbiAgICBqYXZhc2NyaXB0OiAnYmFiZWwnLFxuICAgIGdyYXBocWw6ICdncmFwaHFsJyxcbiAgICB0eXBlc2NyaXB0OiAndHlwZXNjcmlwdCcsXG4gICAgZmxvdzogJ2Zsb3cnLFxuICAgIGFuZ3VsYXI6ICdncmFwaHFsJyxcbiAgfVxuICByZXR1cm4gcHJldHRpZXIuZm9ybWF0KHN0ciwgeyBwYXJzZXI6IHBhcnNlck1hcFtsYW5ndWFnZV0gfSlcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2VuZXJhdGVcbiJdfQ==");"use strict"; /* istanbul ignore next */var cov_2fmtt7ffb4 = function () {
    var path = "/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-docs-generator/src/index.ts",
        hash = "637038559cba208dccd43ec96f4d08aed4c82fc7",
        Function = function () {}.constructor,
        global = new Function('return this')(),
        gcv = "__coverage__",
        coverageData = { path: "/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-docs-generator/src/index.ts", statementMap: { "0": { start: { line: 2, column: 0 }, end: { line: 2, column: 62 } }, "1": { start: { line: 3, column: 11 }, end: { line: 3, column: 24 } }, "2": { start: { line: 4, column: 13 }, end: { line: 4, column: 28 } }, "3": { start: { line: 5, column: 19 }, end: { line: 5, column: 40 } }, "4": { start: { line: 6, column: 17 }, end: { line: 6, column: 36 } }, "5": { start: { line: 7, column: 18 }, end: { line: 7, column: 39 } }, "6": { start: { line: 8, column: 20 }, end: { line: 8, column: 42 } }, "7": { start: { line: 9, column: 21 }, end: { line: 9, column: 71 } }, "8": { start: { line: 10, column: 27 }, end: { line: 16, column: 1 } }, "9": { start: { line: 18, column: 21 }, end: { line: 18, column: 50 } }, "10": { start: { line: 19, column: 26 }, end: { line: 19, column: 68 } }, "11": { start: { line: 20, column: 23 }, end: { line: 20, column: 48 } }, "12": { start: { line: 21, column: 4 }, end: { line: 24, column: 5 } }, "13": { start: { line: 23, column: 8 }, end: { line: 23, column: 105 } }, "14": { start: { line: 25, column: 4 }, end: { line: 27, column: 5 } }, "15": { start: { line: 26, column: 8 }, end: { line: 26, column: 62 } }, "16": { start: { line: 28, column: 19 }, end: { line: 28, column: 48 } }, "17": { start: { line: 29, column: 21 }, end: { line: 29, column: 42 } }, "18": { start: { line: 30, column: 43 }, end: { line: 30, column: 73 } }, "19": { start: { line: 31, column: 26 }, end: { line: 33, column: 6 } }, "20": { start: { line: 34, column: 4 }, end: { line: 34, column: 23 } }, "21": { start: { line: 35, column: 4 }, end: { line: 35, column: 22 } }, "22": { start: { line: 36, column: 26 }, end: { line: 36, column: 54 } }, "23": { start: { line: 37, column: 4 }, end: { line: 60, column: 5 } }, "24": { start: { line: 38, column: 8 }, end: { line: 44, column: 11 } }, "25": { start: { line: 39, column: 24 }, end: { line: 39, column: 41 } }, "26": { start: { line: 40, column: 12 }, end: { line: 43, column: 13 } }, "27": { start: { line: 41, column: 28 }, end: { line: 41, column: 94 } }, "28": { start: { line: 42, column: 16 }, end: { line: 42, column: 101 } }, "29": { start: { line: 45, column: 8 }, end: { line: 48, column: 9 } }, "30": { start: { line: 46, column: 24 }, end: { line: 46, column: 96 } }, "31": { start: { line: 47, column: 12 }, end: { line: 47, column: 101 } }, "32": { start: { line: 51, column: 20 }, end: { line: 55, column: 9 } }, "33": { start: { line: 56, column: 8 }, end: { line: 59, column: 9 } }, "34": { start: { line: 57, column: 24 }, end: { line: 57, column: 97 } }, "35": { start: { line: 58, column: 12 }, end: { line: 58, column: 60 } }, "36": { start: { line: 63, column: 26 }, end: { line: 69, column: 5 } }, "37": { start: { line: 70, column: 25 }, end: { line: 70, column: 73 } }, "38": { start: { line: 71, column: 24 }, end: { line: 71, column: 61 } }, "39": { start: { line: 72, column: 21 }, end: { line: 75, column: 6 } }, "40": { start: { line: 76, column: 16 }, end: { line: 76, column: 29 } }, "41": { start: { line: 77, column: 4 }, end: { line: 77, column: 33 } }, "42": { start: { line: 80, column: 21 }, end: { line: 80, column: 49 } }, "43": { start: { line: 81, column: 4 }, end: { line: 89, column: 7 } }, "44": { start: { line: 82, column: 8 }, end: { line: 84, column: 9 } }, "45": { start: { line: 83, column: 12 }, end: { line: 83, column: 19 } }, "46": { start: { line: 85, column: 28 }, end: { line: 85, column: 60 } }, "47": { start: { line: 86, column: 28 }, end: { line: 86, column: 64 } }, "48": { start: { line: 87, column: 31 }, end: { line: 87, column: 67 } }, "49": { start: { line: 88, column: 8 }, end: { line: 88, column: 77 } }, "50": { start: { line: 92, column: 4 }, end: { line: 95, column: 7 } }, "51": { start: { line: 93, column: 23 }, end: { line: 93, column: 39 } }, "52": { start: { line: 94, column: 8 }, end: { line: 94, column: 30 } }, "53": { start: { line: 96, column: 4 }, end: { line: 96, column: 54 } }, "54": { start: { line: 99, column: 22 }, end: { line: 105, column: 5 } }, "55": { start: { line: 106, column: 4 }, end: { line: 106, column: 65 } }, "56": { start: { line: 108, column: 0 }, end: { line: 108, column: 27 } } }, fnMap: { "0": { name: "generate", decl: { start: { line: 17, column: 9 }, end: { line: 17, column: 17 } }, loc: { start: { line: 17, column: 51 }, end: { line: 61, column: 1 } }, line: 17 }, "1": { name: "(anonymous_1)", decl: { start: { line: 38, column: 58 }, end: { line: 38, column: 59 } }, loc: { start: { line: 38, column: 66 }, end: { line: 44, column: 9 } }, line: 38 }, "2": { name: "render", decl: { start: { line: 62, column: 9 }, end: { line: 62, column: 15 } }, loc: { start: { line: 62, column: 43 }, end: { line: 78, column: 1 } }, line: 62 }, "3": { name: "registerPartials", decl: { start: { line: 79, column: 9 }, end: { line: 79, column: 25 } }, loc: { start: { line: 79, column: 28 }, end: { line: 90, column: 1 } }, line: 79 }, "4": { name: "(anonymous_4)", decl: { start: { line: 81, column: 21 }, end: { line: 81, column: 22 } }, loc: { start: { line: 81, column: 34 }, end: { line: 89, column: 5 } }, line: 81 }, "5": { name: "registerHelpers", decl: { start: { line: 91, column: 9 }, end: { line: 91, column: 24 } }, loc: { start: { line: 91, column: 27 }, end: { line: 97, column: 1 } }, line: 91 }, "6": { name: "(anonymous_6)", decl: { start: { line: 92, column: 40 }, end: { line: 92, column: 41 } }, loc: { start: { line: 92, column: 59 }, end: { line: 95, column: 5 } }, line: 92 }, "7": { name: "format", decl: { start: { line: 98, column: 9 }, end: { line: 98, column: 15 } }, loc: { start: { line: 98, column: 43 }, end: { line: 107, column: 1 } }, line: 98 } }, branchMap: { "0": { loc: { start: { line: 18, column: 21 }, end: { line: 18, column: 50 } }, type: "binary-expr", locations: [{ start: { line: 18, column: 21 }, end: { line: 18, column: 37 } }, { start: { line: 18, column: 41 }, end: { line: 18, column: 50 } }], line: 18 }, "1": { loc: { start: { line: 21, column: 4 }, end: { line: 24, column: 5 } }, type: "if", locations: [{ start: { line: 21, column: 4 }, end: { line: 24, column: 5 } }, { start: { line: 21, column: 4 }, end: { line: 24, column: 5 } }], line: 21 }, "2": { loc: { start: { line: 21, column: 8 }, end: { line: 21, column: 48 } }, type: "binary-expr", locations: [{ start: { line: 21, column: 8 }, end: { line: 21, column: 24 } }, { start: { line: 21, column: 28 }, end: { line: 21, column: 48 } }], line: 21 }, "3": { loc: { start: { line: 25, column: 4 }, end: { line: 27, column: 5 } }, type: "if", locations: [{ start: { line: 25, column: 4 }, end: { line: 27, column: 5 } }, { start: { line: 25, column: 4 }, end: { line: 27, column: 5 } }], line: 25 }, "4": { loc: { start: { line: 28, column: 19 }, end: { line: 28, column: 48 } }, type: "binary-expr", locations: [{ start: { line: 28, column: 19 }, end: { line: 28, column: 34 } }, { start: { line: 28, column: 38 }, end: { line: 28, column: 48 } }], line: 28 }, "5": { loc: { start: { line: 29, column: 21 }, end: { line: 29, column: 42 } }, type: "binary-expr", locations: [{ start: { line: 29, column: 21 }, end: { line: 29, column: 37 } }, { start: { line: 29, column: 41 }, end: { line: 29, column: 42 } }], line: 29 }, "6": { loc: { start: { line: 37, column: 4 }, end: { line: 60, column: 5 } }, type: "if", locations: [{ start: { line: 37, column: 4 }, end: { line: 60, column: 5 } }, { start: { line: 37, column: 4 }, end: { line: 60, column: 5 } }], line: 37 }, "7": { loc: { start: { line: 40, column: 12 }, end: { line: 43, column: 13 } }, type: "if", locations: [{ start: { line: 40, column: 12 }, end: { line: 43, column: 13 } }, { start: { line: 40, column: 12 }, end: { line: 43, column: 13 } }], line: 40 }, "8": { loc: { start: { line: 45, column: 8 }, end: { line: 48, column: 9 } }, type: "if", locations: [{ start: { line: 45, column: 8 }, end: { line: 48, column: 9 } }, { start: { line: 45, column: 8 }, end: { line: 48, column: 9 } }], line: 45 }, "9": { loc: { start: { line: 56, column: 8 }, end: { line: 59, column: 9 } }, type: "if", locations: [{ start: { line: 56, column: 8 }, end: { line: 59, column: 9 } }, { start: { line: 56, column: 8 }, end: { line: 59, column: 9 } }], line: 56 }, "10": { loc: { start: { line: 62, column: 21 }, end: { line: 62, column: 41 } }, type: "default-arg", locations: [{ start: { line: 62, column: 32 }, end: { line: 62, column: 41 } }], line: 62 }, "11": { loc: { start: { line: 82, column: 8 }, end: { line: 84, column: 9 } }, type: "if", locations: [{ start: { line: 82, column: 8 }, end: { line: 84, column: 9 } }, { start: { line: 82, column: 8 }, end: { line: 84, column: 9 } }], line: 82 }, "12": { loc: { start: { line: 82, column: 12 }, end: { line: 82, column: 65 } }, type: "binary-expr", locations: [{ start: { line: 82, column: 12 }, end: { line: 82, column: 36 } }, { start: { line: 82, column: 40 }, end: { line: 82, column: 65 } }], line: 82 }, "13": { loc: { start: { line: 98, column: 21 }, end: { line: 98, column: 41 } }, type: "default-arg", locations: [{ start: { line: 98, column: 32 }, end: { line: 98, column: 41 } }], line: 98 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0, "48": 0, "49": 0, "50": 0, "51": 0, "52": 0, "53": 0, "54": 0, "55": 0, "56": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0, 0], "7": [0, 0], "8": [0, 0], "9": [0, 0], "10": [0], "11": [0, 0], "12": [0, 0], "13": [0] }, inputSourceMap: { version: 3, file: "index.js", sourceRoot: "/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-docs-generator/src/", sources: ["index.ts"], names: [], mappings: "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", sourcesContent: ["import * as fs from 'fs'\nimport * as path from 'path'\nimport * as handlebars from 'handlebars'\nimport * as prettier from 'prettier'\nconst camelCase = require('camel-case')\n\nimport {\n  buildClientSchema,\n  DocumentNode,\n  GraphQLSchema,\n  IntrospectionSchema,\n  IntrospectionQuery,\n} from 'graphql'\n\nimport generateAllOps, { GQLTemplateOp, GQLAllOperations, GQLTemplateFragment } from './generator'\n\nconst TEMPLATE_DIR = path.resolve(path.join(__dirname, '../templates'))\nconst FILE_EXTENSION_MAP = {\n  javascript: 'js',\n  graphql: 'graphql',\n  flow: 'js',\n  typescript: 'ts',\n  angular: 'graphql',\n}\n\nfunction generate(\n  schemaPath: string,\n  outputPath: string,\n  options: { separateFiles: boolean; language: string; maxDepth: number }\n): void {\n  const language = options.language || 'graphql'\n  const schemaContent = fs.readFileSync(schemaPath, 'utf8').trim()\n  const schemaData = JSON.parse(schemaContent)\n  if (!schemaData.data && !schemaData.__schema) {\n    // tslint:disable-line\n    throw new Error('GraphQL schema file should contain a valid GraphQL introspection query result')\n  }\n  if (!Object.keys(FILE_EXTENSION_MAP).includes(language)) {\n    throw new Error(`Language ${language} not supported`)\n  }\n\n  const schema: IntrospectionQuery = schemaData.data || schemaData\n  const maxDepth = options.maxDepth || 3\n  const useExternalFragmentForS3Object = options.language === 'graphql'\n  const gqlOperations: GQLAllOperations = generateAllOps(schema, maxDepth, {\n    useExternalFragmentForS3Object: useExternalFragmentForS3Object,\n  })\n  registerPartials()\n  registerHelpers()\n\n  const fileExtension = FILE_EXTENSION_MAP[language]\n  if (options.separateFiles) {\n    ['queries', 'mutations', 'subscriptions'].forEach((op) => {\n      const ops = gqlOperations[op]\n      if (ops.length) {\n        const gql = render({ operations: gqlOperations[op], fragments: [] }, language)\n        fs.writeFileSync(path.resolve(path.join(outputPath, `${op}.${fileExtension}`)), gql)\n      }\n    })\n\n    if (gqlOperations.fragments.length) {\n      const gql = render({ operations: [], fragments: gqlOperations.fragments }, language)\n      fs.writeFileSync(path.resolve(path.join(outputPath, `fragments.${fileExtension}`)), gql)\n    }\n  } else {\n    const ops = [\n      ...gqlOperations.queries,\n      ...gqlOperations.mutations,\n      ...gqlOperations.subscriptions,\n    ]\n    if (ops.length) {\n      const gql = render({ operations: ops, fragments: gqlOperations.fragments }, language)\n      fs.writeFileSync(path.resolve(outputPath), gql)\n    }\n  }\n}\n\nfunction render(\n  doc: { operations: Array<GQLTemplateOp>; fragments?: GQLTemplateFragment[] },\n  language: string = 'graphql'\n) {\n  const templateFiles = {\n    javascript: 'javascript.hbs',\n    graphql: 'graphql.hbs',\n    typescript: 'typescript.hbs',\n    flow: 'flow.hbs',\n    angular: 'graphql.hbs',\n  }\n\n  const templatePath = path.join(TEMPLATE_DIR, templateFiles[language])\n  const templateStr = fs.readFileSync(templatePath, 'utf8')\n\n  const template = handlebars.compile(templateStr, {\n    noEscape: true,\n    preventIndent: true,\n  })\n  const gql = template(doc)\n  return format(gql, language)\n}\n\nfunction registerPartials() {\n  const partials = fs.readdirSync(TEMPLATE_DIR)\n  partials.forEach((partial) => {\n    if (!partial.startsWith('_') || !partial.endsWith('.hbs')) {\n      return\n    }\n    const partialPath = path.join(TEMPLATE_DIR, partial)\n    const partialName = path.basename(partial).split('.')[0]\n    const partialContent = fs.readFileSync(partialPath, 'utf8')\n    handlebars.registerPartial(partialName.substring(1), partialContent)\n  })\n}\n\nfunction registerHelpers() {\n  handlebars.registerHelper('format', function(options: any) {\n    const result = options.fn(this)\n    return format(result)\n  })\n\n  handlebars.registerHelper('camelCase', camelCase)\n}\n\nfunction format(str: string, language: string = 'graphql'): string {\n  const parserMap = {\n    javascript: 'babel',\n    graphql: 'graphql',\n    typescript: 'typescript',\n    flow: 'flow',\n    angular: 'graphql',\n  }\n  return prettier.format(str, { parser: parserMap[language] })\n}\n\nexport default generate\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
        coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
        return coverage[path];
    }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_2fmtt7ffb4.s[0]++;
Object.defineProperty(exports, "__esModule", { value: true });
const fs = ( /* istanbul ignore next */cov_2fmtt7ffb4.s[1]++, require("fs"));
const path = ( /* istanbul ignore next */cov_2fmtt7ffb4.s[2]++, require("path"));
const handlebars = ( /* istanbul ignore next */cov_2fmtt7ffb4.s[3]++, require("handlebars"));
const prettier = ( /* istanbul ignore next */cov_2fmtt7ffb4.s[4]++, require("prettier"));
const camelCase = ( /* istanbul ignore next */cov_2fmtt7ffb4.s[5]++, require('camel-case'));
const generator_1 = ( /* istanbul ignore next */cov_2fmtt7ffb4.s[6]++, require("./generator"));
const TEMPLATE_DIR = ( /* istanbul ignore next */cov_2fmtt7ffb4.s[7]++, path.resolve(path.join(__dirname, '../templates')));
const FILE_EXTENSION_MAP = ( /* istanbul ignore next */cov_2fmtt7ffb4.s[8]++, {
    javascript: 'js',
    graphql: 'graphql',
    flow: 'js',
    typescript: 'ts',
    angular: 'graphql' });

function generate(schemaPath, outputPath, options) {
    /* istanbul ignore next */cov_2fmtt7ffb4.f[0]++;
    const language = ( /* istanbul ignore next */cov_2fmtt7ffb4.s[9]++, /* istanbul ignore next */(cov_2fmtt7ffb4.b[0][0]++, options.language) || ( /* istanbul ignore next */cov_2fmtt7ffb4.b[0][1]++, 'graphql'));
    const schemaContent = ( /* istanbul ignore next */cov_2fmtt7ffb4.s[10]++, fs.readFileSync(schemaPath, 'utf8').trim());
    const schemaData = ( /* istanbul ignore next */cov_2fmtt7ffb4.s[11]++, JSON.parse(schemaContent)); /* istanbul ignore next */cov_2fmtt7ffb4.s[12]++;
    if ( /* istanbul ignore next */(cov_2fmtt7ffb4.b[2][0]++, !schemaData.data) && ( /* istanbul ignore next */cov_2fmtt7ffb4.b[2][1]++, !schemaData.__schema)) {
        /* istanbul ignore next */cov_2fmtt7ffb4.b[1][0]++;cov_2fmtt7ffb4.s[13]++;
        // tslint:disable-line
        throw new Error('GraphQL schema file should contain a valid GraphQL introspection query result');
    } else /* istanbul ignore next */{
            cov_2fmtt7ffb4.b[1][1]++;
        }cov_2fmtt7ffb4.s[14]++;
    if (!Object.keys(FILE_EXTENSION_MAP).includes(language)) {
        /* istanbul ignore next */cov_2fmtt7ffb4.b[3][0]++;cov_2fmtt7ffb4.s[15]++;
        throw new Error(`Language ${language} not supported`);
    } else /* istanbul ignore next */{
            cov_2fmtt7ffb4.b[3][1]++;
        }
    const schema = ( /* istanbul ignore next */cov_2fmtt7ffb4.s[16]++, /* istanbul ignore next */(cov_2fmtt7ffb4.b[4][0]++, schemaData.data) || ( /* istanbul ignore next */cov_2fmtt7ffb4.b[4][1]++, schemaData));
    const maxDepth = ( /* istanbul ignore next */cov_2fmtt7ffb4.s[17]++, /* istanbul ignore next */(cov_2fmtt7ffb4.b[5][0]++, options.maxDepth) || ( /* istanbul ignore next */cov_2fmtt7ffb4.b[5][1]++, 3));
    const useExternalFragmentForS3Object = ( /* istanbul ignore next */cov_2fmtt7ffb4.s[18]++, options.language === 'graphql');
    const gqlOperations = ( /* istanbul ignore next */cov_2fmtt7ffb4.s[19]++, generator_1.default(schema, maxDepth, {
        useExternalFragmentForS3Object: useExternalFragmentForS3Object })); /* istanbul ignore next */cov_2fmtt7ffb4.s[20]++;

    registerPartials(); /* istanbul ignore next */cov_2fmtt7ffb4.s[21]++;
    registerHelpers();
    const fileExtension = ( /* istanbul ignore next */cov_2fmtt7ffb4.s[22]++, FILE_EXTENSION_MAP[language]); /* istanbul ignore next */cov_2fmtt7ffb4.s[23]++;
    if (options.separateFiles) {
        /* istanbul ignore next */cov_2fmtt7ffb4.b[6][0]++;cov_2fmtt7ffb4.s[24]++;
        ['queries', 'mutations', 'subscriptions'].forEach(op => {
            /* istanbul ignore next */cov_2fmtt7ffb4.f[1]++;
            const ops = ( /* istanbul ignore next */cov_2fmtt7ffb4.s[25]++, gqlOperations[op]); /* istanbul ignore next */cov_2fmtt7ffb4.s[26]++;
            if (ops.length) {
                /* istanbul ignore next */cov_2fmtt7ffb4.b[7][0]++;
                const gql = ( /* istanbul ignore next */cov_2fmtt7ffb4.s[27]++, render({ operations: gqlOperations[op], fragments: [] }, language)); /* istanbul ignore next */cov_2fmtt7ffb4.s[28]++;
                fs.writeFileSync(path.resolve(path.join(outputPath, `${op}.${fileExtension}`)), gql);
            } else /* istanbul ignore next */{
                    cov_2fmtt7ffb4.b[7][1]++;
                }
        }); /* istanbul ignore next */cov_2fmtt7ffb4.s[29]++;
        if (gqlOperations.fragments.length) {
            /* istanbul ignore next */cov_2fmtt7ffb4.b[8][0]++;
            const gql = ( /* istanbul ignore next */cov_2fmtt7ffb4.s[30]++, render({ operations: [], fragments: gqlOperations.fragments }, language)); /* istanbul ignore next */cov_2fmtt7ffb4.s[31]++;
            fs.writeFileSync(path.resolve(path.join(outputPath, `fragments.${fileExtension}`)), gql);
        } else /* istanbul ignore next */{
                cov_2fmtt7ffb4.b[8][1]++;
            }
    } else {
        /* istanbul ignore next */cov_2fmtt7ffb4.b[6][1]++;
        const ops = ( /* istanbul ignore next */cov_2fmtt7ffb4.s[32]++, [...gqlOperations.queries, ...gqlOperations.mutations, ...gqlOperations.subscriptions]); /* istanbul ignore next */cov_2fmtt7ffb4.s[33]++;

        if (ops.length) {
            /* istanbul ignore next */cov_2fmtt7ffb4.b[9][0]++;
            const gql = ( /* istanbul ignore next */cov_2fmtt7ffb4.s[34]++, render({ operations: ops, fragments: gqlOperations.fragments }, language)); /* istanbul ignore next */cov_2fmtt7ffb4.s[35]++;
            fs.writeFileSync(path.resolve(outputPath), gql);
        } else /* istanbul ignore next */{
                cov_2fmtt7ffb4.b[9][1]++;
            }
    }
}
function render(doc, language = ( /* istanbul ignore next */cov_2fmtt7ffb4.b[10][0]++, 'graphql')) {
    /* istanbul ignore next */cov_2fmtt7ffb4.f[2]++;
    const templateFiles = ( /* istanbul ignore next */cov_2fmtt7ffb4.s[36]++, {
        javascript: 'javascript.hbs',
        graphql: 'graphql.hbs',
        typescript: 'typescript.hbs',
        flow: 'flow.hbs',
        angular: 'graphql.hbs' });

    const templatePath = ( /* istanbul ignore next */cov_2fmtt7ffb4.s[37]++, path.join(TEMPLATE_DIR, templateFiles[language]));
    const templateStr = ( /* istanbul ignore next */cov_2fmtt7ffb4.s[38]++, fs.readFileSync(templatePath, 'utf8'));
    const template = ( /* istanbul ignore next */cov_2fmtt7ffb4.s[39]++, handlebars.compile(templateStr, {
        noEscape: true,
        preventIndent: true }));

    const gql = ( /* istanbul ignore next */cov_2fmtt7ffb4.s[40]++, template(doc)); /* istanbul ignore next */cov_2fmtt7ffb4.s[41]++;
    return format(gql, language);
}
function registerPartials() {
    /* istanbul ignore next */cov_2fmtt7ffb4.f[3]++;
    const partials = ( /* istanbul ignore next */cov_2fmtt7ffb4.s[42]++, fs.readdirSync(TEMPLATE_DIR)); /* istanbul ignore next */cov_2fmtt7ffb4.s[43]++;
    partials.forEach(partial => {
        /* istanbul ignore next */cov_2fmtt7ffb4.f[4]++;cov_2fmtt7ffb4.s[44]++;
        if ( /* istanbul ignore next */(cov_2fmtt7ffb4.b[12][0]++, !partial.startsWith('_')) || ( /* istanbul ignore next */cov_2fmtt7ffb4.b[12][1]++, !partial.endsWith('.hbs'))) {
            /* istanbul ignore next */cov_2fmtt7ffb4.b[11][0]++;cov_2fmtt7ffb4.s[45]++;
            return;
        } else /* istanbul ignore next */{
                cov_2fmtt7ffb4.b[11][1]++;
            }
        const partialPath = ( /* istanbul ignore next */cov_2fmtt7ffb4.s[46]++, path.join(TEMPLATE_DIR, partial));
        const partialName = ( /* istanbul ignore next */cov_2fmtt7ffb4.s[47]++, path.basename(partial).split('.')[0]);
        const partialContent = ( /* istanbul ignore next */cov_2fmtt7ffb4.s[48]++, fs.readFileSync(partialPath, 'utf8')); /* istanbul ignore next */cov_2fmtt7ffb4.s[49]++;
        handlebars.registerPartial(partialName.substring(1), partialContent);
    });
}
function registerHelpers() {
    /* istanbul ignore next */cov_2fmtt7ffb4.f[5]++;cov_2fmtt7ffb4.s[50]++;
    handlebars.registerHelper('format', function (options) {
        /* istanbul ignore next */cov_2fmtt7ffb4.f[6]++;
        const result = ( /* istanbul ignore next */cov_2fmtt7ffb4.s[51]++, options.fn(this)); /* istanbul ignore next */cov_2fmtt7ffb4.s[52]++;
        return format(result);
    }); /* istanbul ignore next */cov_2fmtt7ffb4.s[53]++;
    handlebars.registerHelper('camelCase', camelCase);
}
function format(str, language = ( /* istanbul ignore next */cov_2fmtt7ffb4.b[13][0]++, 'graphql')) {
    /* istanbul ignore next */cov_2fmtt7ffb4.f[7]++;
    const parserMap = ( /* istanbul ignore next */cov_2fmtt7ffb4.s[54]++, {
        javascript: 'babel',
        graphql: 'graphql',
        typescript: 'typescript',
        flow: 'flow',
        angular: 'graphql' }); /* istanbul ignore next */cov_2fmtt7ffb4.s[55]++;

    return prettier.format(str, { parser: parserMap[language] });
} /* istanbul ignore next */cov_2fmtt7ffb4.s[56]++;
exports.default = generate;