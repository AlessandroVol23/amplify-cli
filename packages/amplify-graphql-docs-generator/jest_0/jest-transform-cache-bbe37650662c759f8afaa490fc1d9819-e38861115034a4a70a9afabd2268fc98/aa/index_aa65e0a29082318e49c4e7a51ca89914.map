{"version":3,"sources":["index.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from 'fs'\nimport * as path from 'path'\nimport * as handlebars from 'handlebars'\nimport * as prettier from 'prettier'\nconst camelCase = require('camel-case')\n\nimport {\n  buildClientSchema,\n  DocumentNode,\n  GraphQLSchema,\n  IntrospectionSchema,\n  IntrospectionQuery,\n} from 'graphql'\n\nimport generateAllOps, { GQLTemplateOp, GQLAllOperations, GQLTemplateFragment } from './generator'\n\nconst TEMPLATE_DIR = path.resolve(path.join(__dirname, '../templates'))\nconst FILE_EXTENSION_MAP = {\n  javascript: 'js',\n  graphql: 'graphql',\n  flow: 'js',\n  typescript: 'ts',\n  angular: 'graphql',\n}\n\nfunction generate(\n  schemaPath: string,\n  outputPath: string,\n  options: { separateFiles: boolean; language: string; maxDepth: number }\n): void {\n  const language = options.language || 'graphql'\n  const schemaContent = fs.readFileSync(schemaPath, 'utf8').trim()\n  const schemaData = JSON.parse(schemaContent)\n  if (!schemaData.data && !schemaData.__schema) {\n    // tslint:disable-line\n    throw new Error('GraphQL schema file should contain a valid GraphQL introspection query result')\n  }\n  if (!Object.keys(FILE_EXTENSION_MAP).includes(language)) {\n    throw new Error(`Language ${language} not supported`)\n  }\n\n  const schema: IntrospectionQuery = schemaData.data || schemaData\n  const maxDepth = options.maxDepth || 3\n  const useExternalFragmentForS3Object = options.language === 'graphql'\n  const gqlOperations: GQLAllOperations = generateAllOps(schema, maxDepth, {\n    useExternalFragmentForS3Object: useExternalFragmentForS3Object,\n  })\n  registerPartials()\n  registerHelpers()\n\n  const fileExtension = FILE_EXTENSION_MAP[language]\n  if (options.separateFiles) {\n    ['queries', 'mutations', 'subscriptions'].forEach((op) => {\n      const ops = gqlOperations[op]\n      if (ops.length) {\n        const gql = render({ operations: gqlOperations[op], fragments: [] }, language)\n        fs.writeFileSync(path.resolve(path.join(outputPath, `${op}.${fileExtension}`)), gql)\n      }\n    })\n\n    if (gqlOperations.fragments.length) {\n      const gql = render({ operations: [], fragments: gqlOperations.fragments }, language)\n      fs.writeFileSync(path.resolve(path.join(outputPath, `fragments.${fileExtension}`)), gql)\n    }\n  } else {\n    const ops = [\n      ...gqlOperations.queries,\n      ...gqlOperations.mutations,\n      ...gqlOperations.subscriptions,\n    ]\n    if (ops.length) {\n      const gql = render({ operations: ops, fragments: gqlOperations.fragments }, language)\n      fs.writeFileSync(path.resolve(outputPath), gql)\n    }\n  }\n}\n\nfunction render(\n  doc: { operations: Array<GQLTemplateOp>; fragments?: GQLTemplateFragment[] },\n  language: string = 'graphql'\n) {\n  const templateFiles = {\n    javascript: 'javascript.hbs',\n    graphql: 'graphql.hbs',\n    typescript: 'typescript.hbs',\n    flow: 'flow.hbs',\n    angular: 'graphql.hbs',\n  }\n\n  const templatePath = path.join(TEMPLATE_DIR, templateFiles[language])\n  const templateStr = fs.readFileSync(templatePath, 'utf8')\n\n  const template = handlebars.compile(templateStr, {\n    noEscape: true,\n    preventIndent: true,\n  })\n  const gql = template(doc)\n  return format(gql, language)\n}\n\nfunction registerPartials() {\n  const partials = fs.readdirSync(TEMPLATE_DIR)\n  partials.forEach((partial) => {\n    if (!partial.startsWith('_') || !partial.endsWith('.hbs')) {\n      return\n    }\n    const partialPath = path.join(TEMPLATE_DIR, partial)\n    const partialName = path.basename(partial).split('.')[0]\n    const partialContent = fs.readFileSync(partialPath, 'utf8')\n    handlebars.registerPartial(partialName.substring(1), partialContent)\n  })\n}\n\nfunction registerHelpers() {\n  handlebars.registerHelper('format', function(options: any) {\n    const result = options.fn(this)\n    return format(result)\n  })\n\n  handlebars.registerHelper('camelCase', camelCase)\n}\n\nfunction format(str: string, language: string = 'graphql'): string {\n  const parserMap = {\n    javascript: 'babel',\n    graphql: 'graphql',\n    typescript: 'typescript',\n    flow: 'flow',\n    angular: 'graphql',\n  }\n  return prettier.format(str, { parser: parserMap[language] })\n}\n\nexport default generate\n"],"sourceRoot":"/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-docs-generator/src/"}