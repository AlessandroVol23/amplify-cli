{"version":3,"sources":["cli.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,MAAA,QAAA,QAAA,OAAA,CAAA;AACA,MAAA,OAAA,QAAA,MAAA,CAAA;AAEA,MAAA,WAAA,QAAA,UAAA,CAAA;AACA,MAAA,UAAA,QAAA,SAAA,CAAA;AAEA;AACA,QAAQ,EAAR,CAAW,oBAAX,EAAiC,SAAQ;AACvC,UAAM,KAAN;AACD,CAFD;AAIA,QAAQ,EAAR,CAAW,mBAAX,EAAgC,WAAhC;AAEA,SAAA,WAAA,CAAqB,KAArB,EAAiC;AAC/B,aAAA,QAAA,CAAS,KAAT;AACA,YAAQ,IAAR,CAAa,CAAb;AACD;AAED,SAAA,GAAA,CAAoB,IAApB,EAAuC;AACrC;AACA;AACG,WADH,CAEI,IAFJ,EAGI,mEAHJ,EAII;AACE,gBAAQ;AACN,oBAAQ,IADF;AAEN,sBAAU,2BAFJ;AAGN,qBAAS,aAHH;AAIN,uBAAW,IAJL;AAKN,oBAAQ,KAAK,OALP,EADV;;AAQE,gBAAQ;AACN,oBAAQ,IADF;AAEN,qBAAS,wBAFH;AAGN,uBAAW,IAHL;AAIN,oBAAQ,KAAK,OAJP,EARV;;AAcE,kBAAU;AACR,oBAAQ,IADA;AAER,qBAAS,SAFD;AAGR,uBAAW,IAHH;AAIR,qBAAS,CAAC,SAAD,EAAY,YAAZ,EAA0B,MAA1B,EAAkC,YAAlC,CAJD,EAdZ;;AAoBE,kBAAU;AACR,oBAAQ,IADA;AAER,qBAAS,CAFD;AAGR,uBAAW,IAHH;AAIR,kBAAM,QAJE,EApBZ;;AA0BE,uBAAe;AACb,qBAAS,KADI;AAEb,kBAAM,SAFO,EA1BjB,EAJJ;;AAmCU,QAAN,IAAa,UAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AACT,gBAAA,OAAA,CAAe,KAAK,MAApB,EAA4B,KAAK,MAAjC,EAAyC,EAAE,eAAe,KAAK,aAAtB,EAAqC,UAAU,KAAK,QAApD,EAA8D,UAAU,KAAK,QAA7E,EAAzC;AACH,KAFY,CAnCjB;AAuCG,QAvCH;AAwCG,WAxCH;AAyCG,UAzCH;AA0CG,QA1CH;AA2CD;AA7CD,QAAA,GAAA,GAAA,GAAA","sourcesContent":["import * as yargs from 'yargs'\nimport * as path from 'path'\n\nimport { logError } from './logger'\nimport generateAllOps from './index'\n\n// / Make sure unhandled errors in async code are propagated correctly\nprocess.on('unhandledRejection', error => {\n  throw error\n})\n\nprocess.on('uncaughtException', handleError)\n\nfunction handleError(error: Error) {\n  logError(error)\n  process.exit(1)\n}\n\nexport function run(argv: Array<String>): void {\n  // tslint:disable \n  yargs\n    .command(\n      '$0',\n      'Generate graphql operations for the provided introspection schema',\n      {\n        schema: {\n          demand: true,\n          describe: 'Path introspection schema',\n          default: 'schema.json',\n          normalize: true,\n          coerce: path.resolve,\n        },\n        output: {\n          demand: true,\n          default: 'all-operations.graphql',\n          normalize: true,\n          coerce: path.resolve,\n        },\n        language: {\n          demand: true,\n          default: 'graphql',\n          normalize: true,\n          choices: ['graphql', 'javascript', 'flow', 'typescript']\n        },\n        maxDepth: {\n          demand: true,\n          default: 2,\n          normalize: true,\n          type: 'number'\n        },\n        separateFiles: {\n          default: false,\n          type: 'boolean'\n        }\n      },\n      async argv => {\n          generateAllOps(argv.schema, argv.output, { separateFiles: argv.separateFiles, language: argv.language, maxDepth: argv.maxDepth })\n      }\n    )\n    .help()\n    .version()\n    .strict()\n    .argv\n}\n"],"sourceRoot":"/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-docs-generator/src/"}