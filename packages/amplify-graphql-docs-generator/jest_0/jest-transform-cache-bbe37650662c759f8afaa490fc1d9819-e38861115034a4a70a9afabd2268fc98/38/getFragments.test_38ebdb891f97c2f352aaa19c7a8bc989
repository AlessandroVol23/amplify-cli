08dc091c0545eb61b23d6a0f3e2a046f
'use strict';require('ts-jest').install("/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-docs-generator/__tests__/generator/getFragments.test.ts", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst graphql_1 = require(\"graphql\");\nconst getFields_1 = require(\"../../src/generator/getFields\");\nconst getFragment_1 = require(\"../../src/generator/getFragment\");\njest.mock('../../src/generator/getFields');\ndescribe('getFragments', () => {\n    const shapeInterfaceType = new graphql_1.GraphQLInterfaceType({\n        name: 'Entity',\n        fields: {\n            name: { type: graphql_1.GraphQLString },\n        },\n    });\n    const rectangleType = new graphql_1.GraphQLObjectType({\n        name: 'Rectangle',\n        fields: {\n            name: { type: graphql_1.GraphQLString },\n            length: { type: graphql_1.GraphQLInt },\n            width: { type: graphql_1.GraphQLInt },\n        },\n        interfaces: () => [shapeInterfaceType],\n    });\n    const schema = new graphql_1.GraphQLSchema({\n        query: new graphql_1.GraphQLObjectType({\n            name: 'Query',\n            fields: {\n                shapeInterface: { type: shapeInterfaceType },\n                simpleScalar: { type: graphql_1.GraphQLInt },\n            },\n        }),\n        types: [rectangleType],\n    });\n    beforeEach(() => {\n        jest.resetAllMocks();\n        getFields_1.default.mockImplementation((field) => ({ name: field.name }));\n    });\n    it('should call getField on each field of interface implimentation', () => {\n        const impl = schema.getType('Rectangle');\n        const currentDepth = 3;\n        expect(getFragment_1.default(impl, schema, currentDepth, [])).toEqual({\n            fields: [{ name: 'name' }, { name: 'length' }, { name: 'width' }],\n            on: 'Rectangle',\n            external: false,\n            name: 'RectangleFragment',\n        });\n        expect(getFields_1.default).toHaveBeenCalledTimes(3);\n    });\n    it('should decrease the current depth when calling sub fieds', () => {\n        const impl = schema.getType('Rectangle');\n        const currentDepth = 3;\n        getFragment_1.default(impl, schema, currentDepth, []);\n        expect(getFields_1.default.mock.calls[0][2]).toEqual(currentDepth - 1);\n    });\n    it('should filter out the fields that listed in filterFields', () => {\n        const impl = schema.getType('Rectangle');\n        const currentDepth = 3;\n        const fieldsToFilter = [\n            {\n                name: 'length',\n                hasBody: false,\n                fields: [],\n                fragments: [],\n            },\n        ];\n        expect(getFragment_1.default(impl, schema, currentDepth, fieldsToFilter)).toEqual({\n            fields: [{ name: 'name' }, { name: 'width' }],\n            on: 'Rectangle',\n            name: 'RectangleFragment',\n            external: false,\n        });\n    });\n    it('should not render anything if the field is scalar', () => {\n        const impl = schema.getQueryType().getFields().simpleScalar;\n        const currentDepth = 3;\n        expect(getFragment_1.default(impl, schema, currentDepth)).toBeUndefined();\n    });\n    it('should use the name passed as fragment name', () => {\n        const impl = schema.getType('Rectangle');\n        const currentDepth = 3;\n        const fragment = getFragment_1.default(impl, schema, currentDepth, [], 'FooFragment');\n        expect(fragment.name).toEqual('FooFragment');\n    });\n    it('should use the mark fragment as external when passed', () => {\n        const impl = schema.getType('Rectangle');\n        const currentDepth = 3;\n        const fragment = getFragment_1.default(impl, schema, currentDepth, [], 'FooFragment', true);\n        expect(fragment.external).toEqual(true);\n    });\n    it('should pass the options to getFields call', () => {\n        const options = { useExternalFragmentForS3Object: true };\n        const impl = schema.getType('Rectangle');\n        const currentDepth = 3;\n        const fragment = getFragment_1.default(impl, schema, currentDepth, [], 'FooFragment', false, options);\n        expect(getFields_1.default).toHaveBeenCalledTimes(3);\n        expect(getFields_1.default.mock.calls[0][3]).toEqual(options);\n    });\n});\n//# sourceMappingURL=data:application/json;base64,");"use strict";




jest.mock('../../src/generator/getFields');Object.defineProperty(exports, "__esModule", { value: true });const graphql_1 = require("graphql");const getFields_1 = require("../../src/generator/getFields");const getFragment_1 = require("../../src/generator/getFragment");
describe('getFragments', () => {
    const shapeInterfaceType = new graphql_1.GraphQLInterfaceType({
        name: 'Entity',
        fields: {
            name: { type: graphql_1.GraphQLString } } });


    const rectangleType = new graphql_1.GraphQLObjectType({
        name: 'Rectangle',
        fields: {
            name: { type: graphql_1.GraphQLString },
            length: { type: graphql_1.GraphQLInt },
            width: { type: graphql_1.GraphQLInt } },

        interfaces: () => [shapeInterfaceType] });

    const schema = new graphql_1.GraphQLSchema({
        query: new graphql_1.GraphQLObjectType({
            name: 'Query',
            fields: {
                shapeInterface: { type: shapeInterfaceType },
                simpleScalar: { type: graphql_1.GraphQLInt } } }),


        types: [rectangleType] });

    beforeEach(() => {
        jest.resetAllMocks();
        getFields_1.default.mockImplementation(field => ({ name: field.name }));
    });
    it('should call getField on each field of interface implimentation', () => {
        const impl = schema.getType('Rectangle');
        const currentDepth = 3;
        expect(getFragment_1.default(impl, schema, currentDepth, [])).toEqual({
            fields: [{ name: 'name' }, { name: 'length' }, { name: 'width' }],
            on: 'Rectangle',
            external: false,
            name: 'RectangleFragment' });

        expect(getFields_1.default).toHaveBeenCalledTimes(3);
    });
    it('should decrease the current depth when calling sub fieds', () => {
        const impl = schema.getType('Rectangle');
        const currentDepth = 3;
        getFragment_1.default(impl, schema, currentDepth, []);
        expect(getFields_1.default.mock.calls[0][2]).toEqual(currentDepth - 1);
    });
    it('should filter out the fields that listed in filterFields', () => {
        const impl = schema.getType('Rectangle');
        const currentDepth = 3;
        const fieldsToFilter = [
        {
            name: 'length',
            hasBody: false,
            fields: [],
            fragments: [] }];


        expect(getFragment_1.default(impl, schema, currentDepth, fieldsToFilter)).toEqual({
            fields: [{ name: 'name' }, { name: 'width' }],
            on: 'Rectangle',
            name: 'RectangleFragment',
            external: false });

    });
    it('should not render anything if the field is scalar', () => {
        const impl = schema.getQueryType().getFields().simpleScalar;
        const currentDepth = 3;
        expect(getFragment_1.default(impl, schema, currentDepth)).toBeUndefined();
    });
    it('should use the name passed as fragment name', () => {
        const impl = schema.getType('Rectangle');
        const currentDepth = 3;
        const fragment = getFragment_1.default(impl, schema, currentDepth, [], 'FooFragment');
        expect(fragment.name).toEqual('FooFragment');
    });
    it('should use the mark fragment as external when passed', () => {
        const impl = schema.getType('Rectangle');
        const currentDepth = 3;
        const fragment = getFragment_1.default(impl, schema, currentDepth, [], 'FooFragment', true);
        expect(fragment.external).toEqual(true);
    });
    it('should pass the options to getFields call', () => {
        const options = { useExternalFragmentForS3Object: true };
        const impl = schema.getType('Rectangle');
        const currentDepth = 3;
        const fragment = getFragment_1.default(impl, schema, currentDepth, [], 'FooFragment', false, options);
        expect(getFields_1.default).toHaveBeenCalledTimes(3);
        expect(getFields_1.default.mock.calls[0][3]).toEqual(options);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Z0NBQWdDLElBQWxDLEVBQW5DO0FBQ0EsY0FBTSxPQUFPLE9BQU8sT0FBUCxDQUFlLFdBQWYsQ0FBYjtBQUNBLGNBQU0sZUFBZSxDQUFyQjtBQUNBLGNBQU0sV0FBVyxjQUFBLE9BQUEsQ0FBWSxJQUFaLEVBQWtCLE1BQWxCLEVBQTBCLFlBQTFCLEVBQXdDLEVBQXhDLEVBQTRDLGFBQTVDLEVBQTJELEtBQTNELEVBQWtFLE9BQWxFLENBQWpCO0FBQ0EsZUFBTyxZQUFBLE9BQVAsRUFBa0IscUJBQWxCLENBQXdDLENBQXhDO0FBQ0EsZUFBTyxZQUFBLE9BQUEsQ0FBVSxJQUFWLENBQWUsS0FBZixDQUFxQixDQUFyQixFQUF3QixDQUF4QixDQUFQLEVBQW1DLE9BQW5DLENBQTJDLE9BQTNDO0FBQ0QsS0FQRDtBQVFELENBbkdEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgR3JhcGhRTE9iamVjdFR5cGUsXG4gIEdyYXBoUUxTY2hlbWEsXG4gIEdyYXBoUUxJbnRlcmZhY2VUeXBlLFxuICBHcmFwaFFMU3RyaW5nLFxuICBHcmFwaFFMSW50LFxufSBmcm9tICdncmFwaHFsJ1xuXG5pbXBvcnQgeyBHUUxUZW1wbGF0ZUZpZWxkLCBHUUxUZW1wbGF0ZUZyYWdtZW50LCBHUUxEb2NzR2VuT3B0aW9ucyB9IGZyb20gJy4uLy4uL3NyYy9nZW5lcmF0b3IvdHlwZXMnXG5pbXBvcnQgZ2V0RmllbGRzIGZyb20gJy4uLy4uL3NyYy9nZW5lcmF0b3IvZ2V0RmllbGRzJ1xuaW1wb3J0IGdldEZyYWdtZW50IGZyb20gJy4uLy4uL3NyYy9nZW5lcmF0b3IvZ2V0RnJhZ21lbnQnXG5cbmplc3QubW9jaygnLi4vLi4vc3JjL2dlbmVyYXRvci9nZXRGaWVsZHMnKVxuXG5kZXNjcmliZSgnZ2V0RnJhZ21lbnRzJywgKCkgPT4ge1xuICBjb25zdCBzaGFwZUludGVyZmFjZVR5cGUgPSBuZXcgR3JhcGhRTEludGVyZmFjZVR5cGUoe1xuICAgIG5hbWU6ICdFbnRpdHknLFxuICAgIGZpZWxkczoge1xuICAgICAgbmFtZTogeyB0eXBlOiBHcmFwaFFMU3RyaW5nIH0sXG4gICAgfSxcbiAgfSlcbiAgY29uc3QgcmVjdGFuZ2xlVHlwZSA9IG5ldyBHcmFwaFFMT2JqZWN0VHlwZSh7XG4gICAgbmFtZTogJ1JlY3RhbmdsZScsXG4gICAgZmllbGRzOiB7XG4gICAgICBuYW1lOiB7IHR5cGU6IEdyYXBoUUxTdHJpbmcgfSxcbiAgICAgIGxlbmd0aDogeyB0eXBlOiBHcmFwaFFMSW50IH0sXG4gICAgICB3aWR0aDogeyB0eXBlOiBHcmFwaFFMSW50IH0sXG4gICAgfSxcbiAgICBpbnRlcmZhY2VzOiAoKSA9PiBbc2hhcGVJbnRlcmZhY2VUeXBlXSxcbiAgfSlcblxuICBjb25zdCBzY2hlbWEgPSBuZXcgR3JhcGhRTFNjaGVtYSh7XG4gICAgcXVlcnk6IG5ldyBHcmFwaFFMT2JqZWN0VHlwZSh7XG4gICAgICBuYW1lOiAnUXVlcnknLFxuICAgICAgZmllbGRzOiB7XG4gICAgICAgIHNoYXBlSW50ZXJmYWNlOiB7IHR5cGU6IHNoYXBlSW50ZXJmYWNlVHlwZSB9LFxuICAgICAgICBzaW1wbGVTY2FsYXI6IHsgdHlwZTogR3JhcGhRTEludCB9LFxuICAgICAgfSxcbiAgICB9KSxcbiAgICB0eXBlczogW3JlY3RhbmdsZVR5cGVdLFxuICB9KVxuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGplc3QucmVzZXRBbGxNb2NrcygpXG4gICAgZ2V0RmllbGRzLm1vY2tJbXBsZW1lbnRhdGlvbigoZmllbGQpID0+ICh7IG5hbWU6IGZpZWxkLm5hbWUgfSkpXG4gIH0pXG5cbiAgaXQoJ3Nob3VsZCBjYWxsIGdldEZpZWxkIG9uIGVhY2ggZmllbGQgb2YgaW50ZXJmYWNlIGltcGxpbWVudGF0aW9uJywgKCkgPT4ge1xuICAgIGNvbnN0IGltcGwgPSBzY2hlbWEuZ2V0VHlwZSgnUmVjdGFuZ2xlJylcbiAgICBjb25zdCBjdXJyZW50RGVwdGggPSAzXG4gICAgZXhwZWN0KGdldEZyYWdtZW50KGltcGwsIHNjaGVtYSwgY3VycmVudERlcHRoLCBbXSkpLnRvRXF1YWwoe1xuICAgICAgZmllbGRzOiBbeyBuYW1lOiAnbmFtZScgfSwgeyBuYW1lOiAnbGVuZ3RoJyB9LCB7IG5hbWU6ICd3aWR0aCcgfV0sXG4gICAgICBvbjogJ1JlY3RhbmdsZScsXG4gICAgICBleHRlcm5hbDogZmFsc2UsXG4gICAgICBuYW1lOiAnUmVjdGFuZ2xlRnJhZ21lbnQnLFxuICAgIH0pXG4gICAgZXhwZWN0KGdldEZpZWxkcykudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDMpXG4gIH0pXG5cbiAgaXQoJ3Nob3VsZCBkZWNyZWFzZSB0aGUgY3VycmVudCBkZXB0aCB3aGVuIGNhbGxpbmcgc3ViIGZpZWRzJywgKCkgPT4ge1xuICAgIGNvbnN0IGltcGwgPSBzY2hlbWEuZ2V0VHlwZSgnUmVjdGFuZ2xlJylcbiAgICBjb25zdCBjdXJyZW50RGVwdGggPSAzXG4gICAgZ2V0RnJhZ21lbnQoaW1wbCwgc2NoZW1hLCBjdXJyZW50RGVwdGgsIFtdKVxuICAgIGV4cGVjdChnZXRGaWVsZHMubW9jay5jYWxsc1swXVsyXSkudG9FcXVhbChjdXJyZW50RGVwdGggLSAxKVxuICB9KVxuXG4gIGl0KCdzaG91bGQgZmlsdGVyIG91dCB0aGUgZmllbGRzIHRoYXQgbGlzdGVkIGluIGZpbHRlckZpZWxkcycsICgpID0+IHtcbiAgICBjb25zdCBpbXBsID0gc2NoZW1hLmdldFR5cGUoJ1JlY3RhbmdsZScpXG4gICAgY29uc3QgY3VycmVudERlcHRoID0gM1xuICAgIGNvbnN0IGZpZWxkc1RvRmlsdGVyID0gW1xuICAgICAge1xuICAgICAgICBuYW1lOiAnbGVuZ3RoJyxcbiAgICAgICAgaGFzQm9keTogZmFsc2UsXG4gICAgICAgIGZpZWxkczogW10sXG4gICAgICAgIGZyYWdtZW50czogW10sXG4gICAgICB9LFxuICAgIF1cbiAgICBleHBlY3QoZ2V0RnJhZ21lbnQoaW1wbCwgc2NoZW1hLCBjdXJyZW50RGVwdGgsIGZpZWxkc1RvRmlsdGVyKSkudG9FcXVhbCh7XG4gICAgICBmaWVsZHM6IFt7IG5hbWU6ICduYW1lJyB9LCB7IG5hbWU6ICd3aWR0aCcgfV0sXG4gICAgICBvbjogJ1JlY3RhbmdsZScsXG4gICAgICBuYW1lOiAnUmVjdGFuZ2xlRnJhZ21lbnQnLFxuICAgICAgZXh0ZXJuYWw6IGZhbHNlLFxuICAgIH0pXG4gIH0pXG5cbiAgaXQoJ3Nob3VsZCBub3QgcmVuZGVyIGFueXRoaW5nIGlmIHRoZSBmaWVsZCBpcyBzY2FsYXInLCAoKSA9PiB7XG4gICAgY29uc3QgaW1wbCA9IHNjaGVtYS5nZXRRdWVyeVR5cGUoKS5nZXRGaWVsZHMoKS5zaW1wbGVTY2FsYXJcbiAgICBjb25zdCBjdXJyZW50RGVwdGggPSAzXG4gICAgZXhwZWN0KGdldEZyYWdtZW50KGltcGwsIHNjaGVtYSwgY3VycmVudERlcHRoKSkudG9CZVVuZGVmaW5lZCgpXG4gIH0pXG5cbiAgaXQoJ3Nob3VsZCB1c2UgdGhlIG5hbWUgcGFzc2VkIGFzIGZyYWdtZW50IG5hbWUnLCAoKSA9PiB7XG4gICAgY29uc3QgaW1wbCA9IHNjaGVtYS5nZXRUeXBlKCdSZWN0YW5nbGUnKVxuICAgIGNvbnN0IGN1cnJlbnREZXB0aCA9IDNcbiAgICBjb25zdCBmcmFnbWVudCA9IGdldEZyYWdtZW50KGltcGwsIHNjaGVtYSwgY3VycmVudERlcHRoLCBbXSwgJ0Zvb0ZyYWdtZW50JylcbiAgICBleHBlY3QoZnJhZ21lbnQubmFtZSkudG9FcXVhbCgnRm9vRnJhZ21lbnQnKVxuICB9KVxuXG4gIGl0KCdzaG91bGQgdXNlIHRoZSBtYXJrIGZyYWdtZW50IGFzIGV4dGVybmFsIHdoZW4gcGFzc2VkJywgKCkgPT4ge1xuICAgIGNvbnN0IGltcGwgPSBzY2hlbWEuZ2V0VHlwZSgnUmVjdGFuZ2xlJylcbiAgICBjb25zdCBjdXJyZW50RGVwdGggPSAzXG4gICAgY29uc3QgZnJhZ21lbnQgPSBnZXRGcmFnbWVudChpbXBsLCBzY2hlbWEsIGN1cnJlbnREZXB0aCwgW10sICdGb29GcmFnbWVudCcsIHRydWUpXG4gICAgZXhwZWN0KGZyYWdtZW50LmV4dGVybmFsKS50b0VxdWFsKHRydWUpXG4gIH0pXG5cbiAgaXQoJ3Nob3VsZCBwYXNzIHRoZSBvcHRpb25zIHRvIGdldEZpZWxkcyBjYWxsJywgKCkgPT4ge1xuICAgIGNvbnN0IG9wdGlvbnM6IEdRTERvY3NHZW5PcHRpb25zID0geyB1c2VFeHRlcm5hbEZyYWdtZW50Rm9yUzNPYmplY3Q6IHRydWUgfVxuICAgIGNvbnN0IGltcGwgPSBzY2hlbWEuZ2V0VHlwZSgnUmVjdGFuZ2xlJylcbiAgICBjb25zdCBjdXJyZW50RGVwdGggPSAzXG4gICAgY29uc3QgZnJhZ21lbnQgPSBnZXRGcmFnbWVudChpbXBsLCBzY2hlbWEsIGN1cnJlbnREZXB0aCwgW10sICdGb29GcmFnbWVudCcsIGZhbHNlLCBvcHRpb25zKVxuICAgIGV4cGVjdChnZXRGaWVsZHMpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygzKVxuICAgIGV4cGVjdChnZXRGaWVsZHMubW9jay5jYWxsc1swXVszXSkudG9FcXVhbChvcHRpb25zKVxuICB9KVxufSlcbiJdLCJzb3VyY2VSb290IjoiL2MvVXNlcnMvU2FuZHJvL3JlcG8vYW1wbGlmeS1jbGkvcGFja2FnZXMvYW1wbGlmeS1ncmFwaHFsLWRvY3MtZ2VuZXJhdG9yL3NyYy8ifQ==