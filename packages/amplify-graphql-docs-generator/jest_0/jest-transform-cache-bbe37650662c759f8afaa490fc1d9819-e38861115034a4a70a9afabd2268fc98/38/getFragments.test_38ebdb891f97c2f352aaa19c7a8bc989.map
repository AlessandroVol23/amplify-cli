{"version":3,"sources":["getFragments.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  GraphQLObjectType,\n  GraphQLSchema,\n  GraphQLInterfaceType,\n  GraphQLString,\n  GraphQLInt,\n} from 'graphql'\n\nimport { GQLTemplateField, GQLTemplateFragment, GQLDocsGenOptions } from '../../src/generator/types'\nimport getFields from '../../src/generator/getFields'\nimport getFragment from '../../src/generator/getFragment'\n\njest.mock('../../src/generator/getFields')\n\ndescribe('getFragments', () => {\n  const shapeInterfaceType = new GraphQLInterfaceType({\n    name: 'Entity',\n    fields: {\n      name: { type: GraphQLString },\n    },\n  })\n  const rectangleType = new GraphQLObjectType({\n    name: 'Rectangle',\n    fields: {\n      name: { type: GraphQLString },\n      length: { type: GraphQLInt },\n      width: { type: GraphQLInt },\n    },\n    interfaces: () => [shapeInterfaceType],\n  })\n\n  const schema = new GraphQLSchema({\n    query: new GraphQLObjectType({\n      name: 'Query',\n      fields: {\n        shapeInterface: { type: shapeInterfaceType },\n        simpleScalar: { type: GraphQLInt },\n      },\n    }),\n    types: [rectangleType],\n  })\n\n  beforeEach(() => {\n    jest.resetAllMocks()\n    getFields.mockImplementation((field) => ({ name: field.name }))\n  })\n\n  it('should call getField on each field of interface implimentation', () => {\n    const impl = schema.getType('Rectangle')\n    const currentDepth = 3\n    expect(getFragment(impl, schema, currentDepth, [])).toEqual({\n      fields: [{ name: 'name' }, { name: 'length' }, { name: 'width' }],\n      on: 'Rectangle',\n      external: false,\n      name: 'RectangleFragment',\n    })\n    expect(getFields).toHaveBeenCalledTimes(3)\n  })\n\n  it('should decrease the current depth when calling sub fieds', () => {\n    const impl = schema.getType('Rectangle')\n    const currentDepth = 3\n    getFragment(impl, schema, currentDepth, [])\n    expect(getFields.mock.calls[0][2]).toEqual(currentDepth - 1)\n  })\n\n  it('should filter out the fields that listed in filterFields', () => {\n    const impl = schema.getType('Rectangle')\n    const currentDepth = 3\n    const fieldsToFilter = [\n      {\n        name: 'length',\n        hasBody: false,\n        fields: [],\n        fragments: [],\n      },\n    ]\n    expect(getFragment(impl, schema, currentDepth, fieldsToFilter)).toEqual({\n      fields: [{ name: 'name' }, { name: 'width' }],\n      on: 'Rectangle',\n      name: 'RectangleFragment',\n      external: false,\n    })\n  })\n\n  it('should not render anything if the field is scalar', () => {\n    const impl = schema.getQueryType().getFields().simpleScalar\n    const currentDepth = 3\n    expect(getFragment(impl, schema, currentDepth)).toBeUndefined()\n  })\n\n  it('should use the name passed as fragment name', () => {\n    const impl = schema.getType('Rectangle')\n    const currentDepth = 3\n    const fragment = getFragment(impl, schema, currentDepth, [], 'FooFragment')\n    expect(fragment.name).toEqual('FooFragment')\n  })\n\n  it('should use the mark fragment as external when passed', () => {\n    const impl = schema.getType('Rectangle')\n    const currentDepth = 3\n    const fragment = getFragment(impl, schema, currentDepth, [], 'FooFragment', true)\n    expect(fragment.external).toEqual(true)\n  })\n\n  it('should pass the options to getFields call', () => {\n    const options: GQLDocsGenOptions = { useExternalFragmentForS3Object: true }\n    const impl = schema.getType('Rectangle')\n    const currentDepth = 3\n    const fragment = getFragment(impl, schema, currentDepth, [], 'FooFragment', false, options)\n    expect(getFields).toHaveBeenCalledTimes(3)\n    expect(getFields.mock.calls[0][3]).toEqual(options)\n  })\n})\n"],"sourceRoot":"/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-docs-generator/src/"}