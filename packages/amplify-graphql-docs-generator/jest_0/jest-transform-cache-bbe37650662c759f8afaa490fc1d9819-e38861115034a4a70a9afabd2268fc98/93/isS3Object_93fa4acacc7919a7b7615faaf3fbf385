2a5d1c6c2d245048e08c6f6ec44e60f2
'use strict';
require('ts-jest').install("/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-docs-generator/src/generator/utils/isS3Object.ts", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst graphql_1 = require(\"graphql\");\nconst getType_1 = require(\"./getType\");\nconst S3_FIELD_NAMES = ['bucket', 'key', 'region'];\nfunction isS3Object(typeObj) {\n    if (graphql_1.isObjectType(typeObj)) {\n        const fields = typeObj.getFields();\n        const fieldName = typeObj.name;\n        const hasS3Fields = S3_FIELD_NAMES.every((s3Field) => {\n            const field = fields[s3Field];\n            try {\n                const type = getType_1.default(field.type);\n                return field && graphql_1.isScalarType(type) && type.name === 'String';\n            }\n            catch (e) {\n                return false;\n            }\n        });\n        return hasS3Fields && fieldName === 'S3Object';\n    }\n    return false;\n}\nexports.default = isS3Object;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXNTM09iamVjdC5qcyIsInNvdXJjZVJvb3QiOiIvYy9Vc2Vycy9TYW5kcm8vcmVwby9hbXBsaWZ5LWNsaS9wYWNrYWdlcy9hbXBsaWZ5LWdyYXBocWwtZG9jcy1nZW5lcmF0b3Ivc3JjLyIsInNvdXJjZXMiOlsiaXNTM09iamVjdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHFDQUFrRTtBQUNsRSx1Q0FBZ0M7QUFDaEMsTUFBTSxjQUFjLEdBQUcsQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLFFBQVEsQ0FBRSxDQUFDO0FBQ3BELG9CQUFtQyxPQUFvQjtJQUNyRCxJQUFJLHNCQUFZLENBQUMsT0FBTyxDQUFDLEVBQUU7UUFDekIsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ25DLE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUM7UUFDL0IsTUFBTSxXQUFXLEdBQUcsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQ25ELE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUM5QixJQUFJO2dCQUNGLE1BQU0sSUFBSSxHQUFHLGlCQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBO2dCQUNoQyxPQUFPLEtBQUssSUFBSSxzQkFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssUUFBUSxDQUFDO2FBQzlEO1lBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ1YsT0FBTyxLQUFLLENBQUM7YUFDZDtRQUNILENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxXQUFXLElBQUksU0FBUyxLQUFLLFVBQVUsQ0FBQztLQUNoRDtJQUNELE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQztBQWhCRCw2QkFnQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHcmFwaFFMVHlwZSwgaXNPYmplY3RUeXBlLCBpc1NjYWxhclR5cGUgfSBmcm9tIFwiZ3JhcGhxbFwiO1xuaW1wb3J0IGdldFR5cGUgZnJvbSBcIi4vZ2V0VHlwZVwiO1xuY29uc3QgUzNfRklFTERfTkFNRVMgPSBbJ2J1Y2tldCcsICdrZXknLCAncmVnaW9uJyBdO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNTM09iamVjdCh0eXBlT2JqOiBHcmFwaFFMVHlwZSk6IGJvb2xlYW4ge1xuICBpZiAoaXNPYmplY3RUeXBlKHR5cGVPYmopKSB7XG4gICAgY29uc3QgZmllbGRzID0gdHlwZU9iai5nZXRGaWVsZHMoKTtcbiAgICBjb25zdCBmaWVsZE5hbWUgPSB0eXBlT2JqLm5hbWU7XG4gICAgY29uc3QgaGFzUzNGaWVsZHMgPSBTM19GSUVMRF9OQU1FUy5ldmVyeSgoczNGaWVsZCkgPT4ge1xuICAgICAgY29uc3QgZmllbGQgPSBmaWVsZHNbczNGaWVsZF07XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCB0eXBlID0gZ2V0VHlwZShmaWVsZC50eXBlKVxuICAgICAgICByZXR1cm4gZmllbGQgJiYgaXNTY2FsYXJUeXBlKHR5cGUpICYmIHR5cGUubmFtZSA9PT0gJ1N0cmluZyc7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gaGFzUzNGaWVsZHMgJiYgZmllbGROYW1lID09PSAnUzNPYmplY3QnO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbiJdfQ==");"use strict"; /* istanbul ignore next */var cov_1hbcavqij0 = function () {
    var path = "/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-docs-generator/src/generator/utils/isS3Object.ts",
        hash = "7cd10a9cc98fe1c0b1b070d7b562f1958688e199",
        Function = function () {}.constructor,
        global = new Function('return this')(),
        gcv = "__coverage__",
        coverageData = { path: "/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-docs-generator/src/generator/utils/isS3Object.ts", statementMap: { "0": { start: { line: 2, column: 0 }, end: { line: 2, column: 62 } }, "1": { start: { line: 3, column: 18 }, end: { line: 3, column: 36 } }, "2": { start: { line: 4, column: 18 }, end: { line: 4, column: 38 } }, "3": { start: { line: 5, column: 23 }, end: { line: 5, column: 50 } }, "4": { start: { line: 7, column: 4 }, end: { line: 21, column: 5 } }, "5": { start: { line: 8, column: 23 }, end: { line: 8, column: 42 } }, "6": { start: { line: 9, column: 26 }, end: { line: 9, column: 38 } }, "7": { start: { line: 10, column: 28 }, end: { line: 19, column: 10 } }, "8": { start: { line: 11, column: 26 }, end: { line: 11, column: 41 } }, "9": { start: { line: 12, column: 12 }, end: { line: 18, column: 13 } }, "10": { start: { line: 13, column: 29 }, end: { line: 13, column: 58 } }, "11": { start: { line: 14, column: 16 }, end: { line: 14, column: 87 } }, "12": { start: { line: 17, column: 16 }, end: { line: 17, column: 29 } }, "13": { start: { line: 20, column: 8 }, end: { line: 20, column: 55 } }, "14": { start: { line: 22, column: 4 }, end: { line: 22, column: 17 } }, "15": { start: { line: 24, column: 0 }, end: { line: 24, column: 29 } } }, fnMap: { "0": { name: "isS3Object", decl: { start: { line: 6, column: 9 }, end: { line: 6, column: 19 } }, loc: { start: { line: 6, column: 29 }, end: { line: 23, column: 1 } }, line: 6 }, "1": { name: "(anonymous_1)", decl: { start: { line: 10, column: 49 }, end: { line: 10, column: 50 } }, loc: { start: { line: 10, column: 62 }, end: { line: 19, column: 9 } }, line: 10 } }, branchMap: { "0": { loc: { start: { line: 7, column: 4 }, end: { line: 21, column: 5 } }, type: "if", locations: [{ start: { line: 7, column: 4 }, end: { line: 21, column: 5 } }, { start: { line: 7, column: 4 }, end: { line: 21, column: 5 } }], line: 7 }, "1": { loc: { start: { line: 14, column: 23 }, end: { line: 14, column: 86 } }, type: "binary-expr", locations: [{ start: { line: 14, column: 23 }, end: { line: 14, column: 28 } }, { start: { line: 14, column: 32 }, end: { line: 14, column: 60 } }, { start: { line: 14, column: 64 }, end: { line: 14, column: 86 } }], line: 14 }, "2": { loc: { start: { line: 20, column: 15 }, end: { line: 20, column: 54 } }, type: "binary-expr", locations: [{ start: { line: 20, column: 15 }, end: { line: 20, column: 26 } }, { start: { line: 20, column: 30 }, end: { line: 20, column: 54 } }], line: 20 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0 }, f: { "0": 0, "1": 0 }, b: { "0": [0, 0], "1": [0, 0, 0], "2": [0, 0] }, inputSourceMap: { version: 3, file: "isS3Object.js", sourceRoot: "/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-docs-generator/src/", sources: ["isS3Object.ts"], names: [], mappings: ";;AAAA,qCAAkE;AAClE,uCAAgC;AAChC,MAAM,cAAc,GAAG,CAAC,QAAQ,EAAE,KAAK,EAAE,QAAQ,CAAE,CAAC;AACpD,oBAAmC,OAAoB;IACrD,IAAI,sBAAY,CAAC,OAAO,CAAC,EAAE;QACzB,MAAM,MAAM,GAAG,OAAO,CAAC,SAAS,EAAE,CAAC;QACnC,MAAM,SAAS,GAAG,OAAO,CAAC,IAAI,CAAC;QAC/B,MAAM,WAAW,GAAG,cAAc,CAAC,KAAK,CAAC,CAAC,OAAO,EAAE,EAAE;YACnD,MAAM,KAAK,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC;YAC9B,IAAI;gBACF,MAAM,IAAI,GAAG,iBAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;gBAChC,OAAO,KAAK,IAAI,sBAAY,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,KAAK,QAAQ,CAAC;aAC9D;YAAC,OAAO,CAAC,EAAE;gBACV,OAAO,KAAK,CAAC;aACd;QACH,CAAC,CAAC,CAAC;QACH,OAAO,WAAW,IAAI,SAAS,KAAK,UAAU,CAAC;KAChD;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AAhBD,6BAgBC", sourcesContent: ["import { GraphQLType, isObjectType, isScalarType } from \"graphql\";\nimport getType from \"./getType\";\nconst S3_FIELD_NAMES = ['bucket', 'key', 'region' ];\nexport default function isS3Object(typeObj: GraphQLType): boolean {\n  if (isObjectType(typeObj)) {\n    const fields = typeObj.getFields();\n    const fieldName = typeObj.name;\n    const hasS3Fields = S3_FIELD_NAMES.every((s3Field) => {\n      const field = fields[s3Field];\n      try {\n        const type = getType(field.type)\n        return field && isScalarType(type) && type.name === 'String';\n      } catch (e) {\n        return false;\n      }\n    });\n    return hasS3Fields && fieldName === 'S3Object';\n  }\n  return false;\n}\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
        coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
        return coverage[path];
    }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_1hbcavqij0.s[0]++;
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = ( /* istanbul ignore next */cov_1hbcavqij0.s[1]++, require("graphql"));
const getType_1 = ( /* istanbul ignore next */cov_1hbcavqij0.s[2]++, require("./getType"));
const S3_FIELD_NAMES = ( /* istanbul ignore next */cov_1hbcavqij0.s[3]++, ['bucket', 'key', 'region']);
function isS3Object(typeObj) {
    /* istanbul ignore next */cov_1hbcavqij0.f[0]++;cov_1hbcavqij0.s[4]++;
    if (graphql_1.isObjectType(typeObj)) {
        /* istanbul ignore next */cov_1hbcavqij0.b[0][0]++;
        const fields = ( /* istanbul ignore next */cov_1hbcavqij0.s[5]++, typeObj.getFields());
        const fieldName = ( /* istanbul ignore next */cov_1hbcavqij0.s[6]++, typeObj.name);
        const hasS3Fields = ( /* istanbul ignore next */cov_1hbcavqij0.s[7]++, S3_FIELD_NAMES.every(s3Field => {
            /* istanbul ignore next */cov_1hbcavqij0.f[1]++;
            const field = ( /* istanbul ignore next */cov_1hbcavqij0.s[8]++, fields[s3Field]); /* istanbul ignore next */cov_1hbcavqij0.s[9]++;
            try {
                const type = ( /* istanbul ignore next */cov_1hbcavqij0.s[10]++, getType_1.default(field.type)); /* istanbul ignore next */cov_1hbcavqij0.s[11]++;
                return (/* istanbul ignore next */(cov_1hbcavqij0.b[1][0]++, field) && ( /* istanbul ignore next */cov_1hbcavqij0.b[1][1]++, graphql_1.isScalarType(type)) && ( /* istanbul ignore next */cov_1hbcavqij0.b[1][2]++, type.name === 'String')
                );
            } catch (e) {
                /* istanbul ignore next */cov_1hbcavqij0.s[12]++;
                return false;
            }
        })); /* istanbul ignore next */cov_1hbcavqij0.s[13]++;
        return (/* istanbul ignore next */(cov_1hbcavqij0.b[2][0]++, hasS3Fields) && ( /* istanbul ignore next */cov_1hbcavqij0.b[2][1]++, fieldName === 'S3Object')
        );
    } else /* istanbul ignore next */{
            cov_1hbcavqij0.b[0][1]++;
        }cov_1hbcavqij0.s[14]++;
    return false;
} /* istanbul ignore next */cov_1hbcavqij0.s[15]++;
exports.default = isS3Object;