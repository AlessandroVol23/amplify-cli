{"version":3,"sources":["isS3Object.ts"],"names":[],"mappings":";;AAAA,MAAA,8DAAA,QAAA,SAAA,CAAA,CAAA;AACA,MAAA,8DAAA,QAAA,WAAA,CAAA,CAAA;AACA,MAAM,mEAAiB,CAAC,QAAD,EAAW,KAAX,EAAkB,QAAlB,CAAjB,CAAN;AACA,SAAA,UAAA,CAAmC,OAAnC,EAAuD;AACrD,QAAI,UAAA,YAAA,CAAa,OAAb,CAAJ,EAA2B;AACzB,cAAM,2DAAS,QAAQ,SAAR,EAAT,CAAN;AACA,cAAM,8DAAY,QAAQ,IAApB,CAAN;AACA,cAAM,gEAAc,eAAe,KAAf,CAAsB,OAAD,IAAY;AACnD,kBAAM,0DAAQ,OAAO,OAAP,CAAR,CAAN,CADmD;AAEnD,gBAAI;AACF,sBAAM,0DAAO,UAAA,OAAA,CAAQ,MAAM,IAAd,CAAP,CAAN,CADE;AAEF,uBAAO,qHAAS,UAAA,YAAA,CAAa,IAAb,CAAT,0DAA+B,KAAK,IAAL,KAAc,QAA7C,CAAP;AACD;AAAC,mBAAO,CAAP,EAAU;AACV,uBAAO,KAAP;AACD;AACF,SARmB,CAAd,CAAN,CAHyB;AAYzB,eAAO,2HAAe,cAAc,UAA7B,CAAP;AACD,KAbD,2DADqD;AAerD,WAAO,KAAP;AACD,C;AAhBD,QAAA,OAAA,GAAA,UAAA","sourcesContent":["import { GraphQLType, isObjectType, isScalarType } from \"graphql\";\nimport getType from \"./getType\";\nconst S3_FIELD_NAMES = ['bucket', 'key', 'region' ];\nexport default function isS3Object(typeObj: GraphQLType): boolean {\n  if (isObjectType(typeObj)) {\n    const fields = typeObj.getFields();\n    const fieldName = typeObj.name;\n    const hasS3Fields = S3_FIELD_NAMES.every((s3Field) => {\n      const field = fields[s3Field];\n      try {\n        const type = getType(field.type)\n        return field && isScalarType(type) && type.name === 'String';\n      } catch (e) {\n        return false;\n      }\n    });\n    return hasS3Fields && fieldName === 'S3Object';\n  }\n  return false;\n}\n"],"sourceRoot":"/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-docs-generator/src/"}