9ecba80498242b88c46ca347ce80221f
'use strict';
require('ts-jest').install("/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-docs-generator/src/generator/getBody.ts", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst getFields_1 = require(\"./getFields\");\nfunction getBody(op, schema, maxDepth = 3, options) {\n    const args = op.args.map((arg) => ({\n        name: arg.name,\n        value: `\\$${arg.name}`,\n    }));\n    const fields = getFields_1.default(op, schema, maxDepth, options);\n    return Object.assign({ args }, fields);\n}\nexports.default = getBody;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0Qm9keS5qcyIsInNvdXJjZVJvb3QiOiIvYy9Vc2Vycy9TYW5kcm8vcmVwby9hbXBsaWZ5LWNsaS9wYWNrYWdlcy9hbXBsaWZ5LWdyYXBocWwtZG9jcy1nZW5lcmF0b3Ivc3JjLyIsInNvdXJjZXMiOlsiZ2V0Qm9keS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBLDJDQUFtQztBQUduQyxpQkFDRSxFQUEwQixFQUMxQixNQUFxQixFQUNyQixXQUFtQixDQUFDLEVBQ3BCLE9BQTBCO0lBRTFCLE1BQU0sSUFBSSxHQUFvQyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNsRSxJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUk7UUFDZCxLQUFLLEVBQUUsS0FBSyxHQUFHLENBQUMsSUFBSSxFQUFFO0tBQ3ZCLENBQUMsQ0FBQyxDQUFBO0lBQ0gsTUFBTSxNQUFNLEdBQXFCLG1CQUFTLENBQUMsRUFBRSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUE7SUFDekUsdUJBQ0UsSUFBSSxJQUNELE1BQU0sRUFDVjtBQUNILENBQUM7QUFmRCwwQkFlQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEdyYXBoUUxGaWVsZCwgR3JhcGhRTFNjaGVtYSB9IGZyb20gJ2dyYXBocWwnXG5cbmltcG9ydCBnZXRGaWVsZHMgZnJvbSAnLi9nZXRGaWVsZHMnXG5pbXBvcnQgeyBHUUxUZW1wbGF0ZU9wQm9keSwgR1FMVGVtcGxhdGVBcmdJbnZvY2F0aW9uLCBHUUxUZW1wbGF0ZUZpZWxkLCBHUUxEb2NzR2VuT3B0aW9ucyB9IGZyb20gJy4vdHlwZXMnXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEJvZHkoXG4gIG9wOiBHcmFwaFFMRmllbGQ8YW55LCBhbnk+LFxuICBzY2hlbWE6IEdyYXBoUUxTY2hlbWEsXG4gIG1heERlcHRoOiBudW1iZXIgPSAzLFxuICBvcHRpb25zOiBHUUxEb2NzR2VuT3B0aW9uc1xuKTogR1FMVGVtcGxhdGVPcEJvZHkge1xuICBjb25zdCBhcmdzOiBBcnJheTxHUUxUZW1wbGF0ZUFyZ0ludm9jYXRpb24+ID0gb3AuYXJncy5tYXAoKGFyZykgPT4gKHtcbiAgICBuYW1lOiBhcmcubmFtZSxcbiAgICB2YWx1ZTogYFxcJCR7YXJnLm5hbWV9YCxcbiAgfSkpXG4gIGNvbnN0IGZpZWxkczogR1FMVGVtcGxhdGVGaWVsZCA9IGdldEZpZWxkcyhvcCwgc2NoZW1hLCBtYXhEZXB0aCwgb3B0aW9ucylcbiAgcmV0dXJuIHtcbiAgICBhcmdzLFxuICAgIC4uLmZpZWxkcyxcbiAgfVxufVxuIl19");"use strict"; /* istanbul ignore next */var cov_152qyjf2dn = function () {
        var path = "/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-docs-generator/src/generator/getBody.ts",
            hash = "451d99d9a506584eefd0a2465e73d8953eac3c38",
            Function = function () {}.constructor,
            global = new Function('return this')(),
            gcv = "__coverage__",
            coverageData = { path: "/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-docs-generator/src/generator/getBody.ts", statementMap: { "0": { start: { line: 2, column: 0 }, end: { line: 2, column: 62 } }, "1": { start: { line: 3, column: 20 }, end: { line: 3, column: 42 } }, "2": { start: { line: 5, column: 17 }, end: { line: 8, column: 7 } }, "3": { start: { line: 5, column: 39 }, end: { line: 8, column: 5 } }, "4": { start: { line: 9, column: 19 }, end: { line: 9, column: 69 } }, "5": { start: { line: 10, column: 4 }, end: { line: 10, column: 43 } }, "6": { start: { line: 12, column: 0 }, end: { line: 12, column: 26 } } }, fnMap: { "0": { name: "getBody", decl: { start: { line: 4, column: 9 }, end: { line: 4, column: 16 } }, loc: { start: { line: 4, column: 52 }, end: { line: 11, column: 1 } }, line: 4 }, "1": { name: "(anonymous_1)", decl: { start: { line: 5, column: 29 }, end: { line: 5, column: 30 } }, loc: { start: { line: 5, column: 39 }, end: { line: 8, column: 5 } }, line: 5 } }, branchMap: { "0": { loc: { start: { line: 4, column: 29 }, end: { line: 4, column: 41 } }, type: "default-arg", locations: [{ start: { line: 4, column: 40 }, end: { line: 4, column: 41 } }], line: 4 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0 }, f: { "0": 0, "1": 0 }, b: { "0": [0] }, inputSourceMap: { version: 3, file: "getBody.js", sourceRoot: "/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-docs-generator/src/", sources: ["getBody.ts"], names: [], mappings: ";;AAEA,2CAAmC;AAGnC,iBACE,EAA0B,EAC1B,MAAqB,EACrB,WAAmB,CAAC,EACpB,OAA0B;IAE1B,MAAM,IAAI,GAAoC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;QAClE,IAAI,EAAE,GAAG,CAAC,IAAI;QACd,KAAK,EAAE,KAAK,GAAG,CAAC,IAAI,EAAE;KACvB,CAAC,CAAC,CAAA;IACH,MAAM,MAAM,GAAqB,mBAAS,CAAC,EAAE,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAA;IACzE,uBACE,IAAI,IACD,MAAM,EACV;AACH,CAAC;AAfD,0BAeC", sourcesContent: ["import { GraphQLField, GraphQLSchema } from 'graphql'\n\nimport getFields from './getFields'\nimport { GQLTemplateOpBody, GQLTemplateArgInvocation, GQLTemplateField, GQLDocsGenOptions } from './types'\n\nexport default function getBody(\n  op: GraphQLField<any, any>,\n  schema: GraphQLSchema,\n  maxDepth: number = 3,\n  options: GQLDocsGenOptions\n): GQLTemplateOpBody {\n  const args: Array<GQLTemplateArgInvocation> = op.args.map((arg) => ({\n    name: arg.name,\n    value: `\\$${arg.name}`,\n  }))\n  const fields: GQLTemplateField = getFields(op, schema, maxDepth, options)\n  return {\n    args,\n    ...fields,\n  }\n}\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
            coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
                return coverage[path];
        }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_152qyjf2dn.s[0]++;
Object.defineProperty(exports, "__esModule", { value: true });
const getFields_1 = ( /* istanbul ignore next */cov_152qyjf2dn.s[1]++, require("./getFields"));
function getBody(op, schema, maxDepth = ( /* istanbul ignore next */cov_152qyjf2dn.b[0][0]++, 3), options) {
        /* istanbul ignore next */cov_152qyjf2dn.f[0]++;
        const args = ( /* istanbul ignore next */cov_152qyjf2dn.s[2]++, op.args.map(arg => {
                /* istanbul ignore next */cov_152qyjf2dn.f[1]++;cov_152qyjf2dn.s[3]++;return {
                        name: arg.name,
                        value: `\$${arg.name}` };
        }));
        const fields = ( /* istanbul ignore next */cov_152qyjf2dn.s[4]++, getFields_1.default(op, schema, maxDepth, options)); /* istanbul ignore next */cov_152qyjf2dn.s[5]++;
        return Object.assign({ args }, fields);
} /* istanbul ignore next */cov_152qyjf2dn.s[6]++;
exports.default = getBody;