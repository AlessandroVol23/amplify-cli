{"version":3,"sources":["getArgs.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  GraphQLSchema,\n  GraphQLObjectType,\n  GraphQLArgument,\n  GraphQLString,\n  GraphQLID,\n} from 'graphql'\n\nimport isRequired from '../../src/generator/utils/isRequired'\nimport getType from '../../src/generator/utils/getType'\n\nimport getArgs from '../../src/generator/getArgs'\nimport isList from '../../src/generator/utils/isList';\nimport isRequiredList from '../../src/generator/utils/isRequiredList';\n\njest.mock('../../src/generator/utils/isRequired')\njest.mock('../../src/generator/utils/getType')\njest.mock('../../src/generator/utils/isList')\njest.mock('../../src/generator/utils/isRequiredList');\n\ndescribe('getArgs', () => {\n  const id: GraphQLArgument = {\n    name: 'id',\n    type: GraphQLID,\n    defaultValue: '1',\n  }\n\n  const query: GraphQLArgument = {\n    name: 'query',\n    type: GraphQLString,\n  }\n\n  const blogArticle = new GraphQLObjectType({\n    name: 'BlogArticle',\n    fields: {\n      id: { type: GraphQLID },\n      content: { type: GraphQLString },\n    },\n  })\n\n  const schema = new GraphQLSchema({\n    query: new GraphQLObjectType({\n      name: 'Query',\n      fields: {\n        searchArticle: {\n          args: { id, query },\n          type: blogArticle,\n        },\n      },\n    }),\n  })\n\n  beforeEach(() => {\n    jest.resetAllMocks()\n    isRequired.mockReturnValue(false)\n    getType.mockReturnValue({ name: 'mockType' })\n    isRequiredList.mockReturnValue(false);\n    isList.mockReturnValue(false);\n  })\n\n  it('should return arguments', () => {\n    isList.mockReturnValueOnce(true);\n    const query = schema.getQueryType().getFields().searchArticle\n    expect(getArgs(query.args)).toEqual([\n      {\n        name: 'id',\n        type: 'mockType',\n        defaultValue: '1',\n        isRequired: false,\n        isList: true,\n        isListRequired: false,\n      },\n      {\n        name: 'query',\n        type: 'mockType',\n        defaultValue: undefined,\n        isRequired: false,\n        isList: false,\n        isListRequired: false,\n      },\n    ])\n    expect(getType).toHaveBeenCalledTimes(2)\n    expect(getType.mock.calls[0][0]).toEqual(GraphQLID)\n    expect(getType.mock.calls[1][0]).toEqual(GraphQLString)\n\n    expect(isRequired).toHaveBeenCalledTimes(2)\n    expect(isRequired.mock.calls[0][0]).toEqual(query.args[0].type)\n    expect(isRequired.mock.calls[1][0]).toEqual(query.args[1].type)\n\n    expect(isList).toHaveBeenCalledTimes(2);\n    expect(isRequiredList).toHaveBeenCalledTimes(2);\n  })\n})\n"],"sourceRoot":"/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-docs-generator/src/"}