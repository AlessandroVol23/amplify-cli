b6ecf22a70d8233c00407d49f639353a
'use strict';require('ts-jest').install("/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-docs-generator/__tests__/generator/getArgs.test.ts", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst graphql_1 = require(\"graphql\");\nconst isRequired_1 = require(\"../../src/generator/utils/isRequired\");\nconst getType_1 = require(\"../../src/generator/utils/getType\");\nconst getArgs_1 = require(\"../../src/generator/getArgs\");\nconst isList_1 = require(\"../../src/generator/utils/isList\");\nconst isRequiredList_1 = require(\"../../src/generator/utils/isRequiredList\");\njest.mock('../../src/generator/utils/isRequired');\njest.mock('../../src/generator/utils/getType');\njest.mock('../../src/generator/utils/isList');\njest.mock('../../src/generator/utils/isRequiredList');\ndescribe('getArgs', () => {\n    const id = {\n        name: 'id',\n        type: graphql_1.GraphQLID,\n        defaultValue: '1',\n    };\n    const query = {\n        name: 'query',\n        type: graphql_1.GraphQLString,\n    };\n    const blogArticle = new graphql_1.GraphQLObjectType({\n        name: 'BlogArticle',\n        fields: {\n            id: { type: graphql_1.GraphQLID },\n            content: { type: graphql_1.GraphQLString },\n        },\n    });\n    const schema = new graphql_1.GraphQLSchema({\n        query: new graphql_1.GraphQLObjectType({\n            name: 'Query',\n            fields: {\n                searchArticle: {\n                    args: { id, query },\n                    type: blogArticle,\n                },\n            },\n        }),\n    });\n    beforeEach(() => {\n        jest.resetAllMocks();\n        isRequired_1.default.mockReturnValue(false);\n        getType_1.default.mockReturnValue({ name: 'mockType' });\n        isRequiredList_1.default.mockReturnValue(false);\n        isList_1.default.mockReturnValue(false);\n    });\n    it('should return arguments', () => {\n        isList_1.default.mockReturnValueOnce(true);\n        const query = schema.getQueryType().getFields().searchArticle;\n        expect(getArgs_1.default(query.args)).toEqual([\n            {\n                name: 'id',\n                type: 'mockType',\n                defaultValue: '1',\n                isRequired: false,\n                isList: true,\n                isListRequired: false,\n            },\n            {\n                name: 'query',\n                type: 'mockType',\n                defaultValue: undefined,\n                isRequired: false,\n                isList: false,\n                isListRequired: false,\n            },\n        ]);\n        expect(getType_1.default).toHaveBeenCalledTimes(2);\n        expect(getType_1.default.mock.calls[0][0]).toEqual(graphql_1.GraphQLID);\n        expect(getType_1.default.mock.calls[1][0]).toEqual(graphql_1.GraphQLString);\n        expect(isRequired_1.default).toHaveBeenCalledTimes(2);\n        expect(isRequired_1.default.mock.calls[0][0]).toEqual(query.args[0].type);\n        expect(isRequired_1.default.mock.calls[1][0]).toEqual(query.args[1].type);\n        expect(isList_1.default).toHaveBeenCalledTimes(2);\n        expect(isRequiredList_1.default).toHaveBeenCalledTimes(2);\n    });\n});\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0QXJncy50ZXN0LmpzIiwic291cmNlUm9vdCI6Ii9jL1VzZXJzL1NhbmRyby9yZXBvL2FtcGxpZnktY2xpL3BhY2thZ2VzL2FtcGxpZnktZ3JhcGhxbC1kb2NzLWdlbmVyYXRvci9zcmMvIiwic291cmNlcyI6WyJnZXRBcmdzLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxxQ0FNZ0I7QUFFaEIscUVBQTZEO0FBQzdELCtEQUF1RDtBQUV2RCx5REFBaUQ7QUFDakQsNkRBQXNEO0FBQ3RELDZFQUFzRTtBQUV0RSxJQUFJLENBQUMsSUFBSSxDQUFDLHNDQUFzQyxDQUFDLENBQUE7QUFDakQsSUFBSSxDQUFDLElBQUksQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFBO0FBQzlDLElBQUksQ0FBQyxJQUFJLENBQUMsa0NBQWtDLENBQUMsQ0FBQTtBQUM3QyxJQUFJLENBQUMsSUFBSSxDQUFDLDBDQUEwQyxDQUFDLENBQUM7QUFFdEQsUUFBUSxDQUFDLFNBQVMsRUFBRSxHQUFHLEVBQUU7SUFDdkIsTUFBTSxFQUFFLEdBQW9CO1FBQzFCLElBQUksRUFBRSxJQUFJO1FBQ1YsSUFBSSxFQUFFLG1CQUFTO1FBQ2YsWUFBWSxFQUFFLEdBQUc7S0FDbEIsQ0FBQTtJQUVELE1BQU0sS0FBSyxHQUFvQjtRQUM3QixJQUFJLEVBQUUsT0FBTztRQUNiLElBQUksRUFBRSx1QkFBYTtLQUNwQixDQUFBO0lBRUQsTUFBTSxXQUFXLEdBQUcsSUFBSSwyQkFBaUIsQ0FBQztRQUN4QyxJQUFJLEVBQUUsYUFBYTtRQUNuQixNQUFNLEVBQUU7WUFDTixFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsbUJBQVMsRUFBRTtZQUN2QixPQUFPLEVBQUUsRUFBRSxJQUFJLEVBQUUsdUJBQWEsRUFBRTtTQUNqQztLQUNGLENBQUMsQ0FBQTtJQUVGLE1BQU0sTUFBTSxHQUFHLElBQUksdUJBQWEsQ0FBQztRQUMvQixLQUFLLEVBQUUsSUFBSSwyQkFBaUIsQ0FBQztZQUMzQixJQUFJLEVBQUUsT0FBTztZQUNiLE1BQU0sRUFBRTtnQkFDTixhQUFhLEVBQUU7b0JBQ2IsSUFBSSxFQUFFLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRTtvQkFDbkIsSUFBSSxFQUFFLFdBQVc7aUJBQ2xCO2FBQ0Y7U0FDRixDQUFDO0tBQ0gsQ0FBQyxDQUFBO0lBRUYsVUFBVSxDQUFDLEdBQUcsRUFBRTtRQUNkLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQTtRQUNwQixvQkFBVSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUNqQyxpQkFBTyxDQUFDLGVBQWUsQ0FBQyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFBO1FBQzdDLHdCQUFjLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3RDLGdCQUFNLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2hDLENBQUMsQ0FBQyxDQUFBO0lBRUYsRUFBRSxDQUFDLHlCQUF5QixFQUFFLEdBQUcsRUFBRTtRQUNqQyxnQkFBTSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2pDLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxhQUFhLENBQUE7UUFDN0QsTUFBTSxDQUFDLGlCQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO1lBQ2xDO2dCQUNFLElBQUksRUFBRSxJQUFJO2dCQUNWLElBQUksRUFBRSxVQUFVO2dCQUNoQixZQUFZLEVBQUUsR0FBRztnQkFDakIsVUFBVSxFQUFFLEtBQUs7Z0JBQ2pCLE1BQU0sRUFBRSxJQUFJO2dCQUNaLGNBQWMsRUFBRSxLQUFLO2FBQ3RCO1lBQ0Q7Z0JBQ0UsSUFBSSxFQUFFLE9BQU87Z0JBQ2IsSUFBSSxFQUFFLFVBQVU7Z0JBQ2hCLFlBQVksRUFBRSxTQUFTO2dCQUN2QixVQUFVLEVBQUUsS0FBSztnQkFDakIsTUFBTSxFQUFFLEtBQUs7Z0JBQ2IsY0FBYyxFQUFFLEtBQUs7YUFDdEI7U0FDRixDQUFDLENBQUE7UUFDRixNQUFNLENBQUMsaUJBQU8sQ0FBQyxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ3hDLE1BQU0sQ0FBQyxpQkFBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsbUJBQVMsQ0FBQyxDQUFBO1FBQ25ELE1BQU0sQ0FBQyxpQkFBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsdUJBQWEsQ0FBQyxDQUFBO1FBRXZELE1BQU0sQ0FBQyxvQkFBVSxDQUFDLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDM0MsTUFBTSxDQUFDLG9CQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQy9ELE1BQU0sQ0FBQyxvQkFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUUvRCxNQUFNLENBQUMsZ0JBQU0sQ0FBQyxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3hDLE1BQU0sQ0FBQyx3QkFBYyxDQUFDLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEQsQ0FBQyxDQUFDLENBQUE7QUFDSixDQUFDLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEdyYXBoUUxTY2hlbWEsXG4gIEdyYXBoUUxPYmplY3RUeXBlLFxuICBHcmFwaFFMQXJndW1lbnQsXG4gIEdyYXBoUUxTdHJpbmcsXG4gIEdyYXBoUUxJRCxcbn0gZnJvbSAnZ3JhcGhxbCdcblxuaW1wb3J0IGlzUmVxdWlyZWQgZnJvbSAnLi4vLi4vc3JjL2dlbmVyYXRvci91dGlscy9pc1JlcXVpcmVkJ1xuaW1wb3J0IGdldFR5cGUgZnJvbSAnLi4vLi4vc3JjL2dlbmVyYXRvci91dGlscy9nZXRUeXBlJ1xuXG5pbXBvcnQgZ2V0QXJncyBmcm9tICcuLi8uLi9zcmMvZ2VuZXJhdG9yL2dldEFyZ3MnXG5pbXBvcnQgaXNMaXN0IGZyb20gJy4uLy4uL3NyYy9nZW5lcmF0b3IvdXRpbHMvaXNMaXN0JztcbmltcG9ydCBpc1JlcXVpcmVkTGlzdCBmcm9tICcuLi8uLi9zcmMvZ2VuZXJhdG9yL3V0aWxzL2lzUmVxdWlyZWRMaXN0JztcblxuamVzdC5tb2NrKCcuLi8uLi9zcmMvZ2VuZXJhdG9yL3V0aWxzL2lzUmVxdWlyZWQnKVxuamVzdC5tb2NrKCcuLi8uLi9zcmMvZ2VuZXJhdG9yL3V0aWxzL2dldFR5cGUnKVxuamVzdC5tb2NrKCcuLi8uLi9zcmMvZ2VuZXJhdG9yL3V0aWxzL2lzTGlzdCcpXG5qZXN0Lm1vY2soJy4uLy4uL3NyYy9nZW5lcmF0b3IvdXRpbHMvaXNSZXF1aXJlZExpc3QnKTtcblxuZGVzY3JpYmUoJ2dldEFyZ3MnLCAoKSA9PiB7XG4gIGNvbnN0IGlkOiBHcmFwaFFMQXJndW1lbnQgPSB7XG4gICAgbmFtZTogJ2lkJyxcbiAgICB0eXBlOiBHcmFwaFFMSUQsXG4gICAgZGVmYXVsdFZhbHVlOiAnMScsXG4gIH1cblxuICBjb25zdCBxdWVyeTogR3JhcGhRTEFyZ3VtZW50ID0ge1xuICAgIG5hbWU6ICdxdWVyeScsXG4gICAgdHlwZTogR3JhcGhRTFN0cmluZyxcbiAgfVxuXG4gIGNvbnN0IGJsb2dBcnRpY2xlID0gbmV3IEdyYXBoUUxPYmplY3RUeXBlKHtcbiAgICBuYW1lOiAnQmxvZ0FydGljbGUnLFxuICAgIGZpZWxkczoge1xuICAgICAgaWQ6IHsgdHlwZTogR3JhcGhRTElEIH0sXG4gICAgICBjb250ZW50OiB7IHR5cGU6IEdyYXBoUUxTdHJpbmcgfSxcbiAgICB9LFxuICB9KVxuXG4gIGNvbnN0IHNjaGVtYSA9IG5ldyBHcmFwaFFMU2NoZW1hKHtcbiAgICBxdWVyeTogbmV3IEdyYXBoUUxPYmplY3RUeXBlKHtcbiAgICAgIG5hbWU6ICdRdWVyeScsXG4gICAgICBmaWVsZHM6IHtcbiAgICAgICAgc2VhcmNoQXJ0aWNsZToge1xuICAgICAgICAgIGFyZ3M6IHsgaWQsIHF1ZXJ5IH0sXG4gICAgICAgICAgdHlwZTogYmxvZ0FydGljbGUsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pLFxuICB9KVxuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGplc3QucmVzZXRBbGxNb2NrcygpXG4gICAgaXNSZXF1aXJlZC5tb2NrUmV0dXJuVmFsdWUoZmFsc2UpXG4gICAgZ2V0VHlwZS5tb2NrUmV0dXJuVmFsdWUoeyBuYW1lOiAnbW9ja1R5cGUnIH0pXG4gICAgaXNSZXF1aXJlZExpc3QubW9ja1JldHVyblZhbHVlKGZhbHNlKTtcbiAgICBpc0xpc3QubW9ja1JldHVyblZhbHVlKGZhbHNlKTtcbiAgfSlcblxuICBpdCgnc2hvdWxkIHJldHVybiBhcmd1bWVudHMnLCAoKSA9PiB7XG4gICAgaXNMaXN0Lm1vY2tSZXR1cm5WYWx1ZU9uY2UodHJ1ZSk7XG4gICAgY29uc3QgcXVlcnkgPSBzY2hlbWEuZ2V0UXVlcnlUeXBlKCkuZ2V0RmllbGRzKCkuc2VhcmNoQXJ0aWNsZVxuICAgIGV4cGVjdChnZXRBcmdzKHF1ZXJ5LmFyZ3MpKS50b0VxdWFsKFtcbiAgICAgIHtcbiAgICAgICAgbmFtZTogJ2lkJyxcbiAgICAgICAgdHlwZTogJ21vY2tUeXBlJyxcbiAgICAgICAgZGVmYXVsdFZhbHVlOiAnMScsXG4gICAgICAgIGlzUmVxdWlyZWQ6IGZhbHNlLFxuICAgICAgICBpc0xpc3Q6IHRydWUsXG4gICAgICAgIGlzTGlzdFJlcXVpcmVkOiBmYWxzZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6ICdxdWVyeScsXG4gICAgICAgIHR5cGU6ICdtb2NrVHlwZScsXG4gICAgICAgIGRlZmF1bHRWYWx1ZTogdW5kZWZpbmVkLFxuICAgICAgICBpc1JlcXVpcmVkOiBmYWxzZSxcbiAgICAgICAgaXNMaXN0OiBmYWxzZSxcbiAgICAgICAgaXNMaXN0UmVxdWlyZWQ6IGZhbHNlLFxuICAgICAgfSxcbiAgICBdKVxuICAgIGV4cGVjdChnZXRUeXBlKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMilcbiAgICBleHBlY3QoZ2V0VHlwZS5tb2NrLmNhbGxzWzBdWzBdKS50b0VxdWFsKEdyYXBoUUxJRClcbiAgICBleHBlY3QoZ2V0VHlwZS5tb2NrLmNhbGxzWzFdWzBdKS50b0VxdWFsKEdyYXBoUUxTdHJpbmcpXG5cbiAgICBleHBlY3QoaXNSZXF1aXJlZCkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDIpXG4gICAgZXhwZWN0KGlzUmVxdWlyZWQubW9jay5jYWxsc1swXVswXSkudG9FcXVhbChxdWVyeS5hcmdzWzBdLnR5cGUpXG4gICAgZXhwZWN0KGlzUmVxdWlyZWQubW9jay5jYWxsc1sxXVswXSkudG9FcXVhbChxdWVyeS5hcmdzWzFdLnR5cGUpXG5cbiAgICBleHBlY3QoaXNMaXN0KS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMik7XG4gICAgZXhwZWN0KGlzUmVxdWlyZWRMaXN0KS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMik7XG4gIH0pXG59KVxuIl19");"use strict";







jest.mock('../../src/generator/utils/isRequired');
jest.mock('../../src/generator/utils/getType');
jest.mock('../../src/generator/utils/isList');
jest.mock('../../src/generator/utils/isRequiredList');Object.defineProperty(exports, "__esModule", { value: true });const graphql_1 = require("graphql");const isRequired_1 = require("../../src/generator/utils/isRequired");const getType_1 = require("../../src/generator/utils/getType");const getArgs_1 = require("../../src/generator/getArgs");const isList_1 = require("../../src/generator/utils/isList");const isRequiredList_1 = require("../../src/generator/utils/isRequiredList");
describe('getArgs', () => {
    const id = {
        name: 'id',
        type: graphql_1.GraphQLID,
        defaultValue: '1' };

    const query = {
        name: 'query',
        type: graphql_1.GraphQLString };

    const blogArticle = new graphql_1.GraphQLObjectType({
        name: 'BlogArticle',
        fields: {
            id: { type: graphql_1.GraphQLID },
            content: { type: graphql_1.GraphQLString } } });


    const schema = new graphql_1.GraphQLSchema({
        query: new graphql_1.GraphQLObjectType({
            name: 'Query',
            fields: {
                searchArticle: {
                    args: { id, query },
                    type: blogArticle } } }) });




    beforeEach(() => {
        jest.resetAllMocks();
        isRequired_1.default.mockReturnValue(false);
        getType_1.default.mockReturnValue({ name: 'mockType' });
        isRequiredList_1.default.mockReturnValue(false);
        isList_1.default.mockReturnValue(false);
    });
    it('should return arguments', () => {
        isList_1.default.mockReturnValueOnce(true);
        const query = schema.getQueryType().getFields().searchArticle;
        expect(getArgs_1.default(query.args)).toEqual([
        {
            name: 'id',
            type: 'mockType',
            defaultValue: '1',
            isRequired: false,
            isList: true,
            isListRequired: false },

        {
            name: 'query',
            type: 'mockType',
            defaultValue: undefined,
            isRequired: false,
            isList: false,
            isListRequired: false }]);


        expect(getType_1.default).toHaveBeenCalledTimes(2);
        expect(getType_1.default.mock.calls[0][0]).toEqual(graphql_1.GraphQLID);
        expect(getType_1.default.mock.calls[1][0]).toEqual(graphql_1.GraphQLString);
        expect(isRequired_1.default).toHaveBeenCalledTimes(2);
        expect(isRequired_1.default.mock.calls[0][0]).toEqual(query.args[0].type);
        expect(isRequired_1.default.mock.calls[1][0]).toEqual(query.args[1].type);
        expect(isList_1.default).toHaveBeenCalledTimes(2);
        expect(isRequiredList_1.default).toHaveBeenCalledTimes(2);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QU8sYUFBQSxPQUFBLENBQVcsSUFBWCxDQUFnQixLQUFoQixDQUFzQixDQUF0QixFQUF5QixDQUF6QixDQUFQLEVBQW9DLE9BQXBDLENBQTRDLE1BQU0sSUFBTixDQUFXLENBQVgsRUFBYyxJQUExRDtBQUNBLGVBQU8sYUFBQSxPQUFBLENBQVcsSUFBWCxDQUFnQixLQUFoQixDQUFzQixDQUF0QixFQUF5QixDQUF6QixDQUFQLEVBQW9DLE9BQXBDLENBQTRDLE1BQU0sSUFBTixDQUFXLENBQVgsRUFBYyxJQUExRDtBQUVBLGVBQU8sU0FBQSxPQUFQLEVBQWUscUJBQWYsQ0FBcUMsQ0FBckM7QUFDQSxlQUFPLGlCQUFBLE9BQVAsRUFBdUIscUJBQXZCLENBQTZDLENBQTdDO0FBQ0QsS0EvQkQ7QUFnQ0QsQ0F4RUQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBHcmFwaFFMU2NoZW1hLFxuICBHcmFwaFFMT2JqZWN0VHlwZSxcbiAgR3JhcGhRTEFyZ3VtZW50LFxuICBHcmFwaFFMU3RyaW5nLFxuICBHcmFwaFFMSUQsXG59IGZyb20gJ2dyYXBocWwnXG5cbmltcG9ydCBpc1JlcXVpcmVkIGZyb20gJy4uLy4uL3NyYy9nZW5lcmF0b3IvdXRpbHMvaXNSZXF1aXJlZCdcbmltcG9ydCBnZXRUeXBlIGZyb20gJy4uLy4uL3NyYy9nZW5lcmF0b3IvdXRpbHMvZ2V0VHlwZSdcblxuaW1wb3J0IGdldEFyZ3MgZnJvbSAnLi4vLi4vc3JjL2dlbmVyYXRvci9nZXRBcmdzJ1xuaW1wb3J0IGlzTGlzdCBmcm9tICcuLi8uLi9zcmMvZ2VuZXJhdG9yL3V0aWxzL2lzTGlzdCc7XG5pbXBvcnQgaXNSZXF1aXJlZExpc3QgZnJvbSAnLi4vLi4vc3JjL2dlbmVyYXRvci91dGlscy9pc1JlcXVpcmVkTGlzdCc7XG5cbmplc3QubW9jaygnLi4vLi4vc3JjL2dlbmVyYXRvci91dGlscy9pc1JlcXVpcmVkJylcbmplc3QubW9jaygnLi4vLi4vc3JjL2dlbmVyYXRvci91dGlscy9nZXRUeXBlJylcbmplc3QubW9jaygnLi4vLi4vc3JjL2dlbmVyYXRvci91dGlscy9pc0xpc3QnKVxuamVzdC5tb2NrKCcuLi8uLi9zcmMvZ2VuZXJhdG9yL3V0aWxzL2lzUmVxdWlyZWRMaXN0Jyk7XG5cbmRlc2NyaWJlKCdnZXRBcmdzJywgKCkgPT4ge1xuICBjb25zdCBpZDogR3JhcGhRTEFyZ3VtZW50ID0ge1xuICAgIG5hbWU6ICdpZCcsXG4gICAgdHlwZTogR3JhcGhRTElELFxuICAgIGRlZmF1bHRWYWx1ZTogJzEnLFxuICB9XG5cbiAgY29uc3QgcXVlcnk6IEdyYXBoUUxBcmd1bWVudCA9IHtcbiAgICBuYW1lOiAncXVlcnknLFxuICAgIHR5cGU6IEdyYXBoUUxTdHJpbmcsXG4gIH1cblxuICBjb25zdCBibG9nQXJ0aWNsZSA9IG5ldyBHcmFwaFFMT2JqZWN0VHlwZSh7XG4gICAgbmFtZTogJ0Jsb2dBcnRpY2xlJyxcbiAgICBmaWVsZHM6IHtcbiAgICAgIGlkOiB7IHR5cGU6IEdyYXBoUUxJRCB9LFxuICAgICAgY29udGVudDogeyB0eXBlOiBHcmFwaFFMU3RyaW5nIH0sXG4gICAgfSxcbiAgfSlcblxuICBjb25zdCBzY2hlbWEgPSBuZXcgR3JhcGhRTFNjaGVtYSh7XG4gICAgcXVlcnk6IG5ldyBHcmFwaFFMT2JqZWN0VHlwZSh7XG4gICAgICBuYW1lOiAnUXVlcnknLFxuICAgICAgZmllbGRzOiB7XG4gICAgICAgIHNlYXJjaEFydGljbGU6IHtcbiAgICAgICAgICBhcmdzOiB7IGlkLCBxdWVyeSB9LFxuICAgICAgICAgIHR5cGU6IGJsb2dBcnRpY2xlLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9KSxcbiAgfSlcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBqZXN0LnJlc2V0QWxsTW9ja3MoKVxuICAgIGlzUmVxdWlyZWQubW9ja1JldHVyblZhbHVlKGZhbHNlKVxuICAgIGdldFR5cGUubW9ja1JldHVyblZhbHVlKHsgbmFtZTogJ21vY2tUeXBlJyB9KVxuICAgIGlzUmVxdWlyZWRMaXN0Lm1vY2tSZXR1cm5WYWx1ZShmYWxzZSk7XG4gICAgaXNMaXN0Lm1vY2tSZXR1cm5WYWx1ZShmYWxzZSk7XG4gIH0pXG5cbiAgaXQoJ3Nob3VsZCByZXR1cm4gYXJndW1lbnRzJywgKCkgPT4ge1xuICAgIGlzTGlzdC5tb2NrUmV0dXJuVmFsdWVPbmNlKHRydWUpO1xuICAgIGNvbnN0IHF1ZXJ5ID0gc2NoZW1hLmdldFF1ZXJ5VHlwZSgpLmdldEZpZWxkcygpLnNlYXJjaEFydGljbGVcbiAgICBleHBlY3QoZ2V0QXJncyhxdWVyeS5hcmdzKSkudG9FcXVhbChbXG4gICAgICB7XG4gICAgICAgIG5hbWU6ICdpZCcsXG4gICAgICAgIHR5cGU6ICdtb2NrVHlwZScsXG4gICAgICAgIGRlZmF1bHRWYWx1ZTogJzEnLFxuICAgICAgICBpc1JlcXVpcmVkOiBmYWxzZSxcbiAgICAgICAgaXNMaXN0OiB0cnVlLFxuICAgICAgICBpc0xpc3RSZXF1aXJlZDogZmFsc2UsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBuYW1lOiAncXVlcnknLFxuICAgICAgICB0eXBlOiAnbW9ja1R5cGUnLFxuICAgICAgICBkZWZhdWx0VmFsdWU6IHVuZGVmaW5lZCxcbiAgICAgICAgaXNSZXF1aXJlZDogZmFsc2UsXG4gICAgICAgIGlzTGlzdDogZmFsc2UsXG4gICAgICAgIGlzTGlzdFJlcXVpcmVkOiBmYWxzZSxcbiAgICAgIH0sXG4gICAgXSlcbiAgICBleHBlY3QoZ2V0VHlwZSkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDIpXG4gICAgZXhwZWN0KGdldFR5cGUubW9jay5jYWxsc1swXVswXSkudG9FcXVhbChHcmFwaFFMSUQpXG4gICAgZXhwZWN0KGdldFR5cGUubW9jay5jYWxsc1sxXVswXSkudG9FcXVhbChHcmFwaFFMU3RyaW5nKVxuXG4gICAgZXhwZWN0KGlzUmVxdWlyZWQpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygyKVxuICAgIGV4cGVjdChpc1JlcXVpcmVkLm1vY2suY2FsbHNbMF1bMF0pLnRvRXF1YWwocXVlcnkuYXJnc1swXS50eXBlKVxuICAgIGV4cGVjdChpc1JlcXVpcmVkLm1vY2suY2FsbHNbMV1bMF0pLnRvRXF1YWwocXVlcnkuYXJnc1sxXS50eXBlKVxuXG4gICAgZXhwZWN0KGlzTGlzdCkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDIpO1xuICAgIGV4cGVjdChpc1JlcXVpcmVkTGlzdCkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDIpO1xuICB9KVxufSlcbiJdLCJzb3VyY2VSb290IjoiL2MvVXNlcnMvU2FuZHJvL3JlcG8vYW1wbGlmeS1jbGkvcGFja2FnZXMvYW1wbGlmeS1ncmFwaHFsLWRvY3MtZ2VuZXJhdG9yL3NyYy8ifQ==