{"version":3,"sources":["apns-key-config.test.js"],"names":["inquirer","require","mockirer","p8decoder","apnsKeyConfig","describe","mockBundleId","mockTeamId","mockTokenKeyId","mockFielPath","mockKeyConfig","BundleId","TeamId","TokenKeyId","P8FilePath","mockP8DecoderReturn","beforeAll","run","jest","fn","mockReturnValue","beforeEach","test","result","expect","toBeCalledWith","toBe"],"mappings":"AAAA,MAAMA,WAAWC,QAAQ,UAAR,CAAjB;AACA,MAAMC,WAAWD,QAAQ,UAAR,CAAjB;AACA,MAAME,YAAYF,QAAQ,qBAAR,CAAlB;;AAEA,MAAMG,gBAAgBH,QAAQ,2BAAR,CAAtB;;AAEAI,SAAS,iBAAT,EAA4B,MAAM;AAC9B,UAAMC,eAAe,cAArB;AACA,UAAMC,aAAa,YAAnB;AACA,UAAMC,iBAAiB,gBAAvB;AACA,UAAMC,eAAe,mBAArB;;AAEA,UAAMC,gBAAgB;AAClBC,kBAAUL,YADQ;AAElBM,gBAAQL,UAFU;AAGlBM,oBAAYL,cAHM;AAIlBM,oBAAYL;AAJM,KAAtB;AAMA,UAAMM,sBAAsB,qBAA5B;;AAEAC,cAAU,MAAM;AACZd,iBAASF,QAAT,EAAmBU,aAAnB;AACAP,kBAAUc,GAAV,GAAgBC,KAAKC,EAAL,EAAhB;AACAhB,kBAAUc,GAAV,CAAcG,eAAd,CAA8BL,mBAA9B;AACH,KAJD;;AAMAM,eAAW,MAAM,CAChB,CADD;;AAGAC,SAAK,mBAAL,EAA0B,YAAY;AAClC,cAAMC,SAAS,MAAMnB,cAAca,GAAd,EAArB;AACAO,eAAOrB,UAAUc,GAAjB,EAAsBQ,cAAtB,CAAqChB,YAArC;AACAe,eAAOD,MAAP,EAAeG,IAAf,CAAoBhB,aAApB;AACH,KAJD;AAKH,CA5BD","file":"apns-key-config.test.js","sourcesContent":["const inquirer = require('inquirer');\nconst mockirer = require('mockirer');\nconst p8decoder = require('../../lib/p8decoder');\n\nconst apnsKeyConfig = require('../../lib/apns-key-config'); \n\ndescribe('apns-key-config', () => {\n    const mockBundleId = 'mockBundleId';\n    const mockTeamId = 'mockTeamId';\n    const mockTokenKeyId = 'mockTokenKeyId';\n    const mockFielPath = 'mock_p8_file_path'; \n\n    const mockKeyConfig = {\n        BundleId: mockBundleId, \n        TeamId: mockTeamId,\n        TokenKeyId: mockTokenKeyId,\n        P8FilePath: mockFielPath\n    }; \n    const mockP8DecoderReturn = 'mockP8DecoderReturn'; \n\n    beforeAll(() => {\n        mockirer(inquirer, mockKeyConfig); \n        p8decoder.run = jest.fn(); \n        p8decoder.run.mockReturnValue(mockP8DecoderReturn); \n    }); \n\n    beforeEach(() => {\n    });\n\n    test('p8decoder invoked', async () => {\n        const result = await apnsKeyConfig.run();\n        expect(p8decoder.run).toBeCalledWith(mockFielPath); \n        expect(result).toBe(mockKeyConfig);\n    });\n});"]}