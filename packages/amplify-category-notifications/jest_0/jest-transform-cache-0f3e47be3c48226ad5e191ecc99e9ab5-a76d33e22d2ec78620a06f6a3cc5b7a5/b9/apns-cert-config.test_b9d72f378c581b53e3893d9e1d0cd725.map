{"version":3,"sources":["apns-cert-config.test.js"],"names":["inquirer","require","mockirer","p12decoder","apnsCertConfig","describe","mockFielPath","mockPassword","mockAnswers","P12FilePath","P12FilePassword","mockP12DecoderReturn","beforeAll","run","jest","fn","mockReturnValue","beforeEach","test","result","expect","toBeCalledWith","toBe"],"mappings":"AAAA,MAAMA,WAAWC,QAAQ,UAAR,CAAjB;AACA,MAAMC,WAAWD,QAAQ,UAAR,CAAjB;AACA,MAAME,aAAaF,QAAQ,sBAAR,CAAnB;;AAEA,MAAMG,iBAAiBH,QAAQ,4BAAR,CAAvB;;AAEAI,SAAS,kBAAT,EAA6B,MAAM;AAC/B,UAAMC,eAAe,oBAArB;AACA,UAAMC,eAAe,eAArB;;AAEA,UAAMC,cAAc;AAChBC,qBAAaH,YADG;AAEhBI,yBAAiBH;AAFD,KAApB;AAIA,UAAMI,uBAAuB,EAA7B;;AAEAC,cAAU,MAAM;AACZV,iBAASF,QAAT,EAAmBQ,WAAnB;AACAL,mBAAWU,GAAX,GAAiBC,KAAKC,EAAL,EAAjB;AACAZ,mBAAWU,GAAX,CAAeG,eAAf,CAA+BL,oBAA/B;AACH,KAJD;;AAMAM,eAAW,MAAM,CAChB,CADD;;AAGAC,SAAK,oBAAL,EAA2B,YAAY;AACnC,cAAMC,SAAS,MAAMf,eAAeS,GAAf,EAArB;AACAO,eAAOjB,WAAWU,GAAlB,EAAuBQ,cAAvB,CAAsCb,WAAtC;AACAY,eAAOD,MAAP,EAAeG,IAAf,CAAoBX,oBAApB;AACH,KAJD;AAKH,CAxBD","file":"apns-cert-config.test.js","sourcesContent":["const inquirer = require('inquirer');\nconst mockirer = require('mockirer');\nconst p12decoder = require('../../lib/p12decoder');\n\nconst apnsCertConfig = require('../../lib/apns-cert-config'); \n\ndescribe('apns-cert-config', () => {\n    const mockFielPath = 'mock_p12_file_path'; \n    const mockPassword = 'mock_password'; \n\n    const mockAnswers = {\n        P12FilePath: mockFielPath, \n        P12FilePassword: mockPassword\n    }; \n    const mockP12DecoderReturn = {}; \n\n    beforeAll(() => {\n        mockirer(inquirer, mockAnswers); \n        p12decoder.run = jest.fn(); \n        p12decoder.run.mockReturnValue(mockP12DecoderReturn); \n    }); \n\n    beforeEach(() => {\n    });\n\n    test('p12decoder invoked', async () => {\n        const result = await apnsCertConfig.run();\n        expect(p12decoder.run).toBeCalledWith(mockAnswers); \n        expect(result).toBe(mockP12DecoderReturn);\n    });\n});"]}