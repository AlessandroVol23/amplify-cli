{"version":3,"sources":["channel-APNS.js"],"names":["inquirer","require","ora","fs","channelName","spinner","configureKey","configureCertificate","configure","context","isChannelEnabled","exeInfo","serviceMeta","output","Enabled","print","info","answer","prompt","name","type","message","default","disableChannel","disable","successMessage","enable","enableChannel","channelInput","answers","pinpointInputParams","validateInputParams","DefaultAuthenticationMethod","channelOutput","question","choices","keyConfig","run","Object","assign","certificateConfig","err","error","process","exit","params","ApplicationId","Id","APNSChannelRequest","start","Promise","resolve","reject","pinpointClient","updateApnsChannel","data","fail","succeed","APNSChannelResponse","authMethod","P12FilePath","Error","existsSync","BundleId","TeamId","TokenKeyId","P8FilePath","pull","pinpointApp","getApnsChannel","promise","then","catch","code","stop","module","exports"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","file":"channel-APNS.js","sourcesContent":["const inquirer = require('inquirer');\nconst ora = require('ora');\nconst fs = require('fs-extra');\n\nconst channelName = 'APNS';\nconst spinner = ora('');\n\nconst configureKey = require('./apns-key-config');\nconst configureCertificate = require('./apns-cert-config');\n\nasync function configure(context) {\n  const isChannelEnabled =\n    context.exeInfo.serviceMeta.output[channelName] &&\n    context.exeInfo.serviceMeta.output[channelName].Enabled;\n\n  if (isChannelEnabled) {\n    context.print.info(`The ${channelName} channel is currently enabled`);\n    const answer = await inquirer.prompt({\n      name: 'disableChannel',\n      type: 'confirm',\n      message: `Do you want to disable the ${channelName} channel`,\n      default: false,\n    });\n    if (answer.disableChannel) {\n      await disable(context);\n    } else {\n      const successMessage = `The ${channelName} channel has been successfully updated.`;\n      await enable(context, successMessage);\n    }\n  } else {\n    const answer = await inquirer.prompt({\n      name: 'enableChannel',\n      type: 'confirm',\n      message: `Do you want to enable the ${channelName} channel`,\n      default: true,\n    });\n    if (answer.enableChannel) {\n      await enable(context);\n    }\n  }\n}\n\nasync function enable(context, successMessage) {\n  let channelInput;\n  let answers;\n  if (context.exeInfo.pinpointInputParams && context.exeInfo.pinpointInputParams[channelName]) {\n    channelInput = validateInputParams(context.exeInfo.pinpointInputParams[channelName]);\n    answers = {\n      DefaultAuthenticationMethod: channelInput.DefaultAuthenticationMethod,\n    };\n  } else {\n    let channelOutput = {};\n    if (context.exeInfo.serviceMeta.output[channelName]) {\n      channelOutput = context.exeInfo.serviceMeta.output[channelName];\n    }\n    const question = {\n      name: 'DefaultAuthenticationMethod',\n      type: 'list',\n      message: 'Choose authentication method used for APNs',\n      choices: ['Certificate', 'Key'],\n      default: channelOutput.DefaultAuthenticationMethod || 'Certificate',\n    };\n    answers = await inquirer.prompt(question);\n  }\n\n  try {\n    if (answers.DefaultAuthenticationMethod === 'Key') {\n      const keyConfig = await configureKey.run(channelInput);\n      Object.assign(answers, keyConfig);\n    } else {\n      const certificateConfig = await configureCertificate.run(channelInput);\n      Object.assign(answers, certificateConfig);\n    }\n  } catch (err) {\n    context.print.error(err.message);\n    process.exit(1);\n  }\n\n  const params = {\n    ApplicationId: context.exeInfo.serviceMeta.output.Id,\n    APNSChannelRequest: {\n      ...answers,\n      Enabled: true,\n    },\n  };\n\n  spinner.start('Updating APNS Channel.');\n  return new Promise((resolve, reject) => {\n    context.exeInfo.pinpointClient.updateApnsChannel(params, (err, data) => {\n      if (err) {\n        spinner.fail('update channel error');\n        reject(err);\n      } else {\n        if (!successMessage) {\n          successMessage = `The ${channelName} channel has been successfully enabled.`;\n        }\n        spinner.succeed(successMessage);\n        context.exeInfo.serviceMeta.output[channelName] = data.APNSChannelResponse;\n        resolve(data);\n      }\n    });\n  });\n}\n\nfunction validateInputParams(channelInput) {\n  if (channelInput.DefaultAuthenticationMethod) {\n    const authMethod = channelInput.DefaultAuthenticationMethod;\n    if (authMethod === 'Certificate') {\n      if (!channelInput.P12FilePath) {\n        throw new Error('P12FilePath is missing for the APNS channel');\n      } else if (!fs.existsSync(channelInput.P12FilePath)) {\n        throw new Error(`P12 file ${channelInput.P12FilePath} can NOT be found for the APNS channel`);\n      }\n    } else if (authMethod === 'Key') {\n      if (!channelInput.BundleId || !channelInput.TeamId || !channelInput.TokenKeyId) {\n        throw new Error('Missing BundleId, TeamId or TokenKeyId for the APNS channel');\n      } else if (!channelInput.P8FilePath) {\n        throw new Error('P8FilePath is missing for the APNS channel');\n      } else if (!fs.existsSync(channelInput.P8FilePath)) {\n        throw new Error(`P8 file ${channelInput.P8FilePath} can NOT be found for the APNS channel`);\n      }\n    } else {\n      throw new Error(`DefaultAuthenticationMethod ${authMethod} is unrecognized for the APNS channel`);\n    }\n  } else {\n    throw new Error('DefaultAuthenticationMethod is missing for the APNS channel');\n  }\n\n  return channelInput;\n}\n\nfunction disable(context) {\n  const params = {\n    ApplicationId: context.exeInfo.serviceMeta.output.Id,\n    APNSChannelRequest: {\n      Enabled: false,\n    },\n  };\n  spinner.start('Updating APNS Channel.');\n  return new Promise((resolve, reject) => {\n    context.exeInfo.pinpointClient.updateApnsChannel(params, (err, data) => {\n      if (err) {\n        spinner.fail('update channel error');\n        reject(err);\n      } else {\n        spinner.succeed(`The ${channelName} channel has been disabled.`);\n        context.exeInfo.serviceMeta.output[channelName] = data.APNSChannelResponse;\n        resolve(data);\n      }\n    });\n  });\n}\n\nfunction pull(context, pinpointApp) {\n  const params = {\n    ApplicationId: pinpointApp.Id,\n  };\n\n  spinner.start(`Retrieving channel information for ${channelName}.`);\n  return context.exeInfo.pinpointClient.getApnsChannel(params).promise()\n    .then((data) => {\n      spinner.succeed(`Channel information retrieved for ${channelName}`);\n      pinpointApp[channelName] = data.APNSChannelResponse;\n      return data.APNSChannelResponse;\n    })\n    .catch((err) => {\n      if (err.code === 'NotFoundException') {\n        spinner.succeed(`Channel is not setup for ${channelName} `);\n        return err;\n      }\n      spinner.stop();\n      throw err;\n    });\n}\n\nmodule.exports = {\n  configure,\n  enable,\n  disable,\n  pull,\n};\n"]}