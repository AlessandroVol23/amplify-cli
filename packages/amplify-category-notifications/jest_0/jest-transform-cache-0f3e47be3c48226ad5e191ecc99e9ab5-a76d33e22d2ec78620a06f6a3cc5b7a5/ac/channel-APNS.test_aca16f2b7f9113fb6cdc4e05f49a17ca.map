{"version":3,"sources":["channel-APNS.test.js"],"names":["inquirer","require","mockirer","configureKey","configureCertificate","channelName","channelAPNS","describe","mockServiceOutput","mockChannelOutput","Enabled","mockPinpointResponseErr","mockPinpointResponseData","APNSChannelResponse","mockKeyConfig","mockCertificateConfig","mockPinpointClient","updateApnsChannel","jest","fn","_","callback","mockContext","exeInfo","serviceMeta","output","pinpointClient","print","info","error","beforeAll","global","console","log","run","beforeEach","test","disableChannel","configure","then","expect","toBeCalled","enableChannel","DefaultAuthenticationMethod","enable","catch","err","disable"],"mappings":"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","file":"channel-APNS.test.js","sourcesContent":["const inquirer = require('inquirer');\nconst mockirer = require('mockirer');\nconst configureKey = require('../../lib/apns-key-config');\nconst configureCertificate = require('../../lib/apns-cert-config');\n\nconst channelName = 'APNS';\n\nconst channelAPNS = require('../../lib/channel-APNS'); \n\ndescribe('channel-APNS', () => {\n    const mockServiceOutput = {}; \n    const mockChannelOutput = { Enabled: true};\n    const mockPinpointResponseErr = {}; \n    const mockPinpointResponseData = {\n        APNSChannelResponse: {}\n    }; \n    const mockKeyConfig = {}; \n    const mockCertificateConfig = {}; \n    const mockPinpointClient = {\n        updateApnsChannel: jest.fn((_, callback)=>{\n            callback(null, mockPinpointResponseData); \n        })\n    }\n    mockServiceOutput[channelName] = mockChannelOutput;\n    \n    let mockContext = {\n        exeInfo: {\n            serviceMeta: {\n                output: mockServiceOutput\n            },\n            pinpointClient: mockPinpointClient\n        },\n        print: {\n            info: jest.fn(),\n            error: jest.fn()\n        }\n    }; \n\n    beforeAll(() => {\n        global.console = {log: jest.fn()};\n        configureKey.run = jest.fn(()=>{\n            return mockKeyConfig; \n        });\n        configureCertificate.run = jest.fn(()=>{\n            return mockCertificateConfig; \n        }); \n    }); \n\n    beforeEach(() => { \n    });\n\n    test('configure', () => {\n        mockPinpointClient.updateApnsChannel = jest.fn((_, callback)=>{\n            callback(null, mockPinpointResponseData); \n        });\n\n        mockChannelOutput.Enabled = true; \n        mockirer(inquirer, {disableChannel: true}); \n        channelAPNS.configure(mockContext).then(()=>{\n            expect(mockPinpointClient.updateApnsChannel).toBeCalled();\n        });\n\n        mockChannelOutput.Enabled = true; \n        mockirer(inquirer, {disableChannel: false}); \n        channelAPNS.configure(mockContext).then(()=>{\n            expect(mockPinpointClient.updateApnsChannel).toBeCalled();\n        });\n\n        mockChannelOutput.Enabled = false; \n        mockirer(inquirer, {enableChannel: true}); \n        channelAPNS.configure(mockContext).then(()=>{\n            expect(mockPinpointClient.updateApnsChannel).toBeCalled();\n        });\n    });\n\n    test('enable', async () => {\n        mockPinpointClient.updateApnsChannel = jest.fn((_, callback)=>{\n            callback(null, mockPinpointResponseData); \n        });\n\n        mockirer(inquirer, {DefaultAuthenticationMethod: 'Certificate'}); \n        channelAPNS.enable(mockContext, 'successMessage').then(()=>{\n            expect(mockPinpointClient.updateApnsChannel).toBeCalled();\n        });\n\n        mockirer(inquirer, {DefaultAuthenticationMethod: 'Key'}); \n        channelAPNS.enable(mockContext, 'successMessage').then(()=>{\n            expect(mockPinpointClient.updateApnsChannel).toBeCalled();\n        });\n    });\n\n    test('enable unsccessful', async () => {\n        mockPinpointClient.updateApnsChannel = jest.fn((_, callback)=>{\n            callback(mockPinpointResponseErr, mockPinpointResponseData); \n        });\n\n        mockirer(inquirer, {DefaultAuthenticationMethod: 'Certificate'}); \n        channelAPNS.enable(mockContext, 'successMessage').catch((err)=>{\n            expect(mockPinpointClient.updateApnsChannel).toBeCalled();\n        })\n\n        mockirer(inquirer, {DefaultAuthenticationMethod: 'Key'}); \n        channelAPNS.enable(mockContext, 'successMessage').catch((err)=>{\n            expect(mockPinpointClient.updateApnsChannel).toBeCalled();\n        })\n    });\n\n    test('disable', () => {\n        mockPinpointClient.updateApnsChannel = jest.fn((_, callback)=>{\n            callback(null, mockPinpointResponseData); \n        });\n        channelAPNS.disable(mockContext).then(()=>{\n            expect(mockPinpointClient.updateApnsChannel).toBeCalled();\n        });\n\n        mockPinpointClient.updateApnsChannel = jest.fn((_, callback)=>{\n            callback(mockPinpointResponseErr, mockPinpointResponseData); \n        });\n        channelAPNS.disable(mockContext).catch(()=>{\n            expect(mockPinpointClient.updateApnsChannel).toBeCalled();\n        })\n    });\n});"]}