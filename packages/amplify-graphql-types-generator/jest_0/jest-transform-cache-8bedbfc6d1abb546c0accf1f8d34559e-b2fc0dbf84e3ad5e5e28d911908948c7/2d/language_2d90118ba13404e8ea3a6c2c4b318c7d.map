{"version":3,"sources":["language.js"],"names":[],"mappings":";;AAKA,SAAA,OAAA,CAAwB,SAAxB,EAAmC,OAAnC,EAA0C;AACxC,UAAM,QAAQ,UAAU,QAAQ,KAAR,CAAc,IAAd,CAAV,GAAgC,EAA9C;AACA,QAAI,MAAM,MAAN,GAAe,CAAnB,EAAsB;AACpB,kBAAU,cAAV,CAAyB,KAAzB;AACA,cAAM,OAAN,CAAc,QAAO;AACnB,sBAAU,cAAV,CAAyB,MAAM,KAAK,IAAL,EAAW,EAA1C;AACD,SAFD;AAIA,kBAAU,cAAV,CAAyB,KAAzB;AACD;AACF;AAVD,QAAA,OAAA,GAAA,OAAA;AAYA,SAAA,kBAAA,CAAmC,SAAnC,EAA8C,GAA9C,EAAiD;AAC/C,cAAU,oBAAV;AACA,cAAU,cAAV,CAAyB,WAAW,GAAG,EAAvC;AACA,cAAU,QAAV;AACD;AAJD,QAAA,kBAAA,GAAA,kBAAA;AAMA,SAAA,iBAAA,CAAkC,SAAlC,EAA6C,EAAE,UAAF,EAAc,UAAd,EAA0B,UAA1B,EAA7C,EAAqF,OAArF,EAA4F;AAC1F,cAAU,oBAAV;AACA,cAAU,cAAV,CAAyB,UAAU,UAAU,EAApB,IAA0B,aAAa,YAAY,UAAU,EAAnC,GAAwC,EAAlE,CAAzB;AACA,cAAU,SAAV,CAAoB,EAAE,UAAU,UAAZ,EAApB;AACA,cAAU,WAAV,CAAsB,OAAtB;AACA,cAAU,QAAV;AACD;AAND,QAAA,iBAAA,GAAA,iBAAA;AAQA,SAAA,oBAAA,CAAqC,SAArC,EAAgD,EAAE,aAAF,EAAiB,WAAjB,EAA8B,UAA9B,EAA0C,MAA1C,EAAhD,EAAoG,OAApG,EAA2G;AACzG,cAAU,oBAAV;AACA,YAAQ,SAAR,EAAmB,WAAnB;AACA,cAAU,cAAV,CAAyB,cAAc,aAAa,IAAI,CAAC,UAAU,EAAX,EAAe,GAAf,CAAmB,KAAK,EAAE,IAAF,GAAS,IAAT,GAAgB,EAAE,IAA1C,EAAgD,IAAhD,CAAqD,IAArD,CAA0D,GAAzF,IAAgG,aAAa,YAAY,UAAU,EAAnC,GAAwC,EAAxI,CAAzB;AACA,cAAU,SAAV,CAAoB,EAAE,UAAU,aAAZ,EAApB;AACA,cAAU,WAAV,CAAsB,OAAtB;AACA,cAAU,QAAV;AACD;AAPD,QAAA,oBAAA,GAAA,oBAAA;AASA,SAAA,mBAAA,CAAoC,SAApC,EAA+C,EAAE,YAAF,EAAgB,QAAhB,EAA0B,WAA1B,EAA/C,EAAuF,OAAvF,EAA8F;AAC5F,YAAQ,SAAR,EAAmB,WAAnB;AACA,cAAU,cAAV,CAAyB,OAAO,YAAY,KAAK,QAAQ,IAAzD;AACA,cAAU,WAAV,CAAsB,OAAtB;AACD;AAJD,QAAA,mBAAA,GAAA,mBAAA;AAMA,SAAA,oBAAA,CAAqC,SAArC,EAAgD,YAAhD,EAA4D;AAC1D,iBAAa,OAAb,CAAqB,KAAI;AACvB,4BAAoB,SAApB,EAA+B,CAA/B;AACD,KAFD;AAGD;AAJD,QAAA,oBAAA,GAAA,oBAAA;AAMA,MAAM,mBAAmB,IAAI,GAAJ,CACvB,MADuB,EACf,OADe,EACN,OADM,EACG,KADH,EACU,IADV,EACgB,MADhB,EAEvB,SAFuB,EAEZ,OAFY,EAEH,OAFG,EAEM,KAFN,EAEa,IAFb,EAEmB,OAFnB,EAGvB,KAHuB,EAGhB,MAHgB,EAGR,OAHQ,EAGC,OAHD,EAGU,MAHV,EAGkB,KAHlB,EAGyB,OAHzB,EAIvB,KAJuB,EAIhB,KAJgB,EAIT,OAJS,EAIA,MAJA,CAAzB;AAOA,SAAA,wBAAA,CAAyC,UAAzC,EAAmD;AACjD,QAAI,iBAAiB,GAAjB,CAAqB,UAArB,CAAJ,EAAsC;AACpC,eAAO,MAAM,UAAN,GAAmB,GAA1B;AACD,KAFD;AAEO;AACL,eAAO,UAAP;AACD;AACF;AAND,QAAA,wBAAA,GAAA,wBAAA","sourcesContent":["import {\n  join,\n  wrap,\n} from '../utilities/printing';\n\nexport function comment(generator, comment) {\n  const split = comment ? comment.split('\\n') : [];\n  if (split.length > 0) {\n    generator.printOnNewline('/**')\n    split.forEach(line => {\n      generator.printOnNewline(` * ${line.trim()}`);\n    });\n\n    generator.printOnNewline(' */');\n  }\n}\n\nexport function packageDeclaration(generator, pkg) {\n  generator.printNewlineIfNeeded();\n  generator.printOnNewline(`package ${pkg}`);\n  generator.popScope();\n}\n\nexport function objectDeclaration(generator, { objectName, superclass, properties }, closure) {\n  generator.printNewlineIfNeeded();\n  generator.printOnNewline(`object ${objectName}` + (superclass ? ` extends ${superclass}` : ''));\n  generator.pushScope({ typeName: objectName });\n  generator.withinBlock(closure);\n  generator.popScope();\n}\n\nexport function caseClassDeclaration(generator, { caseClassName, description, superclass, params }, closure) {\n  generator.printNewlineIfNeeded();\n  comment(generator, description);\n  generator.printOnNewline(`case class ${caseClassName}(${(params || []).map(v => v.name + \": \" + v.type).join(', ')})` + (superclass ? ` extends ${superclass}` : ''));\n  generator.pushScope({ typeName: caseClassName });\n  generator.withinBlock(closure);\n  generator.popScope();\n}\n\nexport function propertyDeclaration(generator, { propertyName, typeName, description}, closure) {\n  comment(generator, description);\n  generator.printOnNewline(`val ${propertyName}: ${typeName} =`);\n  generator.withinBlock(closure);\n}\n\nexport function propertyDeclarations(generator, declarations) {\n  declarations.forEach(o => {\n    propertyDeclaration(generator, o);\n  });\n}\n\nconst reservedKeywords = new Set(\n  'case', 'catch', 'class', 'def', 'do', 'else',\n  'extends', 'false', 'final', 'for', 'if', 'match',\n  'new', 'null', 'throw', 'trait', 'true', 'try', 'until',\n  'val', 'var', 'while', 'with'\n);\n\nexport function escapeIdentifierIfNeeded(identifier) {\n  if (reservedKeywords.has(identifier)) {\n    return '`' + identifier + '`';\n  } else {\n    return identifier;\n  }\n}\n"],"sourceRoot":""}