3897899f8e6b92074bd047e517de54f2
'use strict';require('ts-jest').install("/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-types-generator/src/typescript/language.ts", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst codeGeneration_1 = require(\"./codeGeneration\");\nconst types_1 = require(\"./types\");\nfunction interfaceDeclaration(generator, { interfaceName, noBrackets }, closure) {\n    generator.printNewlineIfNeeded();\n    generator.printNewline();\n    generator.print(`export type ${interfaceName} = `);\n    generator.pushScope({ typeName: interfaceName });\n    if (noBrackets) {\n        generator.withinBlock(closure, '', '');\n    }\n    else {\n        generator.withinBlock(closure, '{', '}');\n    }\n    generator.popScope();\n    generator.print(';');\n}\nexports.interfaceDeclaration = interfaceDeclaration;\nfunction propertyDeclaration(generator, { fieldName, type, propertyName, typeName, description, isInput, isArray, isNullable, isArrayElementNullable }, closure) {\n    const name = fieldName || propertyName;\n    if (description) {\n        description.split('\\n')\n            .forEach(line => {\n            generator.printOnNewline(`// ${line.trim()}`);\n        });\n    }\n    if (closure) {\n        generator.printOnNewline(name);\n        if (isNullable && isInput) {\n            generator.print('?');\n        }\n        generator.print(': ');\n        if (isArray) {\n            generator.print(' Array<');\n        }\n        generator.pushScope({ typeName: name });\n        generator.withinBlock(closure);\n        generator.popScope();\n        if (isArray) {\n            if (isArrayElementNullable) {\n                generator.print(' | null');\n            }\n            generator.print(' >');\n        }\n        if (isNullable) {\n            generator.print(' | null');\n        }\n    }\n    else {\n        generator.printOnNewline(name);\n        if (isInput && isNullable) {\n            generator.print('?');\n        }\n        generator.print(`: ${typeName || type && types_1.typeNameFromGraphQLType(generator.context, type)}`);\n    }\n    generator.print(',');\n}\nexports.propertyDeclaration = propertyDeclaration;\nfunction propertySetsDeclaration(generator, property, propertySets, standalone = false) {\n    const { description, fieldName, propertyName, isNullable, isArray, isArrayElementNullable, } = property;\n    const name = fieldName || propertyName;\n    if (description) {\n        description.split('\\n')\n            .forEach(line => {\n            generator.printOnNewline(`// ${line.trim()}`);\n        });\n    }\n    if (!standalone) {\n        generator.printOnNewline(`${name}: `);\n    }\n    if (isArray) {\n        generator.print(' Array<');\n    }\n    generator.pushScope({ typeName: name });\n    generator.withinBlock(() => {\n        propertySets.forEach((propertySet, index, propertySets) => {\n            generator.withinBlock(() => {\n                codeGeneration_1.propertyDeclarations(generator, propertySet);\n            });\n            if (index !== propertySets.length - 1) {\n                generator.print(' |');\n            }\n        });\n    }, '(', ')');\n    generator.popScope();\n    if (isArray) {\n        if (isArrayElementNullable) {\n            generator.print(' | null');\n        }\n        generator.print(' >');\n    }\n    if (isNullable) {\n        generator.print(' | null');\n    }\n    if (!standalone) {\n        generator.print(',');\n    }\n}\nexports.propertySetsDeclaration = propertySetsDeclaration;\nfunction methodDeclaration(generator, { methodName, returnType, async, args, }, closure) {\n    generator.printNewline();\n    if (async)\n        generator.print('async ');\n    generator.print(`${methodName}(${args.join(', ')}):${returnType}`);\n    generator.pushScope({ methodName });\n    generator.withinBlock(closure, '{', '}');\n    generator.popScope();\n}\nexports.methodDeclaration = methodDeclaration;\n//# sourceMappingURL=data:application/json;base64,");"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const codeGeneration_1 = require("./codeGeneration");
const types_1 = require("./types");
function interfaceDeclaration(generator, { interfaceName, noBrackets }, closure) {
    generator.printNewlineIfNeeded();
    generator.printNewline();
    generator.print(`export type ${interfaceName} = `);
    generator.pushScope({ typeName: interfaceName });
    if (noBrackets) {
        generator.withinBlock(closure, '', '');
    } else
    {
        generator.withinBlock(closure, '{', '}');
    }
    generator.popScope();
    generator.print(';');
}
exports.interfaceDeclaration = interfaceDeclaration;
function propertyDeclaration(generator, { fieldName, type, propertyName, typeName, description, isInput, isArray, isNullable, isArrayElementNullable }, closure) {
    const name = fieldName || propertyName;
    if (description) {
        description.split('\n').
        forEach(line => {
            generator.printOnNewline(`// ${line.trim()}`);
        });
    }
    if (closure) {
        generator.printOnNewline(name);
        if (isNullable && isInput) {
            generator.print('?');
        }
        generator.print(': ');
        if (isArray) {
            generator.print(' Array<');
        }
        generator.pushScope({ typeName: name });
        generator.withinBlock(closure);
        generator.popScope();
        if (isArray) {
            if (isArrayElementNullable) {
                generator.print(' | null');
            }
            generator.print(' >');
        }
        if (isNullable) {
            generator.print(' | null');
        }
    } else
    {
        generator.printOnNewline(name);
        if (isInput && isNullable) {
            generator.print('?');
        }
        generator.print(`: ${typeName || type && types_1.typeNameFromGraphQLType(generator.context, type)}`);
    }
    generator.print(',');
}
exports.propertyDeclaration = propertyDeclaration;
function propertySetsDeclaration(generator, property, propertySets, standalone = false) {
    const { description, fieldName, propertyName, isNullable, isArray, isArrayElementNullable } = property;
    const name = fieldName || propertyName;
    if (description) {
        description.split('\n').
        forEach(line => {
            generator.printOnNewline(`// ${line.trim()}`);
        });
    }
    if (!standalone) {
        generator.printOnNewline(`${name}: `);
    }
    if (isArray) {
        generator.print(' Array<');
    }
    generator.pushScope({ typeName: name });
    generator.withinBlock(() => {
        propertySets.forEach((propertySet, index, propertySets) => {
            generator.withinBlock(() => {
                codeGeneration_1.propertyDeclarations(generator, propertySet);
            });
            if (index !== propertySets.length - 1) {
                generator.print(' |');
            }
        });
    }, '(', ')');
    generator.popScope();
    if (isArray) {
        if (isArrayElementNullable) {
            generator.print(' | null');
        }
        generator.print(' >');
    }
    if (isNullable) {
        generator.print(' | null');
    }
    if (!standalone) {
        generator.print(',');
    }
}
exports.propertySetsDeclaration = propertySetsDeclaration;
function methodDeclaration(generator, { methodName, returnType, async, args }, closure) {
    generator.printNewline();
    if (async)
    generator.print('async ');
    generator.print(`${methodName}(${args.join(', ')}):${returnType}`);
    generator.pushScope({ methodName });
    generator.withinBlock(closure, '{', '}');
    generator.popScope();
}
exports.methodDeclaration = methodDeclaration;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,