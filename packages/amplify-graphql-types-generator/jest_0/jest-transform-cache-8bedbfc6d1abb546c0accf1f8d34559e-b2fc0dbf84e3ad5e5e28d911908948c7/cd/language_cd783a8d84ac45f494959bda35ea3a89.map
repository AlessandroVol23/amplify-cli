{"version":3,"sources":["language.ts"],"names":[],"mappings":"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","sourcesContent":["import { LegacyInlineFragment } from '../compiler/legacyIR';\n\nimport { propertyDeclarations } from './codeGeneration';\nimport { typeNameFromGraphQLType } from './types';\n\nimport CodeGenerator from \"../utilities/CodeGenerator\";\nimport { GraphQLType } from \"graphql\";\nimport Maybe from 'graphql/tsutils/Maybe';\n\nexport interface Property {\n  fieldName?: string,\n  fieldType?: GraphQLType,\n  propertyName?: string,\n  type?: GraphQLType,\n  description?: Maybe<string>,\n  typeName?: string,\n  isComposite?: boolean,\n  isNullable?: boolean,\n  fields?: any[],\n  inlineFragments?: LegacyInlineFragment[],\n  fragmentSpreads?: any,\n  isInput?: boolean,\n  isArray?: boolean,\n  isArrayElementNullable?: boolean | null,\n}\n\n\nexport function interfaceDeclaration(generator: CodeGenerator, {\n  interfaceName,\n  noBrackets\n}: { interfaceName: string, noBrackets?: boolean },\n  closure: () => void) {\n  generator.printNewlineIfNeeded();\n  generator.printNewline();\n  generator.print(`export type ${interfaceName} = `);\n  generator.pushScope({ typeName: interfaceName });\n  if (noBrackets) {\n    generator.withinBlock(closure, '', '');\n  } else {\n    generator.withinBlock(closure, '{', '}');\n  }\n  generator.popScope();\n  generator.print(';');\n}\n\nexport function propertyDeclaration(generator: CodeGenerator, {\n  fieldName,\n  type,\n  propertyName,\n  typeName,\n  description,\n  isInput,\n  isArray,\n  isNullable,\n  isArrayElementNullable\n}: Property, closure?: () => void) {\n  const name = fieldName || propertyName;\n\n  if (description) {\n    description.split('\\n')\n      .forEach(line => {\n        generator.printOnNewline(`// ${line.trim()}`);\n      })\n  }\n\n  if (closure) {\n    generator.printOnNewline(name);\n\n    if (isNullable && isInput) {\n      generator.print('?');\n    }\n    generator.print(': ');\n\n    if (isArray) {\n      generator.print(' Array<');\n    }\n    generator.pushScope({ typeName: name });\n\n    generator.withinBlock(closure);\n\n    generator.popScope();\n\n    if (isArray) {\n      if (isArrayElementNullable) {\n        generator.print(' | null');\n      }\n      generator.print(' >');\n    }\n\n    if (isNullable) {\n      generator.print(' | null');\n    }\n\n  } else {\n    generator.printOnNewline(name);\n    if (isInput && isNullable) {\n      generator.print('?')\n    }\n    generator.print(`: ${typeName || type && typeNameFromGraphQLType(generator.context, type)}`);\n  }\n  generator.print(',');\n}\n\nexport function propertySetsDeclaration(generator: CodeGenerator, property: Property, propertySets: Property[][], standalone = false) {\n  const {\n    description, fieldName, propertyName,\n    isNullable, isArray, isArrayElementNullable,\n  } = property;\n  const name = fieldName || propertyName;\n\n  if (description) {\n    description.split('\\n')\n      .forEach(line => {\n        generator.printOnNewline(`// ${line.trim()}`);\n      })\n  }\n\n  if (!standalone) {\n    generator.printOnNewline(`${name}: `);\n  }\n\n  if (isArray) {\n    generator.print(' Array<');\n  }\n\n  generator.pushScope({ typeName: name });\n\n  generator.withinBlock(() => {\n    propertySets.forEach((propertySet, index, propertySets) => {\n      generator.withinBlock(() => {\n        propertyDeclarations(generator, propertySet);\n      });\n      if (index !== propertySets.length - 1) {\n        generator.print(' |');\n      }\n    })\n  }, '(', ')');\n\n  generator.popScope();\n\n  if (isArray) {\n    if (isArrayElementNullable) {\n      generator.print(' | null');\n    }\n    generator.print(' >');\n  }\n\n  if (isNullable) {\n    generator.print(' | null');\n  }\n\n  if (!standalone) {\n    generator.print(',');\n  }\n}\n\nexport function methodDeclaration(generator: CodeGenerator, {\n  methodName,\n  returnType,\n  async,\n  args,\n}: {\n  methodName:string,\n  returnType: string,\n  async: boolean,\n  args: Array<string>\n}, closure: () => void) {\n  generator.printNewline();\n  if (async) generator.print('async ');\n  generator.print(`${methodName}(${args.join(', ')}):${returnType}`);\n  generator.pushScope({ methodName });\n  generator.withinBlock(closure, '{', '}');\n  generator.popScope();\n}"],"sourceRoot":""}