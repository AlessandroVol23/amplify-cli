01e1f8c942a862829e1eba7e27388f99
'use strict';require('ts-jest').install("/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-types-generator/src/compiler/visitors/collectAndMergeFields.ts", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction collectAndMergeFields(selectionSet, mergeInFragmentSpreads = true) {\n    const groupedFields = new Map();\n    function visitSelectionSet(selections, possibleTypes, conditions = []) {\n        if (possibleTypes.length < 1)\n            return;\n        for (const selection of selections) {\n            switch (selection.kind) {\n                case 'Field':\n                    let groupForResponseKey = groupedFields.get(selection.responseKey);\n                    if (!groupForResponseKey) {\n                        groupForResponseKey = [];\n                        groupedFields.set(selection.responseKey, groupForResponseKey);\n                    }\n                    groupForResponseKey.push(Object.assign({}, selection, { isConditional: conditions.length > 0, conditions, selectionSet: selection.selectionSet\n                            ? {\n                                possibleTypes: selection.selectionSet.possibleTypes,\n                                selections: [...selection.selectionSet.selections]\n                            }\n                            : undefined }));\n                    break;\n                case 'FragmentSpread':\n                case 'TypeCondition':\n                    if (selection.kind === 'FragmentSpread' && !mergeInFragmentSpreads)\n                        continue;\n                    if (!possibleTypes.every(type => selection.selectionSet.possibleTypes.includes(type)))\n                        continue;\n                    visitSelectionSet(selection.selectionSet.selections, possibleTypes, conditions);\n                    break;\n                case 'BooleanCondition':\n                    visitSelectionSet(selection.selectionSet.selections, possibleTypes, [...conditions, selection]);\n                    break;\n            }\n        }\n    }\n    visitSelectionSet(selectionSet.selections, selectionSet.possibleTypes);\n    const fields = Array.from(groupedFields.values()).map(fields => {\n        const isFieldIncludedUnconditionally = fields.some(field => !field.isConditional);\n        return fields\n            .map(field => {\n            if (isFieldIncludedUnconditionally && field.isConditional && field.selectionSet) {\n                field.selectionSet.selections = wrapInBooleanConditionsIfNeeded(field.selectionSet.selections, field.conditions);\n            }\n            return field;\n        })\n            .reduce((field, otherField) => {\n            field.isConditional = field.isConditional && otherField.isConditional;\n            if (field.conditions && otherField.conditions) {\n                field.conditions = [...field.conditions, ...otherField.conditions];\n            }\n            else {\n                field.conditions = undefined;\n            }\n            if (field.selectionSet && otherField.selectionSet) {\n                field.selectionSet.selections.push(...otherField.selectionSet.selections);\n            }\n            return field;\n        });\n    });\n    if (selectionSet.possibleTypes.length == 1) {\n        const type = selectionSet.possibleTypes[0];\n        const fieldDefMap = type.getFields();\n        for (const field of fields) {\n            const fieldDef = fieldDefMap[field.name];\n            if (fieldDef && fieldDef.description) {\n                field.description = fieldDef.description;\n            }\n        }\n    }\n    return fields;\n}\nexports.collectAndMergeFields = collectAndMergeFields;\nfunction wrapInBooleanConditionsIfNeeded(selections, conditions) {\n    if (!conditions || conditions.length == 0)\n        return selections;\n    const [condition, ...rest] = conditions;\n    return [\n        Object.assign({}, condition, { selectionSet: {\n                possibleTypes: condition.selectionSet.possibleTypes,\n                selections: wrapInBooleanConditionsIfNeeded(selections, rest)\n            } })\n    ];\n}\nexports.wrapInBooleanConditionsIfNeeded = wrapInBooleanConditionsIfNeeded;\n//# sourceMappingURL=data:application/json;base64,");"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function collectAndMergeFields(selectionSet, mergeInFragmentSpreads = true) {
    const groupedFields = new Map();
    function visitSelectionSet(selections, possibleTypes, conditions = []) {
        if (possibleTypes.length < 1)
        return;
        for (const selection of selections) {
            switch (selection.kind) {
                case 'Field':
                    let groupForResponseKey = groupedFields.get(selection.responseKey);
                    if (!groupForResponseKey) {
                        groupForResponseKey = [];
                        groupedFields.set(selection.responseKey, groupForResponseKey);
                    }
                    groupForResponseKey.push(Object.assign({}, selection, { isConditional: conditions.length > 0, conditions, selectionSet: selection.selectionSet ?
                        {
                            possibleTypes: selection.selectionSet.possibleTypes,
                            selections: [...selection.selectionSet.selections] } :

                        undefined }));
                    break;
                case 'FragmentSpread':
                case 'TypeCondition':
                    if (selection.kind === 'FragmentSpread' && !mergeInFragmentSpreads)
                    continue;
                    if (!possibleTypes.every(type => selection.selectionSet.possibleTypes.includes(type)))
                    continue;
                    visitSelectionSet(selection.selectionSet.selections, possibleTypes, conditions);
                    break;
                case 'BooleanCondition':
                    visitSelectionSet(selection.selectionSet.selections, possibleTypes, [...conditions, selection]);
                    break;}

        }
    }
    visitSelectionSet(selectionSet.selections, selectionSet.possibleTypes);
    const fields = Array.from(groupedFields.values()).map(fields => {
        const isFieldIncludedUnconditionally = fields.some(field => !field.isConditional);
        return fields.
        map(field => {
            if (isFieldIncludedUnconditionally && field.isConditional && field.selectionSet) {
                field.selectionSet.selections = wrapInBooleanConditionsIfNeeded(field.selectionSet.selections, field.conditions);
            }
            return field;
        }).
        reduce((field, otherField) => {
            field.isConditional = field.isConditional && otherField.isConditional;
            if (field.conditions && otherField.conditions) {
                field.conditions = [...field.conditions, ...otherField.conditions];
            } else
            {
                field.conditions = undefined;
            }
            if (field.selectionSet && otherField.selectionSet) {
                field.selectionSet.selections.push(...otherField.selectionSet.selections);
            }
            return field;
        });
    });
    if (selectionSet.possibleTypes.length == 1) {
        const type = selectionSet.possibleTypes[0];
        const fieldDefMap = type.getFields();
        for (const field of fields) {
            const fieldDef = fieldDefMap[field.name];
            if (fieldDef && fieldDef.description) {
                field.description = fieldDef.description;
            }
        }
    }
    return fields;
}
exports.collectAndMergeFields = collectAndMergeFields;
function wrapInBooleanConditionsIfNeeded(selections, conditions) {
    if (!conditions || conditions.length == 0)
    return selections;
    const [condition, ...rest] = conditions;
    return [
    Object.assign({}, condition, { selectionSet: {
            possibleTypes: condition.selectionSet.possibleTypes,
            selections: wrapInBooleanConditionsIfNeeded(selections, rest) } })];


}
exports.wrapInBooleanConditionsIfNeeded = wrapInBooleanConditionsIfNeeded;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,