97598745d1f3e658c5080fd611e1a33e
'use strict';require('ts-jest').install("/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-types-generator/test/valueFromValueNode.ts", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst graphql_1 = require(\"graphql\");\nconst graphql_2 = require(\"../src/utilities/graphql\");\ndescribe('#valueFromValueNode', () => {\n    test(`should return a number for an IntValue`, () => {\n        const valueNode = graphql_1.parseValue('1');\n        const value = graphql_2.valueFromValueNode(valueNode);\n        expect(value).toBe(1);\n    });\n    test(`should return a number for a FloatValue`, () => {\n        const valueNode = graphql_1.parseValue('1.0');\n        const value = graphql_2.valueFromValueNode(valueNode);\n        expect(value).toBe(1.0);\n    });\n    test(`should return a boolean for a BooleanValue`, () => {\n        const valueNode = graphql_1.parseValue('true');\n        const value = graphql_2.valueFromValueNode(valueNode);\n        expect(value).toBe(true);\n    });\n    test(`should return null for a NullValue`, () => {\n        const valueNode = graphql_1.parseValue('null');\n        const value = graphql_2.valueFromValueNode(valueNode);\n        expect(value).toBe(null);\n    });\n    test(`should return a string for a StringValue`, () => {\n        const valueNode = graphql_1.parseValue('\"foo\"');\n        const value = graphql_2.valueFromValueNode(valueNode);\n        expect(value).toBe('foo');\n    });\n    test(`should return a string for an EnumValue`, () => {\n        const valueNode = graphql_1.parseValue('JEDI');\n        const value = graphql_2.valueFromValueNode(valueNode);\n        expect(value).toBe('JEDI');\n    });\n    test(`should return an object for a Variable`, () => {\n        const valueNode = graphql_1.parseValue('$something');\n        const value = graphql_2.valueFromValueNode(valueNode);\n        expect(value).toEqual({ kind: 'Variable', variableName: 'something' });\n    });\n    test(`should return an array for a ListValue`, () => {\n        const valueNode = graphql_1.parseValue('[ \"foo\", 1, JEDI, $something ]');\n        const value = graphql_2.valueFromValueNode(valueNode);\n        expect(value).toEqual(['foo', 1, 'JEDI', { kind: 'Variable', variableName: 'something' }]);\n    });\n    test(`should return an object for an ObjectValue`, () => {\n        const valueNode = graphql_1.parseValue('{ foo: \"foo\", bar: 1, bla: JEDI, baz: $something }');\n        const value = graphql_2.valueFromValueNode(valueNode);\n        expect(value).toEqual({\n            foo: 'foo',\n            bar: 1,\n            bla: 'JEDI',\n            baz: { kind: 'Variable', variableName: 'something' }\n        });\n    });\n});\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsdWVGcm9tVmFsdWVOb2RlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidmFsdWVGcm9tVmFsdWVOb2RlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEscUNBQXFDO0FBRXJDLHNEQUE4RDtBQUU5RCxRQUFRLENBQUMscUJBQXFCLEVBQUUsR0FBRyxFQUFFO0lBQ25DLElBQUksQ0FBQyx3Q0FBd0MsRUFBRSxHQUFHLEVBQUU7UUFDbEQsTUFBTSxTQUFTLEdBQUcsb0JBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNsQyxNQUFNLEtBQUssR0FBRyw0QkFBa0IsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUU1QyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3hCLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLHlDQUF5QyxFQUFFLEdBQUcsRUFBRTtRQUNuRCxNQUFNLFNBQVMsR0FBRyxvQkFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3BDLE1BQU0sS0FBSyxHQUFHLDRCQUFrQixDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRTVDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDMUIsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsNENBQTRDLEVBQUUsR0FBRyxFQUFFO1FBQ3RELE1BQU0sU0FBUyxHQUFHLG9CQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDckMsTUFBTSxLQUFLLEdBQUcsNEJBQWtCLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFNUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMzQixDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxvQ0FBb0MsRUFBRSxHQUFHLEVBQUU7UUFDOUMsTUFBTSxTQUFTLEdBQUcsb0JBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNyQyxNQUFNLEtBQUssR0FBRyw0QkFBa0IsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUU1QyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzNCLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLDBDQUEwQyxFQUFFLEdBQUcsRUFBRTtRQUNwRCxNQUFNLFNBQVMsR0FBRyxvQkFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3RDLE1BQU0sS0FBSyxHQUFHLDRCQUFrQixDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRTVDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDNUIsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMseUNBQXlDLEVBQUUsR0FBRyxFQUFFO1FBQ25ELE1BQU0sU0FBUyxHQUFHLG9CQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDckMsTUFBTSxLQUFLLEdBQUcsNEJBQWtCLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFNUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM3QixDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyx3Q0FBd0MsRUFBRSxHQUFHLEVBQUU7UUFDbEQsTUFBTSxTQUFTLEdBQUcsb0JBQVUsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUMzQyxNQUFNLEtBQUssR0FBRyw0QkFBa0IsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUU1QyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsV0FBVyxFQUFFLENBQUMsQ0FBQztJQUN6RSxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyx3Q0FBd0MsRUFBRSxHQUFHLEVBQUU7UUFDbEQsTUFBTSxTQUFTLEdBQUcsb0JBQVUsQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQy9ELE1BQU0sS0FBSyxHQUFHLDRCQUFrQixDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRTVDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUM3RixDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyw0Q0FBNEMsRUFBRSxHQUFHLEVBQUU7UUFDdEQsTUFBTSxTQUFTLEdBQUcsb0JBQVUsQ0FBQyxvREFBb0QsQ0FBQyxDQUFDO1FBQ25GLE1BQU0sS0FBSyxHQUFHLDRCQUFrQixDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRTVDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUM7WUFDcEIsR0FBRyxFQUFFLEtBQUs7WUFDVixHQUFHLEVBQUUsQ0FBQztZQUNOLEdBQUcsRUFBRSxNQUFNO1lBQ1gsR0FBRyxFQUFFLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsV0FBVyxFQUFFO1NBQ3JELENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwYXJzZVZhbHVlIH0gZnJvbSAnZ3JhcGhxbCc7XG5cbmltcG9ydCB7IHZhbHVlRnJvbVZhbHVlTm9kZSB9IGZyb20gJy4uL3NyYy91dGlsaXRpZXMvZ3JhcGhxbCc7XG5cbmRlc2NyaWJlKCcjdmFsdWVGcm9tVmFsdWVOb2RlJywgKCkgPT4ge1xuICB0ZXN0KGBzaG91bGQgcmV0dXJuIGEgbnVtYmVyIGZvciBhbiBJbnRWYWx1ZWAsICgpID0+IHtcbiAgICBjb25zdCB2YWx1ZU5vZGUgPSBwYXJzZVZhbHVlKCcxJyk7XG4gICAgY29uc3QgdmFsdWUgPSB2YWx1ZUZyb21WYWx1ZU5vZGUodmFsdWVOb2RlKTtcblxuICAgIGV4cGVjdCh2YWx1ZSkudG9CZSgxKTtcbiAgfSk7XG5cbiAgdGVzdChgc2hvdWxkIHJldHVybiBhIG51bWJlciBmb3IgYSBGbG9hdFZhbHVlYCwgKCkgPT4ge1xuICAgIGNvbnN0IHZhbHVlTm9kZSA9IHBhcnNlVmFsdWUoJzEuMCcpO1xuICAgIGNvbnN0IHZhbHVlID0gdmFsdWVGcm9tVmFsdWVOb2RlKHZhbHVlTm9kZSk7XG5cbiAgICBleHBlY3QodmFsdWUpLnRvQmUoMS4wKTtcbiAgfSk7XG5cbiAgdGVzdChgc2hvdWxkIHJldHVybiBhIGJvb2xlYW4gZm9yIGEgQm9vbGVhblZhbHVlYCwgKCkgPT4ge1xuICAgIGNvbnN0IHZhbHVlTm9kZSA9IHBhcnNlVmFsdWUoJ3RydWUnKTtcbiAgICBjb25zdCB2YWx1ZSA9IHZhbHVlRnJvbVZhbHVlTm9kZSh2YWx1ZU5vZGUpO1xuXG4gICAgZXhwZWN0KHZhbHVlKS50b0JlKHRydWUpO1xuICB9KTtcblxuICB0ZXN0KGBzaG91bGQgcmV0dXJuIG51bGwgZm9yIGEgTnVsbFZhbHVlYCwgKCkgPT4ge1xuICAgIGNvbnN0IHZhbHVlTm9kZSA9IHBhcnNlVmFsdWUoJ251bGwnKTtcbiAgICBjb25zdCB2YWx1ZSA9IHZhbHVlRnJvbVZhbHVlTm9kZSh2YWx1ZU5vZGUpO1xuXG4gICAgZXhwZWN0KHZhbHVlKS50b0JlKG51bGwpO1xuICB9KTtcblxuICB0ZXN0KGBzaG91bGQgcmV0dXJuIGEgc3RyaW5nIGZvciBhIFN0cmluZ1ZhbHVlYCwgKCkgPT4ge1xuICAgIGNvbnN0IHZhbHVlTm9kZSA9IHBhcnNlVmFsdWUoJ1wiZm9vXCInKTtcbiAgICBjb25zdCB2YWx1ZSA9IHZhbHVlRnJvbVZhbHVlTm9kZSh2YWx1ZU5vZGUpO1xuXG4gICAgZXhwZWN0KHZhbHVlKS50b0JlKCdmb28nKTtcbiAgfSk7XG5cbiAgdGVzdChgc2hvdWxkIHJldHVybiBhIHN0cmluZyBmb3IgYW4gRW51bVZhbHVlYCwgKCkgPT4ge1xuICAgIGNvbnN0IHZhbHVlTm9kZSA9IHBhcnNlVmFsdWUoJ0pFREknKTtcbiAgICBjb25zdCB2YWx1ZSA9IHZhbHVlRnJvbVZhbHVlTm9kZSh2YWx1ZU5vZGUpO1xuXG4gICAgZXhwZWN0KHZhbHVlKS50b0JlKCdKRURJJyk7XG4gIH0pO1xuXG4gIHRlc3QoYHNob3VsZCByZXR1cm4gYW4gb2JqZWN0IGZvciBhIFZhcmlhYmxlYCwgKCkgPT4ge1xuICAgIGNvbnN0IHZhbHVlTm9kZSA9IHBhcnNlVmFsdWUoJyRzb21ldGhpbmcnKTtcbiAgICBjb25zdCB2YWx1ZSA9IHZhbHVlRnJvbVZhbHVlTm9kZSh2YWx1ZU5vZGUpO1xuXG4gICAgZXhwZWN0KHZhbHVlKS50b0VxdWFsKHsga2luZDogJ1ZhcmlhYmxlJywgdmFyaWFibGVOYW1lOiAnc29tZXRoaW5nJyB9KTtcbiAgfSk7XG5cbiAgdGVzdChgc2hvdWxkIHJldHVybiBhbiBhcnJheSBmb3IgYSBMaXN0VmFsdWVgLCAoKSA9PiB7XG4gICAgY29uc3QgdmFsdWVOb2RlID0gcGFyc2VWYWx1ZSgnWyBcImZvb1wiLCAxLCBKRURJLCAkc29tZXRoaW5nIF0nKTtcbiAgICBjb25zdCB2YWx1ZSA9IHZhbHVlRnJvbVZhbHVlTm9kZSh2YWx1ZU5vZGUpO1xuXG4gICAgZXhwZWN0KHZhbHVlKS50b0VxdWFsKFsnZm9vJywgMSwgJ0pFREknLCB7IGtpbmQ6ICdWYXJpYWJsZScsIHZhcmlhYmxlTmFtZTogJ3NvbWV0aGluZycgfV0pO1xuICB9KTtcblxuICB0ZXN0KGBzaG91bGQgcmV0dXJuIGFuIG9iamVjdCBmb3IgYW4gT2JqZWN0VmFsdWVgLCAoKSA9PiB7XG4gICAgY29uc3QgdmFsdWVOb2RlID0gcGFyc2VWYWx1ZSgneyBmb286IFwiZm9vXCIsIGJhcjogMSwgYmxhOiBKRURJLCBiYXo6ICRzb21ldGhpbmcgfScpO1xuICAgIGNvbnN0IHZhbHVlID0gdmFsdWVGcm9tVmFsdWVOb2RlKHZhbHVlTm9kZSk7XG5cbiAgICBleHBlY3QodmFsdWUpLnRvRXF1YWwoe1xuICAgICAgZm9vOiAnZm9vJyxcbiAgICAgIGJhcjogMSxcbiAgICAgIGJsYTogJ0pFREknLFxuICAgICAgYmF6OiB7IGtpbmQ6ICdWYXJpYWJsZScsIHZhcmlhYmxlTmFtZTogJ3NvbWV0aGluZycgfVxuICAgIH0pO1xuICB9KTtcbn0pO1xuIl19");"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = require("graphql");
const graphql_2 = require("../src/utilities/graphql");
describe('#valueFromValueNode', () => {
    test(`should return a number for an IntValue`, () => {
        const valueNode = graphql_1.parseValue('1');
        const value = graphql_2.valueFromValueNode(valueNode);
        expect(value).toBe(1);
    });
    test(`should return a number for a FloatValue`, () => {
        const valueNode = graphql_1.parseValue('1.0');
        const value = graphql_2.valueFromValueNode(valueNode);
        expect(value).toBe(1.0);
    });
    test(`should return a boolean for a BooleanValue`, () => {
        const valueNode = graphql_1.parseValue('true');
        const value = graphql_2.valueFromValueNode(valueNode);
        expect(value).toBe(true);
    });
    test(`should return null for a NullValue`, () => {
        const valueNode = graphql_1.parseValue('null');
        const value = graphql_2.valueFromValueNode(valueNode);
        expect(value).toBe(null);
    });
    test(`should return a string for a StringValue`, () => {
        const valueNode = graphql_1.parseValue('"foo"');
        const value = graphql_2.valueFromValueNode(valueNode);
        expect(value).toBe('foo');
    });
    test(`should return a string for an EnumValue`, () => {
        const valueNode = graphql_1.parseValue('JEDI');
        const value = graphql_2.valueFromValueNode(valueNode);
        expect(value).toBe('JEDI');
    });
    test(`should return an object for a Variable`, () => {
        const valueNode = graphql_1.parseValue('$something');
        const value = graphql_2.valueFromValueNode(valueNode);
        expect(value).toEqual({ kind: 'Variable', variableName: 'something' });
    });
    test(`should return an array for a ListValue`, () => {
        const valueNode = graphql_1.parseValue('[ "foo", 1, JEDI, $something ]');
        const value = graphql_2.valueFromValueNode(valueNode);
        expect(value).toEqual(['foo', 1, 'JEDI', { kind: 'Variable', variableName: 'something' }]);
    });
    test(`should return an object for an ObjectValue`, () => {
        const valueNode = graphql_1.parseValue('{ foo: "foo", bar: 1, bla: JEDI, baz: $something }');
        const value = graphql_2.valueFromValueNode(valueNode);
        expect(value).toEqual({
            foo: 'foo',
            bar: 1,
            bla: 'JEDI',
            baz: { kind: 'Variable', variableName: 'something' } });

    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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VkQ7QUFXRCxDQXBFRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHBhcnNlVmFsdWUgfSBmcm9tICdncmFwaHFsJztcblxuaW1wb3J0IHsgdmFsdWVGcm9tVmFsdWVOb2RlIH0gZnJvbSAnLi4vc3JjL3V0aWxpdGllcy9ncmFwaHFsJztcblxuZGVzY3JpYmUoJyN2YWx1ZUZyb21WYWx1ZU5vZGUnLCAoKSA9PiB7XG4gIHRlc3QoYHNob3VsZCByZXR1cm4gYSBudW1iZXIgZm9yIGFuIEludFZhbHVlYCwgKCkgPT4ge1xuICAgIGNvbnN0IHZhbHVlTm9kZSA9IHBhcnNlVmFsdWUoJzEnKTtcbiAgICBjb25zdCB2YWx1ZSA9IHZhbHVlRnJvbVZhbHVlTm9kZSh2YWx1ZU5vZGUpO1xuXG4gICAgZXhwZWN0KHZhbHVlKS50b0JlKDEpO1xuICB9KTtcblxuICB0ZXN0KGBzaG91bGQgcmV0dXJuIGEgbnVtYmVyIGZvciBhIEZsb2F0VmFsdWVgLCAoKSA9PiB7XG4gICAgY29uc3QgdmFsdWVOb2RlID0gcGFyc2VWYWx1ZSgnMS4wJyk7XG4gICAgY29uc3QgdmFsdWUgPSB2YWx1ZUZyb21WYWx1ZU5vZGUodmFsdWVOb2RlKTtcblxuICAgIGV4cGVjdCh2YWx1ZSkudG9CZSgxLjApO1xuICB9KTtcblxuICB0ZXN0KGBzaG91bGQgcmV0dXJuIGEgYm9vbGVhbiBmb3IgYSBCb29sZWFuVmFsdWVgLCAoKSA9PiB7XG4gICAgY29uc3QgdmFsdWVOb2RlID0gcGFyc2VWYWx1ZSgndHJ1ZScpO1xuICAgIGNvbnN0IHZhbHVlID0gdmFsdWVGcm9tVmFsdWVOb2RlKHZhbHVlTm9kZSk7XG5cbiAgICBleHBlY3QodmFsdWUpLnRvQmUodHJ1ZSk7XG4gIH0pO1xuXG4gIHRlc3QoYHNob3VsZCByZXR1cm4gbnVsbCBmb3IgYSBOdWxsVmFsdWVgLCAoKSA9PiB7XG4gICAgY29uc3QgdmFsdWVOb2RlID0gcGFyc2VWYWx1ZSgnbnVsbCcpO1xuICAgIGNvbnN0IHZhbHVlID0gdmFsdWVGcm9tVmFsdWVOb2RlKHZhbHVlTm9kZSk7XG5cbiAgICBleHBlY3QodmFsdWUpLnRvQmUobnVsbCk7XG4gIH0pO1xuXG4gIHRlc3QoYHNob3VsZCByZXR1cm4gYSBzdHJpbmcgZm9yIGEgU3RyaW5nVmFsdWVgLCAoKSA9PiB7XG4gICAgY29uc3QgdmFsdWVOb2RlID0gcGFyc2VWYWx1ZSgnXCJmb29cIicpO1xuICAgIGNvbnN0IHZhbHVlID0gdmFsdWVGcm9tVmFsdWVOb2RlKHZhbHVlTm9kZSk7XG5cbiAgICBleHBlY3QodmFsdWUpLnRvQmUoJ2ZvbycpO1xuICB9KTtcblxuICB0ZXN0KGBzaG91bGQgcmV0dXJuIGEgc3RyaW5nIGZvciBhbiBFbnVtVmFsdWVgLCAoKSA9PiB7XG4gICAgY29uc3QgdmFsdWVOb2RlID0gcGFyc2VWYWx1ZSgnSkVESScpO1xuICAgIGNvbnN0IHZhbHVlID0gdmFsdWVGcm9tVmFsdWVOb2RlKHZhbHVlTm9kZSk7XG5cbiAgICBleHBlY3QodmFsdWUpLnRvQmUoJ0pFREknKTtcbiAgfSk7XG5cbiAgdGVzdChgc2hvdWxkIHJldHVybiBhbiBvYmplY3QgZm9yIGEgVmFyaWFibGVgLCAoKSA9PiB7XG4gICAgY29uc3QgdmFsdWVOb2RlID0gcGFyc2VWYWx1ZSgnJHNvbWV0aGluZycpO1xuICAgIGNvbnN0IHZhbHVlID0gdmFsdWVGcm9tVmFsdWVOb2RlKHZhbHVlTm9kZSk7XG5cbiAgICBleHBlY3QodmFsdWUpLnRvRXF1YWwoeyBraW5kOiAnVmFyaWFibGUnLCB2YXJpYWJsZU5hbWU6ICdzb21ldGhpbmcnIH0pO1xuICB9KTtcblxuICB0ZXN0KGBzaG91bGQgcmV0dXJuIGFuIGFycmF5IGZvciBhIExpc3RWYWx1ZWAsICgpID0+IHtcbiAgICBjb25zdCB2YWx1ZU5vZGUgPSBwYXJzZVZhbHVlKCdbIFwiZm9vXCIsIDEsIEpFREksICRzb21ldGhpbmcgXScpO1xuICAgIGNvbnN0IHZhbHVlID0gdmFsdWVGcm9tVmFsdWVOb2RlKHZhbHVlTm9kZSk7XG5cbiAgICBleHBlY3QodmFsdWUpLnRvRXF1YWwoWydmb28nLCAxLCAnSkVESScsIHsga2luZDogJ1ZhcmlhYmxlJywgdmFyaWFibGVOYW1lOiAnc29tZXRoaW5nJyB9XSk7XG4gIH0pO1xuXG4gIHRlc3QoYHNob3VsZCByZXR1cm4gYW4gb2JqZWN0IGZvciBhbiBPYmplY3RWYWx1ZWAsICgpID0+IHtcbiAgICBjb25zdCB2YWx1ZU5vZGUgPSBwYXJzZVZhbHVlKCd7IGZvbzogXCJmb29cIiwgYmFyOiAxLCBibGE6IEpFREksIGJhejogJHNvbWV0aGluZyB9Jyk7XG4gICAgY29uc3QgdmFsdWUgPSB2YWx1ZUZyb21WYWx1ZU5vZGUodmFsdWVOb2RlKTtcblxuICAgIGV4cGVjdCh2YWx1ZSkudG9FcXVhbCh7XG4gICAgICBmb286ICdmb28nLFxuICAgICAgYmFyOiAxLFxuICAgICAgYmxhOiAnSkVESScsXG4gICAgICBiYXo6IHsga2luZDogJ1ZhcmlhYmxlJywgdmFyaWFibGVOYW1lOiAnc29tZXRoaW5nJyB9XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXSwic291cmNlUm9vdCI6IiJ9