ed78e390f134766afdf92c8717a70ca4
'use strict';require('ts-jest').install("/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-types-generator/src/compiler/legacyIR.ts", "\"use strict\";\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\n            t[p[i]] = s[p[i]];\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst _1 = require(\"./\");\nconst collectFragmentsReferenced_1 = require(\"./visitors/collectFragmentsReferenced\");\nconst generateOperationId_1 = require(\"./visitors/generateOperationId\");\nconst typeCase_1 = require(\"./visitors/typeCase\");\nconst collectAndMergeFields_1 = require(\"./visitors/collectAndMergeFields\");\nrequire(\"../utilities/array\");\nfunction compileToLegacyIR(schema, document, options = { mergeInFieldsFromFragmentSpreads: true }) {\n    const context = _1.compileToIR(schema, document, options);\n    const transformer = new LegacyIRTransformer(context, options);\n    return transformer.transformIR();\n}\nexports.compileToLegacyIR = compileToLegacyIR;\nclass LegacyIRTransformer {\n    constructor(context, options = { mergeInFieldsFromFragmentSpreads: true }) {\n        this.context = context;\n        this.options = options;\n    }\n    transformIR() {\n        const operations = Object.create({});\n        for (const [operationName, operation] of Object.entries(this.context.operations)) {\n            const { filePath, operationType, rootType, variables, source, selectionSet } = operation;\n            const fragmentsReferenced = collectFragmentsReferenced_1.collectFragmentsReferenced(selectionSet, this.context.fragments);\n            const { sourceWithFragments, operationId } = generateOperationId_1.generateOperationId(operation, this.context.fragments, fragmentsReferenced);\n            operations[operationName] = Object.assign({ filePath,\n                operationName,\n                operationType,\n                rootType,\n                variables,\n                source }, this.transformSelectionSetToLegacyIR(selectionSet), { fragmentsReferenced: Array.from(fragmentsReferenced), sourceWithFragments,\n                operationId });\n        }\n        const fragments = Object.create({});\n        for (const [fragmentName, fragment] of Object.entries(this.context.fragments)) {\n            const { selectionSet, type } = fragment, fragmentWithoutSelectionSet = __rest(fragment, [\"selectionSet\", \"type\"]);\n            fragments[fragmentName] = Object.assign({ typeCondition: type, possibleTypes: selectionSet.possibleTypes }, fragmentWithoutSelectionSet, this.transformSelectionSetToLegacyIR(selectionSet));\n        }\n        const legacyContext = {\n            schema: this.context.schema,\n            operations,\n            fragments,\n            typesUsed: this.context.typesUsed,\n            options: this.options\n        };\n        return legacyContext;\n    }\n    transformSelectionSetToLegacyIR(selectionSet) {\n        const typeCase = typeCase_1.typeCaseForSelectionSet(selectionSet, this.options.mergeInFieldsFromFragmentSpreads);\n        const fields = this.transformFieldsToLegacyIR(collectAndMergeFields_1.collectAndMergeFields(typeCase.default, false));\n        const inlineFragments = typeCase.variants.flatMap(variant => {\n            const fields = this.transformFieldsToLegacyIR(collectAndMergeFields_1.collectAndMergeFields(variant, false));\n            if (selectionSet.possibleTypes.every(type => variant.possibleTypes.includes(type)) &&\n                fields.length < 1)\n                return undefined;\n            const fragmentSpreads = this.collectFragmentSpreads(selectionSet, variant.possibleTypes).map((fragmentSpread) => fragmentSpread.fragmentName);\n            return variant.possibleTypes.map(possibleType => {\n                return {\n                    typeCondition: possibleType,\n                    possibleTypes: [possibleType],\n                    fields,\n                    fragmentSpreads\n                };\n            });\n        });\n        for (const inlineFragment of inlineFragments) {\n            inlineFragments[inlineFragment.typeCondition.name] = inlineFragment;\n        }\n        const fragmentSpreads = this.collectFragmentSpreads(selectionSet).map((fragmentSpread) => fragmentSpread.fragmentName);\n        return {\n            fields,\n            fragmentSpreads,\n            inlineFragments\n        };\n    }\n    transformFieldsToLegacyIR(fields) {\n        return fields.map(field => {\n            const { args, type, isConditional, description, isDeprecated, deprecationReason, selectionSet } = field;\n            const conditions = field.conditions && field.conditions.length > 0\n                ? field.conditions.map(({ kind, variableName, inverted }) => {\n                    return {\n                        kind,\n                        variableName,\n                        inverted\n                    };\n                })\n                : undefined;\n            return Object.assign({ responseName: field.alias || field.name, fieldName: field.name, type,\n                args,\n                isConditional,\n                conditions,\n                description,\n                isDeprecated,\n                deprecationReason }, selectionSet ? this.transformSelectionSetToLegacyIR(selectionSet) : {});\n        });\n    }\n    collectFragmentSpreads(selectionSet, possibleTypes = selectionSet.possibleTypes) {\n        const fragmentSpreads = [];\n        for (const selection of selectionSet.selections) {\n            switch (selection.kind) {\n                case 'FragmentSpread':\n                    fragmentSpreads.push(selection);\n                    break;\n                case 'TypeCondition':\n                    if (possibleTypes.every(type => selection.selectionSet.possibleTypes.includes(type))) {\n                        fragmentSpreads.push(...this.collectFragmentSpreads(selection.selectionSet, possibleTypes));\n                    }\n                    break;\n                case 'BooleanCondition':\n                    fragmentSpreads.push(...this.collectFragmentSpreads(selection.selectionSet, possibleTypes));\n                    break;\n            }\n        }\n        return Array.from(new Set(fragmentSpreads));\n    }\n}\n//# sourceMappingURL=data:application/json;base64,");"use strict";
var __rest = this && this.__rest || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
    t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
    t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
const _1 = require("./");
const collectFragmentsReferenced_1 = require("./visitors/collectFragmentsReferenced");
const generateOperationId_1 = require("./visitors/generateOperationId");
const typeCase_1 = require("./visitors/typeCase");
const collectAndMergeFields_1 = require("./visitors/collectAndMergeFields");
require("../utilities/array");
function compileToLegacyIR(schema, document, options = { mergeInFieldsFromFragmentSpreads: true }) {
    const context = _1.compileToIR(schema, document, options);
    const transformer = new LegacyIRTransformer(context, options);
    return transformer.transformIR();
}
exports.compileToLegacyIR = compileToLegacyIR;
class LegacyIRTransformer {
    constructor(context, options = { mergeInFieldsFromFragmentSpreads: true }) {
        this.context = context;
        this.options = options;
    }
    transformIR() {
        const operations = Object.create({});
        for (const [operationName, operation] of Object.entries(this.context.operations)) {
            const { filePath, operationType, rootType, variables, source, selectionSet } = operation;
            const fragmentsReferenced = collectFragmentsReferenced_1.collectFragmentsReferenced(selectionSet, this.context.fragments);
            const { sourceWithFragments, operationId } = generateOperationId_1.generateOperationId(operation, this.context.fragments, fragmentsReferenced);
            operations[operationName] = Object.assign({ filePath,
                operationName,
                operationType,
                rootType,
                variables,
                source }, this.transformSelectionSetToLegacyIR(selectionSet), { fragmentsReferenced: Array.from(fragmentsReferenced), sourceWithFragments,
                operationId });
        }
        const fragments = Object.create({});
        for (const [fragmentName, fragment] of Object.entries(this.context.fragments)) {
            const { selectionSet, type } = fragment,fragmentWithoutSelectionSet = __rest(fragment, ["selectionSet", "type"]);
            fragments[fragmentName] = Object.assign({ typeCondition: type, possibleTypes: selectionSet.possibleTypes }, fragmentWithoutSelectionSet, this.transformSelectionSetToLegacyIR(selectionSet));
        }
        const legacyContext = {
            schema: this.context.schema,
            operations,
            fragments,
            typesUsed: this.context.typesUsed,
            options: this.options };

        return legacyContext;
    }
    transformSelectionSetToLegacyIR(selectionSet) {
        const typeCase = typeCase_1.typeCaseForSelectionSet(selectionSet, this.options.mergeInFieldsFromFragmentSpreads);
        const fields = this.transformFieldsToLegacyIR(collectAndMergeFields_1.collectAndMergeFields(typeCase.default, false));
        const inlineFragments = typeCase.variants.flatMap(variant => {
            const fields = this.transformFieldsToLegacyIR(collectAndMergeFields_1.collectAndMergeFields(variant, false));
            if (selectionSet.possibleTypes.every(type => variant.possibleTypes.includes(type)) &&
            fields.length < 1)
            return undefined;
            const fragmentSpreads = this.collectFragmentSpreads(selectionSet, variant.possibleTypes).map(fragmentSpread => fragmentSpread.fragmentName);
            return variant.possibleTypes.map(possibleType => {
                return {
                    typeCondition: possibleType,
                    possibleTypes: [possibleType],
                    fields,
                    fragmentSpreads };

            });
        });
        for (const inlineFragment of inlineFragments) {
            inlineFragments[inlineFragment.typeCondition.name] = inlineFragment;
        }
        const fragmentSpreads = this.collectFragmentSpreads(selectionSet).map(fragmentSpread => fragmentSpread.fragmentName);
        return {
            fields,
            fragmentSpreads,
            inlineFragments };

    }
    transformFieldsToLegacyIR(fields) {
        return fields.map(field => {
            const { args, type, isConditional, description, isDeprecated, deprecationReason, selectionSet } = field;
            const conditions = field.conditions && field.conditions.length > 0 ?
            field.conditions.map(({ kind, variableName, inverted }) => {
                return {
                    kind,
                    variableName,
                    inverted };

            }) :
            undefined;
            return Object.assign({ responseName: field.alias || field.name, fieldName: field.name, type,
                args,
                isConditional,
                conditions,
                description,
                isDeprecated,
                deprecationReason }, selectionSet ? this.transformSelectionSetToLegacyIR(selectionSet) : {});
        });
    }
    collectFragmentSpreads(selectionSet, possibleTypes = selectionSet.possibleTypes) {
        const fragmentSpreads = [];
        for (const selection of selectionSet.selections) {
            switch (selection.kind) {
                case 'FragmentSpread':
                    fragmentSpreads.push(selection);
                    break;
                case 'TypeCondition':
                    if (possibleTypes.every(type => selection.selectionSet.possibleTypes.includes(type))) {
                        fragmentSpreads.push(...this.collectFragmentSpreads(selection.selectionSet, possibleTypes));
                    }
                    break;
                case 'BooleanCondition':
                    fragmentSpreads.push(...this.collectFragmentSpreads(selection.selectionSet, possibleTypes));
                    break;}

        }
        return Array.from(new Set(fragmentSpreads));
    }}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,