{"version":3,"sources":["serializeToJSON.ts"],"names":[],"mappings":";;AAAA,MAAA,YAAA,QAAA,SAAA,CAAA;AAUA,SAAA,eAAA,CAAwC,OAAxC,EAAsE;AACpE,WAAO,aAAa;AAClB,oBAAY,OAAO,MAAP,CAAc,QAAQ,UAAtB,CADM;AAElB,mBAAW,OAAO,MAAP,CAAc,QAAQ,SAAtB,CAFO;AAGlB,mBAAW,QAAQ,SAAR,CAAkB,GAAlB,CAAsB,aAAtB,CAHO,EAAb;AAIJ,QAJI,CAAP;AAKD;AAND,QAAA,OAAA,GAAA,eAAA;AAQA,SAAA,YAAA,CAA6B,GAA7B,EAAuC,KAAvC,EAAqD;AACnD,WAAO,KAAK,SAAL,CAAe,GAAf,EAAoB,UAAS,CAAT,EAAY,KAAZ,EAAiB;AAC1C,YAAI,UAAA,MAAA,CAAO,KAAP,CAAJ,EAAmB;AACjB,mBAAO,OAAO,KAAP,CAAP;AACD,SAFD;AAEO;AACL,mBAAO,KAAP;AACD;AACF,KANM,EAMJ,KANI,CAAP;AAOD;AARD,QAAA,YAAA,GAAA,YAAA;AAUA,SAAA,aAAA,CAAuB,IAAvB,EAAwC;AACtC,QAAI,gBAAgB,UAAA,eAApB,EAAqC;AACnC,eAAO,kBAAkB,IAAlB,CAAP;AACD,KAFD;AAEO,QAAI,gBAAgB,UAAA,sBAApB,EAA4C;AACjD,eAAO,yBAAyB,IAAzB,CAAP;AACD,KAFM;AAEA,QAAI,gBAAgB,UAAA,iBAApB,EAAuC;AAC5C,eAAO,oBAAoB,IAApB,CAAP;AACD,KAFM;AAEA;AACL,cAAM,IAAI,KAAJ,CAAU,4BAA4B,IAAI,EAA1C,CAAN;AACD;AACF;AAED,SAAA,iBAAA,CAA2B,IAA3B,EAAgD;AAC9C,UAAM,EAAE,IAAF,EAAQ,WAAR,KAAwB,IAA9B;AACA,UAAM,SAAS,KAAK,SAAL,EAAf;AAEA,WAAO;AACL,cAAM,UADD;AAEL,YAFK;AAGL,mBAHK;AAIL,gBAAQ,OAAO,GAAP,CAAW,UACjB;AACE,kBAAM,MAAM,IADd;AAEE,yBAAa,MAAM,WAFrB;AAGE,0BAAc,MAAM,YAHtB;AAIE,+BAAmB,MAAM,iBAJ3B,EADiB,CAAX,CAJH,EAAP;;;AAaD;AAED,SAAA,wBAAA,CAAkC,IAAlC,EAA8D;AAC5D,UAAM,EAAE,IAAF,EAAQ,WAAR,KAAwB,IAA9B;AACA,UAAM,SAAS,OAAO,MAAP,CAAc,KAAK,SAAL,EAAd,CAAf;AAEA,WAAO;AACL,cAAM,iBADD;AAEL,YAFK;AAGL,mBAHK;AAIL,gBAAQ,OAAO,GAAP,CAAW,UAAU;AAC3B,kBAAM,MAAM,IADe;AAE3B,kBAAM,OAAO,MAAM,IAAb,CAFqB;AAG3B,yBAAa,MAAM,WAHQ;AAI3B,0BAAc,MAAM,YAJO,EAAV,CAAX,CAJH,EAAP;;;AAWD;AAED,SAAA,mBAAA,CAA6B,IAA7B,EAAoD;AAClD,UAAM,EAAE,IAAF,EAAQ,WAAR,KAAwB,IAA9B;AAEA,WAAO;AACL,cAAM,YADD;AAEL,YAFK;AAGL,mBAHK,EAAP;;AAKD","sourcesContent":["import {\n  isType,\n  GraphQLType,\n  GraphQLScalarType,\n  GraphQLEnumType,\n  GraphQLInputObjectType,\n} from 'graphql';\n\nimport { LegacyCompilerContext } from './compiler/legacyIR';\n\nexport default function serializeToJSON(context: LegacyCompilerContext) {\n  return serializeAST({\n    operations: Object.values(context.operations),\n    fragments: Object.values(context.fragments),\n    typesUsed: context.typesUsed.map(serializeType),\n  }, '\\t');\n}\n\nexport function serializeAST(ast: any, space?: string) {\n  return JSON.stringify(ast, function(_, value) {\n    if (isType(value)) {\n      return String(value);\n    } else {\n      return value;\n    }\n  }, space);\n}\n\nfunction serializeType(type: GraphQLType) {\n  if (type instanceof GraphQLEnumType) {\n    return serializeEnumType(type);\n  } else if (type instanceof GraphQLInputObjectType) {\n    return serializeInputObjectType(type);\n  } else if (type instanceof GraphQLScalarType) {\n    return serializeScalarType(type);\n  } else {\n    throw new Error(`Unexpected GraphQL type: ${type}`);\n  }\n}\n\nfunction serializeEnumType(type: GraphQLEnumType) {\n  const { name, description } = type;\n  const values = type.getValues();\n\n  return {\n    kind: 'EnumType',\n    name,\n    description,\n    values: values.map(value => (\n      {\n        name: value.name,\n        description: value.description,\n        isDeprecated: value.isDeprecated,\n        deprecationReason: value.deprecationReason\n      }\n    ))\n  }\n}\n\nfunction serializeInputObjectType(type: GraphQLInputObjectType) {\n  const { name, description } = type;\n  const fields = Object.values(type.getFields());\n\n  return {\n    kind: 'InputObjectType',\n    name,\n    description,\n    fields: fields.map(field => ({\n      name: field.name,\n      type: String(field.type),\n      description: field.description,\n      defaultValue: field.defaultValue\n    }))\n  }\n}\n\nfunction serializeScalarType(type: GraphQLScalarType) {\n  const { name, description } = type;\n\n  return {\n    kind: 'ScalarType',\n    name,\n    description\n  }\n}\n"],"sourceRoot":""}