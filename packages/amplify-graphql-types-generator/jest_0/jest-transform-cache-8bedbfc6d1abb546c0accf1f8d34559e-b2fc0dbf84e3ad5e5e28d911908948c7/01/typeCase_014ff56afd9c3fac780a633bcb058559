4b3e47c72341615441ecb224edc840c8
'use strict';require('ts-jest').install("/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-types-generator/src/compiler/visitors/typeCase.ts", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst util_1 = require(\"util\");\nconst collectAndMergeFields_1 = require(\"./collectAndMergeFields\");\nclass Variant {\n    constructor(possibleTypes, selections = [], fragmentSpreads = []) {\n        this.possibleTypes = possibleTypes;\n        this.selections = selections;\n        this.fragmentSpreads = fragmentSpreads;\n    }\n    get fields() {\n        return collectAndMergeFields_1.collectAndMergeFields(this);\n    }\n    inspect() {\n        return `${util_1.inspect(this.possibleTypes)} -> ${util_1.inspect(collectAndMergeFields_1.collectAndMergeFields(this, false).map(field => field.responseKey))} ${util_1.inspect(this.fragmentSpreads.map(fragmentSpread => fragmentSpread.fragmentName))}\\n`;\n    }\n}\nexports.Variant = Variant;\nfunction typeCaseForSelectionSet(selectionSet, mergeInFragmentSpreads = true) {\n    const typeCase = new TypeCase(selectionSet.possibleTypes);\n    for (const selection of selectionSet.selections) {\n        switch (selection.kind) {\n            case 'Field':\n                for (const variant of typeCase.disjointVariantsFor(selectionSet.possibleTypes)) {\n                    variant.selections.push(selection);\n                }\n                break;\n            case 'FragmentSpread':\n                if (typeCase.default.fragmentSpreads.some(fragmentSpread => fragmentSpread.fragmentName === selection.fragmentName))\n                    continue;\n                for (const variant of typeCase.disjointVariantsFor(selectionSet.possibleTypes)) {\n                    variant.fragmentSpreads.push(selection);\n                    if (!mergeInFragmentSpreads) {\n                        variant.selections.push(selection);\n                    }\n                }\n                if (mergeInFragmentSpreads) {\n                    typeCase.merge(typeCaseForSelectionSet({\n                        possibleTypes: selectionSet.possibleTypes.filter(type => selection.selectionSet.possibleTypes.includes(type)),\n                        selections: selection.selectionSet.selections\n                    }, mergeInFragmentSpreads));\n                }\n                break;\n            case 'TypeCondition':\n                typeCase.merge(typeCaseForSelectionSet({\n                    possibleTypes: selectionSet.possibleTypes.filter(type => selection.selectionSet.possibleTypes.includes(type)),\n                    selections: selection.selectionSet.selections\n                }, mergeInFragmentSpreads));\n                break;\n            case 'BooleanCondition':\n                typeCase.merge(typeCaseForSelectionSet(selection.selectionSet, mergeInFragmentSpreads), selectionSet => [\n                    Object.assign({}, selection, { selectionSet })\n                ]);\n                break;\n        }\n    }\n    return typeCase;\n}\nexports.typeCaseForSelectionSet = typeCaseForSelectionSet;\nclass TypeCase {\n    get variants() {\n        return Array.from(new Set(this.variantsByType.values()));\n    }\n    get defaultAndVariants() {\n        return [this.default, ...this.variants];\n    }\n    get remainder() {\n        if (this.default.possibleTypes.some(type => !this.variantsByType.has(type))) {\n            return new Variant(this.default.possibleTypes.filter(type => !this.variantsByType.has(type)), this.default.selections, this.default.fragmentSpreads);\n        }\n        else {\n            return undefined;\n        }\n    }\n    get exhaustiveVariants() {\n        const remainder = this.remainder;\n        if (remainder) {\n            return [remainder, ...this.variants];\n        }\n        else {\n            return this.variants;\n        }\n    }\n    constructor(possibleTypes) {\n        this.default = new Variant(possibleTypes);\n        this.variantsByType = new Map();\n    }\n    disjointVariantsFor(possibleTypes) {\n        const variants = [];\n        const matchesDefault = this.default.possibleTypes.every(type => possibleTypes.includes(type));\n        if (matchesDefault) {\n            variants.push(this.default);\n        }\n        const splits = new Map();\n        for (const type of possibleTypes) {\n            let original = this.variantsByType.get(type);\n            if (!original) {\n                if (matchesDefault)\n                    continue;\n                original = this.default;\n            }\n            let split = splits.get(original);\n            if (!split) {\n                split = new Variant([], [...original.selections], [...original.fragmentSpreads]);\n                splits.set(original, split);\n                variants.push(split);\n            }\n            if (original !== this.default) {\n                original.possibleTypes.splice(original.possibleTypes.indexOf(type), 1);\n            }\n            this.variantsByType.set(type, split);\n            split.possibleTypes.push(type);\n        }\n        return variants;\n    }\n    merge(otherTypeCase, transform) {\n        for (const otherVariant of otherTypeCase.defaultAndVariants) {\n            if (otherVariant.selections.length < 1)\n                continue;\n            for (const variant of this.disjointVariantsFor(otherVariant.possibleTypes)) {\n                if (otherVariant.fragmentSpreads.length > 0) {\n                    variant.fragmentSpreads = [...variant.fragmentSpreads, ...otherVariant.fragmentSpreads].filter((a, index, array) => array.findIndex(b => b.fragmentName == a.fragmentName) == index);\n                }\n                variant.selections.push(...(transform ? transform(otherVariant) : otherVariant.selections));\n            }\n        }\n    }\n    inspect() {\n        return (`TypeCase\\n` +\n            `  default -> ${util_1.inspect(this.default)}\\n` +\n            this.variants.map(variant => `  ${util_1.inspect(variant)}\\n`).join(''));\n    }\n}\nexports.TypeCase = TypeCase;\n//# sourceMappingURL=data:application/json;base64,");"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("util");
const collectAndMergeFields_1 = require("./collectAndMergeFields");
class Variant {
    constructor(possibleTypes, selections = [], fragmentSpreads = []) {
        this.possibleTypes = possibleTypes;
        this.selections = selections;
        this.fragmentSpreads = fragmentSpreads;
    }
    get fields() {
        return collectAndMergeFields_1.collectAndMergeFields(this);
    }
    inspect() {
        return `${util_1.inspect(this.possibleTypes)} -> ${util_1.inspect(collectAndMergeFields_1.collectAndMergeFields(this, false).map(field => field.responseKey))} ${util_1.inspect(this.fragmentSpreads.map(fragmentSpread => fragmentSpread.fragmentName))}\n`;
    }}

exports.Variant = Variant;
function typeCaseForSelectionSet(selectionSet, mergeInFragmentSpreads = true) {
    const typeCase = new TypeCase(selectionSet.possibleTypes);
    for (const selection of selectionSet.selections) {
        switch (selection.kind) {
            case 'Field':
                for (const variant of typeCase.disjointVariantsFor(selectionSet.possibleTypes)) {
                    variant.selections.push(selection);
                }
                break;
            case 'FragmentSpread':
                if (typeCase.default.fragmentSpreads.some(fragmentSpread => fragmentSpread.fragmentName === selection.fragmentName))
                continue;
                for (const variant of typeCase.disjointVariantsFor(selectionSet.possibleTypes)) {
                    variant.fragmentSpreads.push(selection);
                    if (!mergeInFragmentSpreads) {
                        variant.selections.push(selection);
                    }
                }
                if (mergeInFragmentSpreads) {
                    typeCase.merge(typeCaseForSelectionSet({
                        possibleTypes: selectionSet.possibleTypes.filter(type => selection.selectionSet.possibleTypes.includes(type)),
                        selections: selection.selectionSet.selections },
                    mergeInFragmentSpreads));
                }
                break;
            case 'TypeCondition':
                typeCase.merge(typeCaseForSelectionSet({
                    possibleTypes: selectionSet.possibleTypes.filter(type => selection.selectionSet.possibleTypes.includes(type)),
                    selections: selection.selectionSet.selections },
                mergeInFragmentSpreads));
                break;
            case 'BooleanCondition':
                typeCase.merge(typeCaseForSelectionSet(selection.selectionSet, mergeInFragmentSpreads), selectionSet => [
                Object.assign({}, selection, { selectionSet })]);

                break;}

    }
    return typeCase;
}
exports.typeCaseForSelectionSet = typeCaseForSelectionSet;
class TypeCase {
    get variants() {
        return Array.from(new Set(this.variantsByType.values()));
    }
    get defaultAndVariants() {
        return [this.default, ...this.variants];
    }
    get remainder() {
        if (this.default.possibleTypes.some(type => !this.variantsByType.has(type))) {
            return new Variant(this.default.possibleTypes.filter(type => !this.variantsByType.has(type)), this.default.selections, this.default.fragmentSpreads);
        } else
        {
            return undefined;
        }
    }
    get exhaustiveVariants() {
        const remainder = this.remainder;
        if (remainder) {
            return [remainder, ...this.variants];
        } else
        {
            return this.variants;
        }
    }
    constructor(possibleTypes) {
        this.default = new Variant(possibleTypes);
        this.variantsByType = new Map();
    }
    disjointVariantsFor(possibleTypes) {
        const variants = [];
        const matchesDefault = this.default.possibleTypes.every(type => possibleTypes.includes(type));
        if (matchesDefault) {
            variants.push(this.default);
        }
        const splits = new Map();
        for (const type of possibleTypes) {
            let original = this.variantsByType.get(type);
            if (!original) {
                if (matchesDefault)
                continue;
                original = this.default;
            }
            let split = splits.get(original);
            if (!split) {
                split = new Variant([], [...original.selections], [...original.fragmentSpreads]);
                splits.set(original, split);
                variants.push(split);
            }
            if (original !== this.default) {
                original.possibleTypes.splice(original.possibleTypes.indexOf(type), 1);
            }
            this.variantsByType.set(type, split);
            split.possibleTypes.push(type);
        }
        return variants;
    }
    merge(otherTypeCase, transform) {
        for (const otherVariant of otherTypeCase.defaultAndVariants) {
            if (otherVariant.selections.length < 1)
            continue;
            for (const variant of this.disjointVariantsFor(otherVariant.possibleTypes)) {
                if (otherVariant.fragmentSpreads.length > 0) {
                    variant.fragmentSpreads = [...variant.fragmentSpreads, ...otherVariant.fragmentSpreads].filter((a, index, array) => array.findIndex(b => b.fragmentName == a.fragmentName) == index);
                }
                variant.selections.push(...(transform ? transform(otherVariant) : otherVariant.selections));
            }
        }
    }
    inspect() {
        return `TypeCase\n` +
        `  default -> ${util_1.inspect(this.default)}\n` +
        this.variants.map(variant => `  ${util_1.inspect(variant)}\n`).join('');
    }}

exports.TypeCase = TypeCase;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,