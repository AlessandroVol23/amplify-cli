{"version":3,"sources":["typeCase.ts"],"names":[],"mappings":"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","sourcesContent":["import { buildSchema } from 'graphql';\nimport { compile } from '../../test-utils/helpers';\n\nimport { SelectionSet, Field } from '../../../src/compiler';\nimport { typeCaseForSelectionSet } from '../../../src/compiler/visitors/typeCase';\nimport { collectAndMergeFields } from '../../../src/compiler/visitors/collectAndMergeFields';\n\nexport const animalSchema = buildSchema(`\n  type Query {\n    animal: Animal\n    catOrBird: CatOrBird\n  }\n\n  union Animal = Cat | Bird | Crocodile | Fish\n  union CatOrBird = Cat | Bird\n\n  interface Pet {\n    name: String!\n  }\n\n  interface WarmBlooded {\n    bodyTemperature: Int!\n  }\n\n  type Cat implements Pet & WarmBlooded {\n    name: String!\n    bodyTemperature: Int!\n  }\n\n  type Bird implements Pet & WarmBlooded {\n    name: String!\n    bodyTemperature: Int!\n  }\n\n  type Fish implements Pet {\n    name: String!\n  }\n\n  type Crocodile {\n    age: Int!\n  }\n`);\n\ndescribe('TypeCase', () => {\n  it('should recursively include inline fragments with type conditions that match the parent type', () => {\n    const context = compile(`\n      query Hero {\n        hero {\n          id\n          ... on Character {\n            name\n            ... on Character {\n              id\n              appearsIn\n            }\n            id\n          }\n        }\n      }\n    `);\n\n    const selectionSet = (context.operations['Hero'].selectionSet.selections[0] as Field)\n      .selectionSet as SelectionSet;\n    const typeCase = typeCaseForSelectionSet(selectionSet);\n\n    expect(typeCase.default).toMatchSelectionSet(['Human', 'Droid'], ['id', 'name', 'appearsIn']);\n\n    expect(typeCase.variants).toHaveLength(0);\n\n    expect(typeCase.exhaustiveVariants).toHaveLength(1);\n    expect(typeCase.exhaustiveVariants).toContainSelectionSetMatching(\n      ['Human', 'Droid'],\n      ['id', 'name', 'appearsIn']\n    );\n  });\n\n  it('should recursively include fragment spreads with type conditions that match the parent type', () => {\n    const context = compile(`\n      query Hero {\n        hero {\n          id\n          ...HeroDetails\n        }\n      }\n\n      fragment HeroDetails on Character {\n        name\n        ...MoreHeroDetails\n        id\n      }\n\n      fragment MoreHeroDetails on Character {\n        appearsIn\n      }\n    `);\n\n    const selectionSet = (context.operations['Hero'].selectionSet.selections[0] as Field)\n      .selectionSet as SelectionSet;\n    const typeCase = typeCaseForSelectionSet(selectionSet);\n\n    expect(typeCase.default).toMatchSelectionSet(['Human', 'Droid'], ['id', 'name', 'appearsIn']);\n    expect(typeCase.default.fragmentSpreads.map(fragmentSpread => fragmentSpread.fragmentName)).toEqual(['HeroDetails', 'MoreHeroDetails']);\n\n    expect(typeCase.variants).toHaveLength(0);\n\n    expect(typeCase.exhaustiveVariants).toHaveLength(1);\n    expect(typeCase.exhaustiveVariants).toContainSelectionSetMatching(\n      ['Human', 'Droid'],\n      ['id', 'name', 'appearsIn']\n    );\n  });\n\n  it('should include fragment spreads when nested within inline fragments', () => {\n    const context = compile(`\n      query Hero {\n        hero {\n          ... on Character {\n            ...CharacterName\n          }\n        }\n      }\n\n      fragment CharacterName on Character {\n        name\n      }\n    `);\n\n    const selectionSet = (context.operations['Hero'].selectionSet.selections[0] as Field)\n      .selectionSet as SelectionSet;\n    const typeCase = typeCaseForSelectionSet(selectionSet);\n\n    expect(typeCase.default).toMatchSelectionSet(['Human', 'Droid'], ['name']);\n    expect(typeCase.default.fragmentSpreads.map(fragmentSpread => fragmentSpread.fragmentName)).toEqual(['CharacterName']);\n\n    expect(typeCase.variants).toHaveLength(0);\n  });\n\n  it('should only include fragment spreads once even if included twice in different subselections', () => {\n    const context = compile(`\n      query Hero {\n        hero {\n          friends {\n            ...CharacterName\n          }\n          ... on Droid {\n            friends {\n              ...CharacterName\n            }\n          }\n        }\n      }\n\n      fragment CharacterName on Character {\n        name\n      }\n    `);\n\n    const selectionSet = (context.operations['Hero'].selectionSet.selections[0] as Field)\n      .selectionSet as SelectionSet;\n    const typeCase = typeCaseForSelectionSet(collectAndMergeFields(typeCaseForSelectionSet(selectionSet).variants[0])[0].selectionSet as SelectionSet);\n\n    expect(typeCase.default).toMatchSelectionSet(['Human', 'Droid'], ['name']);\n    expect(typeCase.default.fragmentSpreads.map(fragmentSpread => fragmentSpread.fragmentName)).toEqual(['CharacterName']);\n  });\n\n  it('should ignore type modifiers when matching the parent type', () => {\n    const schema = buildSchema(`\n      type Query {\n        heroes: [Character]\n      }\n\n      interface Character {\n        name: String!\n      }\n\n      type Human implements Character {\n        name: String!\n      }\n\n      type Droid implements Character {\n        name: String!\n      }\n    `);\n\n    const context = compile(\n      `\n      query Hero {\n        heroes {\n          ... on Character {\n            name\n          }\n        }\n      }\n    `,\n      schema\n    );\n\n    const selectionSet = (context.operations['Hero'].selectionSet.selections[0] as Field)\n      .selectionSet as SelectionSet;\n    const typeCase = typeCaseForSelectionSet(selectionSet);\n\n    expect(typeCase.default).toMatchSelectionSet(['Human', 'Droid'], ['name']);\n\n    expect(typeCase.variants).toHaveLength(0);\n\n    expect(typeCase.exhaustiveVariants).toHaveLength(1);\n    expect(typeCase.exhaustiveVariants).toContainSelectionSetMatching(['Human', 'Droid'], ['name']);\n  });\n\n  it('should merge fields from the default case into type conditions', () => {\n    const context = compile(`\n      query Hero {\n        hero {\n          name\n          ... on Droid {\n            primaryFunction\n          }\n          appearsIn\n          ... on Human {\n            height\n          }\n        }\n      }\n    `);\n\n    const selectionSet = (context.operations['Hero'].selectionSet.selections[0] as Field)\n      .selectionSet as SelectionSet;\n    const typeCase = typeCaseForSelectionSet(selectionSet);\n\n    expect(typeCase.default).toMatchSelectionSet(['Human', 'Droid'], ['name', 'appearsIn']);\n\n    expect(typeCase.variants).toHaveLength(2);\n    expect(typeCase.variants).toContainSelectionSetMatching(\n      ['Droid'],\n      ['name', 'primaryFunction', 'appearsIn']\n    );\n    expect(typeCase.variants).toContainSelectionSetMatching(['Human'], ['name', 'appearsIn', 'height']);\n\n    expect(typeCase.exhaustiveVariants).toHaveLength(2);\n    expect(typeCase.exhaustiveVariants).toContainSelectionSetMatching(\n      ['Droid'],\n      ['name', 'primaryFunction', 'appearsIn']\n    );\n    expect(typeCase.exhaustiveVariants).toContainSelectionSetMatching(\n      ['Human'],\n      ['name', 'appearsIn', 'height']\n    );\n  });\n\n  it(`should merge fields from type conditions with the same type`, () => {\n    const context = compile(`\n      query Hero {\n        hero {\n          name\n          ... on Droid {\n            primaryFunction\n          }\n          ... on Droid {\n            appearsIn\n          }\n        }\n      }\n    `);\n\n    const selectionSet = (context.operations['Hero'].selectionSet.selections[0] as Field)\n      .selectionSet as SelectionSet;\n    const typeCase = typeCaseForSelectionSet(selectionSet);\n\n    expect(typeCase.default).toMatchSelectionSet(['Human', 'Droid'], ['name']);\n\n    expect(typeCase.variants).toHaveLength(1);\n    expect(typeCase.variants).toContainSelectionSetMatching(\n      ['Droid'],\n      ['name', 'primaryFunction', 'appearsIn']\n    );\n\n    expect(typeCase.exhaustiveVariants).toHaveLength(2);\n    expect(typeCase.exhaustiveVariants).toContainSelectionSetMatching(\n      ['Droid'],\n      ['name', 'primaryFunction', 'appearsIn']\n    );\n    expect(typeCase.exhaustiveVariants).toContainSelectionSetMatching(['Human'], ['name']);\n  });\n\n  it('should inherit type condition when nesting an inline fragment in an inline fragment with a more specific type condition', () => {\n    const context = compile(`\n      query Hero {\n        hero {\n          ... on Droid {\n            ... on Character {\n              name\n            }\n          }\n        }\n      }\n    `);\n\n    const selectionSet = (context.operations['Hero'].selectionSet.selections[0] as Field)\n      .selectionSet as SelectionSet;\n    const typeCase = typeCaseForSelectionSet(selectionSet);\n\n    expect(typeCase.default).toMatchSelectionSet(['Human', 'Droid'], []);\n\n    expect(typeCase.variants).toHaveLength(1);\n    expect(typeCase.variants).toContainSelectionSetMatching(['Droid'], ['name']);\n\n    expect(typeCase.exhaustiveVariants).toHaveLength(2);\n    expect(typeCase.exhaustiveVariants).toContainSelectionSetMatching(['Droid'], ['name']);\n    expect(typeCase.exhaustiveVariants).toContainSelectionSetMatching(['Human'], []);\n  });\n\n  it('should not inherit type condition when nesting an inline fragment in an inline fragment with a less specific type condition', () => {\n    const context = compile(`\n      query Hero {\n        hero {\n          ... on Character {\n            ... on Droid {\n              name\n            }\n          }\n        }\n      }\n    `);\n\n    const selectionSet = (context.operations['Hero'].selectionSet.selections[0] as Field)\n      .selectionSet as SelectionSet;\n    const typeCase = typeCaseForSelectionSet(selectionSet);\n\n    expect(typeCase.default).toMatchSelectionSet(['Human', 'Droid'], []);\n\n    expect(typeCase.variants).toHaveLength(1);\n    expect(typeCase.variants).toContainSelectionSetMatching(['Droid'], ['name']);\n\n    expect(typeCase.exhaustiveVariants).toHaveLength(2);\n    expect(typeCase.exhaustiveVariants).toContainSelectionSetMatching(['Droid'], ['name']);\n    expect(typeCase.exhaustiveVariants).toContainSelectionSetMatching(['Human'], []);\n  });\n\n  it('should merge fields from the parent case into nested type conditions', () => {\n    const context = compile(\n      `\n      query Animal {\n        animal {\n          ... on Pet {\n            name\n            ... on WarmBlooded {\n              bodyTemperature\n            }\n          }\n        }\n      }\n    `,\n      animalSchema\n    );\n\n    const selectionSet = (context.operations['Animal'].selectionSet.selections[0] as Field)\n      .selectionSet as SelectionSet;\n    const typeCase = typeCaseForSelectionSet(selectionSet);\n\n    expect(typeCase.default).toMatchSelectionSet(['Cat', 'Bird', 'Fish', 'Crocodile'], []);\n\n    expect(typeCase.variants).toHaveLength(2);\n    expect(typeCase.variants).toContainSelectionSetMatching(['Cat', 'Bird'], ['name', 'bodyTemperature']);\n    expect(typeCase.variants).toContainSelectionSetMatching(['Fish'], ['name']);\n\n    expect(typeCase.exhaustiveVariants).toHaveLength(3);\n    expect(typeCase.exhaustiveVariants).toContainSelectionSetMatching(\n      ['Cat', 'Bird'],\n      ['name', 'bodyTemperature']\n    );\n    expect(typeCase.exhaustiveVariants).toContainSelectionSetMatching(['Fish'], ['name']);\n    expect(typeCase.exhaustiveVariants).toContainSelectionSetMatching(['Crocodile'], []);\n  });\n\n  it('should merge fields from the parent case into nested type conditions', () => {\n    const context = compile(\n      `\n      query Animal {\n        animal {\n          ... on Pet {\n            name\n            ... on WarmBlooded {\n              bodyTemperature\n            }\n          }\n          ... on WarmBlooded {\n            bodyTemperature\n            ... on Pet {\n              name\n            }\n          }\n        }\n      }\n    `,\n      animalSchema\n    );\n\n    const selectionSet = (context.operations['Animal'].selectionSet.selections[0] as Field)\n      .selectionSet as SelectionSet;\n    const typeCase = typeCaseForSelectionSet(selectionSet);\n\n    expect(typeCase.default).toMatchSelectionSet(['Cat', 'Bird', 'Fish', 'Crocodile'], []);\n\n    expect(typeCase.variants).toHaveLength(2);\n    expect(typeCase.variants).toContainSelectionSetMatching(['Cat', 'Bird'], ['name', 'bodyTemperature']);\n    expect(typeCase.variants).toContainSelectionSetMatching(['Fish'], ['name']);\n\n    expect(typeCase.exhaustiveVariants).toHaveLength(3);\n    expect(typeCase.exhaustiveVariants).toContainSelectionSetMatching(\n      ['Cat', 'Bird'],\n      ['name', 'bodyTemperature']\n    );\n    expect(typeCase.exhaustiveVariants).toContainSelectionSetMatching(['Fish'], ['name']);\n    expect(typeCase.exhaustiveVariants).toContainSelectionSetMatching(['Crocodile'], []);\n  });\n\n  it('should not keep type conditions when all possible objects match', () => {\n    const context = compile(\n      `\n      query Animal {\n        catOrBird {\n          ... on Pet {\n            name\n            ... on WarmBlooded {\n              bodyTemperature\n            }\n          }\n        }\n      }\n    `,\n      animalSchema\n    );\n\n    const selectionSet = (context.operations['Animal'].selectionSet.selections[0] as Field)\n      .selectionSet as SelectionSet;\n    const typeCase = typeCaseForSelectionSet(selectionSet);\n\n    expect(typeCase.default).toMatchSelectionSet(['Cat', 'Bird'], ['name', 'bodyTemperature']);\n    expect(typeCase.variants).toHaveLength(0);\n\n    expect(typeCase.exhaustiveVariants).toHaveLength(1);\n    expect(typeCase.exhaustiveVariants).toContainSelectionSetMatching(\n      ['Cat', 'Bird'],\n      ['name', 'bodyTemperature']\n    );\n  });\n});\n"],"sourceRoot":""}