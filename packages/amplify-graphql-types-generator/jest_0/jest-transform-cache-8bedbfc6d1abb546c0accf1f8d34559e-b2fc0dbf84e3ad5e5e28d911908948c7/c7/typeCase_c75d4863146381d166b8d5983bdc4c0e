b2026c53a3594633dca944f0d587ea3a
'use strict';require('ts-jest').install("/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-types-generator/test/compiler/visitors/typeCase.ts", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst graphql_1 = require(\"graphql\");\nconst helpers_1 = require(\"../../test-utils/helpers\");\nconst typeCase_1 = require(\"../../../src/compiler/visitors/typeCase\");\nconst collectAndMergeFields_1 = require(\"../../../src/compiler/visitors/collectAndMergeFields\");\nexports.animalSchema = graphql_1.buildSchema(`\n  type Query {\n    animal: Animal\n    catOrBird: CatOrBird\n  }\n\n  union Animal = Cat | Bird | Crocodile | Fish\n  union CatOrBird = Cat | Bird\n\n  interface Pet {\n    name: String!\n  }\n\n  interface WarmBlooded {\n    bodyTemperature: Int!\n  }\n\n  type Cat implements Pet & WarmBlooded {\n    name: String!\n    bodyTemperature: Int!\n  }\n\n  type Bird implements Pet & WarmBlooded {\n    name: String!\n    bodyTemperature: Int!\n  }\n\n  type Fish implements Pet {\n    name: String!\n  }\n\n  type Crocodile {\n    age: Int!\n  }\n`);\ndescribe('TypeCase', () => {\n    it('should recursively include inline fragments with type conditions that match the parent type', () => {\n        const context = helpers_1.compile(`\n      query Hero {\n        hero {\n          id\n          ... on Character {\n            name\n            ... on Character {\n              id\n              appearsIn\n            }\n            id\n          }\n        }\n      }\n    `);\n        const selectionSet = context.operations['Hero'].selectionSet.selections[0]\n            .selectionSet;\n        const typeCase = typeCase_1.typeCaseForSelectionSet(selectionSet);\n        expect(typeCase.default).toMatchSelectionSet(['Human', 'Droid'], ['id', 'name', 'appearsIn']);\n        expect(typeCase.variants).toHaveLength(0);\n        expect(typeCase.exhaustiveVariants).toHaveLength(1);\n        expect(typeCase.exhaustiveVariants).toContainSelectionSetMatching(['Human', 'Droid'], ['id', 'name', 'appearsIn']);\n    });\n    it('should recursively include fragment spreads with type conditions that match the parent type', () => {\n        const context = helpers_1.compile(`\n      query Hero {\n        hero {\n          id\n          ...HeroDetails\n        }\n      }\n\n      fragment HeroDetails on Character {\n        name\n        ...MoreHeroDetails\n        id\n      }\n\n      fragment MoreHeroDetails on Character {\n        appearsIn\n      }\n    `);\n        const selectionSet = context.operations['Hero'].selectionSet.selections[0]\n            .selectionSet;\n        const typeCase = typeCase_1.typeCaseForSelectionSet(selectionSet);\n        expect(typeCase.default).toMatchSelectionSet(['Human', 'Droid'], ['id', 'name', 'appearsIn']);\n        expect(typeCase.default.fragmentSpreads.map(fragmentSpread => fragmentSpread.fragmentName)).toEqual(['HeroDetails', 'MoreHeroDetails']);\n        expect(typeCase.variants).toHaveLength(0);\n        expect(typeCase.exhaustiveVariants).toHaveLength(1);\n        expect(typeCase.exhaustiveVariants).toContainSelectionSetMatching(['Human', 'Droid'], ['id', 'name', 'appearsIn']);\n    });\n    it('should include fragment spreads when nested within inline fragments', () => {\n        const context = helpers_1.compile(`\n      query Hero {\n        hero {\n          ... on Character {\n            ...CharacterName\n          }\n        }\n      }\n\n      fragment CharacterName on Character {\n        name\n      }\n    `);\n        const selectionSet = context.operations['Hero'].selectionSet.selections[0]\n            .selectionSet;\n        const typeCase = typeCase_1.typeCaseForSelectionSet(selectionSet);\n        expect(typeCase.default).toMatchSelectionSet(['Human', 'Droid'], ['name']);\n        expect(typeCase.default.fragmentSpreads.map(fragmentSpread => fragmentSpread.fragmentName)).toEqual(['CharacterName']);\n        expect(typeCase.variants).toHaveLength(0);\n    });\n    it('should only include fragment spreads once even if included twice in different subselections', () => {\n        const context = helpers_1.compile(`\n      query Hero {\n        hero {\n          friends {\n            ...CharacterName\n          }\n          ... on Droid {\n            friends {\n              ...CharacterName\n            }\n          }\n        }\n      }\n\n      fragment CharacterName on Character {\n        name\n      }\n    `);\n        const selectionSet = context.operations['Hero'].selectionSet.selections[0]\n            .selectionSet;\n        const typeCase = typeCase_1.typeCaseForSelectionSet(collectAndMergeFields_1.collectAndMergeFields(typeCase_1.typeCaseForSelectionSet(selectionSet).variants[0])[0].selectionSet);\n        expect(typeCase.default).toMatchSelectionSet(['Human', 'Droid'], ['name']);\n        expect(typeCase.default.fragmentSpreads.map(fragmentSpread => fragmentSpread.fragmentName)).toEqual(['CharacterName']);\n    });\n    it('should ignore type modifiers when matching the parent type', () => {\n        const schema = graphql_1.buildSchema(`\n      type Query {\n        heroes: [Character]\n      }\n\n      interface Character {\n        name: String!\n      }\n\n      type Human implements Character {\n        name: String!\n      }\n\n      type Droid implements Character {\n        name: String!\n      }\n    `);\n        const context = helpers_1.compile(`\n      query Hero {\n        heroes {\n          ... on Character {\n            name\n          }\n        }\n      }\n    `, schema);\n        const selectionSet = context.operations['Hero'].selectionSet.selections[0]\n            .selectionSet;\n        const typeCase = typeCase_1.typeCaseForSelectionSet(selectionSet);\n        expect(typeCase.default).toMatchSelectionSet(['Human', 'Droid'], ['name']);\n        expect(typeCase.variants).toHaveLength(0);\n        expect(typeCase.exhaustiveVariants).toHaveLength(1);\n        expect(typeCase.exhaustiveVariants).toContainSelectionSetMatching(['Human', 'Droid'], ['name']);\n    });\n    it('should merge fields from the default case into type conditions', () => {\n        const context = helpers_1.compile(`\n      query Hero {\n        hero {\n          name\n          ... on Droid {\n            primaryFunction\n          }\n          appearsIn\n          ... on Human {\n            height\n          }\n        }\n      }\n    `);\n        const selectionSet = context.operations['Hero'].selectionSet.selections[0]\n            .selectionSet;\n        const typeCase = typeCase_1.typeCaseForSelectionSet(selectionSet);\n        expect(typeCase.default).toMatchSelectionSet(['Human', 'Droid'], ['name', 'appearsIn']);\n        expect(typeCase.variants).toHaveLength(2);\n        expect(typeCase.variants).toContainSelectionSetMatching(['Droid'], ['name', 'primaryFunction', 'appearsIn']);\n        expect(typeCase.variants).toContainSelectionSetMatching(['Human'], ['name', 'appearsIn', 'height']);\n        expect(typeCase.exhaustiveVariants).toHaveLength(2);\n        expect(typeCase.exhaustiveVariants).toContainSelectionSetMatching(['Droid'], ['name', 'primaryFunction', 'appearsIn']);\n        expect(typeCase.exhaustiveVariants).toContainSelectionSetMatching(['Human'], ['name', 'appearsIn', 'height']);\n    });\n    it(`should merge fields from type conditions with the same type`, () => {\n        const context = helpers_1.compile(`\n      query Hero {\n        hero {\n          name\n          ... on Droid {\n            primaryFunction\n          }\n          ... on Droid {\n            appearsIn\n          }\n        }\n      }\n    `);\n        const selectionSet = context.operations['Hero'].selectionSet.selections[0]\n            .selectionSet;\n        const typeCase = typeCase_1.typeCaseForSelectionSet(selectionSet);\n        expect(typeCase.default).toMatchSelectionSet(['Human', 'Droid'], ['name']);\n        expect(typeCase.variants).toHaveLength(1);\n        expect(typeCase.variants).toContainSelectionSetMatching(['Droid'], ['name', 'primaryFunction', 'appearsIn']);\n        expect(typeCase.exhaustiveVariants).toHaveLength(2);\n        expect(typeCase.exhaustiveVariants).toContainSelectionSetMatching(['Droid'], ['name', 'primaryFunction', 'appearsIn']);\n        expect(typeCase.exhaustiveVariants).toContainSelectionSetMatching(['Human'], ['name']);\n    });\n    it('should inherit type condition when nesting an inline fragment in an inline fragment with a more specific type condition', () => {\n        const context = helpers_1.compile(`\n      query Hero {\n        hero {\n          ... on Droid {\n            ... on Character {\n              name\n            }\n          }\n        }\n      }\n    `);\n        const selectionSet = context.operations['Hero'].selectionSet.selections[0]\n            .selectionSet;\n        const typeCase = typeCase_1.typeCaseForSelectionSet(selectionSet);\n        expect(typeCase.default).toMatchSelectionSet(['Human', 'Droid'], []);\n        expect(typeCase.variants).toHaveLength(1);\n        expect(typeCase.variants).toContainSelectionSetMatching(['Droid'], ['name']);\n        expect(typeCase.exhaustiveVariants).toHaveLength(2);\n        expect(typeCase.exhaustiveVariants).toContainSelectionSetMatching(['Droid'], ['name']);\n        expect(typeCase.exhaustiveVariants).toContainSelectionSetMatching(['Human'], []);\n    });\n    it('should not inherit type condition when nesting an inline fragment in an inline fragment with a less specific type condition', () => {\n        const context = helpers_1.compile(`\n      query Hero {\n        hero {\n          ... on Character {\n            ... on Droid {\n              name\n            }\n          }\n        }\n      }\n    `);\n        const selectionSet = context.operations['Hero'].selectionSet.selections[0]\n            .selectionSet;\n        const typeCase = typeCase_1.typeCaseForSelectionSet(selectionSet);\n        expect(typeCase.default).toMatchSelectionSet(['Human', 'Droid'], []);\n        expect(typeCase.variants).toHaveLength(1);\n        expect(typeCase.variants).toContainSelectionSetMatching(['Droid'], ['name']);\n        expect(typeCase.exhaustiveVariants).toHaveLength(2);\n        expect(typeCase.exhaustiveVariants).toContainSelectionSetMatching(['Droid'], ['name']);\n        expect(typeCase.exhaustiveVariants).toContainSelectionSetMatching(['Human'], []);\n    });\n    it('should merge fields from the parent case into nested type conditions', () => {\n        const context = helpers_1.compile(`\n      query Animal {\n        animal {\n          ... on Pet {\n            name\n            ... on WarmBlooded {\n              bodyTemperature\n            }\n          }\n        }\n      }\n    `, exports.animalSchema);\n        const selectionSet = context.operations['Animal'].selectionSet.selections[0]\n            .selectionSet;\n        const typeCase = typeCase_1.typeCaseForSelectionSet(selectionSet);\n        expect(typeCase.default).toMatchSelectionSet(['Cat', 'Bird', 'Fish', 'Crocodile'], []);\n        expect(typeCase.variants).toHaveLength(2);\n        expect(typeCase.variants).toContainSelectionSetMatching(['Cat', 'Bird'], ['name', 'bodyTemperature']);\n        expect(typeCase.variants).toContainSelectionSetMatching(['Fish'], ['name']);\n        expect(typeCase.exhaustiveVariants).toHaveLength(3);\n        expect(typeCase.exhaustiveVariants).toContainSelectionSetMatching(['Cat', 'Bird'], ['name', 'bodyTemperature']);\n        expect(typeCase.exhaustiveVariants).toContainSelectionSetMatching(['Fish'], ['name']);\n        expect(typeCase.exhaustiveVariants).toContainSelectionSetMatching(['Crocodile'], []);\n    });\n    it('should merge fields from the parent case into nested type conditions', () => {\n        const context = helpers_1.compile(`\n      query Animal {\n        animal {\n          ... on Pet {\n            name\n            ... on WarmBlooded {\n              bodyTemperature\n            }\n          }\n          ... on WarmBlooded {\n            bodyTemperature\n            ... on Pet {\n              name\n            }\n          }\n        }\n      }\n    `, exports.animalSchema);\n        const selectionSet = context.operations['Animal'].selectionSet.selections[0]\n            .selectionSet;\n        const typeCase = typeCase_1.typeCaseForSelectionSet(selectionSet);\n        expect(typeCase.default).toMatchSelectionSet(['Cat', 'Bird', 'Fish', 'Crocodile'], []);\n        expect(typeCase.variants).toHaveLength(2);\n        expect(typeCase.variants).toContainSelectionSetMatching(['Cat', 'Bird'], ['name', 'bodyTemperature']);\n        expect(typeCase.variants).toContainSelectionSetMatching(['Fish'], ['name']);\n        expect(typeCase.exhaustiveVariants).toHaveLength(3);\n        expect(typeCase.exhaustiveVariants).toContainSelectionSetMatching(['Cat', 'Bird'], ['name', 'bodyTemperature']);\n        expect(typeCase.exhaustiveVariants).toContainSelectionSetMatching(['Fish'], ['name']);\n        expect(typeCase.exhaustiveVariants).toContainSelectionSetMatching(['Crocodile'], []);\n    });\n    it('should not keep type conditions when all possible objects match', () => {\n        const context = helpers_1.compile(`\n      query Animal {\n        catOrBird {\n          ... on Pet {\n            name\n            ... on WarmBlooded {\n              bodyTemperature\n            }\n          }\n        }\n      }\n    `, exports.animalSchema);\n        const selectionSet = context.operations['Animal'].selectionSet.selections[0]\n            .selectionSet;\n        const typeCase = typeCase_1.typeCaseForSelectionSet(selectionSet);\n        expect(typeCase.default).toMatchSelectionSet(['Cat', 'Bird'], ['name', 'bodyTemperature']);\n        expect(typeCase.variants).toHaveLength(0);\n        expect(typeCase.exhaustiveVariants).toHaveLength(1);\n        expect(typeCase.exhaustiveVariants).toContainSelectionSetMatching(['Cat', 'Bird'], ['name', 'bodyTemperature']);\n    });\n});\n//# sourceMappingURL=data:application/json;base64,");"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = require("graphql");
const helpers_1 = require("../../test-utils/helpers");
const typeCase_1 = require("../../../src/compiler/visitors/typeCase");
const collectAndMergeFields_1 = require("../../../src/compiler/visitors/collectAndMergeFields");
exports.animalSchema = graphql_1.buildSchema(`
  type Query {
    animal: Animal
    catOrBird: CatOrBird
  }

  union Animal = Cat | Bird | Crocodile | Fish
  union CatOrBird = Cat | Bird

  interface Pet {
    name: String!
  }

  interface WarmBlooded {
    bodyTemperature: Int!
  }

  type Cat implements Pet & WarmBlooded {
    name: String!
    bodyTemperature: Int!
  }

  type Bird implements Pet & WarmBlooded {
    name: String!
    bodyTemperature: Int!
  }

  type Fish implements Pet {
    name: String!
  }

  type Crocodile {
    age: Int!
  }
`);
describe('TypeCase', () => {
  it('should recursively include inline fragments with type conditions that match the parent type', () => {
    const context = helpers_1.compile(`
      query Hero {
        hero {
          id
          ... on Character {
            name
            ... on Character {
              id
              appearsIn
            }
            id
          }
        }
      }
    `);
    const selectionSet = context.operations['Hero'].selectionSet.selections[0].
    selectionSet;
    const typeCase = typeCase_1.typeCaseForSelectionSet(selectionSet);
    expect(typeCase.default).toMatchSelectionSet(['Human', 'Droid'], ['id', 'name', 'appearsIn']);
    expect(typeCase.variants).toHaveLength(0);
    expect(typeCase.exhaustiveVariants).toHaveLength(1);
    expect(typeCase.exhaustiveVariants).toContainSelectionSetMatching(['Human', 'Droid'], ['id', 'name', 'appearsIn']);
  });
  it('should recursively include fragment spreads with type conditions that match the parent type', () => {
    const context = helpers_1.compile(`
      query Hero {
        hero {
          id
          ...HeroDetails
        }
      }

      fragment HeroDetails on Character {
        name
        ...MoreHeroDetails
        id
      }

      fragment MoreHeroDetails on Character {
        appearsIn
      }
    `);
    const selectionSet = context.operations['Hero'].selectionSet.selections[0].
    selectionSet;
    const typeCase = typeCase_1.typeCaseForSelectionSet(selectionSet);
    expect(typeCase.default).toMatchSelectionSet(['Human', 'Droid'], ['id', 'name', 'appearsIn']);
    expect(typeCase.default.fragmentSpreads.map(fragmentSpread => fragmentSpread.fragmentName)).toEqual(['HeroDetails', 'MoreHeroDetails']);
    expect(typeCase.variants).toHaveLength(0);
    expect(typeCase.exhaustiveVariants).toHaveLength(1);
    expect(typeCase.exhaustiveVariants).toContainSelectionSetMatching(['Human', 'Droid'], ['id', 'name', 'appearsIn']);
  });
  it('should include fragment spreads when nested within inline fragments', () => {
    const context = helpers_1.compile(`
      query Hero {
        hero {
          ... on Character {
            ...CharacterName
          }
        }
      }

      fragment CharacterName on Character {
        name
      }
    `);
    const selectionSet = context.operations['Hero'].selectionSet.selections[0].
    selectionSet;
    const typeCase = typeCase_1.typeCaseForSelectionSet(selectionSet);
    expect(typeCase.default).toMatchSelectionSet(['Human', 'Droid'], ['name']);
    expect(typeCase.default.fragmentSpreads.map(fragmentSpread => fragmentSpread.fragmentName)).toEqual(['CharacterName']);
    expect(typeCase.variants).toHaveLength(0);
  });
  it('should only include fragment spreads once even if included twice in different subselections', () => {
    const context = helpers_1.compile(`
      query Hero {
        hero {
          friends {
            ...CharacterName
          }
          ... on Droid {
            friends {
              ...CharacterName
            }
          }
        }
      }

      fragment CharacterName on Character {
        name
      }
    `);
    const selectionSet = context.operations['Hero'].selectionSet.selections[0].
    selectionSet;
    const typeCase = typeCase_1.typeCaseForSelectionSet(collectAndMergeFields_1.collectAndMergeFields(typeCase_1.typeCaseForSelectionSet(selectionSet).variants[0])[0].selectionSet);
    expect(typeCase.default).toMatchSelectionSet(['Human', 'Droid'], ['name']);
    expect(typeCase.default.fragmentSpreads.map(fragmentSpread => fragmentSpread.fragmentName)).toEqual(['CharacterName']);
  });
  it('should ignore type modifiers when matching the parent type', () => {
    const schema = graphql_1.buildSchema(`
      type Query {
        heroes: [Character]
      }

      interface Character {
        name: String!
      }

      type Human implements Character {
        name: String!
      }

      type Droid implements Character {
        name: String!
      }
    `);
    const context = helpers_1.compile(`
      query Hero {
        heroes {
          ... on Character {
            name
          }
        }
      }
    `, schema);
    const selectionSet = context.operations['Hero'].selectionSet.selections[0].
    selectionSet;
    const typeCase = typeCase_1.typeCaseForSelectionSet(selectionSet);
    expect(typeCase.default).toMatchSelectionSet(['Human', 'Droid'], ['name']);
    expect(typeCase.variants).toHaveLength(0);
    expect(typeCase.exhaustiveVariants).toHaveLength(1);
    expect(typeCase.exhaustiveVariants).toContainSelectionSetMatching(['Human', 'Droid'], ['name']);
  });
  it('should merge fields from the default case into type conditions', () => {
    const context = helpers_1.compile(`
      query Hero {
        hero {
          name
          ... on Droid {
            primaryFunction
          }
          appearsIn
          ... on Human {
            height
          }
        }
      }
    `);
    const selectionSet = context.operations['Hero'].selectionSet.selections[0].
    selectionSet;
    const typeCase = typeCase_1.typeCaseForSelectionSet(selectionSet);
    expect(typeCase.default).toMatchSelectionSet(['Human', 'Droid'], ['name', 'appearsIn']);
    expect(typeCase.variants).toHaveLength(2);
    expect(typeCase.variants).toContainSelectionSetMatching(['Droid'], ['name', 'primaryFunction', 'appearsIn']);
    expect(typeCase.variants).toContainSelectionSetMatching(['Human'], ['name', 'appearsIn', 'height']);
    expect(typeCase.exhaustiveVariants).toHaveLength(2);
    expect(typeCase.exhaustiveVariants).toContainSelectionSetMatching(['Droid'], ['name', 'primaryFunction', 'appearsIn']);
    expect(typeCase.exhaustiveVariants).toContainSelectionSetMatching(['Human'], ['name', 'appearsIn', 'height']);
  });
  it(`should merge fields from type conditions with the same type`, () => {
    const context = helpers_1.compile(`
      query Hero {
        hero {
          name
          ... on Droid {
            primaryFunction
          }
          ... on Droid {
            appearsIn
          }
        }
      }
    `);
    const selectionSet = context.operations['Hero'].selectionSet.selections[0].
    selectionSet;
    const typeCase = typeCase_1.typeCaseForSelectionSet(selectionSet);
    expect(typeCase.default).toMatchSelectionSet(['Human', 'Droid'], ['name']);
    expect(typeCase.variants).toHaveLength(1);
    expect(typeCase.variants).toContainSelectionSetMatching(['Droid'], ['name', 'primaryFunction', 'appearsIn']);
    expect(typeCase.exhaustiveVariants).toHaveLength(2);
    expect(typeCase.exhaustiveVariants).toContainSelectionSetMatching(['Droid'], ['name', 'primaryFunction', 'appearsIn']);
    expect(typeCase.exhaustiveVariants).toContainSelectionSetMatching(['Human'], ['name']);
  });
  it('should inherit type condition when nesting an inline fragment in an inline fragment with a more specific type condition', () => {
    const context = helpers_1.compile(`
      query Hero {
        hero {
          ... on Droid {
            ... on Character {
              name
            }
          }
        }
      }
    `);
    const selectionSet = context.operations['Hero'].selectionSet.selections[0].
    selectionSet;
    const typeCase = typeCase_1.typeCaseForSelectionSet(selectionSet);
    expect(typeCase.default).toMatchSelectionSet(['Human', 'Droid'], []);
    expect(typeCase.variants).toHaveLength(1);
    expect(typeCase.variants).toContainSelectionSetMatching(['Droid'], ['name']);
    expect(typeCase.exhaustiveVariants).toHaveLength(2);
    expect(typeCase.exhaustiveVariants).toContainSelectionSetMatching(['Droid'], ['name']);
    expect(typeCase.exhaustiveVariants).toContainSelectionSetMatching(['Human'], []);
  });
  it('should not inherit type condition when nesting an inline fragment in an inline fragment with a less specific type condition', () => {
    const context = helpers_1.compile(`
      query Hero {
        hero {
          ... on Character {
            ... on Droid {
              name
            }
          }
        }
      }
    `);
    const selectionSet = context.operations['Hero'].selectionSet.selections[0].
    selectionSet;
    const typeCase = typeCase_1.typeCaseForSelectionSet(selectionSet);
    expect(typeCase.default).toMatchSelectionSet(['Human', 'Droid'], []);
    expect(typeCase.variants).toHaveLength(1);
    expect(typeCase.variants).toContainSelectionSetMatching(['Droid'], ['name']);
    expect(typeCase.exhaustiveVariants).toHaveLength(2);
    expect(typeCase.exhaustiveVariants).toContainSelectionSetMatching(['Droid'], ['name']);
    expect(typeCase.exhaustiveVariants).toContainSelectionSetMatching(['Human'], []);
  });
  it('should merge fields from the parent case into nested type conditions', () => {
    const context = helpers_1.compile(`
      query Animal {
        animal {
          ... on Pet {
            name
            ... on WarmBlooded {
              bodyTemperature
            }
          }
        }
      }
    `, exports.animalSchema);
    const selectionSet = context.operations['Animal'].selectionSet.selections[0].
    selectionSet;
    const typeCase = typeCase_1.typeCaseForSelectionSet(selectionSet);
    expect(typeCase.default).toMatchSelectionSet(['Cat', 'Bird', 'Fish', 'Crocodile'], []);
    expect(typeCase.variants).toHaveLength(2);
    expect(typeCase.variants).toContainSelectionSetMatching(['Cat', 'Bird'], ['name', 'bodyTemperature']);
    expect(typeCase.variants).toContainSelectionSetMatching(['Fish'], ['name']);
    expect(typeCase.exhaustiveVariants).toHaveLength(3);
    expect(typeCase.exhaustiveVariants).toContainSelectionSetMatching(['Cat', 'Bird'], ['name', 'bodyTemperature']);
    expect(typeCase.exhaustiveVariants).toContainSelectionSetMatching(['Fish'], ['name']);
    expect(typeCase.exhaustiveVariants).toContainSelectionSetMatching(['Crocodile'], []);
  });
  it('should merge fields from the parent case into nested type conditions', () => {
    const context = helpers_1.compile(`
      query Animal {
        animal {
          ... on Pet {
            name
            ... on WarmBlooded {
              bodyTemperature
            }
          }
          ... on WarmBlooded {
            bodyTemperature
            ... on Pet {
              name
            }
          }
        }
      }
    `, exports.animalSchema);
    const selectionSet = context.operations['Animal'].selectionSet.selections[0].
    selectionSet;
    const typeCase = typeCase_1.typeCaseForSelectionSet(selectionSet);
    expect(typeCase.default).toMatchSelectionSet(['Cat', 'Bird', 'Fish', 'Crocodile'], []);
    expect(typeCase.variants).toHaveLength(2);
    expect(typeCase.variants).toContainSelectionSetMatching(['Cat', 'Bird'], ['name', 'bodyTemperature']);
    expect(typeCase.variants).toContainSelectionSetMatching(['Fish'], ['name']);
    expect(typeCase.exhaustiveVariants).toHaveLength(3);
    expect(typeCase.exhaustiveVariants).toContainSelectionSetMatching(['Cat', 'Bird'], ['name', 'bodyTemperature']);
    expect(typeCase.exhaustiveVariants).toContainSelectionSetMatching(['Fish'], ['name']);
    expect(typeCase.exhaustiveVariants).toContainSelectionSetMatching(['Crocodile'], []);
  });
  it('should not keep type conditions when all possible objects match', () => {
    const context = helpers_1.compile(`
      query Animal {
        catOrBird {
          ... on Pet {
            name
            ... on WarmBlooded {
              bodyTemperature
            }
          }
        }
      }
    `, exports.animalSchema);
    const selectionSet = context.operations['Animal'].selectionSet.selections[0].
    selectionSet;
    const typeCase = typeCase_1.typeCaseForSelectionSet(selectionSet);
    expect(typeCase.default).toMatchSelectionSet(['Cat', 'Bird'], ['name', 'bodyTemperature']);
    expect(typeCase.variants).toHaveLength(0);
    expect(typeCase.exhaustiveVariants).toHaveLength(1);
    expect(typeCase.exhaustiveVariants).toContainSelectionSetMatching(['Cat', 'Bird'], ['name', 'bodyTemperature']);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,