715b49019c24933e0dfa0ac553a10b77
'use strict';require('ts-jest').install("/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-types-generator/test/test-utils/matchers.ts", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst collectAndMergeFields_1 = require(\"../../src/compiler/visitors/collectAndMergeFields\");\nfunction toMatchSelectionSet(received, possibleTypeNames, expectedResponseKeys) {\n    const actualResponseKeys = collectAndMergeFields_1.collectAndMergeFields(received).map(field => field.responseKey);\n    const pass = this.equals(actualResponseKeys, expectedResponseKeys);\n    if (pass) {\n        return {\n            message: () => `Expected selection set for ${this.utils.printExpected(possibleTypeNames)}\\n` +\n                `To not match:\\n` +\n                `   ${this.utils.printExpected(expectedResponseKeys)}` +\n                'Received:\\n' +\n                `  ${this.utils.printReceived(actualResponseKeys)}`,\n            pass: true\n        };\n    }\n    else {\n        return {\n            message: () => `Expected selection set for ${this.utils.printExpected(possibleTypeNames)}\\n` +\n                `To match:\\n` +\n                `   ${this.utils.printExpected(expectedResponseKeys)}\\n` +\n                'Received:\\n' +\n                `   ${this.utils.printReceived(actualResponseKeys)}`,\n            pass: false\n        };\n    }\n}\nfunction toContainSelectionSetMatching(received, possibleTypeNames, expectedResponseKeys) {\n    const variant = received.find(variant => {\n        return this.equals(Array.from(variant.possibleTypes).map(type => type.name), possibleTypeNames);\n    });\n    if (!variant) {\n        return {\n            message: () => `Expected array to contain variant for:\\n` +\n                `  ${this.utils.printExpected(possibleTypeNames)}\\n` +\n                `But only found variants for:\\n` +\n                received\n                    .map(variant => `  ${this.utils.printReceived(variant.possibleTypes)} -> ${this.utils.printReceived(collectAndMergeFields_1.collectAndMergeFields(variant).map(field => field.name))}`)\n                    .join('\\n'),\n            pass: false\n        };\n    }\n    return toMatchSelectionSet.call(this, variant, possibleTypeNames, expectedResponseKeys);\n}\nexpect.extend({\n    toMatchSelectionSet,\n    toContainSelectionSetMatching\n});\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0Y2hlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJtYXRjaGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZGQUEwRjtBQWdCMUYsNkJBRUUsUUFBc0IsRUFDdEIsaUJBQTJCLEVBQzNCLG9CQUE4QjtJQUU5QixNQUFNLGtCQUFrQixHQUFHLDZDQUFxQixDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUUzRixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLGtCQUFrQixFQUFFLG9CQUFvQixDQUFDLENBQUM7SUFFbkUsSUFBSSxJQUFJLEVBQUU7UUFDUixPQUFPO1lBQ0wsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUNaLDhCQUE4QixJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJO2dCQUM3RSxpQkFBaUI7Z0JBQ2pCLE1BQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsb0JBQW9CLENBQUMsRUFBRTtnQkFDdEQsYUFBYTtnQkFDYixLQUFLLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLGtCQUFrQixDQUFDLEVBQUU7WUFDckQsSUFBSSxFQUFFLElBQUk7U0FDWCxDQUFDO0tBQ0g7U0FBTTtRQUNMLE9BQU87WUFDTCxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQ1osOEJBQThCLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLGlCQUFpQixDQUFDLElBQUk7Z0JBQzdFLGFBQWE7Z0JBQ2IsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJO2dCQUN4RCxhQUFhO2dCQUNiLE1BQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsa0JBQWtCLENBQUMsRUFBRTtZQUN0RCxJQUFJLEVBQUUsS0FBSztTQUNaLENBQUM7S0FDSDtBQUNILENBQUM7QUFFRCx1Q0FFRSxRQUF3QixFQUN4QixpQkFBMkIsRUFDM0Isb0JBQThCO0lBRTlCLE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUU7UUFDdEMsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO0lBQ2xHLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLE9BQU8sRUFBRTtRQUNaLE9BQU87WUFDTCxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQ1osMENBQTBDO2dCQUMxQyxLQUFLLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLGlCQUFpQixDQUFDLElBQUk7Z0JBQ3BELGdDQUFnQztnQkFDaEMsUUFBUTtxQkFDTCxHQUFHLENBQ0YsT0FBTyxDQUFDLEVBQUUsQ0FDUixLQUFLLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FDakYsNkNBQXFCLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUN4RCxFQUFFLENBQ047cUJBQ0EsSUFBSSxDQUFDLElBQUksQ0FBQztZQUNmLElBQUksRUFBRSxLQUFLO1NBQ1osQ0FBQztLQUNIO0lBRUQsT0FBTyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO0FBQzFGLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxDQUFDO0lBQ1osbUJBQW1CO0lBQ25CLDZCQUE2QjtDQUN2QixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb2xsZWN0QW5kTWVyZ2VGaWVsZHMgfSBmcm9tICcuLi8uLi9zcmMvY29tcGlsZXIvdmlzaXRvcnMvY29sbGVjdEFuZE1lcmdlRmllbGRzJztcblxuaW1wb3J0IHsgU2VsZWN0aW9uU2V0IH0gZnJvbSAnLi4vLi4vc3JjL2NvbXBpbGVyJztcblxuZGVjbGFyZSBnbG9iYWwge1xuICBuYW1lc3BhY2UgamVzdCB7XG4gICAgaW50ZXJmYWNlIE1hdGNoZXJzPFI+IHtcbiAgICAgIHRvTWF0Y2hTZWxlY3Rpb25TZXQocG9zc2libGVUeXBlTmFtZXM6IHN0cmluZ1tdLCBleHBlY3RlZFJlc3BvbnNlS2V5czogc3RyaW5nW10pOiBSO1xuICAgICAgdG9Db250YWluU2VsZWN0aW9uU2V0TWF0Y2hpbmcocG9zc2libGVUeXBlTmFtZXM6IHN0cmluZ1tdLCBleHBlY3RlZFJlc3BvbnNlS2V5czogc3RyaW5nW10pOiBSO1xuICAgIH1cbiAgICBpbnRlcmZhY2UgTWF0Y2hlclV0aWxzIHtcbiAgICAgIGVxdWFscyhhOiBhbnksIGI6IGFueSk6IGJvb2xlYW47XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHRvTWF0Y2hTZWxlY3Rpb25TZXQoXG4gIHRoaXM6IGplc3QuTWF0Y2hlclV0aWxzLFxuICByZWNlaXZlZDogU2VsZWN0aW9uU2V0LFxuICBwb3NzaWJsZVR5cGVOYW1lczogc3RyaW5nW10sXG4gIGV4cGVjdGVkUmVzcG9uc2VLZXlzOiBzdHJpbmdbXVxuKTogeyBtZXNzYWdlKCk6IHN0cmluZzsgcGFzczogYm9vbGVhbiB9IHtcbiAgY29uc3QgYWN0dWFsUmVzcG9uc2VLZXlzID0gY29sbGVjdEFuZE1lcmdlRmllbGRzKHJlY2VpdmVkKS5tYXAoZmllbGQgPT4gZmllbGQucmVzcG9uc2VLZXkpO1xuXG4gIGNvbnN0IHBhc3MgPSB0aGlzLmVxdWFscyhhY3R1YWxSZXNwb25zZUtleXMsIGV4cGVjdGVkUmVzcG9uc2VLZXlzKTtcblxuICBpZiAocGFzcykge1xuICAgIHJldHVybiB7XG4gICAgICBtZXNzYWdlOiAoKSA9PlxuICAgICAgICBgRXhwZWN0ZWQgc2VsZWN0aW9uIHNldCBmb3IgJHt0aGlzLnV0aWxzLnByaW50RXhwZWN0ZWQocG9zc2libGVUeXBlTmFtZXMpfVxcbmAgK1xuICAgICAgICBgVG8gbm90IG1hdGNoOlxcbmAgK1xuICAgICAgICBgICAgJHt0aGlzLnV0aWxzLnByaW50RXhwZWN0ZWQoZXhwZWN0ZWRSZXNwb25zZUtleXMpfWAgK1xuICAgICAgICAnUmVjZWl2ZWQ6XFxuJyArXG4gICAgICAgIGAgICR7dGhpcy51dGlscy5wcmludFJlY2VpdmVkKGFjdHVhbFJlc3BvbnNlS2V5cyl9YCxcbiAgICAgIHBhc3M6IHRydWVcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB7XG4gICAgICBtZXNzYWdlOiAoKSA9PlxuICAgICAgICBgRXhwZWN0ZWQgc2VsZWN0aW9uIHNldCBmb3IgJHt0aGlzLnV0aWxzLnByaW50RXhwZWN0ZWQocG9zc2libGVUeXBlTmFtZXMpfVxcbmAgK1xuICAgICAgICBgVG8gbWF0Y2g6XFxuYCArXG4gICAgICAgIGAgICAke3RoaXMudXRpbHMucHJpbnRFeHBlY3RlZChleHBlY3RlZFJlc3BvbnNlS2V5cyl9XFxuYCArXG4gICAgICAgICdSZWNlaXZlZDpcXG4nICtcbiAgICAgICAgYCAgICR7dGhpcy51dGlscy5wcmludFJlY2VpdmVkKGFjdHVhbFJlc3BvbnNlS2V5cyl9YCxcbiAgICAgIHBhc3M6IGZhbHNlXG4gICAgfTtcbiAgfVxufVxuXG5mdW5jdGlvbiB0b0NvbnRhaW5TZWxlY3Rpb25TZXRNYXRjaGluZyhcbiAgdGhpczogamVzdC5NYXRjaGVyVXRpbHMsXG4gIHJlY2VpdmVkOiBTZWxlY3Rpb25TZXRbXSxcbiAgcG9zc2libGVUeXBlTmFtZXM6IHN0cmluZ1tdLFxuICBleHBlY3RlZFJlc3BvbnNlS2V5czogc3RyaW5nW11cbik6IHsgbWVzc2FnZSgpOiBzdHJpbmc7IHBhc3M6IGJvb2xlYW4gfSB7XG4gIGNvbnN0IHZhcmlhbnQgPSByZWNlaXZlZC5maW5kKHZhcmlhbnQgPT4ge1xuICAgIHJldHVybiB0aGlzLmVxdWFscyhBcnJheS5mcm9tKHZhcmlhbnQucG9zc2libGVUeXBlcykubWFwKHR5cGUgPT4gdHlwZS5uYW1lKSwgcG9zc2libGVUeXBlTmFtZXMpO1xuICB9KTtcblxuICBpZiAoIXZhcmlhbnQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWVzc2FnZTogKCkgPT5cbiAgICAgICAgYEV4cGVjdGVkIGFycmF5IHRvIGNvbnRhaW4gdmFyaWFudCBmb3I6XFxuYCArXG4gICAgICAgIGAgICR7dGhpcy51dGlscy5wcmludEV4cGVjdGVkKHBvc3NpYmxlVHlwZU5hbWVzKX1cXG5gICtcbiAgICAgICAgYEJ1dCBvbmx5IGZvdW5kIHZhcmlhbnRzIGZvcjpcXG5gICtcbiAgICAgICAgcmVjZWl2ZWRcbiAgICAgICAgICAubWFwKFxuICAgICAgICAgICAgdmFyaWFudCA9PlxuICAgICAgICAgICAgICBgICAke3RoaXMudXRpbHMucHJpbnRSZWNlaXZlZCh2YXJpYW50LnBvc3NpYmxlVHlwZXMpfSAtPiAke3RoaXMudXRpbHMucHJpbnRSZWNlaXZlZChcbiAgICAgICAgICAgICAgICBjb2xsZWN0QW5kTWVyZ2VGaWVsZHModmFyaWFudCkubWFwKGZpZWxkID0+IGZpZWxkLm5hbWUpXG4gICAgICAgICAgICAgICl9YFxuICAgICAgICAgIClcbiAgICAgICAgICAuam9pbignXFxuJyksXG4gICAgICBwYXNzOiBmYWxzZVxuICAgIH07XG4gIH1cblxuICByZXR1cm4gdG9NYXRjaFNlbGVjdGlvblNldC5jYWxsKHRoaXMsIHZhcmlhbnQsIHBvc3NpYmxlVHlwZU5hbWVzLCBleHBlY3RlZFJlc3BvbnNlS2V5cyk7XG59XG5cbmV4cGVjdC5leHRlbmQoe1xuICB0b01hdGNoU2VsZWN0aW9uU2V0LFxuICB0b0NvbnRhaW5TZWxlY3Rpb25TZXRNYXRjaGluZ1xufSBhcyBhbnkpO1xuIl19");"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const collectAndMergeFields_1 = require("../../src/compiler/visitors/collectAndMergeFields");
function toMatchSelectionSet(received, possibleTypeNames, expectedResponseKeys) {
    const actualResponseKeys = collectAndMergeFields_1.collectAndMergeFields(received).map(field => field.responseKey);
    const pass = this.equals(actualResponseKeys, expectedResponseKeys);
    if (pass) {
        return {
            message: () => `Expected selection set for ${this.utils.printExpected(possibleTypeNames)}\n` +
            `To not match:\n` +
            `   ${this.utils.printExpected(expectedResponseKeys)}` +
            'Received:\n' +
            `  ${this.utils.printReceived(actualResponseKeys)}`,
            pass: true };

    } else
    {
        return {
            message: () => `Expected selection set for ${this.utils.printExpected(possibleTypeNames)}\n` +
            `To match:\n` +
            `   ${this.utils.printExpected(expectedResponseKeys)}\n` +
            'Received:\n' +
            `   ${this.utils.printReceived(actualResponseKeys)}`,
            pass: false };

    }
}
function toContainSelectionSetMatching(received, possibleTypeNames, expectedResponseKeys) {
    const variant = received.find(variant => {
        return this.equals(Array.from(variant.possibleTypes).map(type => type.name), possibleTypeNames);
    });
    if (!variant) {
        return {
            message: () => `Expected array to contain variant for:\n` +
            `  ${this.utils.printExpected(possibleTypeNames)}\n` +
            `But only found variants for:\n` +
            received.
            map(variant => `  ${this.utils.printReceived(variant.possibleTypes)} -> ${this.utils.printReceived(collectAndMergeFields_1.collectAndMergeFields(variant).map(field => field.name))}`).
            join('\n'),
            pass: false };

    }
    return toMatchSelectionSet.call(this, variant, possibleTypeNames, expectedResponseKeys);
}
expect.extend({
    toMatchSelectionSet,
    toContainSelectionSetMatching });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1hdGNoZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBQSwwQkFBQSxRQUFBLG1EQUFBLENBQUE7QUFnQkEsU0FBQSxtQkFBQSxDQUVFLFFBRkYsRUFHRSxpQkFIRixFQUlFLG9CQUpGLEVBSWdDO0FBRTlCLFVBQU0scUJBQXFCLHdCQUFBLHFCQUFBLENBQXNCLFFBQXRCLEVBQWdDLEdBQWhDLENBQW9DLFNBQVMsTUFBTSxXQUFuRCxDQUEzQjtBQUVBLFVBQU0sT0FBTyxLQUFLLE1BQUwsQ0FBWSxrQkFBWixFQUFnQyxvQkFBaEMsQ0FBYjtBQUVBLFFBQUksSUFBSixFQUFVO0FBQ1IsZUFBTztBQUNMLHFCQUFTLE1BQ1AsOEJBQThCLEtBQUssS0FBTCxDQUFXLGFBQVgsQ0FBeUIsaUJBQXpCLENBQTJDLElBQXpFO0FBQ0EsNkJBREE7QUFFQSxrQkFBTSxLQUFLLEtBQUwsQ0FBVyxhQUFYLENBQXlCLG9CQUF6QixDQUE4QyxFQUZwRDtBQUdBLHlCQUhBO0FBSUEsaUJBQUssS0FBSyxLQUFMLENBQVcsYUFBWCxDQUF5QixrQkFBekIsQ0FBNEMsRUFOOUM7QUFPTCxrQkFBTSxJQVBELEVBQVA7O0FBU0QsS0FWRDtBQVVPO0FBQ0wsZUFBTztBQUNMLHFCQUFTLE1BQ1AsOEJBQThCLEtBQUssS0FBTCxDQUFXLGFBQVgsQ0FBeUIsaUJBQXpCLENBQTJDLElBQXpFO0FBQ0EseUJBREE7QUFFQSxrQkFBTSxLQUFLLEtBQUwsQ0FBVyxhQUFYLENBQXlCLG9CQUF6QixDQUE4QyxJQUZwRDtBQUdBLHlCQUhBO0FBSUEsa0JBQU0sS0FBSyxLQUFMLENBQVcsYUFBWCxDQUF5QixrQkFBekIsQ0FBNEMsRUFOL0M7QUFPTCxrQkFBTSxLQVBELEVBQVA7O0FBU0Q7QUFDRjtBQUVELFNBQUEsNkJBQUEsQ0FFRSxRQUZGLEVBR0UsaUJBSEYsRUFJRSxvQkFKRixFQUlnQztBQUU5QixVQUFNLFVBQVUsU0FBUyxJQUFULENBQWMsV0FBVTtBQUN0QyxlQUFPLEtBQUssTUFBTCxDQUFZLE1BQU0sSUFBTixDQUFXLFFBQVEsYUFBbkIsRUFBa0MsR0FBbEMsQ0FBc0MsUUFBUSxLQUFLLElBQW5ELENBQVosRUFBc0UsaUJBQXRFLENBQVA7QUFDRCxLQUZlLENBQWhCO0FBSUEsUUFBSSxDQUFDLE9BQUwsRUFBYztBQUNaLGVBQU87QUFDTCxxQkFBUyxNQUNQLDBDQUFBO0FBQ0EsaUJBQUssS0FBSyxLQUFMLENBQVcsYUFBWCxDQUF5QixpQkFBekIsQ0FBMkMsSUFEaEQ7QUFFQSw0Q0FGQTtBQUdBO0FBQ0csZUFESCxDQUVJLFdBQ0UsS0FBSyxLQUFLLEtBQUwsQ0FBVyxhQUFYLENBQXlCLFFBQVEsYUFBakMsQ0FBK0MsT0FBTyxLQUFLLEtBQUwsQ0FBVyxhQUFYLENBQ3pELHdCQUFBLHFCQUFBLENBQXNCLE9BQXRCLEVBQStCLEdBQS9CLENBQW1DLFNBQVMsTUFBTSxJQUFsRCxDQUR5RCxDQUUxRCxFQUxQO0FBT0csZ0JBUEgsQ0FPUSxJQVBSLENBTEc7QUFhTCxrQkFBTSxLQWJELEVBQVA7O0FBZUQ7QUFFRCxXQUFPLG9CQUFvQixJQUFwQixDQUF5QixJQUF6QixFQUErQixPQUEvQixFQUF3QyxpQkFBeEMsRUFBMkQsb0JBQTNELENBQVA7QUFDRDtBQUVELE9BQU8sTUFBUCxDQUFjO0FBQ1osdUJBRFk7QUFFWixpQ0FGWSxFQUFkIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29sbGVjdEFuZE1lcmdlRmllbGRzIH0gZnJvbSAnLi4vLi4vc3JjL2NvbXBpbGVyL3Zpc2l0b3JzL2NvbGxlY3RBbmRNZXJnZUZpZWxkcyc7XG5cbmltcG9ydCB7IFNlbGVjdGlvblNldCB9IGZyb20gJy4uLy4uL3NyYy9jb21waWxlcic7XG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgbmFtZXNwYWNlIGplc3Qge1xuICAgIGludGVyZmFjZSBNYXRjaGVyczxSPiB7XG4gICAgICB0b01hdGNoU2VsZWN0aW9uU2V0KHBvc3NpYmxlVHlwZU5hbWVzOiBzdHJpbmdbXSwgZXhwZWN0ZWRSZXNwb25zZUtleXM6IHN0cmluZ1tdKTogUjtcbiAgICAgIHRvQ29udGFpblNlbGVjdGlvblNldE1hdGNoaW5nKHBvc3NpYmxlVHlwZU5hbWVzOiBzdHJpbmdbXSwgZXhwZWN0ZWRSZXNwb25zZUtleXM6IHN0cmluZ1tdKTogUjtcbiAgICB9XG4gICAgaW50ZXJmYWNlIE1hdGNoZXJVdGlscyB7XG4gICAgICBlcXVhbHMoYTogYW55LCBiOiBhbnkpOiBib29sZWFuO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB0b01hdGNoU2VsZWN0aW9uU2V0KFxuICB0aGlzOiBqZXN0Lk1hdGNoZXJVdGlscyxcbiAgcmVjZWl2ZWQ6IFNlbGVjdGlvblNldCxcbiAgcG9zc2libGVUeXBlTmFtZXM6IHN0cmluZ1tdLFxuICBleHBlY3RlZFJlc3BvbnNlS2V5czogc3RyaW5nW11cbik6IHsgbWVzc2FnZSgpOiBzdHJpbmc7IHBhc3M6IGJvb2xlYW4gfSB7XG4gIGNvbnN0IGFjdHVhbFJlc3BvbnNlS2V5cyA9IGNvbGxlY3RBbmRNZXJnZUZpZWxkcyhyZWNlaXZlZCkubWFwKGZpZWxkID0+IGZpZWxkLnJlc3BvbnNlS2V5KTtcblxuICBjb25zdCBwYXNzID0gdGhpcy5lcXVhbHMoYWN0dWFsUmVzcG9uc2VLZXlzLCBleHBlY3RlZFJlc3BvbnNlS2V5cyk7XG5cbiAgaWYgKHBhc3MpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWVzc2FnZTogKCkgPT5cbiAgICAgICAgYEV4cGVjdGVkIHNlbGVjdGlvbiBzZXQgZm9yICR7dGhpcy51dGlscy5wcmludEV4cGVjdGVkKHBvc3NpYmxlVHlwZU5hbWVzKX1cXG5gICtcbiAgICAgICAgYFRvIG5vdCBtYXRjaDpcXG5gICtcbiAgICAgICAgYCAgICR7dGhpcy51dGlscy5wcmludEV4cGVjdGVkKGV4cGVjdGVkUmVzcG9uc2VLZXlzKX1gICtcbiAgICAgICAgJ1JlY2VpdmVkOlxcbicgK1xuICAgICAgICBgICAke3RoaXMudXRpbHMucHJpbnRSZWNlaXZlZChhY3R1YWxSZXNwb25zZUtleXMpfWAsXG4gICAgICBwYXNzOiB0cnVlXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWVzc2FnZTogKCkgPT5cbiAgICAgICAgYEV4cGVjdGVkIHNlbGVjdGlvbiBzZXQgZm9yICR7dGhpcy51dGlscy5wcmludEV4cGVjdGVkKHBvc3NpYmxlVHlwZU5hbWVzKX1cXG5gICtcbiAgICAgICAgYFRvIG1hdGNoOlxcbmAgK1xuICAgICAgICBgICAgJHt0aGlzLnV0aWxzLnByaW50RXhwZWN0ZWQoZXhwZWN0ZWRSZXNwb25zZUtleXMpfVxcbmAgK1xuICAgICAgICAnUmVjZWl2ZWQ6XFxuJyArXG4gICAgICAgIGAgICAke3RoaXMudXRpbHMucHJpbnRSZWNlaXZlZChhY3R1YWxSZXNwb25zZUtleXMpfWAsXG4gICAgICBwYXNzOiBmYWxzZVxuICAgIH07XG4gIH1cbn1cblxuZnVuY3Rpb24gdG9Db250YWluU2VsZWN0aW9uU2V0TWF0Y2hpbmcoXG4gIHRoaXM6IGplc3QuTWF0Y2hlclV0aWxzLFxuICByZWNlaXZlZDogU2VsZWN0aW9uU2V0W10sXG4gIHBvc3NpYmxlVHlwZU5hbWVzOiBzdHJpbmdbXSxcbiAgZXhwZWN0ZWRSZXNwb25zZUtleXM6IHN0cmluZ1tdXG4pOiB7IG1lc3NhZ2UoKTogc3RyaW5nOyBwYXNzOiBib29sZWFuIH0ge1xuICBjb25zdCB2YXJpYW50ID0gcmVjZWl2ZWQuZmluZCh2YXJpYW50ID0+IHtcbiAgICByZXR1cm4gdGhpcy5lcXVhbHMoQXJyYXkuZnJvbSh2YXJpYW50LnBvc3NpYmxlVHlwZXMpLm1hcCh0eXBlID0+IHR5cGUubmFtZSksIHBvc3NpYmxlVHlwZU5hbWVzKTtcbiAgfSk7XG5cbiAgaWYgKCF2YXJpYW50KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1lc3NhZ2U6ICgpID0+XG4gICAgICAgIGBFeHBlY3RlZCBhcnJheSB0byBjb250YWluIHZhcmlhbnQgZm9yOlxcbmAgK1xuICAgICAgICBgICAke3RoaXMudXRpbHMucHJpbnRFeHBlY3RlZChwb3NzaWJsZVR5cGVOYW1lcyl9XFxuYCArXG4gICAgICAgIGBCdXQgb25seSBmb3VuZCB2YXJpYW50cyBmb3I6XFxuYCArXG4gICAgICAgIHJlY2VpdmVkXG4gICAgICAgICAgLm1hcChcbiAgICAgICAgICAgIHZhcmlhbnQgPT5cbiAgICAgICAgICAgICAgYCAgJHt0aGlzLnV0aWxzLnByaW50UmVjZWl2ZWQodmFyaWFudC5wb3NzaWJsZVR5cGVzKX0gLT4gJHt0aGlzLnV0aWxzLnByaW50UmVjZWl2ZWQoXG4gICAgICAgICAgICAgICAgY29sbGVjdEFuZE1lcmdlRmllbGRzKHZhcmlhbnQpLm1hcChmaWVsZCA9PiBmaWVsZC5uYW1lKVxuICAgICAgICAgICAgICApfWBcbiAgICAgICAgICApXG4gICAgICAgICAgLmpvaW4oJ1xcbicpLFxuICAgICAgcGFzczogZmFsc2VcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHRvTWF0Y2hTZWxlY3Rpb25TZXQuY2FsbCh0aGlzLCB2YXJpYW50LCBwb3NzaWJsZVR5cGVOYW1lcywgZXhwZWN0ZWRSZXNwb25zZUtleXMpO1xufVxuXG5leHBlY3QuZXh0ZW5kKHtcbiAgdG9NYXRjaFNlbGVjdGlvblNldCxcbiAgdG9Db250YWluU2VsZWN0aW9uU2V0TWF0Y2hpbmdcbn0gYXMgYW55KTtcbiJdLCJzb3VyY2VSb290IjoiIn0=