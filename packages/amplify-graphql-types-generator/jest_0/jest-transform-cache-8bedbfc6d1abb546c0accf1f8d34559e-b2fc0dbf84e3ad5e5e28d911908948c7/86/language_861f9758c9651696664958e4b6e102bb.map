{"version":3,"sources":["language.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  GraphQLEnumType,\n  GraphQLInputObjectType,\n} from 'graphql';\n\nimport {\n  CompilerOptions\n} from '../compiler';\n\nimport { createTypeAnnotationFromGraphQLTypeFunction } from './helpers';\n\nimport * as t from '@babel/types';\n\nexport type ObjectProperty = {\n  name: string,\n  description?: string | null | undefined,\n  annotation: t.FlowTypeAnnotation\n}\n\nexport interface FlowCompilerOptions extends CompilerOptions {\n  useFlowExactObjects: boolean\n}\n\nexport default class FlowGenerator {\n  options: FlowCompilerOptions\n  typeAnnotationFromGraphQLType: Function\n\n  constructor(compilerOptions: FlowCompilerOptions) {\n    this.options = compilerOptions;\n\n    this.typeAnnotationFromGraphQLType = createTypeAnnotationFromGraphQLTypeFunction(compilerOptions);\n  }\n\n  public enumerationDeclaration(type: GraphQLEnumType) {\n    const { name, description } = type;\n    const unionValues = type.getValues().map(({ value }) => {\n      const type = t.stringLiteralTypeAnnotation();\n      type.value = value;\n\n      return type;\n    });\n\n    const typeAlias = t.exportNamedDeclaration(\n      t.typeAlias(\n        t.identifier(name),\n        undefined,\n        t.unionTypeAnnotation(unionValues)\n      ),\n      []\n    );\n\n    typeAlias.leadingComments = [{\n      type: 'CommentLine',\n      value: ` ${description}`\n    } as t.CommentLine];\n\n    return typeAlias;\n  }\n\n  public inputObjectDeclaration(inputObjectType: GraphQLInputObjectType) {\n    const { name, description } = inputObjectType;\n\n    const fieldMap = inputObjectType.getFields();\n    const fields: ObjectProperty[] = Object.keys(inputObjectType.getFields())\n      .map((fieldName: string) => {\n        const field = fieldMap[fieldName];\n        return {\n          name: fieldName,\n          annotation: this.typeAnnotationFromGraphQLType(field.type)\n        }\n      });\n\n    const typeAlias = this.typeAliasObject(name, fields);\n\n    typeAlias.leadingComments = [{\n      type: 'CommentLine',\n      value: ` ${description}`\n    } as t.CommentLine]\n\n    return typeAlias;\n  }\n\n  public objectTypeAnnotation(fields: ObjectProperty[], isInputObject: boolean = false) {\n    const objectTypeAnnotation = t.objectTypeAnnotation(\n      fields.map(({name, description, annotation}) => {\n        if (annotation.type === \"NullableTypeAnnotation\") {\n          t.identifier(name + '?')\n        }\n\n        const objectTypeProperty = t.objectTypeProperty(\n          t.identifier(\n            // Nullable fields on input objects do not have to be defined\n            // as well, so allow these fields to be \"undefined\"\n            (isInputObject && annotation.type === \"NullableTypeAnnotation\")\n              ? name + '?'\n              : name\n          ),\n          annotation\n        );\n\n        if (description) {\n          objectTypeProperty.trailingComments = [{\n            type: 'CommentLine',\n            value: ` ${description}`\n          } as t.CommentLine]\n        }\n\n        return objectTypeProperty;\n      })\n    );\n\n    if (this.options.useFlowExactObjects) {\n      objectTypeAnnotation.exact = true;\n    }\n\n    return objectTypeAnnotation;\n  }\n\n  public typeAliasObject(name: string, fields: ObjectProperty[]) {\n    return t.typeAlias(\n      t.identifier(name),\n      undefined,\n      this.objectTypeAnnotation(fields)\n    );\n  }\n\n  public typeAliasObjectUnion(name: string, members: ObjectProperty[][]) {\n    return t.typeAlias(\n      t.identifier(name),\n      undefined,\n      t.unionTypeAnnotation(\n        members.map(member => {\n          return this.objectTypeAnnotation(member)\n        })\n      )\n    )\n  }\n\n  public typeAliasGenericUnion(name: string, members: t.FlowTypeAnnotation[]) {\n    return t.typeAlias(\n      t.identifier(name),\n      undefined,\n      t.unionTypeAnnotation(members)\n    );\n  }\n\n  public exportDeclaration(declaration: t.Declaration) {\n    return t.exportNamedDeclaration(declaration, []);\n  }\n\n  public annotationFromScopeStack(scope: string[]) {\n    return t.genericTypeAnnotation(\n      t.identifier(\n        scope.join('_')\n      )\n    );\n  }\n}\n"],"sourceRoot":""}