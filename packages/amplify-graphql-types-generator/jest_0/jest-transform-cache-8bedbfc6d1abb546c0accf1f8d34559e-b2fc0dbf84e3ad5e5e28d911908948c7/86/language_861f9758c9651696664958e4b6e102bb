1b81f9bc41d31b8f725921a4a4a4172c
'use strict';require('ts-jest').install("/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-types-generator/src/flow-modern/language.ts", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst helpers_1 = require(\"./helpers\");\nconst t = require(\"@babel/types\");\nclass FlowGenerator {\n    constructor(compilerOptions) {\n        this.options = compilerOptions;\n        this.typeAnnotationFromGraphQLType = helpers_1.createTypeAnnotationFromGraphQLTypeFunction(compilerOptions);\n    }\n    enumerationDeclaration(type) {\n        const { name, description } = type;\n        const unionValues = type.getValues().map(({ value }) => {\n            const type = t.stringLiteralTypeAnnotation();\n            type.value = value;\n            return type;\n        });\n        const typeAlias = t.exportNamedDeclaration(t.typeAlias(t.identifier(name), undefined, t.unionTypeAnnotation(unionValues)), []);\n        typeAlias.leadingComments = [{\n                type: 'CommentLine',\n                value: ` ${description}`\n            }];\n        return typeAlias;\n    }\n    inputObjectDeclaration(inputObjectType) {\n        const { name, description } = inputObjectType;\n        const fieldMap = inputObjectType.getFields();\n        const fields = Object.keys(inputObjectType.getFields())\n            .map((fieldName) => {\n            const field = fieldMap[fieldName];\n            return {\n                name: fieldName,\n                annotation: this.typeAnnotationFromGraphQLType(field.type)\n            };\n        });\n        const typeAlias = this.typeAliasObject(name, fields);\n        typeAlias.leadingComments = [{\n                type: 'CommentLine',\n                value: ` ${description}`\n            }];\n        return typeAlias;\n    }\n    objectTypeAnnotation(fields, isInputObject = false) {\n        const objectTypeAnnotation = t.objectTypeAnnotation(fields.map(({ name, description, annotation }) => {\n            if (annotation.type === \"NullableTypeAnnotation\") {\n                t.identifier(name + '?');\n            }\n            const objectTypeProperty = t.objectTypeProperty(t.identifier((isInputObject && annotation.type === \"NullableTypeAnnotation\")\n                ? name + '?'\n                : name), annotation);\n            if (description) {\n                objectTypeProperty.trailingComments = [{\n                        type: 'CommentLine',\n                        value: ` ${description}`\n                    }];\n            }\n            return objectTypeProperty;\n        }));\n        if (this.options.useFlowExactObjects) {\n            objectTypeAnnotation.exact = true;\n        }\n        return objectTypeAnnotation;\n    }\n    typeAliasObject(name, fields) {\n        return t.typeAlias(t.identifier(name), undefined, this.objectTypeAnnotation(fields));\n    }\n    typeAliasObjectUnion(name, members) {\n        return t.typeAlias(t.identifier(name), undefined, t.unionTypeAnnotation(members.map(member => {\n            return this.objectTypeAnnotation(member);\n        })));\n    }\n    typeAliasGenericUnion(name, members) {\n        return t.typeAlias(t.identifier(name), undefined, t.unionTypeAnnotation(members));\n    }\n    exportDeclaration(declaration) {\n        return t.exportNamedDeclaration(declaration, []);\n    }\n    annotationFromScopeStack(scope) {\n        return t.genericTypeAnnotation(t.identifier(scope.join('_')));\n    }\n}\nexports.default = FlowGenerator;\n//# sourceMappingURL=data:application/json;base64,");"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const helpers_1 = require("./helpers");
const t = require("@babel/types");
class FlowGenerator {
    constructor(compilerOptions) {
        this.options = compilerOptions;
        this.typeAnnotationFromGraphQLType = helpers_1.createTypeAnnotationFromGraphQLTypeFunction(compilerOptions);
    }
    enumerationDeclaration(type) {
        const { name, description } = type;
        const unionValues = type.getValues().map(({ value }) => {
            const type = t.stringLiteralTypeAnnotation();
            type.value = value;
            return type;
        });
        const typeAlias = t.exportNamedDeclaration(t.typeAlias(t.identifier(name), undefined, t.unionTypeAnnotation(unionValues)), []);
        typeAlias.leadingComments = [{
            type: 'CommentLine',
            value: ` ${description}` }];

        return typeAlias;
    }
    inputObjectDeclaration(inputObjectType) {
        const { name, description } = inputObjectType;
        const fieldMap = inputObjectType.getFields();
        const fields = Object.keys(inputObjectType.getFields()).
        map(fieldName => {
            const field = fieldMap[fieldName];
            return {
                name: fieldName,
                annotation: this.typeAnnotationFromGraphQLType(field.type) };

        });
        const typeAlias = this.typeAliasObject(name, fields);
        typeAlias.leadingComments = [{
            type: 'CommentLine',
            value: ` ${description}` }];

        return typeAlias;
    }
    objectTypeAnnotation(fields, isInputObject = false) {
        const objectTypeAnnotation = t.objectTypeAnnotation(fields.map(({ name, description, annotation }) => {
            if (annotation.type === "NullableTypeAnnotation") {
                t.identifier(name + '?');
            }
            const objectTypeProperty = t.objectTypeProperty(t.identifier(isInputObject && annotation.type === "NullableTypeAnnotation" ?
            name + '?' :
            name), annotation);
            if (description) {
                objectTypeProperty.trailingComments = [{
                    type: 'CommentLine',
                    value: ` ${description}` }];

            }
            return objectTypeProperty;
        }));
        if (this.options.useFlowExactObjects) {
            objectTypeAnnotation.exact = true;
        }
        return objectTypeAnnotation;
    }
    typeAliasObject(name, fields) {
        return t.typeAlias(t.identifier(name), undefined, this.objectTypeAnnotation(fields));
    }
    typeAliasObjectUnion(name, members) {
        return t.typeAlias(t.identifier(name), undefined, t.unionTypeAnnotation(members.map(member => {
            return this.objectTypeAnnotation(member);
        })));
    }
    typeAliasGenericUnion(name, members) {
        return t.typeAlias(t.identifier(name), undefined, t.unionTypeAnnotation(members));
    }
    exportDeclaration(declaration) {
        return t.exportNamedDeclaration(declaration, []);
    }
    annotationFromScopeStack(scope) {
        return t.genericTypeAnnotation(t.identifier(scope.join('_')));
    }}

exports.default = FlowGenerator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEVBQThCLE1BQTlCLEVBQXNEO0FBQzNELGVBQU8sRUFBRSxTQUFGLENBQ0wsRUFBRSxVQUFGLENBQWEsSUFBYixDQURLLEVBRUwsU0FGSyxFQUdMLEtBQUssb0JBQUwsQ0FBMEIsTUFBMUIsQ0FISyxDQUFQO0FBS0Q7QUFFTSx5QkFBcUIsSUFBckIsRUFBbUMsT0FBbkMsRUFBOEQ7QUFDbkUsZUFBTyxFQUFFLFNBQUYsQ0FDTCxFQUFFLFVBQUYsQ0FBYSxJQUFiLENBREssRUFFTCxTQUZLLEVBR0wsRUFBRSxtQkFBRixDQUNFLFFBQVEsR0FBUixDQUFZLFVBQVM7QUFDbkIsbUJBQU8sS0FBSyxvQkFBTCxDQUEwQixNQUExQixDQUFQO0FBQ0QsU0FGRCxDQURGLENBSEssQ0FBUDtBQVNEO0FBRU0sMEJBQXNCLElBQXRCLEVBQW9DLE9BQXBDLEVBQW1FO0FBQ3hFLGVBQU8sRUFBRSxTQUFGLENBQ0wsRUFBRSxVQUFGLENBQWEsSUFBYixDQURLLEVBRUwsU0FGSyxFQUdMLEVBQUUsbUJBQUYsQ0FBc0IsT0FBdEIsQ0FISyxDQUFQO0FBS0Q7QUFFTSxzQkFBa0IsV0FBbEIsRUFBNEM7QUFDakQsZUFBTyxFQUFFLHNCQUFGLENBQXlCLFdBQXpCLEVBQXNDLEVBQXRDLENBQVA7QUFDRDtBQUVNLDZCQUF5QixLQUF6QixFQUF3QztBQUM3QyxlQUFPLEVBQUUscUJBQUYsQ0FDTCxFQUFFLFVBQUYsQ0FDRSxNQUFNLElBQU4sQ0FBVyxHQUFYLENBREYsQ0FESyxDQUFQO0FBS0QsS0FySUg7O0FBQUEsUUFBQSxPQUFBLEdBQUEsYUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEdyYXBoUUxFbnVtVHlwZSxcbiAgR3JhcGhRTElucHV0T2JqZWN0VHlwZSxcbn0gZnJvbSAnZ3JhcGhxbCc7XG5cbmltcG9ydCB7XG4gIENvbXBpbGVyT3B0aW9uc1xufSBmcm9tICcuLi9jb21waWxlcic7XG5cbmltcG9ydCB7IGNyZWF0ZVR5cGVBbm5vdGF0aW9uRnJvbUdyYXBoUUxUeXBlRnVuY3Rpb24gfSBmcm9tICcuL2hlbHBlcnMnO1xuXG5pbXBvcnQgKiBhcyB0IGZyb20gJ0BiYWJlbC90eXBlcyc7XG5cbmV4cG9ydCB0eXBlIE9iamVjdFByb3BlcnR5ID0ge1xuICBuYW1lOiBzdHJpbmcsXG4gIGRlc2NyaXB0aW9uPzogc3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZCxcbiAgYW5ub3RhdGlvbjogdC5GbG93VHlwZUFubm90YXRpb25cbn1cblxuZXhwb3J0IGludGVyZmFjZSBGbG93Q29tcGlsZXJPcHRpb25zIGV4dGVuZHMgQ29tcGlsZXJPcHRpb25zIHtcbiAgdXNlRmxvd0V4YWN0T2JqZWN0czogYm9vbGVhblxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGbG93R2VuZXJhdG9yIHtcbiAgb3B0aW9uczogRmxvd0NvbXBpbGVyT3B0aW9uc1xuICB0eXBlQW5ub3RhdGlvbkZyb21HcmFwaFFMVHlwZTogRnVuY3Rpb25cblxuICBjb25zdHJ1Y3Rvcihjb21waWxlck9wdGlvbnM6IEZsb3dDb21waWxlck9wdGlvbnMpIHtcbiAgICB0aGlzLm9wdGlvbnMgPSBjb21waWxlck9wdGlvbnM7XG5cbiAgICB0aGlzLnR5cGVBbm5vdGF0aW9uRnJvbUdyYXBoUUxUeXBlID0gY3JlYXRlVHlwZUFubm90YXRpb25Gcm9tR3JhcGhRTFR5cGVGdW5jdGlvbihjb21waWxlck9wdGlvbnMpO1xuICB9XG5cbiAgcHVibGljIGVudW1lcmF0aW9uRGVjbGFyYXRpb24odHlwZTogR3JhcGhRTEVudW1UeXBlKSB7XG4gICAgY29uc3QgeyBuYW1lLCBkZXNjcmlwdGlvbiB9ID0gdHlwZTtcbiAgICBjb25zdCB1bmlvblZhbHVlcyA9IHR5cGUuZ2V0VmFsdWVzKCkubWFwKCh7IHZhbHVlIH0pID0+IHtcbiAgICAgIGNvbnN0IHR5cGUgPSB0LnN0cmluZ0xpdGVyYWxUeXBlQW5ub3RhdGlvbigpO1xuICAgICAgdHlwZS52YWx1ZSA9IHZhbHVlO1xuXG4gICAgICByZXR1cm4gdHlwZTtcbiAgICB9KTtcblxuICAgIGNvbnN0IHR5cGVBbGlhcyA9IHQuZXhwb3J0TmFtZWREZWNsYXJhdGlvbihcbiAgICAgIHQudHlwZUFsaWFzKFxuICAgICAgICB0LmlkZW50aWZpZXIobmFtZSksXG4gICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgdC51bmlvblR5cGVBbm5vdGF0aW9uKHVuaW9uVmFsdWVzKVxuICAgICAgKSxcbiAgICAgIFtdXG4gICAgKTtcblxuICAgIHR5cGVBbGlhcy5sZWFkaW5nQ29tbWVudHMgPSBbe1xuICAgICAgdHlwZTogJ0NvbW1lbnRMaW5lJyxcbiAgICAgIHZhbHVlOiBgICR7ZGVzY3JpcHRpb259YFxuICAgIH0gYXMgdC5Db21tZW50TGluZV07XG5cbiAgICByZXR1cm4gdHlwZUFsaWFzO1xuICB9XG5cbiAgcHVibGljIGlucHV0T2JqZWN0RGVjbGFyYXRpb24oaW5wdXRPYmplY3RUeXBlOiBHcmFwaFFMSW5wdXRPYmplY3RUeXBlKSB7XG4gICAgY29uc3QgeyBuYW1lLCBkZXNjcmlwdGlvbiB9ID0gaW5wdXRPYmplY3RUeXBlO1xuXG4gICAgY29uc3QgZmllbGRNYXAgPSBpbnB1dE9iamVjdFR5cGUuZ2V0RmllbGRzKCk7XG4gICAgY29uc3QgZmllbGRzOiBPYmplY3RQcm9wZXJ0eVtdID0gT2JqZWN0LmtleXMoaW5wdXRPYmplY3RUeXBlLmdldEZpZWxkcygpKVxuICAgICAgLm1hcCgoZmllbGROYW1lOiBzdHJpbmcpID0+IHtcbiAgICAgICAgY29uc3QgZmllbGQgPSBmaWVsZE1hcFtmaWVsZE5hbWVdO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG5hbWU6IGZpZWxkTmFtZSxcbiAgICAgICAgICBhbm5vdGF0aW9uOiB0aGlzLnR5cGVBbm5vdGF0aW9uRnJvbUdyYXBoUUxUeXBlKGZpZWxkLnR5cGUpXG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgY29uc3QgdHlwZUFsaWFzID0gdGhpcy50eXBlQWxpYXNPYmplY3QobmFtZSwgZmllbGRzKTtcblxuICAgIHR5cGVBbGlhcy5sZWFkaW5nQ29tbWVudHMgPSBbe1xuICAgICAgdHlwZTogJ0NvbW1lbnRMaW5lJyxcbiAgICAgIHZhbHVlOiBgICR7ZGVzY3JpcHRpb259YFxuICAgIH0gYXMgdC5Db21tZW50TGluZV1cblxuICAgIHJldHVybiB0eXBlQWxpYXM7XG4gIH1cblxuICBwdWJsaWMgb2JqZWN0VHlwZUFubm90YXRpb24oZmllbGRzOiBPYmplY3RQcm9wZXJ0eVtdLCBpc0lucHV0T2JqZWN0OiBib29sZWFuID0gZmFsc2UpIHtcbiAgICBjb25zdCBvYmplY3RUeXBlQW5ub3RhdGlvbiA9IHQub2JqZWN0VHlwZUFubm90YXRpb24oXG4gICAgICBmaWVsZHMubWFwKCh7bmFtZSwgZGVzY3JpcHRpb24sIGFubm90YXRpb259KSA9PiB7XG4gICAgICAgIGlmIChhbm5vdGF0aW9uLnR5cGUgPT09IFwiTnVsbGFibGVUeXBlQW5ub3RhdGlvblwiKSB7XG4gICAgICAgICAgdC5pZGVudGlmaWVyKG5hbWUgKyAnPycpXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBvYmplY3RUeXBlUHJvcGVydHkgPSB0Lm9iamVjdFR5cGVQcm9wZXJ0eShcbiAgICAgICAgICB0LmlkZW50aWZpZXIoXG4gICAgICAgICAgICAvLyBOdWxsYWJsZSBmaWVsZHMgb24gaW5wdXQgb2JqZWN0cyBkbyBub3QgaGF2ZSB0byBiZSBkZWZpbmVkXG4gICAgICAgICAgICAvLyBhcyB3ZWxsLCBzbyBhbGxvdyB0aGVzZSBmaWVsZHMgdG8gYmUgXCJ1bmRlZmluZWRcIlxuICAgICAgICAgICAgKGlzSW5wdXRPYmplY3QgJiYgYW5ub3RhdGlvbi50eXBlID09PSBcIk51bGxhYmxlVHlwZUFubm90YXRpb25cIilcbiAgICAgICAgICAgICAgPyBuYW1lICsgJz8nXG4gICAgICAgICAgICAgIDogbmFtZVxuICAgICAgICAgICksXG4gICAgICAgICAgYW5ub3RhdGlvblxuICAgICAgICApO1xuXG4gICAgICAgIGlmIChkZXNjcmlwdGlvbikge1xuICAgICAgICAgIG9iamVjdFR5cGVQcm9wZXJ0eS50cmFpbGluZ0NvbW1lbnRzID0gW3tcbiAgICAgICAgICAgIHR5cGU6ICdDb21tZW50TGluZScsXG4gICAgICAgICAgICB2YWx1ZTogYCAke2Rlc2NyaXB0aW9ufWBcbiAgICAgICAgICB9IGFzIHQuQ29tbWVudExpbmVdXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gb2JqZWN0VHlwZVByb3BlcnR5O1xuICAgICAgfSlcbiAgICApO1xuXG4gICAgaWYgKHRoaXMub3B0aW9ucy51c2VGbG93RXhhY3RPYmplY3RzKSB7XG4gICAgICBvYmplY3RUeXBlQW5ub3RhdGlvbi5leGFjdCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIG9iamVjdFR5cGVBbm5vdGF0aW9uO1xuICB9XG5cbiAgcHVibGljIHR5cGVBbGlhc09iamVjdChuYW1lOiBzdHJpbmcsIGZpZWxkczogT2JqZWN0UHJvcGVydHlbXSkge1xuICAgIHJldHVybiB0LnR5cGVBbGlhcyhcbiAgICAgIHQuaWRlbnRpZmllcihuYW1lKSxcbiAgICAgIHVuZGVmaW5lZCxcbiAgICAgIHRoaXMub2JqZWN0VHlwZUFubm90YXRpb24oZmllbGRzKVxuICAgICk7XG4gIH1cblxuICBwdWJsaWMgdHlwZUFsaWFzT2JqZWN0VW5pb24obmFtZTogc3RyaW5nLCBtZW1iZXJzOiBPYmplY3RQcm9wZXJ0eVtdW10pIHtcbiAgICByZXR1cm4gdC50eXBlQWxpYXMoXG4gICAgICB0LmlkZW50aWZpZXIobmFtZSksXG4gICAgICB1bmRlZmluZWQsXG4gICAgICB0LnVuaW9uVHlwZUFubm90YXRpb24oXG4gICAgICAgIG1lbWJlcnMubWFwKG1lbWJlciA9PiB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMub2JqZWN0VHlwZUFubm90YXRpb24obWVtYmVyKVxuICAgICAgICB9KVxuICAgICAgKVxuICAgIClcbiAgfVxuXG4gIHB1YmxpYyB0eXBlQWxpYXNHZW5lcmljVW5pb24obmFtZTogc3RyaW5nLCBtZW1iZXJzOiB0LkZsb3dUeXBlQW5ub3RhdGlvbltdKSB7XG4gICAgcmV0dXJuIHQudHlwZUFsaWFzKFxuICAgICAgdC5pZGVudGlmaWVyKG5hbWUpLFxuICAgICAgdW5kZWZpbmVkLFxuICAgICAgdC51bmlvblR5cGVBbm5vdGF0aW9uKG1lbWJlcnMpXG4gICAgKTtcbiAgfVxuXG4gIHB1YmxpYyBleHBvcnREZWNsYXJhdGlvbihkZWNsYXJhdGlvbjogdC5EZWNsYXJhdGlvbikge1xuICAgIHJldHVybiB0LmV4cG9ydE5hbWVkRGVjbGFyYXRpb24oZGVjbGFyYXRpb24sIFtdKTtcbiAgfVxuXG4gIHB1YmxpYyBhbm5vdGF0aW9uRnJvbVNjb3BlU3RhY2soc2NvcGU6IHN0cmluZ1tdKSB7XG4gICAgcmV0dXJuIHQuZ2VuZXJpY1R5cGVBbm5vdGF0aW9uKFxuICAgICAgdC5pZGVudGlmaWVyKFxuICAgICAgICBzY29wZS5qb2luKCdfJylcbiAgICAgIClcbiAgICApO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9