8f38bc062539adec6d8cb2a980e85c4f
'use strict';require('ts-jest').install("/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-types-generator/src/flow-modern/printer.ts", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst generator_1 = require(\"@babel/generator\");\nconst common_tags_1 = require(\"common-tags\");\nclass Printer {\n    constructor() {\n        this.printQueue = [];\n    }\n    print() {\n        return this.printQueue\n            .reduce((document, printable) => {\n            if (typeof printable === 'string') {\n                return document + printable;\n            }\n            else {\n                const documentPart = generator_1.default(printable).code;\n                return document + this.fixCommas(documentPart);\n            }\n        }, '');\n    }\n    enqueue(printable) {\n        this.printQueue = [\n            ...this.printQueue,\n            '\\n',\n            '\\n',\n            printable\n        ];\n    }\n    printAndClear() {\n        const output = this.print();\n        this.printQueue = [];\n        return output;\n    }\n    fixCommas(documentPart) {\n        const lines = documentPart.split('\\n');\n        let currentLine = 0;\n        let nextLine;\n        const newDocumentParts = [];\n        let maxCommentColumn = 0;\n        while (currentLine !== lines.length) {\n            nextLine = currentLine + 1;\n            const strippedNextLine = common_tags_1.stripIndent `${lines[nextLine]}`;\n            if (strippedNextLine.length === 1 && strippedNextLine[0] === ',') {\n                const currentLineContents = lines[currentLine];\n                const commentColumn = currentLineContents.indexOf('//');\n                if (maxCommentColumn < commentColumn) {\n                    maxCommentColumn = commentColumn;\n                }\n                const [contents, comment] = currentLineContents.split('//');\n                newDocumentParts.push({\n                    main: contents.replace(/\\s+$/g, '') + ',',\n                    comment: comment.trim()\n                });\n                currentLine++;\n            }\n            else {\n                newDocumentParts.push({\n                    main: lines[currentLine],\n                    comment: null\n                });\n            }\n            currentLine++;\n        }\n        return newDocumentParts.reduce((memo, part) => {\n            const { main, comment } = part;\n            let line;\n            if (comment !== null) {\n                const spacesBetween = maxCommentColumn - main.length;\n                line = `${main}${' '.repeat(spacesBetween)} // ${comment}`;\n            }\n            else {\n                line = main;\n            }\n            return [\n                ...memo,\n                line\n            ];\n        }, []).join('\\n');\n    }\n}\nexports.default = Printer;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJpbnRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInByaW50ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxnREFBd0M7QUFFeEMsNkNBQTBDO0FBSTFDO0lBQUE7UUFDVSxlQUFVLEdBQWdCLEVBQUUsQ0FBQTtJQXlHdEMsQ0FBQztJQXZHUSxLQUFLO1FBQ1YsT0FBTyxJQUFJLENBQUMsVUFBVTthQUNuQixNQUFNLENBQ0wsQ0FBQyxRQUFnQixFQUFFLFNBQVMsRUFBRSxFQUFFO1lBQzlCLElBQUksT0FBTyxTQUFTLEtBQUssUUFBUSxFQUFFO2dCQUNqQyxPQUFPLFFBQVEsR0FBRyxTQUFTLENBQUM7YUFDN0I7aUJBQU07Z0JBQ0wsTUFBTSxZQUFZLEdBQUcsbUJBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUM7Z0JBQzlDLE9BQU8sUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUM7YUFDaEQ7UUFDSCxDQUFDLEVBQ0QsRUFBRSxDQUNPLENBQUM7SUFDaEIsQ0FBQztJQUVNLE9BQU8sQ0FBQyxTQUFvQjtRQUNqQyxJQUFJLENBQUMsVUFBVSxHQUFHO1lBQ2hCLEdBQUcsSUFBSSxDQUFDLFVBQVU7WUFDbEIsSUFBSTtZQUNKLElBQUk7WUFDSixTQUFTO1NBQ1YsQ0FBQztJQUNKLENBQUM7SUFFTSxhQUFhO1FBQ2xCLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUM1QixJQUFJLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQztRQUNyQixPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBb0JPLFNBQVMsQ0FBQyxZQUFvQjtRQUNwQyxNQUFNLEtBQUssR0FBRyxZQUFZLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3ZDLElBQUksV0FBVyxHQUFHLENBQUMsQ0FBQztRQUNwQixJQUFJLFFBQVEsQ0FBQztRQUNiLE1BQU0sZ0JBQWdCLEdBQUcsRUFBRSxDQUFDO1FBRzVCLElBQUksZ0JBQWdCLEdBQUcsQ0FBQyxDQUFDO1FBRXpCLE9BQU8sV0FBVyxLQUFLLEtBQUssQ0FBQyxNQUFNLEVBQUU7WUFDbkMsUUFBUSxHQUFHLFdBQVcsR0FBRyxDQUFDLENBQUM7WUFDM0IsTUFBTSxnQkFBZ0IsR0FBRyx5QkFBVyxDQUFBLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7WUFDekQsSUFBSSxnQkFBZ0IsQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsRUFBRTtnQkFDaEUsTUFBTSxtQkFBbUIsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7Z0JBQy9DLE1BQU0sYUFBYSxHQUFHLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDeEQsSUFBSSxnQkFBZ0IsR0FBRyxhQUFhLEVBQUU7b0JBQ3BDLGdCQUFnQixHQUFHLGFBQWEsQ0FBQztpQkFDbEM7Z0JBRUQsTUFBTSxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsR0FBRyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQzVELGdCQUFnQixDQUFDLElBQUksQ0FBQztvQkFDcEIsSUFBSSxFQUFFLFFBQVEsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEdBQUc7b0JBQ3pDLE9BQU8sRUFBRSxPQUFPLENBQUMsSUFBSSxFQUFFO2lCQUN4QixDQUFDLENBQUM7Z0JBQ0gsV0FBVyxFQUFFLENBQUM7YUFDZjtpQkFBTTtnQkFDTCxnQkFBZ0IsQ0FBQyxJQUFJLENBQUM7b0JBQ3BCLElBQUksRUFBRSxLQUFLLENBQUMsV0FBVyxDQUFDO29CQUN4QixPQUFPLEVBQUUsSUFBSTtpQkFDZCxDQUFDLENBQUM7YUFDSjtZQUVELFdBQVcsRUFBRSxDQUFDO1NBQ2Y7UUFFRCxPQUFPLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQWMsRUFBRSxJQUFJLEVBQUUsRUFBRTtZQUN0RCxNQUFNLEVBQ0osSUFBSSxFQUNKLE9BQU8sRUFDUixHQUFHLElBQUksQ0FBQztZQUVULElBQUksSUFBSSxDQUFDO1lBQ1QsSUFBSSxPQUFPLEtBQUssSUFBSSxFQUFFO2dCQUNwQixNQUFNLGFBQWEsR0FBRyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO2dCQUNyRCxJQUFJLEdBQUcsR0FBRyxJQUFJLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsT0FBTyxPQUFPLEVBQUUsQ0FBQTthQUMzRDtpQkFBTTtnQkFDTCxJQUFJLEdBQUcsSUFBSSxDQUFDO2FBQ2I7WUFFRCxPQUFPO2dCQUNMLEdBQUcsSUFBSTtnQkFDUCxJQUFJO2FBQ0wsQ0FBQztRQUNKLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDcEIsQ0FBQztDQUNGO0FBMUdELDBCQTBHQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHQgZnJvbSAnQGJhYmVsL3R5cGVzJztcbmltcG9ydCBnZW5lcmF0ZSBmcm9tICdAYmFiZWwvZ2VuZXJhdG9yJztcblxuaW1wb3J0IHsgc3RyaXBJbmRlbnQgfSBmcm9tICdjb21tb24tdGFncyc7XG5cbnR5cGUgUHJpbnRhYmxlID0gdC5Ob2RlIHwgc3RyaW5nO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQcmludGVyIHtcbiAgcHJpdmF0ZSBwcmludFF1ZXVlOiBQcmludGFibGVbXSA9IFtdXG5cbiAgcHVibGljIHByaW50KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMucHJpbnRRdWV1ZVxuICAgICAgLnJlZHVjZShcbiAgICAgICAgKGRvY3VtZW50OiBzdHJpbmcsIHByaW50YWJsZSkgPT4ge1xuICAgICAgICAgIGlmICh0eXBlb2YgcHJpbnRhYmxlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50ICsgcHJpbnRhYmxlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBkb2N1bWVudFBhcnQgPSBnZW5lcmF0ZShwcmludGFibGUpLmNvZGU7XG4gICAgICAgICAgICByZXR1cm4gZG9jdW1lbnQgKyB0aGlzLmZpeENvbW1hcyhkb2N1bWVudFBhcnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgJydcbiAgICAgICkgYXMgc3RyaW5nO1xuICB9XG5cbiAgcHVibGljIGVucXVldWUocHJpbnRhYmxlOiBQcmludGFibGUpIHtcbiAgICB0aGlzLnByaW50UXVldWUgPSBbXG4gICAgICAuLi50aGlzLnByaW50UXVldWUsXG4gICAgICAnXFxuJyxcbiAgICAgICdcXG4nLFxuICAgICAgcHJpbnRhYmxlXG4gICAgXTtcbiAgfVxuXG4gIHB1YmxpYyBwcmludEFuZENsZWFyKCkge1xuICAgIGNvbnN0IG91dHB1dCA9IHRoaXMucHJpbnQoKTtcbiAgICB0aGlzLnByaW50UXVldWUgPSBbXTtcbiAgICByZXR1cm4gb3V0cHV0O1xuICB9XG5cbiAgLyoqXG4gICAqIFdoZW4gdXNpbmcgdHJhaWxpbmcgY29tbWFzIG9uIE9iamVjdFR5cGVQcm9wZXJ0aWVzIHdpdGhpblxuICAgKiBPYmplY3RUeXBlQW5ub3RhdGlvbnMsIHdlIGdldCB3ZWlyZCBiZWhhdmlvcjpcbiAgICogYGBgXG4gICAqIHtcbiAgICogICBob21lUGxhbmV0OiA/c3RyaW5nIC8vIGRlc2NyaXB0aW9uXG4gICAqICAgLFxuICAgKiAgIGZyaWVuZHM6IGFueSAgLy8gZGVzY3JpcHRpb25cbiAgICogfVxuICAgKiBgYGBcbiAgICogd2hlbiB3ZSB3YW50XG4gICAqIGBgYFxuICAgKiB7XG4gICAqICAgaG9tZVBsYW5ldDogP3N0cmluZywgLy8gZGVzY3JpcHRpb25cbiAgICogICBmcmllbmRzOiBhbnkgICAgICAgICAvLyBkZXNjcmlwdGlvblxuICAgKiB9XG4gICAqIGBgYFxuICAgKi9cbiAgcHJpdmF0ZSBmaXhDb21tYXMoZG9jdW1lbnRQYXJ0OiBzdHJpbmcpIHtcbiAgICBjb25zdCBsaW5lcyA9IGRvY3VtZW50UGFydC5zcGxpdCgnXFxuJyk7XG4gICAgbGV0IGN1cnJlbnRMaW5lID0gMDtcbiAgICBsZXQgbmV4dExpbmU7XG4gICAgY29uc3QgbmV3RG9jdW1lbnRQYXJ0cyA9IFtdO1xuICAgIC8vIEtlZXAgdHJhY2sgb2Ygd2hhdCBjb2x1bW4gY29tbWVudHMgc2hvdWxkIHN0YXJ0IG9uXG4gICAgLy8gdG8ga2VlcCB0aGluZ3MgYWxpZ25lZFxuICAgIGxldCBtYXhDb21tZW50Q29sdW1uID0gMDtcblxuICAgIHdoaWxlIChjdXJyZW50TGluZSAhPT0gbGluZXMubGVuZ3RoKSB7XG4gICAgICBuZXh0TGluZSA9IGN1cnJlbnRMaW5lICsgMTtcbiAgICAgIGNvbnN0IHN0cmlwcGVkTmV4dExpbmUgPSBzdHJpcEluZGVudGAke2xpbmVzW25leHRMaW5lXX1gO1xuICAgICAgaWYgKHN0cmlwcGVkTmV4dExpbmUubGVuZ3RoID09PSAxICYmIHN0cmlwcGVkTmV4dExpbmVbMF0gPT09ICcsJykge1xuICAgICAgICBjb25zdCBjdXJyZW50TGluZUNvbnRlbnRzID0gbGluZXNbY3VycmVudExpbmVdO1xuICAgICAgICBjb25zdCBjb21tZW50Q29sdW1uID0gY3VycmVudExpbmVDb250ZW50cy5pbmRleE9mKCcvLycpO1xuICAgICAgICBpZiAobWF4Q29tbWVudENvbHVtbiA8IGNvbW1lbnRDb2x1bW4pIHtcbiAgICAgICAgICBtYXhDb21tZW50Q29sdW1uID0gY29tbWVudENvbHVtbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IFtjb250ZW50cywgY29tbWVudF0gPSBjdXJyZW50TGluZUNvbnRlbnRzLnNwbGl0KCcvLycpO1xuICAgICAgICBuZXdEb2N1bWVudFBhcnRzLnB1c2goe1xuICAgICAgICAgIG1haW46IGNvbnRlbnRzLnJlcGxhY2UoL1xccyskL2csICcnKSArICcsJyxcbiAgICAgICAgICBjb21tZW50OiBjb21tZW50LnRyaW0oKVxuICAgICAgICB9KTtcbiAgICAgICAgY3VycmVudExpbmUrKztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5ld0RvY3VtZW50UGFydHMucHVzaCh7XG4gICAgICAgICAgbWFpbjogbGluZXNbY3VycmVudExpbmVdLFxuICAgICAgICAgIGNvbW1lbnQ6IG51bGxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGN1cnJlbnRMaW5lKys7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ld0RvY3VtZW50UGFydHMucmVkdWNlKChtZW1vOiBzdHJpbmdbXSwgcGFydCkgPT4ge1xuICAgICAgY29uc3Qge1xuICAgICAgICBtYWluLFxuICAgICAgICBjb21tZW50XG4gICAgICB9ID0gcGFydDtcblxuICAgICAgbGV0IGxpbmU7XG4gICAgICBpZiAoY29tbWVudCAhPT0gbnVsbCkge1xuICAgICAgICBjb25zdCBzcGFjZXNCZXR3ZWVuID0gbWF4Q29tbWVudENvbHVtbiAtIG1haW4ubGVuZ3RoO1xuICAgICAgICBsaW5lID0gYCR7bWFpbn0keycgJy5yZXBlYXQoc3BhY2VzQmV0d2Vlbil9IC8vICR7Y29tbWVudH1gXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsaW5lID0gbWFpbjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFtcbiAgICAgICAgLi4ubWVtbyxcbiAgICAgICAgbGluZVxuICAgICAgXTtcbiAgICB9LCBbXSkuam9pbignXFxuJyk7XG4gIH1cbn1cbiJdfQ==");"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const generator_1 = require("@babel/generator");
const common_tags_1 = require("common-tags");
class Printer {
    constructor() {
        this.printQueue = [];
    }
    print() {
        return this.printQueue.
        reduce((document, printable) => {
            if (typeof printable === 'string') {
                return document + printable;
            } else
            {
                const documentPart = generator_1.default(printable).code;
                return document + this.fixCommas(documentPart);
            }
        }, '');
    }
    enqueue(printable) {
        this.printQueue = [
        ...this.printQueue,
        '\n',
        '\n',
        printable];

    }
    printAndClear() {
        const output = this.print();
        this.printQueue = [];
        return output;
    }
    fixCommas(documentPart) {
        const lines = documentPart.split('\n');
        let currentLine = 0;
        let nextLine;
        const newDocumentParts = [];
        let maxCommentColumn = 0;
        while (currentLine !== lines.length) {
            nextLine = currentLine + 1;
            const strippedNextLine = common_tags_1.stripIndent`${lines[nextLine]}`;
            if (strippedNextLine.length === 1 && strippedNextLine[0] === ',') {
                const currentLineContents = lines[currentLine];
                const commentColumn = currentLineContents.indexOf('//');
                if (maxCommentColumn < commentColumn) {
                    maxCommentColumn = commentColumn;
                }
                const [contents, comment] = currentLineContents.split('//');
                newDocumentParts.push({
                    main: contents.replace(/\s+$/g, '') + ',',
                    comment: comment.trim() });

                currentLine++;
            } else
            {
                newDocumentParts.push({
                    main: lines[currentLine],
                    comment: null });

            }
            currentLine++;
        }
        return newDocumentParts.reduce((memo, part) => {
            const { main, comment } = part;
            let line;
            if (comment !== null) {
                const spacesBetween = maxCommentColumn - main.length;
                line = `${main}${' '.repeat(spacesBetween)} // ${comment}`;
            } else
            {
                line = main;
            }
            return [
            ...memo,
            line];

        }, []).join('\n');
    }}

exports.default = Printer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QWxCTCxDQUFQO0FBbUJELEtBekdIOztBQUFBLFFBQUEsT0FBQSxHQUFBLE9BQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyB0IGZyb20gJ0BiYWJlbC90eXBlcyc7XG5pbXBvcnQgZ2VuZXJhdGUgZnJvbSAnQGJhYmVsL2dlbmVyYXRvcic7XG5cbmltcG9ydCB7IHN0cmlwSW5kZW50IH0gZnJvbSAnY29tbW9uLXRhZ3MnO1xuXG50eXBlIFByaW50YWJsZSA9IHQuTm9kZSB8IHN0cmluZztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHJpbnRlciB7XG4gIHByaXZhdGUgcHJpbnRRdWV1ZTogUHJpbnRhYmxlW10gPSBbXVxuXG4gIHB1YmxpYyBwcmludCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLnByaW50UXVldWVcbiAgICAgIC5yZWR1Y2UoXG4gICAgICAgIChkb2N1bWVudDogc3RyaW5nLCBwcmludGFibGUpID0+IHtcbiAgICAgICAgICBpZiAodHlwZW9mIHByaW50YWJsZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiBkb2N1bWVudCArIHByaW50YWJsZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZG9jdW1lbnRQYXJ0ID0gZ2VuZXJhdGUocHJpbnRhYmxlKS5jb2RlO1xuICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50ICsgdGhpcy5maXhDb21tYXMoZG9jdW1lbnRQYXJ0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICcnXG4gICAgICApIGFzIHN0cmluZztcbiAgfVxuXG4gIHB1YmxpYyBlbnF1ZXVlKHByaW50YWJsZTogUHJpbnRhYmxlKSB7XG4gICAgdGhpcy5wcmludFF1ZXVlID0gW1xuICAgICAgLi4udGhpcy5wcmludFF1ZXVlLFxuICAgICAgJ1xcbicsXG4gICAgICAnXFxuJyxcbiAgICAgIHByaW50YWJsZVxuICAgIF07XG4gIH1cblxuICBwdWJsaWMgcHJpbnRBbmRDbGVhcigpIHtcbiAgICBjb25zdCBvdXRwdXQgPSB0aGlzLnByaW50KCk7XG4gICAgdGhpcy5wcmludFF1ZXVlID0gW107XG4gICAgcmV0dXJuIG91dHB1dDtcbiAgfVxuXG4gIC8qKlxuICAgKiBXaGVuIHVzaW5nIHRyYWlsaW5nIGNvbW1hcyBvbiBPYmplY3RUeXBlUHJvcGVydGllcyB3aXRoaW5cbiAgICogT2JqZWN0VHlwZUFubm90YXRpb25zLCB3ZSBnZXQgd2VpcmQgYmVoYXZpb3I6XG4gICAqIGBgYFxuICAgKiB7XG4gICAqICAgaG9tZVBsYW5ldDogP3N0cmluZyAvLyBkZXNjcmlwdGlvblxuICAgKiAgICxcbiAgICogICBmcmllbmRzOiBhbnkgIC8vIGRlc2NyaXB0aW9uXG4gICAqIH1cbiAgICogYGBgXG4gICAqIHdoZW4gd2Ugd2FudFxuICAgKiBgYGBcbiAgICoge1xuICAgKiAgIGhvbWVQbGFuZXQ6ID9zdHJpbmcsIC8vIGRlc2NyaXB0aW9uXG4gICAqICAgZnJpZW5kczogYW55ICAgICAgICAgLy8gZGVzY3JpcHRpb25cbiAgICogfVxuICAgKiBgYGBcbiAgICovXG4gIHByaXZhdGUgZml4Q29tbWFzKGRvY3VtZW50UGFydDogc3RyaW5nKSB7XG4gICAgY29uc3QgbGluZXMgPSBkb2N1bWVudFBhcnQuc3BsaXQoJ1xcbicpO1xuICAgIGxldCBjdXJyZW50TGluZSA9IDA7XG4gICAgbGV0IG5leHRMaW5lO1xuICAgIGNvbnN0IG5ld0RvY3VtZW50UGFydHMgPSBbXTtcbiAgICAvLyBLZWVwIHRyYWNrIG9mIHdoYXQgY29sdW1uIGNvbW1lbnRzIHNob3VsZCBzdGFydCBvblxuICAgIC8vIHRvIGtlZXAgdGhpbmdzIGFsaWduZWRcbiAgICBsZXQgbWF4Q29tbWVudENvbHVtbiA9IDA7XG5cbiAgICB3aGlsZSAoY3VycmVudExpbmUgIT09IGxpbmVzLmxlbmd0aCkge1xuICAgICAgbmV4dExpbmUgPSBjdXJyZW50TGluZSArIDE7XG4gICAgICBjb25zdCBzdHJpcHBlZE5leHRMaW5lID0gc3RyaXBJbmRlbnRgJHtsaW5lc1tuZXh0TGluZV19YDtcbiAgICAgIGlmIChzdHJpcHBlZE5leHRMaW5lLmxlbmd0aCA9PT0gMSAmJiBzdHJpcHBlZE5leHRMaW5lWzBdID09PSAnLCcpIHtcbiAgICAgICAgY29uc3QgY3VycmVudExpbmVDb250ZW50cyA9IGxpbmVzW2N1cnJlbnRMaW5lXTtcbiAgICAgICAgY29uc3QgY29tbWVudENvbHVtbiA9IGN1cnJlbnRMaW5lQ29udGVudHMuaW5kZXhPZignLy8nKTtcbiAgICAgICAgaWYgKG1heENvbW1lbnRDb2x1bW4gPCBjb21tZW50Q29sdW1uKSB7XG4gICAgICAgICAgbWF4Q29tbWVudENvbHVtbiA9IGNvbW1lbnRDb2x1bW47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBbY29udGVudHMsIGNvbW1lbnRdID0gY3VycmVudExpbmVDb250ZW50cy5zcGxpdCgnLy8nKTtcbiAgICAgICAgbmV3RG9jdW1lbnRQYXJ0cy5wdXNoKHtcbiAgICAgICAgICBtYWluOiBjb250ZW50cy5yZXBsYWNlKC9cXHMrJC9nLCAnJykgKyAnLCcsXG4gICAgICAgICAgY29tbWVudDogY29tbWVudC50cmltKClcbiAgICAgICAgfSk7XG4gICAgICAgIGN1cnJlbnRMaW5lKys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXdEb2N1bWVudFBhcnRzLnB1c2goe1xuICAgICAgICAgIG1haW46IGxpbmVzW2N1cnJlbnRMaW5lXSxcbiAgICAgICAgICBjb21tZW50OiBudWxsXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBjdXJyZW50TGluZSsrO1xuICAgIH1cblxuICAgIHJldHVybiBuZXdEb2N1bWVudFBhcnRzLnJlZHVjZSgobWVtbzogc3RyaW5nW10sIHBhcnQpID0+IHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgbWFpbixcbiAgICAgICAgY29tbWVudFxuICAgICAgfSA9IHBhcnQ7XG5cbiAgICAgIGxldCBsaW5lO1xuICAgICAgaWYgKGNvbW1lbnQgIT09IG51bGwpIHtcbiAgICAgICAgY29uc3Qgc3BhY2VzQmV0d2VlbiA9IG1heENvbW1lbnRDb2x1bW4gLSBtYWluLmxlbmd0aDtcbiAgICAgICAgbGluZSA9IGAke21haW59JHsnICcucmVwZWF0KHNwYWNlc0JldHdlZW4pfSAvLyAke2NvbW1lbnR9YFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGluZSA9IG1haW47XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBbXG4gICAgICAgIC4uLm1lbW8sXG4gICAgICAgIGxpbmVcbiAgICAgIF07XG4gICAgfSwgW10pLmpvaW4oJ1xcbicpO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9