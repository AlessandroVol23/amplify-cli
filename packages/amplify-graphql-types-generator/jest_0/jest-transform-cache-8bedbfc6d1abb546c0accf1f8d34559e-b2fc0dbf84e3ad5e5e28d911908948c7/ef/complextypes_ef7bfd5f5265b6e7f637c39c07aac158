d9d0fae7f466035b06741beea3b0a6c9
'use strict';require('ts-jest').install("/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-types-generator/src/utilities/complextypes.ts", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst graphql_1 = require(\"graphql\");\nconst S3_FIELD_NAMES = ['bucket', 'key', 'region'];\nfunction hasS3Fields(input) {\n    if (graphql_1.isObjectType(input) || graphql_1.isInputObjectType(input)) {\n        if (isS3Field(input)) {\n            return true;\n        }\n        const fields = input.getFields();\n        return Object.keys(fields)\n            .some(f => hasS3Fields(fields[f]));\n    }\n    return false;\n}\nexports.hasS3Fields = hasS3Fields;\nfunction isS3Field(field) {\n    if (graphql_1.isObjectType(field) || graphql_1.isInputObjectType(field)) {\n        const fields = field.getFields();\n        const stringFields = Object.keys(fields).filter(f => {\n            const typeName = graphql_1.getNamedType(fields[f].type);\n            return typeName.name === 'String';\n        });\n        const isS3FileField = S3_FIELD_NAMES.every(fieldName => stringFields.includes(fieldName));\n        if (isS3FileField) {\n            return true;\n        }\n    }\n    return false;\n}\nexports.isS3Field = isS3Field;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGxleHR5cGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY29tcGxleHR5cGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEscUNBQXFGO0FBRXJGLE1BQU0sY0FBYyxHQUFHLENBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxRQUFRLENBQUUsQ0FBQztBQUVwRCxxQkFBNEIsS0FBa0I7SUFDNUMsSUFBSSxzQkFBWSxDQUFDLEtBQUssQ0FBQyxJQUFJLDJCQUFpQixDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQ25ELElBQUksU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3BCLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFDRCxNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDakMsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQzthQUN2QixJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQU8sTUFBTSxDQUFDLENBQUMsQ0FBaUIsQ0FBQyxDQUFDLENBQUM7S0FDNUQ7SUFDRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUM7QUFWRCxrQ0FVQztBQUVELG1CQUEwQixLQUFrQjtJQUMxQyxJQUFJLHNCQUFZLENBQUMsS0FBSyxDQUFDLElBQUksMkJBQWlCLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDbkQsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ2pDLE1BQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ2xELE1BQU0sUUFBUSxHQUFHLHNCQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzlDLE9BQU8sUUFBUSxDQUFDLElBQUksS0FBSyxRQUFRLENBQUM7UUFDcEMsQ0FBQyxDQUFDLENBQUM7UUFDSCxNQUFNLGFBQWEsR0FBRyxjQUFjLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBQzFGLElBQUksYUFBYSxFQUFFO1lBQ2pCLE9BQU8sSUFBSSxDQUFDO1NBQ2I7S0FDRjtJQUNELE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQztBQWJELDhCQWFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR3JhcGhRTFR5cGUsIGlzSW5wdXRPYmplY3RUeXBlLCBnZXROYW1lZFR5cGUsIGlzT2JqZWN0VHlwZSB9IGZyb20gJ2dyYXBocWwnO1xuXG5jb25zdCBTM19GSUVMRF9OQU1FUyA9IFsnYnVja2V0JywgJ2tleScsICdyZWdpb24nIF07XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNTM0ZpZWxkcyhpbnB1dDogR3JhcGhRTFR5cGUpOiBib29sZWFuIHtcbiAgaWYgKGlzT2JqZWN0VHlwZShpbnB1dCkgfHwgaXNJbnB1dE9iamVjdFR5cGUoaW5wdXQpKSB7XG4gICAgaWYgKGlzUzNGaWVsZChpbnB1dCkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjb25zdCBmaWVsZHMgPSBpbnB1dC5nZXRGaWVsZHMoKTtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMoZmllbGRzKVxuICAgICAgLnNvbWUoZiA9PiBoYXNTM0ZpZWxkcygoPGFueT5maWVsZHNbZl0pIGFzIEdyYXBoUUxUeXBlKSk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNTM0ZpZWxkKGZpZWxkOiBHcmFwaFFMVHlwZSk6IGJvb2xlYW4ge1xuICBpZiAoaXNPYmplY3RUeXBlKGZpZWxkKSB8fCBpc0lucHV0T2JqZWN0VHlwZShmaWVsZCkpIHtcbiAgICBjb25zdCBmaWVsZHMgPSBmaWVsZC5nZXRGaWVsZHMoKTtcbiAgICBjb25zdCBzdHJpbmdGaWVsZHMgPSBPYmplY3Qua2V5cyhmaWVsZHMpLmZpbHRlcihmID0+IHtcbiAgICAgIGNvbnN0IHR5cGVOYW1lID0gZ2V0TmFtZWRUeXBlKGZpZWxkc1tmXS50eXBlKTtcbiAgICAgIHJldHVybiB0eXBlTmFtZS5uYW1lID09PSAnU3RyaW5nJztcbiAgICB9KTtcbiAgICBjb25zdCBpc1MzRmlsZUZpZWxkID0gUzNfRklFTERfTkFNRVMuZXZlcnkoZmllbGROYW1lID0+IHN0cmluZ0ZpZWxkcy5pbmNsdWRlcyhmaWVsZE5hbWUpKTtcbiAgICBpZiAoaXNTM0ZpbGVGaWVsZCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbiJdfQ==");"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = require("graphql");
const S3_FIELD_NAMES = ['bucket', 'key', 'region'];
function hasS3Fields(input) {
    if (graphql_1.isObjectType(input) || graphql_1.isInputObjectType(input)) {
        if (isS3Field(input)) {
            return true;
        }
        const fields = input.getFields();
        return Object.keys(fields).
        some(f => hasS3Fields(fields[f]));
    }
    return false;
}
exports.hasS3Fields = hasS3Fields;
function isS3Field(field) {
    if (graphql_1.isObjectType(field) || graphql_1.isInputObjectType(field)) {
        const fields = field.getFields();
        const stringFields = Object.keys(fields).filter(f => {
            const typeName = graphql_1.getNamedType(fields[f].type);
            return typeName.name === 'String';
        });
        const isS3FileField = S3_FIELD_NAMES.every(fieldName => stringFields.includes(fieldName));
        if (isS3FileField) {
            return true;
        }
    }
    return false;
}
exports.isS3Field = isS3Field;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBsZXh0eXBlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE1BQUEsWUFBQSxRQUFBLFNBQUEsQ0FBQTtBQUVBLE1BQU0saUJBQWlCLENBQUMsUUFBRCxFQUFXLEtBQVgsRUFBa0IsUUFBbEIsQ0FBdkI7QUFFQSxTQUFBLFdBQUEsQ0FBNEIsS0FBNUIsRUFBOEM7QUFDNUMsUUFBSSxVQUFBLFlBQUEsQ0FBYSxLQUFiLEtBQXVCLFVBQUEsaUJBQUEsQ0FBa0IsS0FBbEIsQ0FBM0IsRUFBcUQ7QUFDbkQsWUFBSSxVQUFVLEtBQVYsQ0FBSixFQUFzQjtBQUNwQixtQkFBTyxJQUFQO0FBQ0Q7QUFDRCxjQUFNLFNBQVMsTUFBTSxTQUFOLEVBQWY7QUFDQSxlQUFPLE9BQU8sSUFBUCxDQUFZLE1BQVo7QUFDSixZQURJLENBQ0MsS0FBSyxZQUFrQixPQUFPLENBQVAsQ0FBbEIsQ0FETixDQUFQO0FBRUQ7QUFDRCxXQUFPLEtBQVA7QUFDRDtBQVZELFFBQUEsV0FBQSxHQUFBLFdBQUE7QUFZQSxTQUFBLFNBQUEsQ0FBMEIsS0FBMUIsRUFBNEM7QUFDMUMsUUFBSSxVQUFBLFlBQUEsQ0FBYSxLQUFiLEtBQXVCLFVBQUEsaUJBQUEsQ0FBa0IsS0FBbEIsQ0FBM0IsRUFBcUQ7QUFDbkQsY0FBTSxTQUFTLE1BQU0sU0FBTixFQUFmO0FBQ0EsY0FBTSxlQUFlLE9BQU8sSUFBUCxDQUFZLE1BQVosRUFBb0IsTUFBcEIsQ0FBMkIsS0FBSTtBQUNsRCxrQkFBTSxXQUFXLFVBQUEsWUFBQSxDQUFhLE9BQU8sQ0FBUCxFQUFVLElBQXZCLENBQWpCO0FBQ0EsbUJBQU8sU0FBUyxJQUFULEtBQWtCLFFBQXpCO0FBQ0QsU0FIb0IsQ0FBckI7QUFJQSxjQUFNLGdCQUFnQixlQUFlLEtBQWYsQ0FBcUIsYUFBYSxhQUFhLFFBQWIsQ0FBc0IsU0FBdEIsQ0FBbEMsQ0FBdEI7QUFDQSxZQUFJLGFBQUosRUFBbUI7QUFDakIsbUJBQU8sSUFBUDtBQUNEO0FBQ0Y7QUFDRCxXQUFPLEtBQVA7QUFDRDtBQWJELFFBQUEsU0FBQSxHQUFBLFNBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHcmFwaFFMVHlwZSwgaXNJbnB1dE9iamVjdFR5cGUsIGdldE5hbWVkVHlwZSwgaXNPYmplY3RUeXBlIH0gZnJvbSAnZ3JhcGhxbCc7XG5cbmNvbnN0IFMzX0ZJRUxEX05BTUVTID0gWydidWNrZXQnLCAna2V5JywgJ3JlZ2lvbicgXTtcblxuZXhwb3J0IGZ1bmN0aW9uIGhhc1MzRmllbGRzKGlucHV0OiBHcmFwaFFMVHlwZSk6IGJvb2xlYW4ge1xuICBpZiAoaXNPYmplY3RUeXBlKGlucHV0KSB8fCBpc0lucHV0T2JqZWN0VHlwZShpbnB1dCkpIHtcbiAgICBpZiAoaXNTM0ZpZWxkKGlucHV0KSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGNvbnN0IGZpZWxkcyA9IGlucHV0LmdldEZpZWxkcygpO1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhmaWVsZHMpXG4gICAgICAuc29tZShmID0+IGhhc1MzRmllbGRzKCg8YW55PmZpZWxkc1tmXSkgYXMgR3JhcGhRTFR5cGUpKTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1MzRmllbGQoZmllbGQ6IEdyYXBoUUxUeXBlKTogYm9vbGVhbiB7XG4gIGlmIChpc09iamVjdFR5cGUoZmllbGQpIHx8IGlzSW5wdXRPYmplY3RUeXBlKGZpZWxkKSkge1xuICAgIGNvbnN0IGZpZWxkcyA9IGZpZWxkLmdldEZpZWxkcygpO1xuICAgIGNvbnN0IHN0cmluZ0ZpZWxkcyA9IE9iamVjdC5rZXlzKGZpZWxkcykuZmlsdGVyKGYgPT4ge1xuICAgICAgY29uc3QgdHlwZU5hbWUgPSBnZXROYW1lZFR5cGUoZmllbGRzW2ZdLnR5cGUpO1xuICAgICAgcmV0dXJuIHR5cGVOYW1lLm5hbWUgPT09ICdTdHJpbmcnO1xuICAgIH0pO1xuICAgIGNvbnN0IGlzUzNGaWxlRmllbGQgPSBTM19GSUVMRF9OQU1FUy5ldmVyeShmaWVsZE5hbWUgPT4gc3RyaW5nRmllbGRzLmluY2x1ZGVzKGZpZWxkTmFtZSkpO1xuICAgIGlmIChpc1MzRmlsZUZpZWxkKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==