{"version":3,"sources":["complextypes.ts"],"names":[],"mappings":";;AAAA,MAAA,YAAA,QAAA,SAAA,CAAA;AAEA,MAAM,iBAAiB,CAAC,QAAD,EAAW,KAAX,EAAkB,QAAlB,CAAvB;AAEA,SAAA,WAAA,CAA4B,KAA5B,EAA8C;AAC5C,QAAI,UAAA,YAAA,CAAa,KAAb,KAAuB,UAAA,iBAAA,CAAkB,KAAlB,CAA3B,EAAqD;AACnD,YAAI,UAAU,KAAV,CAAJ,EAAsB;AACpB,mBAAO,IAAP;AACD;AACD,cAAM,SAAS,MAAM,SAAN,EAAf;AACA,eAAO,OAAO,IAAP,CAAY,MAAZ;AACJ,YADI,CACC,KAAK,YAAkB,OAAO,CAAP,CAAlB,CADN,CAAP;AAED;AACD,WAAO,KAAP;AACD;AAVD,QAAA,WAAA,GAAA,WAAA;AAYA,SAAA,SAAA,CAA0B,KAA1B,EAA4C;AAC1C,QAAI,UAAA,YAAA,CAAa,KAAb,KAAuB,UAAA,iBAAA,CAAkB,KAAlB,CAA3B,EAAqD;AACnD,cAAM,SAAS,MAAM,SAAN,EAAf;AACA,cAAM,eAAe,OAAO,IAAP,CAAY,MAAZ,EAAoB,MAApB,CAA2B,KAAI;AAClD,kBAAM,WAAW,UAAA,YAAA,CAAa,OAAO,CAAP,EAAU,IAAvB,CAAjB;AACA,mBAAO,SAAS,IAAT,KAAkB,QAAzB;AACD,SAHoB,CAArB;AAIA,cAAM,gBAAgB,eAAe,KAAf,CAAqB,aAAa,aAAa,QAAb,CAAsB,SAAtB,CAAlC,CAAtB;AACA,YAAI,aAAJ,EAAmB;AACjB,mBAAO,IAAP;AACD;AACF;AACD,WAAO,KAAP;AACD;AAbD,QAAA,SAAA,GAAA,SAAA","sourcesContent":["import { GraphQLType, isInputObjectType, getNamedType, isObjectType } from 'graphql';\n\nconst S3_FIELD_NAMES = ['bucket', 'key', 'region' ];\n\nexport function hasS3Fields(input: GraphQLType): boolean {\n  if (isObjectType(input) || isInputObjectType(input)) {\n    if (isS3Field(input)) {\n      return true;\n    }\n    const fields = input.getFields();\n    return Object.keys(fields)\n      .some(f => hasS3Fields((<any>fields[f]) as GraphQLType));\n  }\n  return false;\n}\n\nexport function isS3Field(field: GraphQLType): boolean {\n  if (isObjectType(field) || isInputObjectType(field)) {\n    const fields = field.getFields();\n    const stringFields = Object.keys(fields).filter(f => {\n      const typeName = getNamedType(fields[f].type);\n      return typeName.name === 'String';\n    });\n    const isS3FileField = S3_FIELD_NAMES.every(fieldName => stringFields.includes(fieldName));\n    if (isS3FileField) {\n      return true;\n    }\n  }\n  return false;\n}\n"],"sourceRoot":""}