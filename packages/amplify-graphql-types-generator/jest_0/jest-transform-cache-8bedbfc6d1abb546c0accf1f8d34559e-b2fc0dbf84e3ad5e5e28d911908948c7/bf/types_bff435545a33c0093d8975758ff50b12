609b44ecc9b579bcebe39b51529f03f3
'use strict';require('ts-jest').install("/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-types-generator/src/scala/types.js", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst graphql_1 = require(\"graphql\");\nconst builtInScalarMap = {\n    [graphql_1.GraphQLString.name]: 'String',\n    [graphql_1.GraphQLInt.name]: 'Int',\n    [graphql_1.GraphQLFloat.name]: 'Double',\n    [graphql_1.GraphQLBoolean.name]: 'Boolean',\n    [graphql_1.GraphQLID.name]: 'String',\n};\nfunction possibleTypesForType(context, type) {\n    if (graphql_1.isAbstractType(type)) {\n        return context.schema.getPossibleTypes(type);\n    }\n    else {\n        return [type];\n    }\n}\nexports.possibleTypesForType = possibleTypesForType;\nfunction typeNameFromGraphQLType(context, type, bareTypeName, isOptional) {\n    if (type instanceof graphql_1.GraphQLNonNull) {\n        return typeNameFromGraphQLType(context, type.ofType, bareTypeName, isOptional || false);\n    }\n    else if (isOptional === undefined) {\n        isOptional = true;\n    }\n    let typeName;\n    if (type instanceof graphql_1.GraphQLList) {\n        typeName = 'Seq[' + typeNameFromGraphQLType(context, type.ofType, bareTypeName) + ']';\n    }\n    else if (type instanceof graphql_1.GraphQLScalarType) {\n        typeName = typeNameForScalarType(context, type);\n    }\n    else if (type instanceof graphql_1.GraphQLEnumType) {\n        typeName = \"String\";\n    }\n    else {\n        typeName = bareTypeName || type.name;\n    }\n    return isOptional ? `Option[${typeName}]` : typeName;\n}\nexports.typeNameFromGraphQLType = typeNameFromGraphQLType;\nfunction typeNameForScalarType(context, type) {\n    return builtInScalarMap[type.name] || (context.passthroughCustomScalars ? context.customScalarsPrefix + type.name : graphql_1.GraphQLString);\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0eXBlcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQVNBLHFDQVlpQjtBQUVqQixNQUFNLGdCQUFnQixHQUFHO0lBQ3ZCLENBQUMsdUJBQWEsQ0FBQyxJQUFJLENBQUMsRUFBRSxRQUFRO0lBQzlCLENBQUMsb0JBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLO0lBQ3hCLENBQUMsc0JBQVksQ0FBQyxJQUFJLENBQUMsRUFBRSxRQUFRO0lBQzdCLENBQUMsd0JBQWMsQ0FBQyxJQUFJLENBQUMsRUFBRSxTQUFTO0lBQ2hDLENBQUMsbUJBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRSxRQUFRO0NBQzNCLENBQUE7QUFFRCw4QkFBcUMsT0FBTyxFQUFFLElBQUk7SUFDaEQsSUFBSSx3QkFBYyxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQ3hCLE9BQU8sT0FBTyxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUM5QztTQUFNO1FBQ0wsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ2Y7QUFDSCxDQUFDO0FBTkQsb0RBTUM7QUFFRCxpQ0FBd0MsT0FBTyxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsVUFBVTtJQUM3RSxJQUFJLElBQUksWUFBWSx3QkFBYyxFQUFFO1FBQ2xDLE9BQU8sdUJBQXVCLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsWUFBWSxFQUFFLFVBQVUsSUFBSSxLQUFLLENBQUMsQ0FBQTtLQUN4RjtTQUFNLElBQUksVUFBVSxLQUFLLFNBQVMsRUFBRTtRQUNuQyxVQUFVLEdBQUcsSUFBSSxDQUFDO0tBQ25CO0lBRUQsSUFBSSxRQUFRLENBQUM7SUFDYixJQUFJLElBQUksWUFBWSxxQkFBVyxFQUFFO1FBQy9CLFFBQVEsR0FBRyxNQUFNLEdBQUcsdUJBQXVCLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsWUFBWSxDQUFDLEdBQUcsR0FBRyxDQUFDO0tBQ3ZGO1NBQU0sSUFBSSxJQUFJLFlBQVksMkJBQWlCLEVBQUU7UUFDNUMsUUFBUSxHQUFHLHFCQUFxQixDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztLQUNqRDtTQUFNLElBQUksSUFBSSxZQUFZLHlCQUFlLEVBQUU7UUFDMUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztLQUNyQjtTQUFNO1FBQ0wsUUFBUSxHQUFHLFlBQVksSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDO0tBQ3RDO0lBRUQsT0FBTyxVQUFVLENBQUMsQ0FBQyxDQUFDLFVBQVUsUUFBUSxHQUFHLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQztBQUN2RCxDQUFDO0FBbkJELDBEQW1CQztBQUVELCtCQUErQixPQUFPLEVBQUUsSUFBSTtJQUMxQyxPQUFPLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQyxJQUFJLENBQUEsQ0FBQyxDQUFDLHVCQUFhLENBQUMsQ0FBQTtBQUNuSSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgam9pbixcbiAgYmxvY2ssXG4gIHdyYXAsXG4gIGluZGVudFxufSBmcm9tICcuLi91dGlsaXRpZXMvcHJpbnRpbmcnO1xuXG5pbXBvcnQgeyBjYW1lbENhc2UgfSBmcm9tICdjaGFuZ2UtY2FzZSc7XG5cbmltcG9ydCB7XG4gIEdyYXBoUUxTdHJpbmcsXG4gIEdyYXBoUUxJbnQsXG4gIEdyYXBoUUxGbG9hdCxcbiAgR3JhcGhRTEJvb2xlYW4sXG4gIEdyYXBoUUxJRCxcbiAgR3JhcGhRTExpc3QsXG4gIEdyYXBoUUxOb25OdWxsLFxuICBHcmFwaFFMU2NhbGFyVHlwZSxcbiAgR3JhcGhRTEVudW1UeXBlLFxuICBpc0NvbXBvc2l0ZVR5cGUsXG4gIGlzQWJzdHJhY3RUeXBlXG59IGZyb20gJ2dyYXBocWwnO1xuXG5jb25zdCBidWlsdEluU2NhbGFyTWFwID0ge1xuICBbR3JhcGhRTFN0cmluZy5uYW1lXTogJ1N0cmluZycsXG4gIFtHcmFwaFFMSW50Lm5hbWVdOiAnSW50JyxcbiAgW0dyYXBoUUxGbG9hdC5uYW1lXTogJ0RvdWJsZScsXG4gIFtHcmFwaFFMQm9vbGVhbi5uYW1lXTogJ0Jvb2xlYW4nLFxuICBbR3JhcGhRTElELm5hbWVdOiAnU3RyaW5nJyxcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBvc3NpYmxlVHlwZXNGb3JUeXBlKGNvbnRleHQsIHR5cGUpIHtcbiAgaWYgKGlzQWJzdHJhY3RUeXBlKHR5cGUpKSB7XG4gICAgcmV0dXJuIGNvbnRleHQuc2NoZW1hLmdldFBvc3NpYmxlVHlwZXModHlwZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFt0eXBlXTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdHlwZU5hbWVGcm9tR3JhcGhRTFR5cGUoY29udGV4dCwgdHlwZSwgYmFyZVR5cGVOYW1lLCBpc09wdGlvbmFsKSB7XG4gIGlmICh0eXBlIGluc3RhbmNlb2YgR3JhcGhRTE5vbk51bGwpIHtcbiAgICByZXR1cm4gdHlwZU5hbWVGcm9tR3JhcGhRTFR5cGUoY29udGV4dCwgdHlwZS5vZlR5cGUsIGJhcmVUeXBlTmFtZSwgaXNPcHRpb25hbCB8fCBmYWxzZSlcbiAgfSBlbHNlIGlmIChpc09wdGlvbmFsID09PSB1bmRlZmluZWQpIHtcbiAgICBpc09wdGlvbmFsID0gdHJ1ZTtcbiAgfVxuXG4gIGxldCB0eXBlTmFtZTtcbiAgaWYgKHR5cGUgaW5zdGFuY2VvZiBHcmFwaFFMTGlzdCkge1xuICAgIHR5cGVOYW1lID0gJ1NlcVsnICsgdHlwZU5hbWVGcm9tR3JhcGhRTFR5cGUoY29udGV4dCwgdHlwZS5vZlR5cGUsIGJhcmVUeXBlTmFtZSkgKyAnXSc7XG4gIH0gZWxzZSBpZiAodHlwZSBpbnN0YW5jZW9mIEdyYXBoUUxTY2FsYXJUeXBlKSB7XG4gICAgdHlwZU5hbWUgPSB0eXBlTmFtZUZvclNjYWxhclR5cGUoY29udGV4dCwgdHlwZSk7XG4gIH0gZWxzZSBpZiAodHlwZSBpbnN0YW5jZW9mIEdyYXBoUUxFbnVtVHlwZSkge1xuICAgIHR5cGVOYW1lID0gXCJTdHJpbmdcIjtcbiAgfSBlbHNlIHtcbiAgICB0eXBlTmFtZSA9IGJhcmVUeXBlTmFtZSB8fCB0eXBlLm5hbWU7XG4gIH1cblxuICByZXR1cm4gaXNPcHRpb25hbCA/IGBPcHRpb25bJHt0eXBlTmFtZX1dYCA6IHR5cGVOYW1lO1xufVxuXG5mdW5jdGlvbiB0eXBlTmFtZUZvclNjYWxhclR5cGUoY29udGV4dCwgdHlwZSkge1xuICByZXR1cm4gYnVpbHRJblNjYWxhck1hcFt0eXBlLm5hbWVdIHx8IChjb250ZXh0LnBhc3N0aHJvdWdoQ3VzdG9tU2NhbGFycyA/IGNvbnRleHQuY3VzdG9tU2NhbGFyc1ByZWZpeCArIHR5cGUubmFtZTogR3JhcGhRTFN0cmluZylcbn1cbiJdfQ==");"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = require("graphql");
const builtInScalarMap = {
    [graphql_1.GraphQLString.name]: 'String',
    [graphql_1.GraphQLInt.name]: 'Int',
    [graphql_1.GraphQLFloat.name]: 'Double',
    [graphql_1.GraphQLBoolean.name]: 'Boolean',
    [graphql_1.GraphQLID.name]: 'String' };

function possibleTypesForType(context, type) {
    if (graphql_1.isAbstractType(type)) {
        return context.schema.getPossibleTypes(type);
    } else
    {
        return [type];
    }
}
exports.possibleTypesForType = possibleTypesForType;
function typeNameFromGraphQLType(context, type, bareTypeName, isOptional) {
    if (type instanceof graphql_1.GraphQLNonNull) {
        return typeNameFromGraphQLType(context, type.ofType, bareTypeName, isOptional || false);
    } else
    if (isOptional === undefined) {
        isOptional = true;
    }
    let typeName;
    if (type instanceof graphql_1.GraphQLList) {
        typeName = 'Seq[' + typeNameFromGraphQLType(context, type.ofType, bareTypeName) + ']';
    } else
    if (type instanceof graphql_1.GraphQLScalarType) {
        typeName = typeNameForScalarType(context, type);
    } else
    if (type instanceof graphql_1.GraphQLEnumType) {
        typeName = "String";
    } else
    {
        typeName = bareTypeName || type.name;
    }
    return isOptional ? `Option[${typeName}]` : typeName;
}
exports.typeNameFromGraphQLType = typeNameFromGraphQLType;
function typeNameForScalarType(context, type) {
    return builtInScalarMap[type.name] || (context.passthroughCustomScalars ? context.customScalarsPrefix + type.name : graphql_1.GraphQLString);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInR5cGVzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBU0EsTUFBQSxZQUFBLFFBQUEsU0FBQSxDQUFBO0FBY0EsTUFBTSxtQkFBbUI7QUFDdkIsS0FBQyxVQUFBLGFBQUEsQ0FBYyxJQUFmLEdBQXNCLFFBREM7QUFFdkIsS0FBQyxVQUFBLFVBQUEsQ0FBVyxJQUFaLEdBQW1CLEtBRkk7QUFHdkIsS0FBQyxVQUFBLFlBQUEsQ0FBYSxJQUFkLEdBQXFCLFFBSEU7QUFJdkIsS0FBQyxVQUFBLGNBQUEsQ0FBZSxJQUFoQixHQUF1QixTQUpBO0FBS3ZCLEtBQUMsVUFBQSxTQUFBLENBQVUsSUFBWCxHQUFrQixRQUxLLEVBQXpCOztBQVFBLFNBQUEsb0JBQUEsQ0FBcUMsT0FBckMsRUFBOEMsSUFBOUMsRUFBa0Q7QUFDaEQsUUFBSSxVQUFBLGNBQUEsQ0FBZSxJQUFmLENBQUosRUFBMEI7QUFDeEIsZUFBTyxRQUFRLE1BQVIsQ0FBZSxnQkFBZixDQUFnQyxJQUFoQyxDQUFQO0FBQ0QsS0FGRDtBQUVPO0FBQ0wsZUFBTyxDQUFDLElBQUQsQ0FBUDtBQUNEO0FBQ0Y7QUFORCxRQUFBLG9CQUFBLEdBQUEsb0JBQUE7QUFRQSxTQUFBLHVCQUFBLENBQXdDLE9BQXhDLEVBQWlELElBQWpELEVBQXVELFlBQXZELEVBQXFFLFVBQXJFLEVBQStFO0FBQzdFLFFBQUksZ0JBQWdCLFVBQUEsY0FBcEIsRUFBb0M7QUFDbEMsZUFBTyx3QkFBd0IsT0FBeEIsRUFBaUMsS0FBSyxNQUF0QyxFQUE4QyxZQUE5QyxFQUE0RCxjQUFjLEtBQTFFLENBQVA7QUFDRCxLQUZEO0FBRU8sUUFBSSxlQUFlLFNBQW5CLEVBQThCO0FBQ25DLHFCQUFhLElBQWI7QUFDRDtBQUVELFFBQUksUUFBSjtBQUNBLFFBQUksZ0JBQWdCLFVBQUEsV0FBcEIsRUFBaUM7QUFDL0IsbUJBQVcsU0FBUyx3QkFBd0IsT0FBeEIsRUFBaUMsS0FBSyxNQUF0QyxFQUE4QyxZQUE5QyxDQUFULEdBQXVFLEdBQWxGO0FBQ0QsS0FGRDtBQUVPLFFBQUksZ0JBQWdCLFVBQUEsaUJBQXBCLEVBQXVDO0FBQzVDLG1CQUFXLHNCQUFzQixPQUF0QixFQUErQixJQUEvQixDQUFYO0FBQ0QsS0FGTTtBQUVBLFFBQUksZ0JBQWdCLFVBQUEsZUFBcEIsRUFBcUM7QUFDMUMsbUJBQVcsUUFBWDtBQUNELEtBRk07QUFFQTtBQUNMLG1CQUFXLGdCQUFnQixLQUFLLElBQWhDO0FBQ0Q7QUFFRCxXQUFPLGFBQWEsVUFBVSxRQUFRLEdBQS9CLEdBQXFDLFFBQTVDO0FBQ0Q7QUFuQkQsUUFBQSx1QkFBQSxHQUFBLHVCQUFBO0FBcUJBLFNBQUEscUJBQUEsQ0FBK0IsT0FBL0IsRUFBd0MsSUFBeEMsRUFBNEM7QUFDMUMsV0FBTyxpQkFBaUIsS0FBSyxJQUF0QixNQUFnQyxRQUFRLHdCQUFSLEdBQW1DLFFBQVEsbUJBQVIsR0FBOEIsS0FBSyxJQUF0RSxHQUE0RSxVQUFBLGFBQTVHLENBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGpvaW4sXG4gIGJsb2NrLFxuICB3cmFwLFxuICBpbmRlbnRcbn0gZnJvbSAnLi4vdXRpbGl0aWVzL3ByaW50aW5nJztcblxuaW1wb3J0IHsgY2FtZWxDYXNlIH0gZnJvbSAnY2hhbmdlLWNhc2UnO1xuXG5pbXBvcnQge1xuICBHcmFwaFFMU3RyaW5nLFxuICBHcmFwaFFMSW50LFxuICBHcmFwaFFMRmxvYXQsXG4gIEdyYXBoUUxCb29sZWFuLFxuICBHcmFwaFFMSUQsXG4gIEdyYXBoUUxMaXN0LFxuICBHcmFwaFFMTm9uTnVsbCxcbiAgR3JhcGhRTFNjYWxhclR5cGUsXG4gIEdyYXBoUUxFbnVtVHlwZSxcbiAgaXNDb21wb3NpdGVUeXBlLFxuICBpc0Fic3RyYWN0VHlwZVxufSBmcm9tICdncmFwaHFsJztcblxuY29uc3QgYnVpbHRJblNjYWxhck1hcCA9IHtcbiAgW0dyYXBoUUxTdHJpbmcubmFtZV06ICdTdHJpbmcnLFxuICBbR3JhcGhRTEludC5uYW1lXTogJ0ludCcsXG4gIFtHcmFwaFFMRmxvYXQubmFtZV06ICdEb3VibGUnLFxuICBbR3JhcGhRTEJvb2xlYW4ubmFtZV06ICdCb29sZWFuJyxcbiAgW0dyYXBoUUxJRC5uYW1lXTogJ1N0cmluZycsXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwb3NzaWJsZVR5cGVzRm9yVHlwZShjb250ZXh0LCB0eXBlKSB7XG4gIGlmIChpc0Fic3RyYWN0VHlwZSh0eXBlKSkge1xuICAgIHJldHVybiBjb250ZXh0LnNjaGVtYS5nZXRQb3NzaWJsZVR5cGVzKHR5cGUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBbdHlwZV07XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHR5cGVOYW1lRnJvbUdyYXBoUUxUeXBlKGNvbnRleHQsIHR5cGUsIGJhcmVUeXBlTmFtZSwgaXNPcHRpb25hbCkge1xuICBpZiAodHlwZSBpbnN0YW5jZW9mIEdyYXBoUUxOb25OdWxsKSB7XG4gICAgcmV0dXJuIHR5cGVOYW1lRnJvbUdyYXBoUUxUeXBlKGNvbnRleHQsIHR5cGUub2ZUeXBlLCBiYXJlVHlwZU5hbWUsIGlzT3B0aW9uYWwgfHwgZmFsc2UpXG4gIH0gZWxzZSBpZiAoaXNPcHRpb25hbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgaXNPcHRpb25hbCA9IHRydWU7XG4gIH1cblxuICBsZXQgdHlwZU5hbWU7XG4gIGlmICh0eXBlIGluc3RhbmNlb2YgR3JhcGhRTExpc3QpIHtcbiAgICB0eXBlTmFtZSA9ICdTZXFbJyArIHR5cGVOYW1lRnJvbUdyYXBoUUxUeXBlKGNvbnRleHQsIHR5cGUub2ZUeXBlLCBiYXJlVHlwZU5hbWUpICsgJ10nO1xuICB9IGVsc2UgaWYgKHR5cGUgaW5zdGFuY2VvZiBHcmFwaFFMU2NhbGFyVHlwZSkge1xuICAgIHR5cGVOYW1lID0gdHlwZU5hbWVGb3JTY2FsYXJUeXBlKGNvbnRleHQsIHR5cGUpO1xuICB9IGVsc2UgaWYgKHR5cGUgaW5zdGFuY2VvZiBHcmFwaFFMRW51bVR5cGUpIHtcbiAgICB0eXBlTmFtZSA9IFwiU3RyaW5nXCI7XG4gIH0gZWxzZSB7XG4gICAgdHlwZU5hbWUgPSBiYXJlVHlwZU5hbWUgfHwgdHlwZS5uYW1lO1xuICB9XG5cbiAgcmV0dXJuIGlzT3B0aW9uYWwgPyBgT3B0aW9uWyR7dHlwZU5hbWV9XWAgOiB0eXBlTmFtZTtcbn1cblxuZnVuY3Rpb24gdHlwZU5hbWVGb3JTY2FsYXJUeXBlKGNvbnRleHQsIHR5cGUpIHtcbiAgcmV0dXJuIGJ1aWx0SW5TY2FsYXJNYXBbdHlwZS5uYW1lXSB8fCAoY29udGV4dC5wYXNzdGhyb3VnaEN1c3RvbVNjYWxhcnMgPyBjb250ZXh0LmN1c3RvbVNjYWxhcnNQcmVmaXggKyB0eXBlLm5hbWU6IEdyYXBoUUxTdHJpbmcpXG59XG4iXSwic291cmNlUm9vdCI6IiJ9