{"version":3,"sources":["types.js"],"names":[],"mappings":";;AASA,MAAA,YAAA,QAAA,SAAA,CAAA;AAcA,MAAM,mBAAmB;AACvB,KAAC,UAAA,aAAA,CAAc,IAAf,GAAsB,QADC;AAEvB,KAAC,UAAA,UAAA,CAAW,IAAZ,GAAmB,KAFI;AAGvB,KAAC,UAAA,YAAA,CAAa,IAAd,GAAqB,QAHE;AAIvB,KAAC,UAAA,cAAA,CAAe,IAAhB,GAAuB,SAJA;AAKvB,KAAC,UAAA,SAAA,CAAU,IAAX,GAAkB,QALK,EAAzB;;AAQA,SAAA,oBAAA,CAAqC,OAArC,EAA8C,IAA9C,EAAkD;AAChD,QAAI,UAAA,cAAA,CAAe,IAAf,CAAJ,EAA0B;AACxB,eAAO,QAAQ,MAAR,CAAe,gBAAf,CAAgC,IAAhC,CAAP;AACD,KAFD;AAEO;AACL,eAAO,CAAC,IAAD,CAAP;AACD;AACF;AAND,QAAA,oBAAA,GAAA,oBAAA;AAQA,SAAA,uBAAA,CAAwC,OAAxC,EAAiD,IAAjD,EAAuD,YAAvD,EAAqE,UAArE,EAA+E;AAC7E,QAAI,gBAAgB,UAAA,cAApB,EAAoC;AAClC,eAAO,wBAAwB,OAAxB,EAAiC,KAAK,MAAtC,EAA8C,YAA9C,EAA4D,cAAc,KAA1E,CAAP;AACD,KAFD;AAEO,QAAI,eAAe,SAAnB,EAA8B;AACnC,qBAAa,IAAb;AACD;AAED,QAAI,QAAJ;AACA,QAAI,gBAAgB,UAAA,WAApB,EAAiC;AAC/B,mBAAW,SAAS,wBAAwB,OAAxB,EAAiC,KAAK,MAAtC,EAA8C,YAA9C,CAAT,GAAuE,GAAlF;AACD,KAFD;AAEO,QAAI,gBAAgB,UAAA,iBAApB,EAAuC;AAC5C,mBAAW,sBAAsB,OAAtB,EAA+B,IAA/B,CAAX;AACD,KAFM;AAEA,QAAI,gBAAgB,UAAA,eAApB,EAAqC;AAC1C,mBAAW,QAAX;AACD,KAFM;AAEA;AACL,mBAAW,gBAAgB,KAAK,IAAhC;AACD;AAED,WAAO,aAAa,UAAU,QAAQ,GAA/B,GAAqC,QAA5C;AACD;AAnBD,QAAA,uBAAA,GAAA,uBAAA;AAqBA,SAAA,qBAAA,CAA+B,OAA/B,EAAwC,IAAxC,EAA4C;AAC1C,WAAO,iBAAiB,KAAK,IAAtB,MAAgC,QAAQ,wBAAR,GAAmC,QAAQ,mBAAR,GAA8B,KAAK,IAAtE,GAA4E,UAAA,aAA5G,CAAP;AACD","sourcesContent":["import {\n  join,\n  block,\n  wrap,\n  indent\n} from '../utilities/printing';\n\nimport { camelCase } from 'change-case';\n\nimport {\n  GraphQLString,\n  GraphQLInt,\n  GraphQLFloat,\n  GraphQLBoolean,\n  GraphQLID,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLScalarType,\n  GraphQLEnumType,\n  isCompositeType,\n  isAbstractType\n} from 'graphql';\n\nconst builtInScalarMap = {\n  [GraphQLString.name]: 'String',\n  [GraphQLInt.name]: 'Int',\n  [GraphQLFloat.name]: 'Double',\n  [GraphQLBoolean.name]: 'Boolean',\n  [GraphQLID.name]: 'String',\n}\n\nexport function possibleTypesForType(context, type) {\n  if (isAbstractType(type)) {\n    return context.schema.getPossibleTypes(type);\n  } else {\n    return [type];\n  }\n}\n\nexport function typeNameFromGraphQLType(context, type, bareTypeName, isOptional) {\n  if (type instanceof GraphQLNonNull) {\n    return typeNameFromGraphQLType(context, type.ofType, bareTypeName, isOptional || false)\n  } else if (isOptional === undefined) {\n    isOptional = true;\n  }\n\n  let typeName;\n  if (type instanceof GraphQLList) {\n    typeName = 'Seq[' + typeNameFromGraphQLType(context, type.ofType, bareTypeName) + ']';\n  } else if (type instanceof GraphQLScalarType) {\n    typeName = typeNameForScalarType(context, type);\n  } else if (type instanceof GraphQLEnumType) {\n    typeName = \"String\";\n  } else {\n    typeName = bareTypeName || type.name;\n  }\n\n  return isOptional ? `Option[${typeName}]` : typeName;\n}\n\nfunction typeNameForScalarType(context, type) {\n  return builtInScalarMap[type.name] || (context.passthroughCustomScalars ? context.customScalarsPrefix + type.name: GraphQLString)\n}\n"],"sourceRoot":""}