196eb17d15f6d68b2c56e715978e1df3
'use strict';require('ts-jest').install("/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-types-generator/test/scala/codeGeneration.js", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst graphql_1 = require(\"graphql\");\nconst codeGeneration_1 = require(\"../../src/scala/codeGeneration\");\nconst values_1 = require(\"../../src/scala/values\");\nconst loading_1 = require(\"../../src/loading\");\nconst schema = loading_1.loadSchema(require.resolve('../fixtures/starwars/schema.json'));\nconst CodeGenerator_1 = require(\"../../src/utilities/CodeGenerator\");\nconst legacyIR_1 = require(\"../../src/compiler/legacyIR\");\ndescribe('Scala code generation', function () {\n    let generator;\n    let resetGenerator;\n    let compileFromSource;\n    let addFragment;\n    beforeEach(function () {\n        resetGenerator = () => {\n            const context = {\n                schema: schema,\n                operations: {},\n                fragments: {},\n                typesUsed: {}\n            };\n            generator = new CodeGenerator_1.default(context);\n        };\n        compileFromSource = (source, options = { generateOperationIds: false }) => {\n            const document = graphql_1.parse(source);\n            let context = legacyIR_1.compileToLegacyIR(schema, document);\n            options.generateOperationIds && Object.assign(context, { generateOperationIds: true, operationIdsMap: {} });\n            generator.context = context;\n            return context;\n        };\n        addFragment = (fragment) => {\n            generator.context.fragments[fragment.fragmentName] = fragment;\n        };\n        resetGenerator();\n    });\n    describe('#classDeclarationForOperation()', function () {\n        test(`should generate a class declaration for a query with variables`, function () {\n            const { operations, fragments } = compileFromSource(`\n        query HeroName($episode: Episode) {\n          hero(episode: $episode) {\n            name\n          }\n        }\n      `);\n            codeGeneration_1.classDeclarationForOperation(generator, operations['HeroName'], Object.values(fragments));\n            expect(generator.output).toMatchSnapshot();\n        });\n        test(`should generate a class declaration for a query with fragment spreads`, function () {\n            const { operations, fragments } = compileFromSource(`\n        query Hero {\n          hero {\n            ...HeroDetails\n          }\n        }\n\n        fragment HeroDetails on Character {\n          name\n        }\n      `);\n            codeGeneration_1.classDeclarationForOperation(generator, operations['Hero'], Object.values(fragments));\n            expect(generator.output).toMatchSnapshot();\n        });\n        test(`should generate a class declaration for a query with conditional fragment spreads`, function () {\n            const { operations, fragments } = compileFromSource(`\n        query Hero {\n          hero {\n            ...DroidDetails\n          }\n        }\n\n        fragment DroidDetails on Droid {\n          primaryFunction\n        }\n      `);\n            codeGeneration_1.classDeclarationForOperation(generator, operations['Hero'], Object.values(fragments));\n            expect(generator.output).toMatchSnapshot();\n        });\n        test(`should generate a class declaration for a query with a fragment spread nested in an inline fragment`, function () {\n            const { operations, fragments } = compileFromSource(`\n        query Hero {\n          hero {\n            ... on Droid {\n              ...HeroDetails\n            }\n          }\n        }\n\n        fragment HeroDetails on Character {\n          name\n        }\n      `);\n            codeGeneration_1.classDeclarationForOperation(generator, operations['Hero'], Object.values(fragments));\n            expect(generator.output).toMatchSnapshot();\n        });\n        test(`should generate a class declaration for a mutation with variables`, function () {\n            const { operations, fragments } = compileFromSource(`\n        mutation CreateReview($episode: Episode) {\n          createReview(episode: $episode, review: { stars: 5, commentary: \"Wow!\" }) {\n            stars\n            commentary\n          }\n        }\n      `);\n            codeGeneration_1.classDeclarationForOperation(generator, operations['CreateReview'], Object.values(fragments));\n            expect(generator.output).toMatchSnapshot();\n        });\n        describe(`when generateOperationIds is specified`, function () {\n            let compileOptions = { generateOperationIds: true };\n            test(`should generate a class declaration with an operationId property`, function () {\n                const context = compileFromSource(`\n          query Hero {\n            hero {\n              ...HeroDetails\n            }\n          }\n          fragment HeroDetails on Character {\n            name\n          }\n        `, compileOptions);\n                codeGeneration_1.classDeclarationForOperation(generator, context.operations['Hero'], Object.values(context.fragments));\n                expect(generator.output).toMatchSnapshot();\n            });\n            test(`should generate different operation ids for different operations`, function () {\n                const context1 = compileFromSource(`\n          query Hero {\n            hero {\n              ...HeroDetails\n            }\n          }\n          fragment HeroDetails on Character {\n            name\n          }\n        `, compileOptions);\n                codeGeneration_1.classDeclarationForOperation(generator, context1.operations['Hero'], Object.values(context1.fragments));\n                const output1 = generator.output;\n                resetGenerator();\n                const context2 = compileFromSource(`\n          query Hero {\n            hero {\n              ...HeroDetails\n            }\n          }\n          fragment HeroDetails on Character {\n            appearsIn\n          }\n        `, compileOptions);\n                codeGeneration_1.classDeclarationForOperation(generator, context2.operations['Hero'], Object.values(context2.fragments));\n                const output2 = generator.output;\n                expect(output1).not.toBe(output2);\n            });\n            test(`should generate the same operation id regardless of operation formatting/commenting`, function () {\n                const context1 = compileFromSource(`\n          query HeroName($episode: Episode) {\n            hero(episode: $episode) {\n              name\n            }\n          }\n        `, compileOptions);\n                codeGeneration_1.classDeclarationForOperation(generator, context1.operations['HeroName'], Object.values(context1.fragments));\n                const output1 = generator.output;\n                resetGenerator();\n                const context2 = compileFromSource(`\n          # Profound comment\n          query HeroName($episode:Episode) { hero(episode: $episode) { name } }\n          # Deeply meaningful comment\n        `, compileOptions);\n                codeGeneration_1.classDeclarationForOperation(generator, context2.operations['HeroName'], Object.values(context2.fragments));\n                const output2 = generator.output;\n                expect(output1).toBe(output2);\n            });\n            test(`should generate the same operation id regardless of fragment order`, function () {\n                const context1 = compileFromSource(`\n          query Hero {\n            hero {\n              ...HeroName\n              ...HeroAppearsIn\n            }\n          }\n          fragment HeroName on Character {\n            name\n          }\n          fragment HeroAppearsIn on Character {\n            appearsIn\n          }\n        `, compileOptions);\n                codeGeneration_1.classDeclarationForOperation(generator, context1.operations['Hero'], Object.values(context1.fragments));\n                const output1 = generator.output;\n                resetGenerator();\n                const context2 = compileFromSource(`\n          query Hero {\n            hero {\n              ...HeroName\n              ...HeroAppearsIn\n            }\n          }\n          fragment HeroAppearsIn on Character {\n            appearsIn\n          }\n          fragment HeroName on Character {\n            name\n          }\n        `, compileOptions);\n                codeGeneration_1.classDeclarationForOperation(generator, context2.operations['Hero'], Object.values(context2.fragments));\n                const output2 = generator.output;\n                expect(output1).toBe(output2);\n            });\n            test(`should generate appropriate operation id mapping source when there are nested fragment references`, function () {\n                const source = `\n          query Hero {\n            hero {\n              ...HeroDetails\n            }\n          }\n          fragment HeroName on Character {\n            name\n          }\n          fragment HeroDetails on Character {\n            ...HeroName\n            appearsIn\n          }\n        `;\n                const context = compileFromSource(source, true);\n                expect(context.operations['Hero'].sourceWithFragments).toMatchSnapshot();\n            });\n        });\n    });\n    describe('#caseClassDeclarationForFragment()', function () {\n        test(`should generate a caseClass declaration for a fragment with an abstract type condition`, function () {\n            const { fragments } = compileFromSource(`\n        fragment HeroDetails on Character {\n          name\n          appearsIn\n        }\n      `);\n            codeGeneration_1.caseClassDeclarationForFragment(generator, fragments['HeroDetails']);\n            expect(generator.output).toMatchSnapshot();\n        });\n        test(`should generate a caseClass declaration for a fragment with a concrete type condition`, function () {\n            const { fragments } = compileFromSource(`\n        fragment DroidDetails on Droid {\n          name\n          primaryFunction\n        }\n      `);\n            codeGeneration_1.caseClassDeclarationForFragment(generator, fragments['DroidDetails']);\n            expect(generator.output).toMatchSnapshot();\n        });\n        test(`should generate a caseClass declaration for a fragment with a subselection`, function () {\n            const { fragments } = compileFromSource(`\n        fragment HeroDetails on Character {\n          name\n          friends {\n            name\n          }\n        }\n      `);\n            codeGeneration_1.caseClassDeclarationForFragment(generator, fragments['HeroDetails']);\n            expect(generator.output).toMatchSnapshot();\n        });\n        test(`should generate a caseClass declaration for a fragment that includes a fragment spread`, function () {\n            const { fragments } = compileFromSource(`\n        fragment HeroDetails on Character {\n          name\n          ...MoreHeroDetails\n        }\n\n        fragment MoreHeroDetails on Character {\n          appearsIn\n        }\n      `);\n            codeGeneration_1.caseClassDeclarationForFragment(generator, fragments['HeroDetails']);\n            expect(generator.output).toMatchSnapshot();\n        });\n    });\n    describe('#caseClassDeclarationForSelectionSet()', function () {\n        test(`should generate a caseClass declaration for a selection set`, function () {\n            codeGeneration_1.caseClassDeclarationForSelectionSet(generator, {\n                caseClassName: 'Hero',\n                parentType: schema.getType('Character'),\n                fields: [\n                    {\n                        responseName: 'name',\n                        fieldName: 'name',\n                        type: graphql_1.GraphQLString\n                    }\n                ]\n            });\n            expect(generator.output).toMatchSnapshot();\n        });\n        test(`should escape reserved keywords in a caseClass declaration for a selection set`, function () {\n            codeGeneration_1.caseClassDeclarationForSelectionSet(generator, {\n                caseClassName: 'Hero',\n                parentType: schema.getType('Character'),\n                fields: [\n                    {\n                        responseName: 'private',\n                        fieldName: 'name',\n                        type: graphql_1.GraphQLString\n                    }\n                ]\n            });\n            expect(generator.output).toMatchSnapshot();\n        });\n        test(`should generate a nested caseClass declaration for a selection set with subselections`, function () {\n            codeGeneration_1.caseClassDeclarationForSelectionSet(generator, {\n                caseClassName: 'Hero',\n                parentType: schema.getType('Character'),\n                fields: [\n                    {\n                        responseName: 'friends',\n                        fieldName: 'friends',\n                        type: new graphql_1.GraphQLList(schema.getType('Character')),\n                        fields: [\n                            {\n                                responseName: 'name',\n                                fieldName: 'name',\n                                type: graphql_1.GraphQLString\n                            }\n                        ]\n                    }\n                ]\n            });\n            expect(generator.output).toMatchSnapshot();\n        });\n        test(`should generate a caseClass declaration for a selection set with a fragment spread that matches the parent type`, function () {\n            addFragment({\n                fragmentName: 'HeroDetails',\n                typeCondition: schema.getType('Character')\n            });\n            codeGeneration_1.caseClassDeclarationForSelectionSet(generator, {\n                caseClassName: 'Hero',\n                parentType: schema.getType('Character'),\n                fragmentSpreads: ['HeroDetails'],\n                fields: [\n                    {\n                        responseName: 'name',\n                        fieldName: 'name',\n                        type: graphql_1.GraphQLString\n                    }\n                ]\n            });\n            expect(generator.output).toMatchSnapshot();\n        });\n        test(`should generate a caseClass declaration for a selection set with a fragment spread with a more specific type condition`, function () {\n            addFragment({\n                fragmentName: 'DroidDetails',\n                typeCondition: schema.getType('Droid')\n            });\n            codeGeneration_1.caseClassDeclarationForSelectionSet(generator, {\n                caseClassName: 'Hero',\n                parentType: schema.getType('Character'),\n                fragmentSpreads: ['DroidDetails'],\n                fields: [\n                    {\n                        responseName: 'name',\n                        fieldName: 'name',\n                        type: graphql_1.GraphQLString\n                    }\n                ]\n            });\n            expect(generator.output).toMatchSnapshot();\n        });\n        test(`should generate a caseClass declaration for a selection set with an inline fragment`, function () {\n            codeGeneration_1.caseClassDeclarationForSelectionSet(generator, {\n                caseClassName: 'Hero',\n                parentType: schema.getType('Character'),\n                fields: [\n                    {\n                        responseName: 'name',\n                        fieldName: 'name',\n                        type: new graphql_1.GraphQLNonNull(graphql_1.GraphQLString)\n                    }\n                ],\n                inlineFragments: [\n                    {\n                        typeCondition: schema.getType('Droid'),\n                        possibleTypes: ['Droid'],\n                        fields: [\n                            {\n                                responseName: 'name',\n                                fieldName: 'name',\n                                type: new graphql_1.GraphQLNonNull(graphql_1.GraphQLString)\n                            },\n                            {\n                                responseName: 'primaryFunction',\n                                fieldName: 'primaryFunction',\n                                type: graphql_1.GraphQLString\n                            }\n                        ]\n                    }\n                ]\n            });\n            expect(generator.output).toMatchSnapshot();\n        });\n        test(`should generate a caseClass declaration for a fragment spread nested in an inline fragment`, function () {\n            addFragment({\n                fragmentName: 'HeroDetails',\n                typeCondition: schema.getType('Character')\n            });\n            codeGeneration_1.caseClassDeclarationForSelectionSet(generator, {\n                caseClassName: 'Hero',\n                parentType: schema.getType('Character'),\n                fields: [],\n                inlineFragments: [\n                    {\n                        typeCondition: schema.getType('Droid'),\n                        possibleTypes: ['Droid'],\n                        fields: [],\n                        fragmentSpreads: ['HeroDetails'],\n                    }\n                ]\n            });\n            expect(generator.output).toMatchSnapshot();\n        });\n    });\n    describe('#dictionaryLiteralForFieldArguments()', function () {\n        test('should include expressions for input objects with variables', function () {\n            const { operations } = compileFromSource(`\n        mutation FieldArgumentsWithInputObjects($commentary: String!, $red: Int!) {\n          createReview(episode: JEDI, review: { stars: 2, commentary: $commentary, favorite_color: { red: $red, blue: 100, green: 50 } }) {\n            commentary\n          }\n        }\n      `);\n            const fieldArguments = operations['FieldArgumentsWithInputObjects'].fields[0].args;\n            const dictionaryLiteral = values_1.dictionaryLiteralForFieldArguments(fieldArguments);\n            expect(dictionaryLiteral).toBe('[\"episode\": \"JEDI\", \"review\": [\"stars\": 2, \"commentary\": Variable(\"commentary\"), \"favorite_color\": [\"red\": Variable(\"red\"), \"blue\": 100, \"green\": 50]]]');\n        });\n    });\n    describe('#typeDeclarationForGraphQLType()', function () {\n        test('should generate an enum declaration for a GraphQLEnumType', function () {\n            const generator = new CodeGenerator_1.default();\n            codeGeneration_1.typeDeclarationForGraphQLType(generator, schema.getType('Episode'));\n            expect(generator.output).toMatchSnapshot();\n        });\n        test('should escape identifiers in cases of enum declaration for a GraphQLEnumType', function () {\n            const generator = new CodeGenerator_1.default();\n            const albumPrivaciesEnum = new graphql_1.GraphQLEnumType({\n                name: 'AlbumPrivacies',\n                values: { PUBLIC: { value: \"PUBLIC\" }, PRIVATE: { value: \"PRIVATE\" } }\n            });\n            codeGeneration_1.typeDeclarationForGraphQLType(generator, albumPrivaciesEnum);\n            expect(generator.output).toMatchSnapshot();\n        });\n        test('should generate a caseClass declaration for a GraphQLInputObjectType', function () {\n            const generator = new CodeGenerator_1.default();\n            codeGeneration_1.typeDeclarationForGraphQLType(generator, schema.getType('ReviewInput'));\n            expect(generator.output).toMatchSnapshot();\n        });\n    });\n});\n//# sourceMappingURL=data:application/json;base64,");"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = require("graphql");
const codeGeneration_1 = require("../../src/scala/codeGeneration");
const values_1 = require("../../src/scala/values");
const loading_1 = require("../../src/loading");
const schema = loading_1.loadSchema(require.resolve('../fixtures/starwars/schema.json'));
const CodeGenerator_1 = require("../../src/utilities/CodeGenerator");
const legacyIR_1 = require("../../src/compiler/legacyIR");
describe('Scala code generation', function () {
    let generator;
    let resetGenerator;
    let compileFromSource;
    let addFragment;
    beforeEach(function () {
        resetGenerator = () => {
            const context = {
                schema: schema,
                operations: {},
                fragments: {},
                typesUsed: {} };

            generator = new CodeGenerator_1.default(context);
        };
        compileFromSource = (source, options = { generateOperationIds: false }) => {
            const document = graphql_1.parse(source);
            let context = legacyIR_1.compileToLegacyIR(schema, document);
            options.generateOperationIds && Object.assign(context, { generateOperationIds: true, operationIdsMap: {} });
            generator.context = context;
            return context;
        };
        addFragment = fragment => {
            generator.context.fragments[fragment.fragmentName] = fragment;
        };
        resetGenerator();
    });
    describe('#classDeclarationForOperation()', function () {
        test(`should generate a class declaration for a query with variables`, function () {
            const { operations, fragments } = compileFromSource(`
        query HeroName($episode: Episode) {
          hero(episode: $episode) {
            name
          }
        }
      `);
            codeGeneration_1.classDeclarationForOperation(generator, operations['HeroName'], Object.values(fragments));
            expect(generator.output).toMatchSnapshot();
        });
        test(`should generate a class declaration for a query with fragment spreads`, function () {
            const { operations, fragments } = compileFromSource(`
        query Hero {
          hero {
            ...HeroDetails
          }
        }

        fragment HeroDetails on Character {
          name
        }
      `);
            codeGeneration_1.classDeclarationForOperation(generator, operations['Hero'], Object.values(fragments));
            expect(generator.output).toMatchSnapshot();
        });
        test(`should generate a class declaration for a query with conditional fragment spreads`, function () {
            const { operations, fragments } = compileFromSource(`
        query Hero {
          hero {
            ...DroidDetails
          }
        }

        fragment DroidDetails on Droid {
          primaryFunction
        }
      `);
            codeGeneration_1.classDeclarationForOperation(generator, operations['Hero'], Object.values(fragments));
            expect(generator.output).toMatchSnapshot();
        });
        test(`should generate a class declaration for a query with a fragment spread nested in an inline fragment`, function () {
            const { operations, fragments } = compileFromSource(`
        query Hero {
          hero {
            ... on Droid {
              ...HeroDetails
            }
          }
        }

        fragment HeroDetails on Character {
          name
        }
      `);
            codeGeneration_1.classDeclarationForOperation(generator, operations['Hero'], Object.values(fragments));
            expect(generator.output).toMatchSnapshot();
        });
        test(`should generate a class declaration for a mutation with variables`, function () {
            const { operations, fragments } = compileFromSource(`
        mutation CreateReview($episode: Episode) {
          createReview(episode: $episode, review: { stars: 5, commentary: "Wow!" }) {
            stars
            commentary
          }
        }
      `);
            codeGeneration_1.classDeclarationForOperation(generator, operations['CreateReview'], Object.values(fragments));
            expect(generator.output).toMatchSnapshot();
        });
        describe(`when generateOperationIds is specified`, function () {
            let compileOptions = { generateOperationIds: true };
            test(`should generate a class declaration with an operationId property`, function () {
                const context = compileFromSource(`
          query Hero {
            hero {
              ...HeroDetails
            }
          }
          fragment HeroDetails on Character {
            name
          }
        `, compileOptions);
                codeGeneration_1.classDeclarationForOperation(generator, context.operations['Hero'], Object.values(context.fragments));
                expect(generator.output).toMatchSnapshot();
            });
            test(`should generate different operation ids for different operations`, function () {
                const context1 = compileFromSource(`
          query Hero {
            hero {
              ...HeroDetails
            }
          }
          fragment HeroDetails on Character {
            name
          }
        `, compileOptions);
                codeGeneration_1.classDeclarationForOperation(generator, context1.operations['Hero'], Object.values(context1.fragments));
                const output1 = generator.output;
                resetGenerator();
                const context2 = compileFromSource(`
          query Hero {
            hero {
              ...HeroDetails
            }
          }
          fragment HeroDetails on Character {
            appearsIn
          }
        `, compileOptions);
                codeGeneration_1.classDeclarationForOperation(generator, context2.operations['Hero'], Object.values(context2.fragments));
                const output2 = generator.output;
                expect(output1).not.toBe(output2);
            });
            test(`should generate the same operation id regardless of operation formatting/commenting`, function () {
                const context1 = compileFromSource(`
          query HeroName($episode: Episode) {
            hero(episode: $episode) {
              name
            }
          }
        `, compileOptions);
                codeGeneration_1.classDeclarationForOperation(generator, context1.operations['HeroName'], Object.values(context1.fragments));
                const output1 = generator.output;
                resetGenerator();
                const context2 = compileFromSource(`
          # Profound comment
          query HeroName($episode:Episode) { hero(episode: $episode) { name } }
          # Deeply meaningful comment
        `, compileOptions);
                codeGeneration_1.classDeclarationForOperation(generator, context2.operations['HeroName'], Object.values(context2.fragments));
                const output2 = generator.output;
                expect(output1).toBe(output2);
            });
            test(`should generate the same operation id regardless of fragment order`, function () {
                const context1 = compileFromSource(`
          query Hero {
            hero {
              ...HeroName
              ...HeroAppearsIn
            }
          }
          fragment HeroName on Character {
            name
          }
          fragment HeroAppearsIn on Character {
            appearsIn
          }
        `, compileOptions);
                codeGeneration_1.classDeclarationForOperation(generator, context1.operations['Hero'], Object.values(context1.fragments));
                const output1 = generator.output;
                resetGenerator();
                const context2 = compileFromSource(`
          query Hero {
            hero {
              ...HeroName
              ...HeroAppearsIn
            }
          }
          fragment HeroAppearsIn on Character {
            appearsIn
          }
          fragment HeroName on Character {
            name
          }
        `, compileOptions);
                codeGeneration_1.classDeclarationForOperation(generator, context2.operations['Hero'], Object.values(context2.fragments));
                const output2 = generator.output;
                expect(output1).toBe(output2);
            });
            test(`should generate appropriate operation id mapping source when there are nested fragment references`, function () {
                const source = `
          query Hero {
            hero {
              ...HeroDetails
            }
          }
          fragment HeroName on Character {
            name
          }
          fragment HeroDetails on Character {
            ...HeroName
            appearsIn
          }
        `;
                const context = compileFromSource(source, true);
                expect(context.operations['Hero'].sourceWithFragments).toMatchSnapshot();
            });
        });
    });
    describe('#caseClassDeclarationForFragment()', function () {
        test(`should generate a caseClass declaration for a fragment with an abstract type condition`, function () {
            const { fragments } = compileFromSource(`
        fragment HeroDetails on Character {
          name
          appearsIn
        }
      `);
            codeGeneration_1.caseClassDeclarationForFragment(generator, fragments['HeroDetails']);
            expect(generator.output).toMatchSnapshot();
        });
        test(`should generate a caseClass declaration for a fragment with a concrete type condition`, function () {
            const { fragments } = compileFromSource(`
        fragment DroidDetails on Droid {
          name
          primaryFunction
        }
      `);
            codeGeneration_1.caseClassDeclarationForFragment(generator, fragments['DroidDetails']);
            expect(generator.output).toMatchSnapshot();
        });
        test(`should generate a caseClass declaration for a fragment with a subselection`, function () {
            const { fragments } = compileFromSource(`
        fragment HeroDetails on Character {
          name
          friends {
            name
          }
        }
      `);
            codeGeneration_1.caseClassDeclarationForFragment(generator, fragments['HeroDetails']);
            expect(generator.output).toMatchSnapshot();
        });
        test(`should generate a caseClass declaration for a fragment that includes a fragment spread`, function () {
            const { fragments } = compileFromSource(`
        fragment HeroDetails on Character {
          name
          ...MoreHeroDetails
        }

        fragment MoreHeroDetails on Character {
          appearsIn
        }
      `);
            codeGeneration_1.caseClassDeclarationForFragment(generator, fragments['HeroDetails']);
            expect(generator.output).toMatchSnapshot();
        });
    });
    describe('#caseClassDeclarationForSelectionSet()', function () {
        test(`should generate a caseClass declaration for a selection set`, function () {
            codeGeneration_1.caseClassDeclarationForSelectionSet(generator, {
                caseClassName: 'Hero',
                parentType: schema.getType('Character'),
                fields: [
                {
                    responseName: 'name',
                    fieldName: 'name',
                    type: graphql_1.GraphQLString }] });



            expect(generator.output).toMatchSnapshot();
        });
        test(`should escape reserved keywords in a caseClass declaration for a selection set`, function () {
            codeGeneration_1.caseClassDeclarationForSelectionSet(generator, {
                caseClassName: 'Hero',
                parentType: schema.getType('Character'),
                fields: [
                {
                    responseName: 'private',
                    fieldName: 'name',
                    type: graphql_1.GraphQLString }] });



            expect(generator.output).toMatchSnapshot();
        });
        test(`should generate a nested caseClass declaration for a selection set with subselections`, function () {
            codeGeneration_1.caseClassDeclarationForSelectionSet(generator, {
                caseClassName: 'Hero',
                parentType: schema.getType('Character'),
                fields: [
                {
                    responseName: 'friends',
                    fieldName: 'friends',
                    type: new graphql_1.GraphQLList(schema.getType('Character')),
                    fields: [
                    {
                        responseName: 'name',
                        fieldName: 'name',
                        type: graphql_1.GraphQLString }] }] });





            expect(generator.output).toMatchSnapshot();
        });
        test(`should generate a caseClass declaration for a selection set with a fragment spread that matches the parent type`, function () {
            addFragment({
                fragmentName: 'HeroDetails',
                typeCondition: schema.getType('Character') });

            codeGeneration_1.caseClassDeclarationForSelectionSet(generator, {
                caseClassName: 'Hero',
                parentType: schema.getType('Character'),
                fragmentSpreads: ['HeroDetails'],
                fields: [
                {
                    responseName: 'name',
                    fieldName: 'name',
                    type: graphql_1.GraphQLString }] });



            expect(generator.output).toMatchSnapshot();
        });
        test(`should generate a caseClass declaration for a selection set with a fragment spread with a more specific type condition`, function () {
            addFragment({
                fragmentName: 'DroidDetails',
                typeCondition: schema.getType('Droid') });

            codeGeneration_1.caseClassDeclarationForSelectionSet(generator, {
                caseClassName: 'Hero',
                parentType: schema.getType('Character'),
                fragmentSpreads: ['DroidDetails'],
                fields: [
                {
                    responseName: 'name',
                    fieldName: 'name',
                    type: graphql_1.GraphQLString }] });



            expect(generator.output).toMatchSnapshot();
        });
        test(`should generate a caseClass declaration for a selection set with an inline fragment`, function () {
            codeGeneration_1.caseClassDeclarationForSelectionSet(generator, {
                caseClassName: 'Hero',
                parentType: schema.getType('Character'),
                fields: [
                {
                    responseName: 'name',
                    fieldName: 'name',
                    type: new graphql_1.GraphQLNonNull(graphql_1.GraphQLString) }],


                inlineFragments: [
                {
                    typeCondition: schema.getType('Droid'),
                    possibleTypes: ['Droid'],
                    fields: [
                    {
                        responseName: 'name',
                        fieldName: 'name',
                        type: new graphql_1.GraphQLNonNull(graphql_1.GraphQLString) },

                    {
                        responseName: 'primaryFunction',
                        fieldName: 'primaryFunction',
                        type: graphql_1.GraphQLString }] }] });





            expect(generator.output).toMatchSnapshot();
        });
        test(`should generate a caseClass declaration for a fragment spread nested in an inline fragment`, function () {
            addFragment({
                fragmentName: 'HeroDetails',
                typeCondition: schema.getType('Character') });

            codeGeneration_1.caseClassDeclarationForSelectionSet(generator, {
                caseClassName: 'Hero',
                parentType: schema.getType('Character'),
                fields: [],
                inlineFragments: [
                {
                    typeCondition: schema.getType('Droid'),
                    possibleTypes: ['Droid'],
                    fields: [],
                    fragmentSpreads: ['HeroDetails'] }] });



            expect(generator.output).toMatchSnapshot();
        });
    });
    describe('#dictionaryLiteralForFieldArguments()', function () {
        test('should include expressions for input objects with variables', function () {
            const { operations } = compileFromSource(`
        mutation FieldArgumentsWithInputObjects($commentary: String!, $red: Int!) {
          createReview(episode: JEDI, review: { stars: 2, commentary: $commentary, favorite_color: { red: $red, blue: 100, green: 50 } }) {
            commentary
          }
        }
      `);
            const fieldArguments = operations['FieldArgumentsWithInputObjects'].fields[0].args;
            const dictionaryLiteral = values_1.dictionaryLiteralForFieldArguments(fieldArguments);
            expect(dictionaryLiteral).toBe('["episode": "JEDI", "review": ["stars": 2, "commentary": Variable("commentary"), "favorite_color": ["red": Variable("red"), "blue": 100, "green": 50]]]');
        });
    });
    describe('#typeDeclarationForGraphQLType()', function () {
        test('should generate an enum declaration for a GraphQLEnumType', function () {
            const generator = new CodeGenerator_1.default();
            codeGeneration_1.typeDeclarationForGraphQLType(generator, schema.getType('Episode'));
            expect(generator.output).toMatchSnapshot();
        });
        test('should escape identifiers in cases of enum declaration for a GraphQLEnumType', function () {
            const generator = new CodeGenerator_1.default();
            const albumPrivaciesEnum = new graphql_1.GraphQLEnumType({
                name: 'AlbumPrivacies',
                values: { PUBLIC: { value: "PUBLIC" }, PRIVATE: { value: "PRIVATE" } } });

            codeGeneration_1.typeDeclarationForGraphQLType(generator, albumPrivaciesEnum);
            expect(generator.output).toMatchSnapshot();
        });
        test('should generate a caseClass declaration for a GraphQLInputObjectType', function () {
            const generator = new CodeGenerator_1.default();
            codeGeneration_1.typeDeclarationForGraphQLType(generator, schema.getType('ReviewInput'));
            expect(generator.output).toMatchSnapshot();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,