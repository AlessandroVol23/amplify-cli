{"version":3,"sources":["codeGeneration.js"],"names":[],"mappings":"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","sourcesContent":["import { stripIndent } from 'common-tags';\n\nimport {\n  parse,\n  isType,\n  GraphQLID,\n  GraphQLString,\n  GraphQLInt,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLInputObjectType,\n  GraphQLEnumType\n} from 'graphql';\n\nimport {\n  classDeclarationForOperation,\n  caseClassDeclarationForFragment,\n  caseClassDeclarationForSelectionSet,\n  typeDeclarationForGraphQLType,\n} from '../../src/scala/codeGeneration';\n\nimport {\n  dictionaryLiteralForFieldArguments,\n} from '../../src/scala/values';\n\nimport { loadSchema } from '../../src/loading';\nconst schema = loadSchema(require.resolve('../fixtures/starwars/schema.json'));\n\nimport CodeGenerator from '../../src/utilities/CodeGenerator';\n\nimport { compileToLegacyIR } from '../../src/compiler/legacyIR';\n\ndescribe('Scala code generation', function() {\n  let generator;\n  let resetGenerator;\n  let compileFromSource;\n  let addFragment;\n\n  beforeEach(function() {\n\n    resetGenerator = () => {\n      const context = {\n        schema: schema,\n        operations: {},\n        fragments: {},\n        typesUsed: {}\n      }\n      generator = new CodeGenerator(context);\n    };\n\n    compileFromSource = (source, options = { generateOperationIds: false }) => {\n      const document = parse(source);\n      let context = compileToLegacyIR(schema, document);\n      options.generateOperationIds && Object.assign(context, { generateOperationIds: true, operationIdsMap: {} });\n      generator.context = context;\n      return context;\n    };\n\n    addFragment = (fragment) => {\n      generator.context.fragments[fragment.fragmentName] = fragment;\n    };\n\n    resetGenerator();\n  });\n\n  describe('#classDeclarationForOperation()', function() {\n    test(`should generate a class declaration for a query with variables`, function() {\n      const { operations, fragments } = compileFromSource(`\n        query HeroName($episode: Episode) {\n          hero(episode: $episode) {\n            name\n          }\n        }\n      `);\n\n      classDeclarationForOperation(generator, operations['HeroName'], Object.values(fragments));\n      expect(generator.output).toMatchSnapshot();\n    });\n\n    test(`should generate a class declaration for a query with fragment spreads`, function() {\n      const { operations, fragments } = compileFromSource(`\n        query Hero {\n          hero {\n            ...HeroDetails\n          }\n        }\n\n        fragment HeroDetails on Character {\n          name\n        }\n      `);\n\n      classDeclarationForOperation(generator, operations['Hero'], Object.values(fragments));\n      expect(generator.output).toMatchSnapshot();\n    });\n\n    test(`should generate a class declaration for a query with conditional fragment spreads`, function() {\n      const { operations, fragments } = compileFromSource(`\n        query Hero {\n          hero {\n            ...DroidDetails\n          }\n        }\n\n        fragment DroidDetails on Droid {\n          primaryFunction\n        }\n      `);\n\n      classDeclarationForOperation(generator, operations['Hero'], Object.values(fragments));\n      expect(generator.output).toMatchSnapshot();\n    });\n\n    test(`should generate a class declaration for a query with a fragment spread nested in an inline fragment`, function() {\n      const { operations, fragments } = compileFromSource(`\n        query Hero {\n          hero {\n            ... on Droid {\n              ...HeroDetails\n            }\n          }\n        }\n\n        fragment HeroDetails on Character {\n          name\n        }\n      `);\n\n      classDeclarationForOperation(generator, operations['Hero'], Object.values(fragments));\n\n      expect(generator.output).toMatchSnapshot();\n    });\n\n    test(`should generate a class declaration for a mutation with variables`, function() {\n      const { operations, fragments } = compileFromSource(`\n        mutation CreateReview($episode: Episode) {\n          createReview(episode: $episode, review: { stars: 5, commentary: \"Wow!\" }) {\n            stars\n            commentary\n          }\n        }\n      `);\n\n      classDeclarationForOperation(generator, operations['CreateReview'], Object.values(fragments));\n\n      expect(generator.output).toMatchSnapshot();\n    });\n\n    describe(`when generateOperationIds is specified`, function() {\n      let compileOptions = { generateOperationIds: true };\n\n      test(`should generate a class declaration with an operationId property`, function() {\n        const context = compileFromSource(`\n          query Hero {\n            hero {\n              ...HeroDetails\n            }\n          }\n          fragment HeroDetails on Character {\n            name\n          }\n        `, compileOptions);\n\n        classDeclarationForOperation(generator, context.operations['Hero'], Object.values(context.fragments));\n        expect(generator.output).toMatchSnapshot();\n      });\n\n      test(`should generate different operation ids for different operations`, function() {\n        const context1 = compileFromSource(`\n          query Hero {\n            hero {\n              ...HeroDetails\n            }\n          }\n          fragment HeroDetails on Character {\n            name\n          }\n        `, compileOptions);\n\n        classDeclarationForOperation(generator, context1.operations['Hero'], Object.values(context1.fragments));\n        const output1 = generator.output;\n\n        resetGenerator();\n        const context2 = compileFromSource(`\n          query Hero {\n            hero {\n              ...HeroDetails\n            }\n          }\n          fragment HeroDetails on Character {\n            appearsIn\n          }\n        `, compileOptions);\n\n        classDeclarationForOperation(generator, context2.operations['Hero'], Object.values(context2.fragments));\n        const output2 = generator.output;\n\n        expect(output1).not.toBe(output2);\n      });\n\n      test(`should generate the same operation id regardless of operation formatting/commenting`, function() {\n        const context1 = compileFromSource(`\n          query HeroName($episode: Episode) {\n            hero(episode: $episode) {\n              name\n            }\n          }\n        `, compileOptions);\n\n        classDeclarationForOperation(generator, context1.operations['HeroName'], Object.values(context1.fragments));\n        const output1 = generator.output;\n\n        resetGenerator();\n        const context2 = compileFromSource(`\n          # Profound comment\n          query HeroName($episode:Episode) { hero(episode: $episode) { name } }\n          # Deeply meaningful comment\n        `, compileOptions);\n\n        classDeclarationForOperation(generator, context2.operations['HeroName'], Object.values(context2.fragments));\n        const output2 = generator.output;\n\n        expect(output1).toBe(output2);\n      });\n\n      test(`should generate the same operation id regardless of fragment order`, function() {\n        const context1 = compileFromSource(`\n          query Hero {\n            hero {\n              ...HeroName\n              ...HeroAppearsIn\n            }\n          }\n          fragment HeroName on Character {\n            name\n          }\n          fragment HeroAppearsIn on Character {\n            appearsIn\n          }\n        `, compileOptions);\n\n        classDeclarationForOperation(generator, context1.operations['Hero'], Object.values(context1.fragments));\n        const output1 = generator.output;\n\n        resetGenerator();\n        const context2 = compileFromSource(`\n          query Hero {\n            hero {\n              ...HeroName\n              ...HeroAppearsIn\n            }\n          }\n          fragment HeroAppearsIn on Character {\n            appearsIn\n          }\n          fragment HeroName on Character {\n            name\n          }\n        `, compileOptions);\n\n        classDeclarationForOperation(generator, context2.operations['Hero'], Object.values(context2.fragments));\n        const output2 = generator.output;\n\n        expect(output1).toBe(output2);\n      });\n\n      test(`should generate appropriate operation id mapping source when there are nested fragment references`, function() {\n        const source = `\n          query Hero {\n            hero {\n              ...HeroDetails\n            }\n          }\n          fragment HeroName on Character {\n            name\n          }\n          fragment HeroDetails on Character {\n            ...HeroName\n            appearsIn\n          }\n        `;\n        const context = compileFromSource(source, true);\n        expect(context.operations['Hero'].sourceWithFragments).toMatchSnapshot();\n      });\n\n    });\n  });\n\n  describe('#caseClassDeclarationForFragment()', function() {\n    test(`should generate a caseClass declaration for a fragment with an abstract type condition`, function() {\n      const { fragments } = compileFromSource(`\n        fragment HeroDetails on Character {\n          name\n          appearsIn\n        }\n      `);\n\n      caseClassDeclarationForFragment(generator, fragments['HeroDetails']);\n\n      expect(generator.output).toMatchSnapshot();\n    });\n\n    test(`should generate a caseClass declaration for a fragment with a concrete type condition`, function() {\n      const { fragments } = compileFromSource(`\n        fragment DroidDetails on Droid {\n          name\n          primaryFunction\n        }\n      `);\n\n      caseClassDeclarationForFragment(generator, fragments['DroidDetails']);\n\n      expect(generator.output).toMatchSnapshot();\n    });\n\n    test(`should generate a caseClass declaration for a fragment with a subselection`, function() {\n      const { fragments } = compileFromSource(`\n        fragment HeroDetails on Character {\n          name\n          friends {\n            name\n          }\n        }\n      `);\n\n      caseClassDeclarationForFragment(generator, fragments['HeroDetails']);\n\n      expect(generator.output).toMatchSnapshot();\n    });\n\n    test(`should generate a caseClass declaration for a fragment that includes a fragment spread`, function() {\n      const { fragments } = compileFromSource(`\n        fragment HeroDetails on Character {\n          name\n          ...MoreHeroDetails\n        }\n\n        fragment MoreHeroDetails on Character {\n          appearsIn\n        }\n      `);\n\n      caseClassDeclarationForFragment(generator, fragments['HeroDetails']);\n\n      expect(generator.output).toMatchSnapshot();\n    });\n  });\n\n  describe('#caseClassDeclarationForSelectionSet()', function() {\n    test(`should generate a caseClass declaration for a selection set`, function() {\n      caseClassDeclarationForSelectionSet(generator, {\n        caseClassName: 'Hero',\n        parentType: schema.getType('Character'),\n        fields: [\n          {\n            responseName: 'name',\n            fieldName: 'name',\n            type: GraphQLString\n          }\n        ]\n      });\n\n      expect(generator.output).toMatchSnapshot();\n    });\n\n    test(`should escape reserved keywords in a caseClass declaration for a selection set`, function() {\n      caseClassDeclarationForSelectionSet(generator, {\n        caseClassName: 'Hero',\n        parentType: schema.getType('Character'),\n        fields: [\n          {\n            responseName: 'private',\n            fieldName: 'name',\n            type: GraphQLString\n          }\n        ]\n      });\n\n      expect(generator.output).toMatchSnapshot();\n    });\n\n    test(`should generate a nested caseClass declaration for a selection set with subselections`, function() {\n      caseClassDeclarationForSelectionSet(generator, {\n        caseClassName: 'Hero',\n        parentType: schema.getType('Character'),\n        fields: [\n          {\n            responseName: 'friends',\n            fieldName: 'friends',\n            type: new GraphQLList(schema.getType('Character')),\n            fields: [\n              {\n                responseName: 'name',\n                fieldName: 'name',\n                type: GraphQLString\n              }\n            ]\n          }\n        ]\n      });\n\n      expect(generator.output).toMatchSnapshot();\n    });\n\n    test(`should generate a caseClass declaration for a selection set with a fragment spread that matches the parent type`, function() {\n      addFragment({\n        fragmentName: 'HeroDetails',\n        typeCondition: schema.getType('Character')\n      });\n\n      caseClassDeclarationForSelectionSet(generator, {\n        caseClassName: 'Hero',\n        parentType: schema.getType('Character'),\n        fragmentSpreads: ['HeroDetails'],\n        fields: [\n          {\n            responseName: 'name',\n            fieldName: 'name',\n            type: GraphQLString\n          }\n        ]\n      });\n\n      expect(generator.output).toMatchSnapshot();\n    });\n\n    test(`should generate a caseClass declaration for a selection set with a fragment spread with a more specific type condition`, function() {\n      addFragment({\n        fragmentName: 'DroidDetails',\n        typeCondition: schema.getType('Droid')\n      });\n\n      caseClassDeclarationForSelectionSet(generator, {\n        caseClassName: 'Hero',\n        parentType: schema.getType('Character'),\n        fragmentSpreads: ['DroidDetails'],\n        fields: [\n          {\n            responseName: 'name',\n            fieldName: 'name',\n            type: GraphQLString\n          }\n        ]\n      });\n\n      expect(generator.output).toMatchSnapshot();\n    });\n\n    test(`should generate a caseClass declaration for a selection set with an inline fragment`, function() {\n      caseClassDeclarationForSelectionSet(generator, {\n        caseClassName: 'Hero',\n        parentType: schema.getType('Character'),\n        fields: [\n          {\n            responseName: 'name',\n            fieldName: 'name',\n            type: new GraphQLNonNull(GraphQLString)\n          }\n        ],\n        inlineFragments: [\n          {\n            typeCondition: schema.getType('Droid'),\n            possibleTypes: ['Droid'],\n            fields: [\n              {\n                responseName: 'name',\n                fieldName: 'name',\n                type: new GraphQLNonNull(GraphQLString)\n              },\n              {\n                responseName: 'primaryFunction',\n                fieldName: 'primaryFunction',\n                type: GraphQLString\n              }\n            ]\n          }\n        ]\n      });\n\n      expect(generator.output).toMatchSnapshot();\n    });\n\n    test(`should generate a caseClass declaration for a fragment spread nested in an inline fragment`, function() {\n      addFragment({\n        fragmentName: 'HeroDetails',\n        typeCondition: schema.getType('Character')\n      });\n\n      caseClassDeclarationForSelectionSet(generator, {\n        caseClassName: 'Hero',\n        parentType: schema.getType('Character'),\n        fields: [],\n        inlineFragments: [\n          {\n            typeCondition: schema.getType('Droid'),\n            possibleTypes: ['Droid'],\n            fields: [],\n            fragmentSpreads: ['HeroDetails'],\n          }\n        ]\n      });\n\n      expect(generator.output).toMatchSnapshot();\n    });\n  });\n\n  describe('#dictionaryLiteralForFieldArguments()', function() {\n    test('should include expressions for input objects with variables', function() {\n      const { operations } = compileFromSource(`\n        mutation FieldArgumentsWithInputObjects($commentary: String!, $red: Int!) {\n          createReview(episode: JEDI, review: { stars: 2, commentary: $commentary, favorite_color: { red: $red, blue: 100, green: 50 } }) {\n            commentary\n          }\n        }\n      `);\n\n      const fieldArguments = operations['FieldArgumentsWithInputObjects'].fields[0].args;\n      const dictionaryLiteral = dictionaryLiteralForFieldArguments(fieldArguments);\n\n      expect(dictionaryLiteral).toBe('[\"episode\": \"JEDI\", \"review\": [\"stars\": 2, \"commentary\": Variable(\"commentary\"), \"favorite_color\": [\"red\": Variable(\"red\"), \"blue\": 100, \"green\": 50]]]');\n    });\n  });\n\n  describe('#typeDeclarationForGraphQLType()', function() {\n    test('should generate an enum declaration for a GraphQLEnumType', function() {\n      const generator = new CodeGenerator();\n\n      typeDeclarationForGraphQLType(generator, schema.getType('Episode'));\n\n      expect(generator.output).toMatchSnapshot();\n    });\n\n    test('should escape identifiers in cases of enum declaration for a GraphQLEnumType', function() {\n      const generator = new CodeGenerator();\n\n      const albumPrivaciesEnum = new GraphQLEnumType({\n        name: 'AlbumPrivacies',\n        values: { PUBLIC: { value: \"PUBLIC\" }, PRIVATE: { value: \"PRIVATE\" } }\n      });\n\n      typeDeclarationForGraphQLType(generator, albumPrivaciesEnum);\n\n      expect(generator.output).toMatchSnapshot();\n    });\n\n    test('should generate a caseClass declaration for a GraphQLInputObjectType', function() {\n      const generator = new CodeGenerator();\n\n      typeDeclarationForGraphQLType(generator, schema.getType('ReviewInput'));\n\n      expect(generator.output).toMatchSnapshot();\n    });\n  });\n});\n"],"sourceRoot":""}