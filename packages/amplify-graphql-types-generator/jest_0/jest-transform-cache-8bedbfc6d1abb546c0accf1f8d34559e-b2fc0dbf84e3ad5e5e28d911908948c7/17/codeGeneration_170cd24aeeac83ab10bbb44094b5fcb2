caaa9c170dce731aff7cfb246fcc35ad
'use strict';require('ts-jest').install("/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-types-generator/src/swift/codeGeneration.ts", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst path = require(\"path\");\nconst graphql_1 = require(\"graphql\");\nconst printing_1 = require(\"../utilities/printing\");\nconst language_1 = require(\"./language\");\nconst helpers_1 = require(\"./helpers\");\nconst s3Wrapper_1 = require(\"./s3Wrapper\");\nconst graphql_2 = require(\"../utilities/graphql\");\nconst typeCase_1 = require(\"../compiler/visitors/typeCase\");\nconst collectFragmentsReferenced_1 = require(\"../compiler/visitors/collectFragmentsReferenced\");\nconst generateOperationId_1 = require(\"../compiler/visitors/generateOperationId\");\nconst collectAndMergeFields_1 = require(\"../compiler/visitors/collectAndMergeFields\");\nrequire(\"../utilities/array\");\nconst complextypes_1 = require(\"../utilities/complextypes\");\nfunction generateSource(context, outputIndividualFiles, only) {\n    const generator = new SwiftAPIGenerator(context);\n    if (outputIndividualFiles) {\n        generator.withinFile(`Types.graphql.swift`, () => {\n            generator.fileHeader();\n            generator.namespaceDeclaration(context.options.namespace, () => {\n                context.typesUsed.forEach(type => {\n                    generator.typeDeclarationForGraphQLType(type);\n                });\n            });\n            if (context.options.addS3Wrapper) {\n                generator.printOnNewline(`\\n${s3Wrapper_1.s3WrapperCode}`);\n            }\n        });\n        const inputFilePaths = new Set();\n        Object.values(context.operations).forEach(operation => {\n            inputFilePaths.add(operation.filePath);\n        });\n        Object.values(context.fragments).forEach(fragment => {\n            inputFilePaths.add(fragment.filePath);\n        });\n        for (const inputFilePath of inputFilePaths) {\n            if (only && inputFilePath !== only)\n                continue;\n            generator.withinFile(`${path.basename(inputFilePath)}.swift`, () => {\n                generator.fileHeader();\n                generator.namespaceExtensionDeclaration(context.options.namespace, () => {\n                    Object.values(context.operations).forEach(operation => {\n                        if (operation.filePath === inputFilePath) {\n                            generator.classDeclarationForOperation(operation);\n                        }\n                    });\n                    Object.values(context.fragments).forEach(fragment => {\n                        if (fragment.filePath === inputFilePath) {\n                            generator.structDeclarationForFragment(fragment);\n                        }\n                    });\n                });\n            });\n        }\n    }\n    else {\n        generator.fileHeader();\n        generator.namespaceDeclaration(context.options.namespace, () => {\n            context.typesUsed.forEach(type => {\n                generator.typeDeclarationForGraphQLType(type);\n            });\n            Object.values(context.operations).forEach(operation => {\n                generator.classDeclarationForOperation(operation);\n            });\n            Object.values(context.fragments).forEach(fragment => {\n                generator.structDeclarationForFragment(fragment);\n            });\n        });\n        if (context.options.addS3Wrapper) {\n            generator.printOnNewline(`\\n${s3Wrapper_1.s3WrapperCode}`);\n        }\n    }\n    return generator;\n}\nexports.generateSource = generateSource;\nclass SwiftAPIGenerator extends language_1.SwiftGenerator {\n    constructor(context) {\n        super(context);\n        this.helpers = new helpers_1.Helpers(context.options);\n    }\n    fileHeader() {\n        this.printOnNewline('//  This file was automatically generated and should not be edited.');\n        this.printNewline();\n        this.printOnNewline('import AWSAppSync');\n    }\n    classDeclarationForOperation(operation) {\n        const { operationName, operationType, variables, source, selectionSet } = operation;\n        let className;\n        let protocol;\n        switch (operationType) {\n            case 'query':\n                className = `${this.helpers.operationClassName(operationName)}Query`;\n                protocol = 'GraphQLQuery';\n                break;\n            case 'mutation':\n                className = `${this.helpers.operationClassName(operationName)}Mutation`;\n                protocol = 'GraphQLMutation';\n                break;\n            case 'subscription':\n                className = `${this.helpers.operationClassName(operationName)}Subscription`;\n                protocol = 'GraphQLSubscription';\n                break;\n            default:\n                throw new graphql_1.GraphQLError(`Unsupported operation type \"${operationType}\"`);\n        }\n        this.classDeclaration({\n            className,\n            modifiers: ['public', 'final'],\n            adoptedProtocols: [protocol]\n        }, () => {\n            if (source) {\n                this.printOnNewline('public static let operationString =');\n                this.withIndent(() => {\n                    this.multilineString(source);\n                });\n            }\n            const fragmentsReferenced = collectFragmentsReferenced_1.collectFragmentsReferenced(operation.selectionSet, this.context.fragments);\n            if (this.context.options.generateOperationIds) {\n                const { operationId } = generateOperationId_1.generateOperationId(operation, this.context.fragments, fragmentsReferenced);\n                operation.operationId = operationId;\n                this.printNewlineIfNeeded();\n                this.printOnNewline(`public static let operationIdentifier: String? = \"${operationId}\"`);\n            }\n            if (fragmentsReferenced.size > 0) {\n                this.printNewlineIfNeeded();\n                this.printOnNewline('public static var requestString: String { return operationString');\n                fragmentsReferenced.forEach(fragmentName => {\n                    this.print(`.appending(${this.helpers.structNameForFragmentName(fragmentName)}.fragmentString)`);\n                });\n                this.print(' }');\n            }\n            this.printNewlineIfNeeded();\n            if (variables && variables.length > 0) {\n                const properties = variables.map(({ name, type }) => {\n                    const typeName = this.helpers.typeNameFromGraphQLType(type);\n                    const isOptional = !(graphql_1.isNonNullType(type) ||\n                        (graphql_1.isListType(type) && graphql_1.isNonNullType(type.ofType)));\n                    return { name, propertyName: name, type, typeName, isOptional };\n                });\n                this.propertyDeclarations(properties);\n                this.printNewlineIfNeeded();\n                this.initializerDeclarationForProperties(properties);\n                this.printNewlineIfNeeded();\n                this.printOnNewline(`public var variables: GraphQLMap?`);\n                this.withinBlock(() => {\n                    this.printOnNewline(printing_1.wrap(`return [`, printing_1.join(properties.map(({ name, propertyName }) => `\"${name}\": ${language_1.escapeIdentifierIfNeeded(propertyName)}`), ', ') || ':', `]`));\n                });\n            }\n            else {\n                this.initializerDeclarationForProperties([]);\n            }\n            this.structDeclarationForSelectionSet({\n                structName: 'Data',\n                selectionSet\n            });\n        });\n    }\n    structDeclarationForFragment({ fragmentName, selectionSet, source }) {\n        const structName = this.helpers.structNameForFragmentName(fragmentName);\n        this.structDeclarationForSelectionSet({\n            structName,\n            adoptedProtocols: ['GraphQLFragment'],\n            selectionSet\n        }, () => {\n            if (source) {\n                this.printOnNewline('public static let fragmentString =');\n                this.withIndent(() => {\n                    this.multilineString(source);\n                });\n            }\n        });\n    }\n    structDeclarationForSelectionSet({ structName, adoptedProtocols = ['GraphQLSelectionSet'], selectionSet }, before) {\n        const typeCase = typeCase_1.typeCaseForSelectionSet(selectionSet, this.context.options.mergeInFieldsFromFragmentSpreads);\n        this.structDeclarationForVariant({\n            structName,\n            adoptedProtocols,\n            variant: typeCase.default,\n            typeCase\n        }, before, () => {\n            const variants = typeCase.variants.map(this.helpers.propertyFromVariant, this.helpers);\n            for (const variant of variants) {\n                this.propertyDeclarationForVariant(variant);\n                this.structDeclarationForVariant({\n                    structName: variant.structName,\n                    variant\n                });\n            }\n        });\n    }\n    structDeclarationForVariant({ structName, adoptedProtocols = ['GraphQLSelectionSet'], variant, typeCase }, before, after) {\n        this.structDeclaration({ structName, adoptedProtocols }, () => {\n            if (before) {\n                before();\n            }\n            this.printNewlineIfNeeded();\n            this.printOnNewline('public static let possibleTypes = [');\n            this.print(printing_1.join(variant.possibleTypes.map(type => `\"${type.name}\"`), ', '));\n            this.print(']');\n            this.printNewlineIfNeeded();\n            this.printOnNewline('public static let selections: [GraphQLSelection] = ');\n            if (typeCase) {\n                this.typeCaseInitialization(typeCase);\n            }\n            else {\n                this.selectionSetInitialization(variant);\n            }\n            this.printNewlineIfNeeded();\n            this.propertyDeclaration({\n                propertyName: 'snapshot',\n                typeName: 'Snapshot'\n            });\n            this.printNewlineIfNeeded();\n            this.printOnNewline('public init(snapshot: Snapshot)');\n            this.withinBlock(() => {\n                this.printOnNewline(`self.snapshot = snapshot`);\n            });\n            if (typeCase) {\n                this.initializersForTypeCase(typeCase);\n            }\n            else {\n                this.initializersForVariant(variant);\n            }\n            const fields = collectAndMergeFields_1.collectAndMergeFields(variant, this.context.options.mergeInFieldsFromFragmentSpreads).map(field => this.helpers.propertyFromField(field));\n            const fragmentSpreads = variant.fragmentSpreads.map(fragmentSpread => {\n                const isConditional = variant.possibleTypes.some(type => !fragmentSpread.selectionSet.possibleTypes.includes(type));\n                return this.helpers.propertyFromFragmentSpread(fragmentSpread, isConditional);\n            });\n            fields.forEach(this.propertyDeclarationForField, this);\n            if (fragmentSpreads.length > 0) {\n                this.printNewlineIfNeeded();\n                this.printOnNewline(`public var fragments: Fragments`);\n                this.withinBlock(() => {\n                    this.printOnNewline('get');\n                    this.withinBlock(() => {\n                        this.printOnNewline(`return Fragments(snapshot: snapshot)`);\n                    });\n                    this.printOnNewline('set');\n                    this.withinBlock(() => {\n                        this.printOnNewline(`snapshot += newValue.snapshot`);\n                    });\n                });\n                this.structDeclaration({\n                    structName: 'Fragments'\n                }, () => {\n                    this.propertyDeclaration({\n                        propertyName: 'snapshot',\n                        typeName: 'Snapshot'\n                    });\n                    for (const fragmentSpread of fragmentSpreads) {\n                        const { propertyName, typeName, structName, isConditional } = fragmentSpread;\n                        this.printNewlineIfNeeded();\n                        this.printOnNewline(`public var ${language_1.escapeIdentifierIfNeeded(propertyName)}: ${typeName}`);\n                        this.withinBlock(() => {\n                            this.printOnNewline('get');\n                            this.withinBlock(() => {\n                                if (isConditional) {\n                                    this.printOnNewline(`if !${structName}.possibleTypes.contains(snapshot[\"__typename\"]! as! String) { return nil }`);\n                                }\n                                this.printOnNewline(`return ${structName}(snapshot: snapshot)`);\n                            });\n                            this.printOnNewline('set');\n                            this.withinBlock(() => {\n                                if (isConditional) {\n                                    this.printOnNewline(`guard let newValue = newValue else { return }`);\n                                    this.printOnNewline(`snapshot += newValue.snapshot`);\n                                }\n                                else {\n                                    this.printOnNewline(`snapshot += newValue.snapshot`);\n                                }\n                            });\n                        });\n                    }\n                });\n            }\n            for (const field of fields) {\n                if (graphql_1.isCompositeType(graphql_1.getNamedType(field.type)) && field.selectionSet) {\n                    this.structDeclarationForSelectionSet({\n                        structName: field.structName,\n                        selectionSet: field.selectionSet\n                    });\n                }\n            }\n            if (after) {\n                after();\n            }\n        });\n    }\n    initializersForTypeCase(typeCase) {\n        const variants = typeCase.variants;\n        if (variants.length == 0) {\n            this.initializersForVariant(typeCase.default);\n        }\n        else {\n            const remainder = typeCase.remainder;\n            for (const variant of remainder ? [remainder, ...variants] : variants) {\n                this.initializersForVariant(variant, variant === remainder ? undefined : this.helpers.structNameForVariant(variant), false);\n            }\n        }\n    }\n    initializersForVariant(variant, namespace, useInitializerIfPossible = true) {\n        if (useInitializerIfPossible && variant.possibleTypes.length == 1) {\n            const properties = this.helpers.propertiesForSelectionSet(variant);\n            if (!properties)\n                return;\n            this.printNewlineIfNeeded();\n            this.printOnNewline(`public init`);\n            this.parametersForProperties(properties);\n            this.withinBlock(() => {\n                this.printOnNewline(printing_1.wrap(`self.init(snapshot: [`, printing_1.join([\n                    `\"__typename\": \"${variant.possibleTypes[0]}\"`,\n                    ...properties.map(this.propertyAssignmentForField, this)\n                ], ', ') || ':', `])`));\n            });\n        }\n        else {\n            const structName = this.scope.typeName;\n            for (const possibleType of variant.possibleTypes) {\n                const properties = this.helpers.propertiesForSelectionSet({\n                    possibleTypes: [possibleType],\n                    selections: variant.selections\n                }, namespace);\n                if (!properties)\n                    continue;\n                this.printNewlineIfNeeded();\n                this.printOnNewline(`public static func make${possibleType}`);\n                this.parametersForProperties(properties);\n                this.print(` -> ${structName}`);\n                this.withinBlock(() => {\n                    this.printOnNewline(printing_1.wrap(`return ${structName}(snapshot: [`, printing_1.join([\n                        `\"__typename\": \"${possibleType}\"`,\n                        ...properties.map(this.propertyAssignmentForField, this)\n                    ], ', ') || ':', `])`));\n                });\n            }\n        }\n    }\n    propertyAssignmentForField(field) {\n        const { responseKey, propertyName, type } = field;\n        const valueExpression = graphql_1.isCompositeType(graphql_1.getNamedType(type))\n            ? this.helpers.mapExpressionForType(type, identifier => `${identifier}.snapshot`, language_1.escapeIdentifierIfNeeded(propertyName))\n            : language_1.escapeIdentifierIfNeeded(propertyName);\n        return `\"${responseKey}\": ${valueExpression}`;\n    }\n    propertyDeclarationForField(field) {\n        const { responseKey, propertyName, typeName, type, isOptional } = field;\n        const unmodifiedFieldType = graphql_1.getNamedType(type);\n        this.printNewlineIfNeeded();\n        this.comment(field.description);\n        this.deprecationAttributes(field.isDeprecated, field.deprecationReason);\n        this.printOnNewline(`public var ${language_1.escapeIdentifierIfNeeded(propertyName)}: ${typeName}`);\n        this.withinBlock(() => {\n            if (graphql_1.isCompositeType(unmodifiedFieldType)) {\n                const structName = language_1.escapeIdentifierIfNeeded(this.helpers.structNameForPropertyName(propertyName));\n                if (graphql_2.isList(type)) {\n                    this.printOnNewline('get');\n                    this.withinBlock(() => {\n                        const snapshotTypeName = this.helpers.typeNameFromGraphQLType(type, 'Snapshot', false);\n                        let getter;\n                        if (isOptional) {\n                            getter = `return (snapshot[\"${responseKey}\"] as? ${snapshotTypeName})`;\n                        }\n                        else {\n                            getter = `return (snapshot[\"${responseKey}\"] as! ${snapshotTypeName})`;\n                        }\n                        getter += this.helpers.mapExpressionForType(type, identifier => `${structName}(snapshot: ${identifier})`);\n                        this.printOnNewline(getter);\n                    });\n                    this.printOnNewline('set');\n                    this.withinBlock(() => {\n                        let newValueExpression = this.helpers.mapExpressionForType(type, identifier => `${identifier}.snapshot`, 'newValue');\n                        this.printOnNewline(`snapshot.updateValue(${newValueExpression}, forKey: \"${responseKey}\")`);\n                    });\n                }\n                else {\n                    this.printOnNewline('get');\n                    this.withinBlock(() => {\n                        if (isOptional) {\n                            this.printOnNewline(`return (snapshot[\"${responseKey}\"] as? Snapshot).flatMap { ${structName}(snapshot: $0) }`);\n                        }\n                        else {\n                            this.printOnNewline(`return ${structName}(snapshot: snapshot[\"${responseKey}\"]! as! Snapshot)`);\n                        }\n                    });\n                    this.printOnNewline('set');\n                    this.withinBlock(() => {\n                        let newValueExpression;\n                        if (isOptional) {\n                            newValueExpression = 'newValue?.snapshot';\n                        }\n                        else {\n                            newValueExpression = 'newValue.snapshot';\n                        }\n                        this.printOnNewline(`snapshot.updateValue(${newValueExpression}, forKey: \"${responseKey}\")`);\n                    });\n                }\n            }\n            else {\n                this.printOnNewline('get');\n                this.withinBlock(() => {\n                    if (isOptional) {\n                        this.printOnNewline(`return snapshot[\"${responseKey}\"] as? ${typeName.slice(0, -1)}`);\n                    }\n                    else {\n                        this.printOnNewline(`return snapshot[\"${responseKey}\"]! as! ${typeName}`);\n                    }\n                });\n                this.printOnNewline('set');\n                this.withinBlock(() => {\n                    this.printOnNewline(`snapshot.updateValue(newValue, forKey: \"${responseKey}\")`);\n                });\n            }\n        });\n    }\n    propertyDeclarationForVariant(variant) {\n        const { propertyName, typeName, structName } = variant;\n        this.printNewlineIfNeeded();\n        this.printOnNewline(`public var ${language_1.escapeIdentifierIfNeeded(propertyName)}: ${typeName}`);\n        this.withinBlock(() => {\n            this.printOnNewline('get');\n            this.withinBlock(() => {\n                this.printOnNewline(`if !${structName}.possibleTypes.contains(__typename) { return nil }`);\n                this.printOnNewline(`return ${structName}(snapshot: snapshot)`);\n            });\n            this.printOnNewline('set');\n            this.withinBlock(() => {\n                this.printOnNewline(`guard let newValue = newValue else { return }`);\n                this.printOnNewline(`snapshot = newValue.snapshot`);\n            });\n        });\n    }\n    initializerDeclarationForProperties(properties) {\n        this.printOnNewline(`public init`);\n        this.parametersForProperties(properties);\n        this.withinBlock(() => {\n            properties.forEach(({ propertyName }) => {\n                this.printOnNewline(`self.${propertyName} = ${language_1.escapeIdentifierIfNeeded(propertyName)}`);\n            });\n        });\n    }\n    parametersForProperties(properties) {\n        this.print('(');\n        this.print(printing_1.join(properties.map(({ propertyName, typeName, isOptional }) => printing_1.join([`${language_1.escapeIdentifierIfNeeded(propertyName)}: ${typeName}`, isOptional && ' = nil'])), ', '));\n        this.print(')');\n    }\n    typeCaseInitialization(typeCase) {\n        if (typeCase.variants.length < 1) {\n            this.selectionSetInitialization(typeCase.default);\n            return;\n        }\n        this.print('[');\n        this.withIndent(() => {\n            this.printOnNewline(`GraphQLTypeCase(`);\n            this.withIndent(() => {\n                this.printOnNewline(`variants: [`);\n                this.print(typeCase.variants\n                    .flatMap(variant => {\n                    const structName = this.helpers.structNameForVariant(variant);\n                    return variant.possibleTypes.map(type => `\"${type}\": ${structName}.selections`);\n                })\n                    .join(', '));\n                this.print('],');\n                this.printOnNewline(`default: `);\n                this.selectionSetInitialization(typeCase.default);\n            });\n            this.printOnNewline(')');\n        });\n        this.printOnNewline(']');\n    }\n    selectionSetInitialization(selectionSet) {\n        this.print('[');\n        this.withIndent(() => {\n            for (const selection of selectionSet.selections) {\n                switch (selection.kind) {\n                    case 'Field': {\n                        const { name, alias, args, type } = selection;\n                        const responseKey = selection.alias || selection.name;\n                        const structName = this.helpers.structNameForPropertyName(responseKey);\n                        this.printOnNewline(`GraphQLField(`);\n                        this.print(printing_1.join([\n                            `\"${name}\"`,\n                            alias ? `alias: \"${alias}\"` : null,\n                            args &&\n                                args.length &&\n                                `arguments: ${this.helpers.dictionaryLiteralForFieldArguments(args)}`,\n                            `type: ${this.helpers.fieldTypeEnum(type, structName)}`\n                        ], ', '));\n                        this.print('),');\n                        break;\n                    }\n                    case 'BooleanCondition':\n                        this.printOnNewline(`GraphQLBooleanCondition(`);\n                        this.print(printing_1.join([\n                            `variableName: \"${selection.variableName}\"`,\n                            `inverted: ${selection.inverted}`,\n                            'selections: '\n                        ], ', '));\n                        this.selectionSetInitialization(selection.selectionSet);\n                        this.print('),');\n                        break;\n                    case 'TypeCondition': {\n                        this.printOnNewline(`GraphQLTypeCondition(`);\n                        this.print(printing_1.join([\n                            `possibleTypes: [${printing_1.join(selection.selectionSet.possibleTypes.map(type => `\"${type.name}\"`), ', ')}]`,\n                            'selections: '\n                        ], ', '));\n                        this.selectionSetInitialization(selection.selectionSet);\n                        this.print('),');\n                        break;\n                    }\n                    case 'FragmentSpread': {\n                        const structName = this.helpers.structNameForFragmentName(selection.fragmentName);\n                        this.printOnNewline(`GraphQLFragmentSpread(${structName}.self),`);\n                        break;\n                    }\n                }\n            }\n        });\n        this.printOnNewline(']');\n    }\n    typeDeclarationForGraphQLType(type) {\n        if (type instanceof graphql_1.GraphQLEnumType) {\n            this.enumerationDeclaration(type);\n        }\n        else if (type instanceof graphql_1.GraphQLInputObjectType) {\n            this.structDeclarationForInputObjectType(type);\n        }\n    }\n    enumerationDeclaration(type) {\n        const { name, description } = type;\n        const values = type.getValues();\n        this.printNewlineIfNeeded();\n        this.comment(description || undefined);\n        this.printOnNewline(`public enum ${name}: RawRepresentable, Equatable, JSONDecodable, JSONEncodable`);\n        this.withinBlock(() => {\n            this.printOnNewline('public typealias RawValue = String');\n            values.forEach(value => {\n                this.comment(value.description || undefined);\n                this.deprecationAttributes(value.isDeprecated, value.deprecationReason || undefined);\n                this.printOnNewline(`case ${language_1.escapeIdentifierIfNeeded(this.helpers.enumCaseName(value.name))}`);\n            });\n            this.comment('Auto generated constant for unknown enum values');\n            this.printOnNewline('case unknown(RawValue)');\n            this.printNewlineIfNeeded();\n            this.printOnNewline('public init?(rawValue: RawValue)');\n            this.withinBlock(() => {\n                this.printOnNewline('switch rawValue');\n                this.withinBlock(() => {\n                    values.forEach(value => {\n                        this.printOnNewline(`case \"${value.value}\": self = ${language_1.escapeIdentifierIfNeeded(this.helpers.enumDotCaseName(value.name))}`);\n                    });\n                    this.printOnNewline(`default: self = .unknown(rawValue)`);\n                });\n            });\n            this.printNewlineIfNeeded();\n            this.printOnNewline('public var rawValue: RawValue');\n            this.withinBlock(() => {\n                this.printOnNewline('switch self');\n                this.withinBlock(() => {\n                    values.forEach(value => {\n                        this.printOnNewline(`case ${language_1.escapeIdentifierIfNeeded(this.helpers.enumDotCaseName(value.name))}: return \"${value.value}\"`);\n                    });\n                    this.printOnNewline(`case .unknown(let value): return value`);\n                });\n            });\n            this.printNewlineIfNeeded();\n            this.printOnNewline(`public static func == (lhs: ${name}, rhs: ${name}) -> Bool`);\n            this.withinBlock(() => {\n                this.printOnNewline('switch (lhs, rhs)');\n                this.withinBlock(() => {\n                    values.forEach(value => {\n                        const enumDotCaseName = language_1.escapeIdentifierIfNeeded(this.helpers.enumDotCaseName(value.name));\n                        const tuple = `(${enumDotCaseName}, ${enumDotCaseName})`;\n                        this.printOnNewline(`case ${tuple}: return true`);\n                    });\n                    this.printOnNewline(`case (.unknown(let lhsValue), .unknown(let rhsValue)): return lhsValue == rhsValue`);\n                    this.printOnNewline(`default: return false`);\n                });\n            });\n        });\n    }\n    structDeclarationForInputObjectType(type) {\n        const { name: structName, description } = type;\n        const adoptedProtocols = ['GraphQLMapConvertible'];\n        const fields = Object.values(type.getFields());\n        let properties = fields.map(this.helpers.propertyFromInputField, this.helpers);\n        if (complextypes_1.isS3Field(type)) {\n            properties = [\n                ...properties,\n                {\n                    propertyName: 'localUri',\n                    name: 'localUri',\n                    typeName: 'String',\n                    isOptional: false,\n                    description: '',\n                },\n                {\n                    propertyName: 'mimeType',\n                    name: 'mimeType',\n                    typeName: 'String',\n                    isOptional: false,\n                    description: '',\n                },\n            ];\n        }\n        this.structDeclaration({ structName, description: description || undefined, adoptedProtocols }, () => {\n            this.printOnNewline(`public var graphQLMap: GraphQLMap`);\n            this.printNewlineIfNeeded();\n            this.printOnNewline(`public init`);\n            this.print('(');\n            this.print(printing_1.join(properties.map(({ propertyName, typeName, isOptional }) => printing_1.join([\n                `${language_1.escapeIdentifierIfNeeded(propertyName)}: ${typeName}`,\n                isOptional && ' = nil'\n            ])), ', '));\n            this.print(')');\n            this.withinBlock(() => {\n                this.printOnNewline(printing_1.wrap(`graphQLMap = [`, printing_1.join(properties.map(({ name, propertyName }) => `\"${name}\": ${language_1.escapeIdentifierIfNeeded(propertyName)}`), ', ') || ':', `]`));\n            });\n            for (const { propertyName, typeName, description } of properties) {\n                this.printNewlineIfNeeded();\n                this.comment(description || undefined);\n                this.printOnNewline(`public var ${language_1.escapeIdentifierIfNeeded(propertyName)}: ${typeName}`);\n                this.withinBlock(() => {\n                    this.printOnNewline('get');\n                    this.withinBlock(() => {\n                        this.printOnNewline(`return graphQLMap[\"${propertyName}\"] as! ${typeName}`);\n                    });\n                    this.printOnNewline('set');\n                    this.withinBlock(() => {\n                        this.printOnNewline(`graphQLMap.updateValue(newValue, forKey: \"${propertyName}\")`);\n                    });\n                });\n            }\n        });\n    }\n}\nexports.SwiftAPIGenerator = SwiftAPIGenerator;\n//# sourceMappingURL=data:application/json;base64,");"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const graphql_1 = require("graphql");
const printing_1 = require("../utilities/printing");
const language_1 = require("./language");
const helpers_1 = require("./helpers");
const s3Wrapper_1 = require("./s3Wrapper");
const graphql_2 = require("../utilities/graphql");
const typeCase_1 = require("../compiler/visitors/typeCase");
const collectFragmentsReferenced_1 = require("../compiler/visitors/collectFragmentsReferenced");
const generateOperationId_1 = require("../compiler/visitors/generateOperationId");
const collectAndMergeFields_1 = require("../compiler/visitors/collectAndMergeFields");
require("../utilities/array");
const complextypes_1 = require("../utilities/complextypes");
function generateSource(context, outputIndividualFiles, only) {
    const generator = new SwiftAPIGenerator(context);
    if (outputIndividualFiles) {
        generator.withinFile(`Types.graphql.swift`, () => {
            generator.fileHeader();
            generator.namespaceDeclaration(context.options.namespace, () => {
                context.typesUsed.forEach(type => {
                    generator.typeDeclarationForGraphQLType(type);
                });
            });
            if (context.options.addS3Wrapper) {
                generator.printOnNewline(`\n${s3Wrapper_1.s3WrapperCode}`);
            }
        });
        const inputFilePaths = new Set();
        Object.values(context.operations).forEach(operation => {
            inputFilePaths.add(operation.filePath);
        });
        Object.values(context.fragments).forEach(fragment => {
            inputFilePaths.add(fragment.filePath);
        });
        for (const inputFilePath of inputFilePaths) {
            if (only && inputFilePath !== only)
            continue;
            generator.withinFile(`${path.basename(inputFilePath)}.swift`, () => {
                generator.fileHeader();
                generator.namespaceExtensionDeclaration(context.options.namespace, () => {
                    Object.values(context.operations).forEach(operation => {
                        if (operation.filePath === inputFilePath) {
                            generator.classDeclarationForOperation(operation);
                        }
                    });
                    Object.values(context.fragments).forEach(fragment => {
                        if (fragment.filePath === inputFilePath) {
                            generator.structDeclarationForFragment(fragment);
                        }
                    });
                });
            });
        }
    } else
    {
        generator.fileHeader();
        generator.namespaceDeclaration(context.options.namespace, () => {
            context.typesUsed.forEach(type => {
                generator.typeDeclarationForGraphQLType(type);
            });
            Object.values(context.operations).forEach(operation => {
                generator.classDeclarationForOperation(operation);
            });
            Object.values(context.fragments).forEach(fragment => {
                generator.structDeclarationForFragment(fragment);
            });
        });
        if (context.options.addS3Wrapper) {
            generator.printOnNewline(`\n${s3Wrapper_1.s3WrapperCode}`);
        }
    }
    return generator;
}
exports.generateSource = generateSource;
class SwiftAPIGenerator extends language_1.SwiftGenerator {
    constructor(context) {
        super(context);
        this.helpers = new helpers_1.Helpers(context.options);
    }
    fileHeader() {
        this.printOnNewline('//  This file was automatically generated and should not be edited.');
        this.printNewline();
        this.printOnNewline('import AWSAppSync');
    }
    classDeclarationForOperation(operation) {
        const { operationName, operationType, variables, source, selectionSet } = operation;
        let className;
        let protocol;
        switch (operationType) {
            case 'query':
                className = `${this.helpers.operationClassName(operationName)}Query`;
                protocol = 'GraphQLQuery';
                break;
            case 'mutation':
                className = `${this.helpers.operationClassName(operationName)}Mutation`;
                protocol = 'GraphQLMutation';
                break;
            case 'subscription':
                className = `${this.helpers.operationClassName(operationName)}Subscription`;
                protocol = 'GraphQLSubscription';
                break;
            default:
                throw new graphql_1.GraphQLError(`Unsupported operation type "${operationType}"`);}

        this.classDeclaration({
            className,
            modifiers: ['public', 'final'],
            adoptedProtocols: [protocol] },
        () => {
            if (source) {
                this.printOnNewline('public static let operationString =');
                this.withIndent(() => {
                    this.multilineString(source);
                });
            }
            const fragmentsReferenced = collectFragmentsReferenced_1.collectFragmentsReferenced(operation.selectionSet, this.context.fragments);
            if (this.context.options.generateOperationIds) {
                const { operationId } = generateOperationId_1.generateOperationId(operation, this.context.fragments, fragmentsReferenced);
                operation.operationId = operationId;
                this.printNewlineIfNeeded();
                this.printOnNewline(`public static let operationIdentifier: String? = "${operationId}"`);
            }
            if (fragmentsReferenced.size > 0) {
                this.printNewlineIfNeeded();
                this.printOnNewline('public static var requestString: String { return operationString');
                fragmentsReferenced.forEach(fragmentName => {
                    this.print(`.appending(${this.helpers.structNameForFragmentName(fragmentName)}.fragmentString)`);
                });
                this.print(' }');
            }
            this.printNewlineIfNeeded();
            if (variables && variables.length > 0) {
                const properties = variables.map(({ name, type }) => {
                    const typeName = this.helpers.typeNameFromGraphQLType(type);
                    const isOptional = !(graphql_1.isNonNullType(type) ||
                    graphql_1.isListType(type) && graphql_1.isNonNullType(type.ofType));
                    return { name, propertyName: name, type, typeName, isOptional };
                });
                this.propertyDeclarations(properties);
                this.printNewlineIfNeeded();
                this.initializerDeclarationForProperties(properties);
                this.printNewlineIfNeeded();
                this.printOnNewline(`public var variables: GraphQLMap?`);
                this.withinBlock(() => {
                    this.printOnNewline(printing_1.wrap(`return [`, printing_1.join(properties.map(({ name, propertyName }) => `"${name}": ${language_1.escapeIdentifierIfNeeded(propertyName)}`), ', ') || ':', `]`));
                });
            } else
            {
                this.initializerDeclarationForProperties([]);
            }
            this.structDeclarationForSelectionSet({
                structName: 'Data',
                selectionSet });

        });
    }
    structDeclarationForFragment({ fragmentName, selectionSet, source }) {
        const structName = this.helpers.structNameForFragmentName(fragmentName);
        this.structDeclarationForSelectionSet({
            structName,
            adoptedProtocols: ['GraphQLFragment'],
            selectionSet },
        () => {
            if (source) {
                this.printOnNewline('public static let fragmentString =');
                this.withIndent(() => {
                    this.multilineString(source);
                });
            }
        });
    }
    structDeclarationForSelectionSet({ structName, adoptedProtocols = ['GraphQLSelectionSet'], selectionSet }, before) {
        const typeCase = typeCase_1.typeCaseForSelectionSet(selectionSet, this.context.options.mergeInFieldsFromFragmentSpreads);
        this.structDeclarationForVariant({
            structName,
            adoptedProtocols,
            variant: typeCase.default,
            typeCase },
        before, () => {
            const variants = typeCase.variants.map(this.helpers.propertyFromVariant, this.helpers);
            for (const variant of variants) {
                this.propertyDeclarationForVariant(variant);
                this.structDeclarationForVariant({
                    structName: variant.structName,
                    variant });

            }
        });
    }
    structDeclarationForVariant({ structName, adoptedProtocols = ['GraphQLSelectionSet'], variant, typeCase }, before, after) {
        this.structDeclaration({ structName, adoptedProtocols }, () => {
            if (before) {
                before();
            }
            this.printNewlineIfNeeded();
            this.printOnNewline('public static let possibleTypes = [');
            this.print(printing_1.join(variant.possibleTypes.map(type => `"${type.name}"`), ', '));
            this.print(']');
            this.printNewlineIfNeeded();
            this.printOnNewline('public static let selections: [GraphQLSelection] = ');
            if (typeCase) {
                this.typeCaseInitialization(typeCase);
            } else
            {
                this.selectionSetInitialization(variant);
            }
            this.printNewlineIfNeeded();
            this.propertyDeclaration({
                propertyName: 'snapshot',
                typeName: 'Snapshot' });

            this.printNewlineIfNeeded();
            this.printOnNewline('public init(snapshot: Snapshot)');
            this.withinBlock(() => {
                this.printOnNewline(`self.snapshot = snapshot`);
            });
            if (typeCase) {
                this.initializersForTypeCase(typeCase);
            } else
            {
                this.initializersForVariant(variant);
            }
            const fields = collectAndMergeFields_1.collectAndMergeFields(variant, this.context.options.mergeInFieldsFromFragmentSpreads).map(field => this.helpers.propertyFromField(field));
            const fragmentSpreads = variant.fragmentSpreads.map(fragmentSpread => {
                const isConditional = variant.possibleTypes.some(type => !fragmentSpread.selectionSet.possibleTypes.includes(type));
                return this.helpers.propertyFromFragmentSpread(fragmentSpread, isConditional);
            });
            fields.forEach(this.propertyDeclarationForField, this);
            if (fragmentSpreads.length > 0) {
                this.printNewlineIfNeeded();
                this.printOnNewline(`public var fragments: Fragments`);
                this.withinBlock(() => {
                    this.printOnNewline('get');
                    this.withinBlock(() => {
                        this.printOnNewline(`return Fragments(snapshot: snapshot)`);
                    });
                    this.printOnNewline('set');
                    this.withinBlock(() => {
                        this.printOnNewline(`snapshot += newValue.snapshot`);
                    });
                });
                this.structDeclaration({
                    structName: 'Fragments' },
                () => {
                    this.propertyDeclaration({
                        propertyName: 'snapshot',
                        typeName: 'Snapshot' });

                    for (const fragmentSpread of fragmentSpreads) {
                        const { propertyName, typeName, structName, isConditional } = fragmentSpread;
                        this.printNewlineIfNeeded();
                        this.printOnNewline(`public var ${language_1.escapeIdentifierIfNeeded(propertyName)}: ${typeName}`);
                        this.withinBlock(() => {
                            this.printOnNewline('get');
                            this.withinBlock(() => {
                                if (isConditional) {
                                    this.printOnNewline(`if !${structName}.possibleTypes.contains(snapshot["__typename"]! as! String) { return nil }`);
                                }
                                this.printOnNewline(`return ${structName}(snapshot: snapshot)`);
                            });
                            this.printOnNewline('set');
                            this.withinBlock(() => {
                                if (isConditional) {
                                    this.printOnNewline(`guard let newValue = newValue else { return }`);
                                    this.printOnNewline(`snapshot += newValue.snapshot`);
                                } else
                                {
                                    this.printOnNewline(`snapshot += newValue.snapshot`);
                                }
                            });
                        });
                    }
                });
            }
            for (const field of fields) {
                if (graphql_1.isCompositeType(graphql_1.getNamedType(field.type)) && field.selectionSet) {
                    this.structDeclarationForSelectionSet({
                        structName: field.structName,
                        selectionSet: field.selectionSet });

                }
            }
            if (after) {
                after();
            }
        });
    }
    initializersForTypeCase(typeCase) {
        const variants = typeCase.variants;
        if (variants.length == 0) {
            this.initializersForVariant(typeCase.default);
        } else
        {
            const remainder = typeCase.remainder;
            for (const variant of remainder ? [remainder, ...variants] : variants) {
                this.initializersForVariant(variant, variant === remainder ? undefined : this.helpers.structNameForVariant(variant), false);
            }
        }
    }
    initializersForVariant(variant, namespace, useInitializerIfPossible = true) {
        if (useInitializerIfPossible && variant.possibleTypes.length == 1) {
            const properties = this.helpers.propertiesForSelectionSet(variant);
            if (!properties)
            return;
            this.printNewlineIfNeeded();
            this.printOnNewline(`public init`);
            this.parametersForProperties(properties);
            this.withinBlock(() => {
                this.printOnNewline(printing_1.wrap(`self.init(snapshot: [`, printing_1.join([
                `"__typename": "${variant.possibleTypes[0]}"`,
                ...properties.map(this.propertyAssignmentForField, this)],
                ', ') || ':', `])`));
            });
        } else
        {
            const structName = this.scope.typeName;
            for (const possibleType of variant.possibleTypes) {
                const properties = this.helpers.propertiesForSelectionSet({
                    possibleTypes: [possibleType],
                    selections: variant.selections },
                namespace);
                if (!properties)
                continue;
                this.printNewlineIfNeeded();
                this.printOnNewline(`public static func make${possibleType}`);
                this.parametersForProperties(properties);
                this.print(` -> ${structName}`);
                this.withinBlock(() => {
                    this.printOnNewline(printing_1.wrap(`return ${structName}(snapshot: [`, printing_1.join([
                    `"__typename": "${possibleType}"`,
                    ...properties.map(this.propertyAssignmentForField, this)],
                    ', ') || ':', `])`));
                });
            }
        }
    }
    propertyAssignmentForField(field) {
        const { responseKey, propertyName, type } = field;
        const valueExpression = graphql_1.isCompositeType(graphql_1.getNamedType(type)) ?
        this.helpers.mapExpressionForType(type, identifier => `${identifier}.snapshot`, language_1.escapeIdentifierIfNeeded(propertyName)) :
        language_1.escapeIdentifierIfNeeded(propertyName);
        return `"${responseKey}": ${valueExpression}`;
    }
    propertyDeclarationForField(field) {
        const { responseKey, propertyName, typeName, type, isOptional } = field;
        const unmodifiedFieldType = graphql_1.getNamedType(type);
        this.printNewlineIfNeeded();
        this.comment(field.description);
        this.deprecationAttributes(field.isDeprecated, field.deprecationReason);
        this.printOnNewline(`public var ${language_1.escapeIdentifierIfNeeded(propertyName)}: ${typeName}`);
        this.withinBlock(() => {
            if (graphql_1.isCompositeType(unmodifiedFieldType)) {
                const structName = language_1.escapeIdentifierIfNeeded(this.helpers.structNameForPropertyName(propertyName));
                if (graphql_2.isList(type)) {
                    this.printOnNewline('get');
                    this.withinBlock(() => {
                        const snapshotTypeName = this.helpers.typeNameFromGraphQLType(type, 'Snapshot', false);
                        let getter;
                        if (isOptional) {
                            getter = `return (snapshot["${responseKey}"] as? ${snapshotTypeName})`;
                        } else
                        {
                            getter = `return (snapshot["${responseKey}"] as! ${snapshotTypeName})`;
                        }
                        getter += this.helpers.mapExpressionForType(type, identifier => `${structName}(snapshot: ${identifier})`);
                        this.printOnNewline(getter);
                    });
                    this.printOnNewline('set');
                    this.withinBlock(() => {
                        let newValueExpression = this.helpers.mapExpressionForType(type, identifier => `${identifier}.snapshot`, 'newValue');
                        this.printOnNewline(`snapshot.updateValue(${newValueExpression}, forKey: "${responseKey}")`);
                    });
                } else
                {
                    this.printOnNewline('get');
                    this.withinBlock(() => {
                        if (isOptional) {
                            this.printOnNewline(`return (snapshot["${responseKey}"] as? Snapshot).flatMap { ${structName}(snapshot: $0) }`);
                        } else
                        {
                            this.printOnNewline(`return ${structName}(snapshot: snapshot["${responseKey}"]! as! Snapshot)`);
                        }
                    });
                    this.printOnNewline('set');
                    this.withinBlock(() => {
                        let newValueExpression;
                        if (isOptional) {
                            newValueExpression = 'newValue?.snapshot';
                        } else
                        {
                            newValueExpression = 'newValue.snapshot';
                        }
                        this.printOnNewline(`snapshot.updateValue(${newValueExpression}, forKey: "${responseKey}")`);
                    });
                }
            } else
            {
                this.printOnNewline('get');
                this.withinBlock(() => {
                    if (isOptional) {
                        this.printOnNewline(`return snapshot["${responseKey}"] as? ${typeName.slice(0, -1)}`);
                    } else
                    {
                        this.printOnNewline(`return snapshot["${responseKey}"]! as! ${typeName}`);
                    }
                });
                this.printOnNewline('set');
                this.withinBlock(() => {
                    this.printOnNewline(`snapshot.updateValue(newValue, forKey: "${responseKey}")`);
                });
            }
        });
    }
    propertyDeclarationForVariant(variant) {
        const { propertyName, typeName, structName } = variant;
        this.printNewlineIfNeeded();
        this.printOnNewline(`public var ${language_1.escapeIdentifierIfNeeded(propertyName)}: ${typeName}`);
        this.withinBlock(() => {
            this.printOnNewline('get');
            this.withinBlock(() => {
                this.printOnNewline(`if !${structName}.possibleTypes.contains(__typename) { return nil }`);
                this.printOnNewline(`return ${structName}(snapshot: snapshot)`);
            });
            this.printOnNewline('set');
            this.withinBlock(() => {
                this.printOnNewline(`guard let newValue = newValue else { return }`);
                this.printOnNewline(`snapshot = newValue.snapshot`);
            });
        });
    }
    initializerDeclarationForProperties(properties) {
        this.printOnNewline(`public init`);
        this.parametersForProperties(properties);
        this.withinBlock(() => {
            properties.forEach(({ propertyName }) => {
                this.printOnNewline(`self.${propertyName} = ${language_1.escapeIdentifierIfNeeded(propertyName)}`);
            });
        });
    }
    parametersForProperties(properties) {
        this.print('(');
        this.print(printing_1.join(properties.map(({ propertyName, typeName, isOptional }) => printing_1.join([`${language_1.escapeIdentifierIfNeeded(propertyName)}: ${typeName}`, isOptional && ' = nil'])), ', '));
        this.print(')');
    }
    typeCaseInitialization(typeCase) {
        if (typeCase.variants.length < 1) {
            this.selectionSetInitialization(typeCase.default);
            return;
        }
        this.print('[');
        this.withIndent(() => {
            this.printOnNewline(`GraphQLTypeCase(`);
            this.withIndent(() => {
                this.printOnNewline(`variants: [`);
                this.print(typeCase.variants.
                flatMap(variant => {
                    const structName = this.helpers.structNameForVariant(variant);
                    return variant.possibleTypes.map(type => `"${type}": ${structName}.selections`);
                }).
                join(', '));
                this.print('],');
                this.printOnNewline(`default: `);
                this.selectionSetInitialization(typeCase.default);
            });
            this.printOnNewline(')');
        });
        this.printOnNewline(']');
    }
    selectionSetInitialization(selectionSet) {
        this.print('[');
        this.withIndent(() => {
            for (const selection of selectionSet.selections) {
                switch (selection.kind) {
                    case 'Field':{
                            const { name, alias, args, type } = selection;
                            const responseKey = selection.alias || selection.name;
                            const structName = this.helpers.structNameForPropertyName(responseKey);
                            this.printOnNewline(`GraphQLField(`);
                            this.print(printing_1.join([
                            `"${name}"`,
                            alias ? `alias: "${alias}"` : null,
                            args &&
                            args.length &&
                            `arguments: ${this.helpers.dictionaryLiteralForFieldArguments(args)}`,
                            `type: ${this.helpers.fieldTypeEnum(type, structName)}`],
                            ', '));
                            this.print('),');
                            break;
                        }
                    case 'BooleanCondition':
                        this.printOnNewline(`GraphQLBooleanCondition(`);
                        this.print(printing_1.join([
                        `variableName: "${selection.variableName}"`,
                        `inverted: ${selection.inverted}`,
                        'selections: '],
                        ', '));
                        this.selectionSetInitialization(selection.selectionSet);
                        this.print('),');
                        break;
                    case 'TypeCondition':{
                            this.printOnNewline(`GraphQLTypeCondition(`);
                            this.print(printing_1.join([
                            `possibleTypes: [${printing_1.join(selection.selectionSet.possibleTypes.map(type => `"${type.name}"`), ', ')}]`,
                            'selections: '],
                            ', '));
                            this.selectionSetInitialization(selection.selectionSet);
                            this.print('),');
                            break;
                        }
                    case 'FragmentSpread':{
                            const structName = this.helpers.structNameForFragmentName(selection.fragmentName);
                            this.printOnNewline(`GraphQLFragmentSpread(${structName}.self),`);
                            break;
                        }}

            }
        });
        this.printOnNewline(']');
    }
    typeDeclarationForGraphQLType(type) {
        if (type instanceof graphql_1.GraphQLEnumType) {
            this.enumerationDeclaration(type);
        } else
        if (type instanceof graphql_1.GraphQLInputObjectType) {
            this.structDeclarationForInputObjectType(type);
        }
    }
    enumerationDeclaration(type) {
        const { name, description } = type;
        const values = type.getValues();
        this.printNewlineIfNeeded();
        this.comment(description || undefined);
        this.printOnNewline(`public enum ${name}: RawRepresentable, Equatable, JSONDecodable, JSONEncodable`);
        this.withinBlock(() => {
            this.printOnNewline('public typealias RawValue = String');
            values.forEach(value => {
                this.comment(value.description || undefined);
                this.deprecationAttributes(value.isDeprecated, value.deprecationReason || undefined);
                this.printOnNewline(`case ${language_1.escapeIdentifierIfNeeded(this.helpers.enumCaseName(value.name))}`);
            });
            this.comment('Auto generated constant for unknown enum values');
            this.printOnNewline('case unknown(RawValue)');
            this.printNewlineIfNeeded();
            this.printOnNewline('public init?(rawValue: RawValue)');
            this.withinBlock(() => {
                this.printOnNewline('switch rawValue');
                this.withinBlock(() => {
                    values.forEach(value => {
                        this.printOnNewline(`case "${value.value}": self = ${language_1.escapeIdentifierIfNeeded(this.helpers.enumDotCaseName(value.name))}`);
                    });
                    this.printOnNewline(`default: self = .unknown(rawValue)`);
                });
            });
            this.printNewlineIfNeeded();
            this.printOnNewline('public var rawValue: RawValue');
            this.withinBlock(() => {
                this.printOnNewline('switch self');
                this.withinBlock(() => {
                    values.forEach(value => {
                        this.printOnNewline(`case ${language_1.escapeIdentifierIfNeeded(this.helpers.enumDotCaseName(value.name))}: return "${value.value}"`);
                    });
                    this.printOnNewline(`case .unknown(let value): return value`);
                });
            });
            this.printNewlineIfNeeded();
            this.printOnNewline(`public static func == (lhs: ${name}, rhs: ${name}) -> Bool`);
            this.withinBlock(() => {
                this.printOnNewline('switch (lhs, rhs)');
                this.withinBlock(() => {
                    values.forEach(value => {
                        const enumDotCaseName = language_1.escapeIdentifierIfNeeded(this.helpers.enumDotCaseName(value.name));
                        const tuple = `(${enumDotCaseName}, ${enumDotCaseName})`;
                        this.printOnNewline(`case ${tuple}: return true`);
                    });
                    this.printOnNewline(`case (.unknown(let lhsValue), .unknown(let rhsValue)): return lhsValue == rhsValue`);
                    this.printOnNewline(`default: return false`);
                });
            });
        });
    }
    structDeclarationForInputObjectType(type) {
        const { name: structName, description } = type;
        const adoptedProtocols = ['GraphQLMapConvertible'];
        const fields = Object.values(type.getFields());
        let properties = fields.map(this.helpers.propertyFromInputField, this.helpers);
        if (complextypes_1.isS3Field(type)) {
            properties = [
            ...properties,
            {
                propertyName: 'localUri',
                name: 'localUri',
                typeName: 'String',
                isOptional: false,
                description: '' },

            {
                propertyName: 'mimeType',
                name: 'mimeType',
                typeName: 'String',
                isOptional: false,
                description: '' }];


        }
        this.structDeclaration({ structName, description: description || undefined, adoptedProtocols }, () => {
            this.printOnNewline(`public var graphQLMap: GraphQLMap`);
            this.printNewlineIfNeeded();
            this.printOnNewline(`public init`);
            this.print('(');
            this.print(printing_1.join(properties.map(({ propertyName, typeName, isOptional }) => printing_1.join([
            `${language_1.escapeIdentifierIfNeeded(propertyName)}: ${typeName}`,
            isOptional && ' = nil'])),
            ', '));
            this.print(')');
            this.withinBlock(() => {
                this.printOnNewline(printing_1.wrap(`graphQLMap = [`, printing_1.join(properties.map(({ name, propertyName }) => `"${name}": ${language_1.escapeIdentifierIfNeeded(propertyName)}`), ', ') || ':', `]`));
            });
            for (const { propertyName, typeName, description } of properties) {
                this.printNewlineIfNeeded();
                this.comment(description || undefined);
                this.printOnNewline(`public var ${language_1.escapeIdentifierIfNeeded(propertyName)}: ${typeName}`);
                this.withinBlock(() => {
                    this.printOnNewline('get');
                    this.withinBlock(() => {
                        this.printOnNewline(`return graphQLMap["${propertyName}"] as! ${typeName}`);
                    });
                    this.printOnNewline('set');
                    this.withinBlock(() => {
                        this.printOnNewline(`graphQLMap.updateValue(newValue, forKey: "${propertyName}")`);
                    });
                });
            }
        });
    }}

exports.SwiftAPIGenerator = SwiftAPIGenerator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,