{"version":3,"sources":["codeGeneration.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'path';\n\nimport {\n  GraphQLError,\n  GraphQLType,\n  getNamedType,\n  isCompositeType,\n  GraphQLEnumType,\n  isNonNullType,\n  isListType,\n  GraphQLInputObjectType\n} from 'graphql';\n\nimport { CompilerContext, Operation, Fragment, SelectionSet, Field } from '../compiler';\n\nimport { join, wrap } from '../utilities/printing';\n\nimport { SwiftGenerator, Property, escapeIdentifierIfNeeded, Struct } from './language';\nimport { Helpers } from './helpers';\nimport { s3WrapperCode } from './s3Wrapper';\nimport { isList } from '../utilities/graphql';\n\nimport { typeCaseForSelectionSet, TypeCase, Variant } from '../compiler/visitors/typeCase';\nimport { collectFragmentsReferenced } from '../compiler/visitors/collectFragmentsReferenced';\nimport { generateOperationId } from '../compiler/visitors/generateOperationId';\nimport { collectAndMergeFields } from '../compiler/visitors/collectAndMergeFields';\n\nimport '../utilities/array';\nimport { isS3Field } from '../utilities/complextypes';\n\nexport interface Options {\n  namespace?: string;\n  passthroughCustomScalars?: boolean;\n  customScalarsPrefix?: string;\n}\n\nexport function generateSource(\n  context: CompilerContext,\n  outputIndividualFiles: boolean,\n  only?: string\n): SwiftAPIGenerator {\n  const generator = new SwiftAPIGenerator(context);\n\n  if (outputIndividualFiles) {\n    generator.withinFile(`Types.graphql.swift`, () => {\n      generator.fileHeader();\n\n      generator.namespaceDeclaration(context.options.namespace, () => {\n        context.typesUsed.forEach(type => {\n          generator.typeDeclarationForGraphQLType(type);\n        });\n      });\n\n      if (context.options.addS3Wrapper) {\n        generator.printOnNewline(`\\n${s3WrapperCode}`);\n      }\n    });\n\n    const inputFilePaths = new Set<string>();\n\n    Object.values(context.operations).forEach(operation => {\n      inputFilePaths.add(operation.filePath);\n    });\n\n    Object.values(context.fragments).forEach(fragment => {\n      inputFilePaths.add(fragment.filePath);\n    });\n\n    for (const inputFilePath of inputFilePaths) {\n      if (only && inputFilePath !== only) continue;\n\n      generator.withinFile(`${path.basename(inputFilePath)}.swift`, () => {\n        generator.fileHeader();\n\n        generator.namespaceExtensionDeclaration(context.options.namespace, () => {\n          Object.values(context.operations).forEach(operation => {\n            if (operation.filePath === inputFilePath) {\n              generator.classDeclarationForOperation(operation);\n            }\n          });\n\n          Object.values(context.fragments).forEach(fragment => {\n            if (fragment.filePath === inputFilePath) {\n              generator.structDeclarationForFragment(fragment);\n            }\n          });\n        });\n      });\n    }\n  } else {\n    generator.fileHeader();\n\n    generator.namespaceDeclaration(context.options.namespace, () => {\n      context.typesUsed.forEach(type => {\n        generator.typeDeclarationForGraphQLType(type);\n      });\n\n      Object.values(context.operations).forEach(operation => {\n        generator.classDeclarationForOperation(operation);\n      });\n\n      Object.values(context.fragments).forEach(fragment => {\n        generator.structDeclarationForFragment(fragment);\n      });\n    });\n\n    if (context.options.addS3Wrapper) {\n      generator.printOnNewline(`\\n${s3WrapperCode}`);\n    }\n  }\n\n  return generator;\n}\n\nexport class SwiftAPIGenerator extends SwiftGenerator<CompilerContext> {\n  helpers: Helpers;\n\n  constructor(context: CompilerContext) {\n    super(context);\n\n    this.helpers = new Helpers(context.options);\n  }\n\n  fileHeader() {\n    this.printOnNewline('//  This file was automatically generated and should not be edited.');\n    this.printNewline();\n    this.printOnNewline('import AWSAppSync');\n  }\n\n  classDeclarationForOperation(operation: Operation) {\n    const { operationName, operationType, variables, source, selectionSet } = operation;\n\n    let className;\n    let protocol;\n\n    switch (operationType) {\n      case 'query':\n        className = `${this.helpers.operationClassName(operationName)}Query`;\n        protocol = 'GraphQLQuery';\n        break;\n      case 'mutation':\n        className = `${this.helpers.operationClassName(operationName)}Mutation`;\n        protocol = 'GraphQLMutation';\n        break;\n      case 'subscription':\n        className = `${this.helpers.operationClassName(operationName)}Subscription`;\n        protocol = 'GraphQLSubscription';\n        break;\n      default:\n        throw new GraphQLError(`Unsupported operation type \"${operationType}\"`);\n    }\n\n    this.classDeclaration(\n      {\n        className,\n        modifiers: ['public', 'final'],\n        adoptedProtocols: [protocol]\n      },\n      () => {\n        if (source) {\n          this.printOnNewline('public static let operationString =');\n          this.withIndent(() => {\n            this.multilineString(source);\n          });\n        }\n\n        const fragmentsReferenced = collectFragmentsReferenced(\n          operation.selectionSet,\n          this.context.fragments\n        );\n\n        if (this.context.options.generateOperationIds) {\n          const { operationId } = generateOperationId(\n            operation,\n            this.context.fragments,\n            fragmentsReferenced\n          );\n          operation.operationId = operationId;\n          this.printNewlineIfNeeded();\n          this.printOnNewline(`public static let operationIdentifier: String? = \"${operationId}\"`);\n        }\n\n        if (fragmentsReferenced.size > 0) {\n          this.printNewlineIfNeeded();\n          this.printOnNewline('public static var requestString: String { return operationString');\n          fragmentsReferenced.forEach(fragmentName => {\n            this.print(\n              `.appending(${this.helpers.structNameForFragmentName(fragmentName)}.fragmentString)`\n            );\n          });\n          this.print(' }');\n        }\n\n        this.printNewlineIfNeeded();\n\n        if (variables && variables.length > 0) {\n          const properties = variables.map(({ name, type }) => {\n            const typeName = this.helpers.typeNameFromGraphQLType(type);\n            const isOptional = !(\n              isNonNullType(type) ||\n              (isListType(type) && isNonNullType(type.ofType))\n            );\n            return { name, propertyName: name, type, typeName, isOptional };\n          });\n\n          this.propertyDeclarations(properties);\n\n          this.printNewlineIfNeeded();\n          this.initializerDeclarationForProperties(properties);\n\n          this.printNewlineIfNeeded();\n          this.printOnNewline(`public var variables: GraphQLMap?`);\n          this.withinBlock(() => {\n            this.printOnNewline(\n              wrap(\n                `return [`,\n                join(\n                  properties.map(\n                    ({ name, propertyName }) =>\n                      `\"${name}\": ${escapeIdentifierIfNeeded(propertyName)}`\n                  ),\n                  ', '\n                ) || ':',\n                `]`\n              )\n            );\n          });\n        } else {\n          this.initializerDeclarationForProperties([]);\n        }\n\n        this.structDeclarationForSelectionSet({\n          structName: 'Data',\n          selectionSet\n        });\n      }\n    );\n  }\n\n  structDeclarationForFragment({ fragmentName, selectionSet, source }: Fragment) {\n    const structName = this.helpers.structNameForFragmentName(fragmentName);\n\n    this.structDeclarationForSelectionSet(\n      {\n        structName,\n        adoptedProtocols: ['GraphQLFragment'],\n        selectionSet\n      },\n      () => {\n        if (source) {\n          this.printOnNewline('public static let fragmentString =');\n          this.withIndent(() => {\n            this.multilineString(source);\n          });\n        }\n      }\n    );\n  }\n\n  structDeclarationForSelectionSet(\n    {\n      structName,\n      adoptedProtocols = ['GraphQLSelectionSet'],\n      selectionSet\n    }: {\n      structName: string;\n      adoptedProtocols?: string[];\n      selectionSet: SelectionSet;\n    },\n    before?: Function\n  ) {\n    const typeCase = typeCaseForSelectionSet(\n      selectionSet,\n      this.context.options.mergeInFieldsFromFragmentSpreads\n    );\n\n    this.structDeclarationForVariant(\n      {\n        structName,\n        adoptedProtocols,\n        variant: typeCase.default,\n        typeCase\n      },\n      before,\n      () => {\n        const variants = typeCase.variants.map(this.helpers.propertyFromVariant, this.helpers);\n\n        for (const variant of variants) {\n          this.propertyDeclarationForVariant(variant);\n\n          this.structDeclarationForVariant({\n            structName: variant.structName,\n            variant\n          });\n        }\n      }\n    );\n  }\n\n  structDeclarationForVariant(\n    {\n      structName,\n      adoptedProtocols = ['GraphQLSelectionSet'],\n      variant,\n      typeCase\n    }: {\n      structName: string;\n      adoptedProtocols?: string[];\n      variant: Variant;\n      typeCase?: TypeCase;\n    },\n    before?: Function,\n    after?: Function\n  ) {\n    this.structDeclaration({ structName, adoptedProtocols }, () => {\n      if (before) {\n        before();\n      }\n\n      this.printNewlineIfNeeded();\n      this.printOnNewline('public static let possibleTypes = [');\n      this.print(join(variant.possibleTypes.map(type => `\"${type.name}\"`), ', '));\n      this.print(']');\n\n      this.printNewlineIfNeeded();\n      this.printOnNewline('public static let selections: [GraphQLSelection] = ');\n      if (typeCase) {\n        this.typeCaseInitialization(typeCase);\n      } else {\n        this.selectionSetInitialization(variant);\n      }\n\n      this.printNewlineIfNeeded();\n\n      this.propertyDeclaration({\n        propertyName: 'snapshot',\n        typeName: 'Snapshot'\n      });\n\n      this.printNewlineIfNeeded();\n      this.printOnNewline('public init(snapshot: Snapshot)');\n      this.withinBlock(() => {\n        this.printOnNewline(`self.snapshot = snapshot`);\n      });\n\n      if (typeCase) {\n        this.initializersForTypeCase(typeCase);\n      } else {\n        this.initializersForVariant(variant);\n      }\n\n      const fields = collectAndMergeFields(\n        variant,\n        this.context.options.mergeInFieldsFromFragmentSpreads\n      ).map(field => this.helpers.propertyFromField(field as Field));\n\n      const fragmentSpreads = variant.fragmentSpreads.map(fragmentSpread => {\n        const isConditional = variant.possibleTypes.some(\n          type => !fragmentSpread.selectionSet.possibleTypes.includes(type)\n        );\n\n        return this.helpers.propertyFromFragmentSpread(fragmentSpread, isConditional);\n      });\n\n      fields.forEach(this.propertyDeclarationForField, this);\n\n      if (fragmentSpreads.length > 0) {\n        this.printNewlineIfNeeded();\n        this.printOnNewline(`public var fragments: Fragments`);\n        this.withinBlock(() => {\n          this.printOnNewline('get');\n          this.withinBlock(() => {\n            this.printOnNewline(`return Fragments(snapshot: snapshot)`);\n          });\n          this.printOnNewline('set');\n          this.withinBlock(() => {\n            this.printOnNewline(`snapshot += newValue.snapshot`);\n          });\n        });\n\n        this.structDeclaration(\n          {\n            structName: 'Fragments'\n          },\n          () => {\n            this.propertyDeclaration({\n              propertyName: 'snapshot',\n              typeName: 'Snapshot'\n            });\n\n            for (const fragmentSpread of fragmentSpreads) {\n              const { propertyName, typeName, structName, isConditional } = fragmentSpread;\n\n              this.printNewlineIfNeeded();\n              this.printOnNewline(\n                `public var ${escapeIdentifierIfNeeded(propertyName)}: ${typeName}`\n              );\n              this.withinBlock(() => {\n                this.printOnNewline('get');\n                this.withinBlock(() => {\n                  if (isConditional) {\n                    this.printOnNewline(\n                      `if !${structName}.possibleTypes.contains(snapshot[\"__typename\"]! as! String) { return nil }`\n                    );\n                  }\n                  this.printOnNewline(`return ${structName}(snapshot: snapshot)`);\n                });\n                this.printOnNewline('set');\n                this.withinBlock(() => {\n                  if (isConditional) {\n                    this.printOnNewline(`guard let newValue = newValue else { return }`);\n                    this.printOnNewline(`snapshot += newValue.snapshot`);\n                  } else {\n                    this.printOnNewline(`snapshot += newValue.snapshot`);\n                  }\n                });\n              });\n            }\n          }\n        );\n      }\n\n      for (const field of fields) {\n        if (isCompositeType(getNamedType(field.type)) && field.selectionSet) {\n          this.structDeclarationForSelectionSet({\n            structName: field.structName,\n            selectionSet: field.selectionSet\n          });\n        }\n      }\n\n      if (after) {\n        after();\n      }\n    });\n  }\n\n  initializersForTypeCase(typeCase: TypeCase) {\n    const variants = typeCase.variants;\n\n    if (variants.length == 0) {\n      this.initializersForVariant(typeCase.default);\n    } else {\n      const remainder = typeCase.remainder;\n      for (const variant of remainder ? [remainder, ...variants] : variants) {\n        this.initializersForVariant(\n          variant,\n          variant === remainder ? undefined : this.helpers.structNameForVariant(variant),\n          false\n        );\n      }\n    }\n  }\n\n  initializersForVariant(\n    variant: Variant,\n    namespace?: string,\n    useInitializerIfPossible: boolean = true\n  ) {\n    if (useInitializerIfPossible && variant.possibleTypes.length == 1) {\n      const properties = this.helpers.propertiesForSelectionSet(variant);\n      if (!properties) return;\n\n      this.printNewlineIfNeeded();\n      this.printOnNewline(`public init`);\n\n      this.parametersForProperties(properties);\n\n      this.withinBlock(() => {\n        this.printOnNewline(\n          wrap(\n            `self.init(snapshot: [`,\n            join(\n              [\n                `\"__typename\": \"${variant.possibleTypes[0]}\"`,\n                ...properties.map(this.propertyAssignmentForField, this)\n              ],\n              ', '\n            ) || ':',\n            `])`\n          )\n        );\n      });\n    } else {\n      const structName = this.scope.typeName;\n\n      for (const possibleType of variant.possibleTypes) {\n        const properties = this.helpers.propertiesForSelectionSet(\n          {\n            possibleTypes: [possibleType],\n            selections: variant.selections\n          },\n          namespace\n        );\n\n        if (!properties) continue;\n\n        this.printNewlineIfNeeded();\n        this.printOnNewline(`public static func make${possibleType}`);\n\n        this.parametersForProperties(properties);\n\n        this.print(` -> ${structName}`);\n\n        this.withinBlock(() => {\n          this.printOnNewline(\n            wrap(\n              `return ${structName}(snapshot: [`,\n              join(\n                [\n                  `\"__typename\": \"${possibleType}\"`,\n                  ...properties.map(this.propertyAssignmentForField, this)\n                ],\n                ', '\n              ) || ':',\n              `])`\n            )\n          );\n        });\n      }\n    }\n  }\n\n  propertyAssignmentForField(field: {\n    responseKey: string;\n    propertyName: string;\n    type: GraphQLType;\n  }) {\n    const { responseKey, propertyName, type } = field;\n    const valueExpression = isCompositeType(getNamedType(type))\n      ? this.helpers.mapExpressionForType(\n          type,\n          identifier => `${identifier}.snapshot`,\n          escapeIdentifierIfNeeded(propertyName)\n        )\n      : escapeIdentifierIfNeeded(propertyName);\n    return `\"${responseKey}\": ${valueExpression}`;\n  }\n\n  propertyDeclarationForField(field: Field & Property) {\n    const { responseKey, propertyName, typeName, type, isOptional } = field;\n\n    const unmodifiedFieldType = getNamedType(type);\n\n    this.printNewlineIfNeeded();\n\n    this.comment(field.description);\n    this.deprecationAttributes(field.isDeprecated, field.deprecationReason);\n\n    this.printOnNewline(`public var ${escapeIdentifierIfNeeded(propertyName)}: ${typeName}`);\n    this.withinBlock(() => {\n      if (isCompositeType(unmodifiedFieldType)) {\n        const structName = escapeIdentifierIfNeeded(\n          this.helpers.structNameForPropertyName(propertyName)\n        );\n\n        if (isList(type)) {\n          this.printOnNewline('get');\n          this.withinBlock(() => {\n            const snapshotTypeName = this.helpers.typeNameFromGraphQLType(type, 'Snapshot', false);\n            let getter;\n            if (isOptional) {\n              getter = `return (snapshot[\"${responseKey}\"] as? ${snapshotTypeName})`;\n            } else {\n              getter = `return (snapshot[\"${responseKey}\"] as! ${snapshotTypeName})`;\n            }\n            getter += this.helpers.mapExpressionForType(\n              type,\n              identifier => `${structName}(snapshot: ${identifier})`\n            );\n            this.printOnNewline(getter);\n          });\n          this.printOnNewline('set');\n          this.withinBlock(() => {\n            let newValueExpression = this.helpers.mapExpressionForType(\n              type,\n              identifier => `${identifier}.snapshot`,\n              'newValue'\n            );\n            this.printOnNewline(\n              `snapshot.updateValue(${newValueExpression}, forKey: \"${responseKey}\")`\n            );\n          });\n        } else {\n          this.printOnNewline('get');\n          this.withinBlock(() => {\n            if (isOptional) {\n              this.printOnNewline(\n                `return (snapshot[\"${responseKey}\"] as? Snapshot).flatMap { ${structName}(snapshot: $0) }`\n              );\n            } else {\n              this.printOnNewline(\n                `return ${structName}(snapshot: snapshot[\"${responseKey}\"]! as! Snapshot)`\n              );\n            }\n          });\n          this.printOnNewline('set');\n          this.withinBlock(() => {\n            let newValueExpression;\n            if (isOptional) {\n              newValueExpression = 'newValue?.snapshot';\n            } else {\n              newValueExpression = 'newValue.snapshot';\n            }\n            this.printOnNewline(\n              `snapshot.updateValue(${newValueExpression}, forKey: \"${responseKey}\")`\n            );\n          });\n        }\n      } else {\n        this.printOnNewline('get');\n        this.withinBlock(() => {\n          if (isOptional) {\n            this.printOnNewline(`return snapshot[\"${responseKey}\"] as? ${typeName.slice(0, -1)}`);\n          } else {\n            this.printOnNewline(`return snapshot[\"${responseKey}\"]! as! ${typeName}`);\n          }\n        });\n        this.printOnNewline('set');\n        this.withinBlock(() => {\n          this.printOnNewline(`snapshot.updateValue(newValue, forKey: \"${responseKey}\")`);\n        });\n      }\n    });\n  }\n\n  propertyDeclarationForVariant(variant: Property & Struct) {\n    const { propertyName, typeName, structName } = variant;\n\n    this.printNewlineIfNeeded();\n    this.printOnNewline(`public var ${escapeIdentifierIfNeeded(propertyName)}: ${typeName}`);\n    this.withinBlock(() => {\n      this.printOnNewline('get');\n      this.withinBlock(() => {\n        this.printOnNewline(`if !${structName}.possibleTypes.contains(__typename) { return nil }`);\n        this.printOnNewline(`return ${structName}(snapshot: snapshot)`);\n      });\n      this.printOnNewline('set');\n      this.withinBlock(() => {\n        this.printOnNewline(`guard let newValue = newValue else { return }`);\n        this.printOnNewline(`snapshot = newValue.snapshot`);\n      });\n    });\n  }\n\n  initializerDeclarationForProperties(properties: Property[]) {\n    this.printOnNewline(`public init`);\n    this.parametersForProperties(properties);\n\n    this.withinBlock(() => {\n      properties.forEach(({ propertyName }) => {\n        this.printOnNewline(`self.${propertyName} = ${escapeIdentifierIfNeeded(propertyName)}`);\n      });\n    });\n  }\n\n  parametersForProperties(properties: Property[]) {\n    this.print('(');\n    this.print(\n      join(\n        properties.map(({ propertyName, typeName, isOptional }) =>\n          join([`${escapeIdentifierIfNeeded(propertyName)}: ${typeName}`, isOptional && ' = nil'])\n        ),\n        ', '\n      )\n    );\n    this.print(')');\n  }\n\n  typeCaseInitialization(typeCase: TypeCase) {\n    if (typeCase.variants.length < 1) {\n      this.selectionSetInitialization(typeCase.default);\n      return;\n    }\n\n    this.print('[');\n    this.withIndent(() => {\n      this.printOnNewline(`GraphQLTypeCase(`);\n      this.withIndent(() => {\n        this.printOnNewline(`variants: [`);\n        this.print(\n          typeCase.variants\n            .flatMap(variant => {\n              const structName = this.helpers.structNameForVariant(variant);\n              return variant.possibleTypes.map(type => `\"${type}\": ${structName}.selections`);\n            })\n            .join(', ')\n        );\n        this.print('],');\n        this.printOnNewline(`default: `);\n        this.selectionSetInitialization(typeCase.default);\n      });\n      this.printOnNewline(')');\n    });\n    this.printOnNewline(']');\n  }\n\n  selectionSetInitialization(selectionSet: SelectionSet) {\n    this.print('[');\n    this.withIndent(() => {\n      for (const selection of selectionSet.selections) {\n        switch (selection.kind) {\n          case 'Field': {\n            const { name, alias, args, type } = selection;\n            const responseKey = selection.alias || selection.name;\n            const structName = this.helpers.structNameForPropertyName(responseKey);\n\n            this.printOnNewline(`GraphQLField(`);\n            this.print(\n              join(\n                [\n                  `\"${name}\"`,\n                  alias ? `alias: \"${alias}\"` : null,\n                  args &&\n                    args.length &&\n                    `arguments: ${this.helpers.dictionaryLiteralForFieldArguments(args)}`,\n                  `type: ${this.helpers.fieldTypeEnum(type, structName)}`\n                ],\n                ', '\n              )\n            );\n            this.print('),');\n            break;\n          }\n          case 'BooleanCondition':\n            this.printOnNewline(`GraphQLBooleanCondition(`);\n            this.print(\n              join(\n                [\n                  `variableName: \"${selection.variableName}\"`,\n                  `inverted: ${selection.inverted}`,\n                  'selections: '\n                ],\n                ', '\n              )\n            );\n            this.selectionSetInitialization(selection.selectionSet);\n            this.print('),');\n            break;\n          case 'TypeCondition': {\n            this.printOnNewline(`GraphQLTypeCondition(`);\n            this.print(\n              join(\n                [\n                  `possibleTypes: [${join(\n                    selection.selectionSet.possibleTypes.map(type => `\"${type.name}\"`),\n                    ', '\n                  )}]`,\n                  'selections: '\n                ],\n                ', '\n              )\n            );\n            this.selectionSetInitialization(selection.selectionSet);\n            this.print('),');\n            break;\n          }\n          case 'FragmentSpread': {\n            const structName = this.helpers.structNameForFragmentName(selection.fragmentName);\n            this.printOnNewline(`GraphQLFragmentSpread(${structName}.self),`);\n            break;\n          }\n        }\n      }\n    });\n    this.printOnNewline(']');\n  }\n\n  typeDeclarationForGraphQLType(type: GraphQLType) {\n    if (type instanceof GraphQLEnumType) {\n      this.enumerationDeclaration(type);\n    } else if (type instanceof GraphQLInputObjectType) {\n      this.structDeclarationForInputObjectType(type);\n    }\n  }\n\n  enumerationDeclaration(type: GraphQLEnumType) {\n    const { name, description } = type;\n    const values = type.getValues();\n\n    this.printNewlineIfNeeded();\n    this.comment(description || undefined);\n    this.printOnNewline(\n      `public enum ${name}: RawRepresentable, Equatable, JSONDecodable, JSONEncodable`\n    );\n    this.withinBlock(() => {\n      this.printOnNewline('public typealias RawValue = String');\n\n      values.forEach(value => {\n        this.comment(value.description || undefined);\n        this.deprecationAttributes(value.isDeprecated, value.deprecationReason || undefined);\n        this.printOnNewline(\n          `case ${escapeIdentifierIfNeeded(this.helpers.enumCaseName(value.name))}`\n        );\n      });\n      this.comment('Auto generated constant for unknown enum values');\n      this.printOnNewline('case unknown(RawValue)');\n\n      this.printNewlineIfNeeded();\n      this.printOnNewline('public init?(rawValue: RawValue)');\n      this.withinBlock(() => {\n        this.printOnNewline('switch rawValue');\n        this.withinBlock(() => {\n          values.forEach(value => {\n            this.printOnNewline(\n              `case \"${value.value}\": self = ${escapeIdentifierIfNeeded(\n                this.helpers.enumDotCaseName(value.name)\n              )}`\n            );\n          });\n          this.printOnNewline(`default: self = .unknown(rawValue)`);\n        });\n      });\n\n      this.printNewlineIfNeeded();\n      this.printOnNewline('public var rawValue: RawValue');\n      this.withinBlock(() => {\n        this.printOnNewline('switch self');\n        this.withinBlock(() => {\n          values.forEach(value => {\n            this.printOnNewline(\n              `case ${escapeIdentifierIfNeeded(\n                this.helpers.enumDotCaseName(value.name)\n              )}: return \"${value.value}\"`\n            );\n          });\n          this.printOnNewline(`case .unknown(let value): return value`);\n        });\n      });\n\n      this.printNewlineIfNeeded();\n      this.printOnNewline(`public static func == (lhs: ${name}, rhs: ${name}) -> Bool`);\n      this.withinBlock(() => {\n        this.printOnNewline('switch (lhs, rhs)');\n        this.withinBlock(() => {\n          values.forEach(value => {\n            const enumDotCaseName = escapeIdentifierIfNeeded(\n              this.helpers.enumDotCaseName(value.name)\n            );\n            const tuple = `(${enumDotCaseName}, ${enumDotCaseName})`;\n            this.printOnNewline(`case ${tuple}: return true`);\n          });\n          this.printOnNewline(\n            `case (.unknown(let lhsValue), .unknown(let rhsValue)): return lhsValue == rhsValue`\n          );\n          this.printOnNewline(`default: return false`);\n        });\n      });\n    });\n  }\n\n  structDeclarationForInputObjectType(type: GraphQLInputObjectType) {\n    const { name: structName, description } = type;\n    const adoptedProtocols = ['GraphQLMapConvertible'];\n    const fields = Object.values(type.getFields());\n\n    let properties = fields.map(this.helpers.propertyFromInputField, this.helpers);\n\n    // File input should have localUri and mimeType which is used only in client\n    if (isS3Field(type)) {\n      properties = [\n        ...properties,\n        {\n          propertyName: 'localUri',\n          name: 'localUri',\n          typeName: 'String',\n          isOptional: false,\n          description: '',\n        },\n        {\n          propertyName: 'mimeType',\n          name: 'mimeType',\n          typeName: 'String',\n          isOptional: false,\n          description: '',\n        },\n      ];\n    }\n\n    this.structDeclaration(\n      { structName, description: description || undefined, adoptedProtocols },\n      () => {\n        this.printOnNewline(`public var graphQLMap: GraphQLMap`);\n\n        this.printNewlineIfNeeded();\n        this.printOnNewline(`public init`);\n        this.print('(');\n        this.print(\n          join(\n            properties.map(({ propertyName, typeName, isOptional }) =>\n              join([\n                `${escapeIdentifierIfNeeded(propertyName)}: ${typeName}`,\n                isOptional && ' = nil'\n              ])\n            ),\n            ', '\n          )\n        );\n        this.print(')');\n\n        this.withinBlock(() => {\n          this.printOnNewline(\n            wrap(\n              `graphQLMap = [`,\n              join(\n                properties.map(\n                  ({ name, propertyName }) => `\"${name}\": ${escapeIdentifierIfNeeded(propertyName)}`\n                ),\n                ', '\n              ) || ':',\n              `]`\n            )\n          );\n        });\n\n        for (const { propertyName, typeName, description } of properties) {\n          this.printNewlineIfNeeded();\n          this.comment(description || undefined);\n          this.printOnNewline(`public var ${escapeIdentifierIfNeeded(propertyName)}: ${typeName}`);\n          this.withinBlock(() => {\n            this.printOnNewline('get');\n            this.withinBlock(() => {\n              this.printOnNewline(`return graphQLMap[\"${propertyName}\"] as! ${typeName}`);\n            });\n            this.printOnNewline('set');\n            this.withinBlock(() => {\n              this.printOnNewline(`graphQLMap.updateValue(newValue, forKey: \"${propertyName}\")`);\n            });\n          });\n        }\n      }\n    );\n  }\n}\n"],"sourceRoot":""}