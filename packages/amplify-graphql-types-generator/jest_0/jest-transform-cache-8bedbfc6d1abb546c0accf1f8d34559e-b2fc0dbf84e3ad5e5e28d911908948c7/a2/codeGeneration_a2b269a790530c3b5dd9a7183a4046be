8d85756a2d75b37722c923fb02b01fde
'use strict';require('ts-jest').install("/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-types-generator/test/swift/codeGeneration.ts", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst graphql_1 = require(\"graphql\");\nconst loading_1 = require(\"../../src/loading\");\nconst schema = loading_1.loadSchema(require.resolve('../fixtures/starwars/schema.json'));\nconst compiler_1 = require(\"../../src/compiler\");\nconst codeGeneration_1 = require(\"../../src/swift/codeGeneration\");\ndescribe('Swift code generation', () => {\n    let generator;\n    beforeEach(() => {\n        generator = new codeGeneration_1.SwiftAPIGenerator({});\n    });\n    function compile(source, options = { mergeInFieldsFromFragmentSpreads: true }) {\n        const document = graphql_1.parse(source);\n        const context = compiler_1.compileToIR(schema, document, options);\n        generator.context = context;\n        return context;\n    }\n    describe('#classDeclarationForOperation()', () => {\n        it(`should generate a class declaration for a query with variables`, () => {\n            const { operations } = compile(`\n        query HeroName($episode: Episode) {\n          hero(episode: $episode) {\n            name\n          }\n        }\n      `);\n            generator.classDeclarationForOperation(operations['HeroName']);\n            expect(generator.output).toMatchSnapshot();\n        });\n        it(`should generate a class declaration for a query with fragment spreads`, () => {\n            const { operations } = compile(`\n        query Hero {\n          hero {\n            ...HeroDetails\n          }\n        }\n\n        fragment HeroDetails on Character {\n          name\n        }\n      `);\n            generator.classDeclarationForOperation(operations['Hero']);\n            expect(generator.output).toMatchSnapshot();\n        });\n        it(`should generate a class declaration for a query with conditional fragment spreads`, () => {\n            const { operations } = compile(`\n        query Hero {\n          hero {\n            ...DroidDetails\n          }\n        }\n\n        fragment DroidDetails on Droid {\n          primaryFunction\n        }\n      `);\n            generator.classDeclarationForOperation(operations['Hero']);\n            expect(generator.output).toMatchSnapshot();\n        });\n        it(`should generate a class declaration for a query with a fragment spread nested in an inline fragment`, () => {\n            const { operations } = compile(`\n        query Hero {\n          hero {\n            ... on Droid {\n              ...HeroDetails\n            }\n          }\n        }\n\n        fragment HeroDetails on Character {\n          name\n        }\n      `);\n            generator.classDeclarationForOperation(operations['Hero']);\n            expect(generator.output).toMatchSnapshot();\n        });\n        it(`should generate a class declaration for a mutation with variables`, () => {\n            const { operations } = compile(`\n        mutation CreateReview($episode: Episode) {\n          createReview(episode: $episode, review: { stars: 5, commentary: \"Wow!\" }) {\n            stars\n            commentary\n          }\n        }\n      `);\n            generator.classDeclarationForOperation(operations['CreateReview']);\n            expect(generator.output).toMatchSnapshot();\n        });\n        it(`should generate a class declaration with an operationIdentifier property when generateOperationIds is specified`, () => {\n            const { operations } = compile(`\n        query Hero {\n          hero {\n            ...HeroDetails\n          }\n        }\n        fragment HeroDetails on Character {\n          name\n        }\n      `, { generateOperationIds: true, mergeInFieldsFromFragmentSpreads: true });\n            generator.classDeclarationForOperation(operations['Hero']);\n            expect(generator.output).toMatchSnapshot();\n        });\n    });\n    describe('#initializerDeclarationForProperties()', () => {\n        it(`should generate initializer for a property`, () => {\n            generator.initializerDeclarationForProperties([{ propertyName: 'episode', typeName: 'Episode' }]);\n            expect(generator.output).toMatchSnapshot();\n        });\n        it(`should generate initializer for an optional property`, () => {\n            generator.initializerDeclarationForProperties([\n                { propertyName: 'episode', typeName: 'Episode?', isOptional: true }\n            ]);\n            expect(generator.output).toMatchSnapshot();\n        });\n        it(`should generate initializer for multiple properties`, () => {\n            generator.initializerDeclarationForProperties([\n                { propertyName: 'episode', typeName: 'Episode?', isOptional: true },\n                { propertyName: 'scene', typeName: 'String?', isOptional: true }\n            ]);\n            expect(generator.output).toMatchSnapshot();\n        });\n    });\n    describe('#propertyAssignmentForField()', () => {\n        it('should generate expression for nullable scalar', () => {\n            expect(generator.propertyAssignmentForField({\n                responseKey: 'response_key',\n                propertyName: 'propertyName',\n                type: graphql_1.GraphQLString\n            })).toBe('\"response_key\": propertyName');\n        });\n        it('should generate expression for non-null scalar', () => {\n            expect(generator.propertyAssignmentForField({\n                responseKey: 'response_key',\n                propertyName: 'propertyName',\n                type: new graphql_1.GraphQLNonNull(graphql_1.GraphQLString)\n            })).toBe('\"response_key\": propertyName');\n        });\n        it('should generate expression for nullable list of nullable scalars', () => {\n            expect(generator.propertyAssignmentForField({\n                responseKey: 'response_key',\n                propertyName: 'propertyName',\n                type: new graphql_1.GraphQLList(graphql_1.GraphQLString)\n            })).toBe('\"response_key\": propertyName');\n        });\n        it('should generate expression for nullable list of non-null scalars', () => {\n            expect(generator.propertyAssignmentForField({\n                responseKey: 'response_key',\n                propertyName: 'propertyName',\n                type: new graphql_1.GraphQLList(new graphql_1.GraphQLNonNull(graphql_1.GraphQLString))\n            })).toBe('\"response_key\": propertyName');\n        });\n        it('should generate expression for non-null list of nullable scalars', () => {\n            expect(generator.propertyAssignmentForField({\n                responseKey: 'response_key',\n                propertyName: 'propertyName',\n                type: new graphql_1.GraphQLNonNull(new graphql_1.GraphQLList(graphql_1.GraphQLString))\n            })).toBe('\"response_key\": propertyName');\n        });\n        it('should generate expression for non-null list of non-null scalars', () => {\n            expect(generator.propertyAssignmentForField({\n                responseKey: 'response_key',\n                propertyName: 'propertyName',\n                type: new graphql_1.GraphQLNonNull(new graphql_1.GraphQLList(new graphql_1.GraphQLNonNull(graphql_1.GraphQLString)))\n            })).toBe('\"response_key\": propertyName');\n        });\n        it('should generate expression for nullable composite', () => {\n            expect(generator.propertyAssignmentForField({\n                responseKey: 'response_key',\n                propertyName: 'propertyName',\n                type: schema.getType('Droid')\n            })).toBe('\"response_key\": propertyName.flatMap { $0.snapshot }');\n        });\n        it('should generate expression for non-null composite', () => {\n            expect(generator.propertyAssignmentForField({\n                responseKey: 'response_key',\n                propertyName: 'propertyName',\n                type: new graphql_1.GraphQLNonNull(schema.getType('Droid'))\n            })).toBe('\"response_key\": propertyName.snapshot');\n        });\n        it('should generate expression for nullable list of nullable composites', () => {\n            expect(generator.propertyAssignmentForField({\n                responseKey: 'response_key',\n                propertyName: 'propertyName',\n                type: new graphql_1.GraphQLList(schema.getType('Droid'))\n            })).toBe('\"response_key\": propertyName.flatMap { $0.map { $0.flatMap { $0.snapshot } } }');\n        });\n        it('should generate expression for nullable list of non-null composites', () => {\n            expect(generator.propertyAssignmentForField({\n                responseKey: 'response_key',\n                propertyName: 'propertyName',\n                type: new graphql_1.GraphQLList(new graphql_1.GraphQLNonNull(schema.getType('Droid')))\n            })).toBe('\"response_key\": propertyName.flatMap { $0.map { $0.snapshot } }');\n        });\n        it('should generate expression for non-null list of nullable composites', () => {\n            expect(generator.propertyAssignmentForField({\n                responseKey: 'response_key',\n                propertyName: 'propertyName',\n                type: new graphql_1.GraphQLNonNull(new graphql_1.GraphQLList(schema.getType('Droid')))\n            })).toBe('\"response_key\": propertyName.map { $0.flatMap { $0.snapshot } }');\n        });\n        it('should generate expression for non-null list of non-null composites', () => {\n            expect(generator.propertyAssignmentForField({\n                responseKey: 'response_key',\n                propertyName: 'propertyName',\n                type: new graphql_1.GraphQLNonNull(new graphql_1.GraphQLList(new graphql_1.GraphQLNonNull(schema.getType('Droid'))))\n            })).toBe('\"response_key\": propertyName.map { $0.snapshot }');\n        });\n    });\n    describe('#structDeclarationForFragment()', () => {\n        it(`should generate a struct declaration for a fragment with an abstract type condition`, () => {\n            const { fragments } = compile(`\n        fragment HeroDetails on Character {\n          name\n          appearsIn\n        }\n      `);\n            generator.structDeclarationForFragment(fragments['HeroDetails']);\n            expect(generator.output).toMatchSnapshot();\n        });\n        it(`should generate a struct declaration for a fragment with a concrete type condition`, () => {\n            const { fragments } = compile(`\n        fragment DroidDetails on Droid {\n          name\n          primaryFunction\n        }\n      `);\n            generator.structDeclarationForFragment(fragments['DroidDetails']);\n            expect(generator.output).toMatchSnapshot();\n        });\n        it(`should generate a struct declaration for a fragment with a subselection`, () => {\n            const { fragments } = compile(`\n        fragment HeroDetails on Character {\n          name\n          friends {\n            name\n          }\n        }\n      `);\n            generator.structDeclarationForFragment(fragments['HeroDetails']);\n            expect(generator.output).toMatchSnapshot();\n        });\n        it(`should generate a struct declaration for a fragment that includes a fragment spread`, () => {\n            const { fragments } = compile(`\n        fragment HeroDetails on Character {\n          name\n          ...MoreHeroDetails\n        }\n\n        fragment MoreHeroDetails on Character {\n          appearsIn\n        }\n      `);\n            generator.structDeclarationForFragment(fragments['HeroDetails']);\n            expect(generator.output).toMatchSnapshot();\n        });\n    });\n    describe('#structDeclarationForSelectionSet()', () => {\n        it(`should generate a struct declaration for a selection set`, () => {\n            const { operations } = compile(`\n        query Hero {\n          hero {\n            name\n          }\n        }\n      `);\n            const selectionSet = operations['Hero'].selectionSet.selections[0]\n                .selectionSet;\n            generator.structDeclarationForSelectionSet({ structName: 'Hero', selectionSet });\n            expect(generator.output).toMatchSnapshot();\n        });\n        it(`should escape reserved keywords in a struct declaration for a selection set`, () => {\n            const { operations } = compile(`\n        query Hero {\n          hero {\n            private: name\n          }\n        }\n      `);\n            const selectionSet = operations['Hero'].selectionSet.selections[0]\n                .selectionSet;\n            generator.structDeclarationForSelectionSet({ structName: 'Hero', selectionSet });\n            expect(generator.output).toMatchSnapshot();\n        });\n        it(`should generate a nested struct declaration for a selection set with subselections`, () => {\n            const { operations } = compile(`\n        query Hero {\n          hero {\n            friends {\n              name\n            }\n          }\n        }\n      `);\n            const selectionSet = operations['Hero'].selectionSet.selections[0]\n                .selectionSet;\n            generator.structDeclarationForSelectionSet({ structName: 'Hero', selectionSet });\n            expect(generator.output).toMatchSnapshot();\n        });\n        it(`should generate a struct declaration for a selection set with a fragment spread that matches the parent type`, () => {\n            const { operations } = compile(`\n        query Hero {\n          hero {\n            name\n            ...HeroDetails\n          }\n        }\n\n        fragment HeroDetails on Character {\n          name\n        }\n      `);\n            const selectionSet = operations['Hero'].selectionSet.selections[0]\n                .selectionSet;\n            generator.structDeclarationForSelectionSet({ structName: 'Hero', selectionSet });\n            expect(generator.output).toMatchSnapshot();\n        });\n        it(`should generate a struct declaration for a selection set with a fragment spread with a more specific type condition`, () => {\n            const { operations } = compile(`\n        query Hero {\n          hero {\n            name\n            ...DroidDetails\n          }\n        }\n\n        fragment DroidDetails on Droid {\n          name\n        }\n      `);\n            const selectionSet = operations['Hero'].selectionSet.selections[0]\n                .selectionSet;\n            generator.structDeclarationForSelectionSet({ structName: 'Hero', selectionSet });\n            expect(generator.output).toMatchSnapshot();\n        });\n        it(`should generate a struct declaration for a selection set with an inline fragment`, () => {\n            const { operations } = compile(`\n        query Hero {\n          hero {\n            name\n            ... on Droid {\n              primaryFunction\n            }\n          }\n        }\n      `);\n            const selectionSet = operations['Hero'].selectionSet.selections[0]\n                .selectionSet;\n            generator.structDeclarationForSelectionSet({ structName: 'Hero', selectionSet });\n            expect(generator.output).toMatchSnapshot();\n        });\n        it(`should generate a struct declaration for a fragment spread nested in an inline fragment`, () => {\n            const { operations } = compile(`\n        query Hero {\n          hero {\n            name\n            ... on Droid {\n              ...HeroDetails\n            }\n          }\n        }\n\n        fragment HeroDetails on Character {\n          name\n        }\n      `);\n            const selectionSet = operations['Hero'].selectionSet.selections[0]\n                .selectionSet;\n            generator.structDeclarationForSelectionSet({ structName: 'Hero', selectionSet });\n            expect(generator.output).toMatchSnapshot();\n        });\n        it(`should generate a struct declaration for a selection set with a conditional field`, () => {\n            const { operations } = compile(`\n        query Hero($includeName: Boolean!) {\n          hero {\n            name @include(if: $includeName)\n          }\n        }\n      `);\n            const selectionSet = operations['Hero'].selectionSet.selections[0]\n                .selectionSet;\n            generator.structDeclarationForSelectionSet({ structName: 'Hero', selectionSet });\n            expect(generator.output).toMatchSnapshot();\n        });\n    });\n    describe('#typeDeclarationForGraphQLType()', () => {\n        it('should generate an enum declaration for a GraphQLEnumType', () => {\n            generator.typeDeclarationForGraphQLType(schema.getType('Episode'));\n            expect(generator.output).toMatchSnapshot();\n        });\n        it('should escape identifiers in cases of enum declaration for a GraphQLEnumType', () => {\n            const albumPrivaciesEnum = new graphql_1.GraphQLEnumType({\n                name: 'AlbumPrivacies',\n                values: { PUBLIC: { value: 'PUBLIC' }, PRIVATE: { value: 'PRIVATE' } }\n            });\n            generator.typeDeclarationForGraphQLType(albumPrivaciesEnum);\n            expect(generator.output).toMatchSnapshot();\n        });\n        it('should generate a struct declaration for a GraphQLInputObjectType', () => {\n            generator.typeDeclarationForGraphQLType(schema.getType('ReviewInput'));\n            expect(generator.output).toMatchSnapshot();\n        });\n    });\n    describe('#dictionaryLiteralForFieldArguments()', () => {\n        it('should include expressions for input objects with variables', () => {\n            const { operations } = compile(`\n        mutation FieldArgumentsWithInputObjects($commentary: String!, $red: Int!) {\n          createReview(episode: JEDI, review: { stars: 2, commentary: $commentary, favorite_color: { red: $red, blue: 100, green: 50 } }) {\n            commentary\n          }\n        }\n      `);\n            const fieldArguments = operations['FieldArgumentsWithInputObjects'].selectionSet\n                .selections[0].args;\n            const dictionaryLiteral = generator.helpers.dictionaryLiteralForFieldArguments(fieldArguments);\n            expect(dictionaryLiteral).toBe('[\"episode\": \"JEDI\", \"review\": [\"stars\": 2, \"commentary\": GraphQLVariable(\"commentary\"), \"favorite_color\": [\"red\": GraphQLVariable(\"red\"), \"blue\": 100, \"green\": 50]]]');\n        });\n    });\n});\n//# sourceMappingURL=data:application/json;base64,");"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = require("graphql");
const loading_1 = require("../../src/loading");
const schema = loading_1.loadSchema(require.resolve('../fixtures/starwars/schema.json'));
const compiler_1 = require("../../src/compiler");
const codeGeneration_1 = require("../../src/swift/codeGeneration");
describe('Swift code generation', () => {
    let generator;
    beforeEach(() => {
        generator = new codeGeneration_1.SwiftAPIGenerator({});
    });
    function compile(source, options = { mergeInFieldsFromFragmentSpreads: true }) {
        const document = graphql_1.parse(source);
        const context = compiler_1.compileToIR(schema, document, options);
        generator.context = context;
        return context;
    }
    describe('#classDeclarationForOperation()', () => {
        it(`should generate a class declaration for a query with variables`, () => {
            const { operations } = compile(`
        query HeroName($episode: Episode) {
          hero(episode: $episode) {
            name
          }
        }
      `);
            generator.classDeclarationForOperation(operations['HeroName']);
            expect(generator.output).toMatchSnapshot();
        });
        it(`should generate a class declaration for a query with fragment spreads`, () => {
            const { operations } = compile(`
        query Hero {
          hero {
            ...HeroDetails
          }
        }

        fragment HeroDetails on Character {
          name
        }
      `);
            generator.classDeclarationForOperation(operations['Hero']);
            expect(generator.output).toMatchSnapshot();
        });
        it(`should generate a class declaration for a query with conditional fragment spreads`, () => {
            const { operations } = compile(`
        query Hero {
          hero {
            ...DroidDetails
          }
        }

        fragment DroidDetails on Droid {
          primaryFunction
        }
      `);
            generator.classDeclarationForOperation(operations['Hero']);
            expect(generator.output).toMatchSnapshot();
        });
        it(`should generate a class declaration for a query with a fragment spread nested in an inline fragment`, () => {
            const { operations } = compile(`
        query Hero {
          hero {
            ... on Droid {
              ...HeroDetails
            }
          }
        }

        fragment HeroDetails on Character {
          name
        }
      `);
            generator.classDeclarationForOperation(operations['Hero']);
            expect(generator.output).toMatchSnapshot();
        });
        it(`should generate a class declaration for a mutation with variables`, () => {
            const { operations } = compile(`
        mutation CreateReview($episode: Episode) {
          createReview(episode: $episode, review: { stars: 5, commentary: "Wow!" }) {
            stars
            commentary
          }
        }
      `);
            generator.classDeclarationForOperation(operations['CreateReview']);
            expect(generator.output).toMatchSnapshot();
        });
        it(`should generate a class declaration with an operationIdentifier property when generateOperationIds is specified`, () => {
            const { operations } = compile(`
        query Hero {
          hero {
            ...HeroDetails
          }
        }
        fragment HeroDetails on Character {
          name
        }
      `, { generateOperationIds: true, mergeInFieldsFromFragmentSpreads: true });
            generator.classDeclarationForOperation(operations['Hero']);
            expect(generator.output).toMatchSnapshot();
        });
    });
    describe('#initializerDeclarationForProperties()', () => {
        it(`should generate initializer for a property`, () => {
            generator.initializerDeclarationForProperties([{ propertyName: 'episode', typeName: 'Episode' }]);
            expect(generator.output).toMatchSnapshot();
        });
        it(`should generate initializer for an optional property`, () => {
            generator.initializerDeclarationForProperties([
            { propertyName: 'episode', typeName: 'Episode?', isOptional: true }]);

            expect(generator.output).toMatchSnapshot();
        });
        it(`should generate initializer for multiple properties`, () => {
            generator.initializerDeclarationForProperties([
            { propertyName: 'episode', typeName: 'Episode?', isOptional: true },
            { propertyName: 'scene', typeName: 'String?', isOptional: true }]);

            expect(generator.output).toMatchSnapshot();
        });
    });
    describe('#propertyAssignmentForField()', () => {
        it('should generate expression for nullable scalar', () => {
            expect(generator.propertyAssignmentForField({
                responseKey: 'response_key',
                propertyName: 'propertyName',
                type: graphql_1.GraphQLString })).
            toBe('"response_key": propertyName');
        });
        it('should generate expression for non-null scalar', () => {
            expect(generator.propertyAssignmentForField({
                responseKey: 'response_key',
                propertyName: 'propertyName',
                type: new graphql_1.GraphQLNonNull(graphql_1.GraphQLString) })).
            toBe('"response_key": propertyName');
        });
        it('should generate expression for nullable list of nullable scalars', () => {
            expect(generator.propertyAssignmentForField({
                responseKey: 'response_key',
                propertyName: 'propertyName',
                type: new graphql_1.GraphQLList(graphql_1.GraphQLString) })).
            toBe('"response_key": propertyName');
        });
        it('should generate expression for nullable list of non-null scalars', () => {
            expect(generator.propertyAssignmentForField({
                responseKey: 'response_key',
                propertyName: 'propertyName',
                type: new graphql_1.GraphQLList(new graphql_1.GraphQLNonNull(graphql_1.GraphQLString)) })).
            toBe('"response_key": propertyName');
        });
        it('should generate expression for non-null list of nullable scalars', () => {
            expect(generator.propertyAssignmentForField({
                responseKey: 'response_key',
                propertyName: 'propertyName',
                type: new graphql_1.GraphQLNonNull(new graphql_1.GraphQLList(graphql_1.GraphQLString)) })).
            toBe('"response_key": propertyName');
        });
        it('should generate expression for non-null list of non-null scalars', () => {
            expect(generator.propertyAssignmentForField({
                responseKey: 'response_key',
                propertyName: 'propertyName',
                type: new graphql_1.GraphQLNonNull(new graphql_1.GraphQLList(new graphql_1.GraphQLNonNull(graphql_1.GraphQLString))) })).
            toBe('"response_key": propertyName');
        });
        it('should generate expression for nullable composite', () => {
            expect(generator.propertyAssignmentForField({
                responseKey: 'response_key',
                propertyName: 'propertyName',
                type: schema.getType('Droid') })).
            toBe('"response_key": propertyName.flatMap { $0.snapshot }');
        });
        it('should generate expression for non-null composite', () => {
            expect(generator.propertyAssignmentForField({
                responseKey: 'response_key',
                propertyName: 'propertyName',
                type: new graphql_1.GraphQLNonNull(schema.getType('Droid')) })).
            toBe('"response_key": propertyName.snapshot');
        });
        it('should generate expression for nullable list of nullable composites', () => {
            expect(generator.propertyAssignmentForField({
                responseKey: 'response_key',
                propertyName: 'propertyName',
                type: new graphql_1.GraphQLList(schema.getType('Droid')) })).
            toBe('"response_key": propertyName.flatMap { $0.map { $0.flatMap { $0.snapshot } } }');
        });
        it('should generate expression for nullable list of non-null composites', () => {
            expect(generator.propertyAssignmentForField({
                responseKey: 'response_key',
                propertyName: 'propertyName',
                type: new graphql_1.GraphQLList(new graphql_1.GraphQLNonNull(schema.getType('Droid'))) })).
            toBe('"response_key": propertyName.flatMap { $0.map { $0.snapshot } }');
        });
        it('should generate expression for non-null list of nullable composites', () => {
            expect(generator.propertyAssignmentForField({
                responseKey: 'response_key',
                propertyName: 'propertyName',
                type: new graphql_1.GraphQLNonNull(new graphql_1.GraphQLList(schema.getType('Droid'))) })).
            toBe('"response_key": propertyName.map { $0.flatMap { $0.snapshot } }');
        });
        it('should generate expression for non-null list of non-null composites', () => {
            expect(generator.propertyAssignmentForField({
                responseKey: 'response_key',
                propertyName: 'propertyName',
                type: new graphql_1.GraphQLNonNull(new graphql_1.GraphQLList(new graphql_1.GraphQLNonNull(schema.getType('Droid')))) })).
            toBe('"response_key": propertyName.map { $0.snapshot }');
        });
    });
    describe('#structDeclarationForFragment()', () => {
        it(`should generate a struct declaration for a fragment with an abstract type condition`, () => {
            const { fragments } = compile(`
        fragment HeroDetails on Character {
          name
          appearsIn
        }
      `);
            generator.structDeclarationForFragment(fragments['HeroDetails']);
            expect(generator.output).toMatchSnapshot();
        });
        it(`should generate a struct declaration for a fragment with a concrete type condition`, () => {
            const { fragments } = compile(`
        fragment DroidDetails on Droid {
          name
          primaryFunction
        }
      `);
            generator.structDeclarationForFragment(fragments['DroidDetails']);
            expect(generator.output).toMatchSnapshot();
        });
        it(`should generate a struct declaration for a fragment with a subselection`, () => {
            const { fragments } = compile(`
        fragment HeroDetails on Character {
          name
          friends {
            name
          }
        }
      `);
            generator.structDeclarationForFragment(fragments['HeroDetails']);
            expect(generator.output).toMatchSnapshot();
        });
        it(`should generate a struct declaration for a fragment that includes a fragment spread`, () => {
            const { fragments } = compile(`
        fragment HeroDetails on Character {
          name
          ...MoreHeroDetails
        }

        fragment MoreHeroDetails on Character {
          appearsIn
        }
      `);
            generator.structDeclarationForFragment(fragments['HeroDetails']);
            expect(generator.output).toMatchSnapshot();
        });
    });
    describe('#structDeclarationForSelectionSet()', () => {
        it(`should generate a struct declaration for a selection set`, () => {
            const { operations } = compile(`
        query Hero {
          hero {
            name
          }
        }
      `);
            const selectionSet = operations['Hero'].selectionSet.selections[0].
            selectionSet;
            generator.structDeclarationForSelectionSet({ structName: 'Hero', selectionSet });
            expect(generator.output).toMatchSnapshot();
        });
        it(`should escape reserved keywords in a struct declaration for a selection set`, () => {
            const { operations } = compile(`
        query Hero {
          hero {
            private: name
          }
        }
      `);
            const selectionSet = operations['Hero'].selectionSet.selections[0].
            selectionSet;
            generator.structDeclarationForSelectionSet({ structName: 'Hero', selectionSet });
            expect(generator.output).toMatchSnapshot();
        });
        it(`should generate a nested struct declaration for a selection set with subselections`, () => {
            const { operations } = compile(`
        query Hero {
          hero {
            friends {
              name
            }
          }
        }
      `);
            const selectionSet = operations['Hero'].selectionSet.selections[0].
            selectionSet;
            generator.structDeclarationForSelectionSet({ structName: 'Hero', selectionSet });
            expect(generator.output).toMatchSnapshot();
        });
        it(`should generate a struct declaration for a selection set with a fragment spread that matches the parent type`, () => {
            const { operations } = compile(`
        query Hero {
          hero {
            name
            ...HeroDetails
          }
        }

        fragment HeroDetails on Character {
          name
        }
      `);
            const selectionSet = operations['Hero'].selectionSet.selections[0].
            selectionSet;
            generator.structDeclarationForSelectionSet({ structName: 'Hero', selectionSet });
            expect(generator.output).toMatchSnapshot();
        });
        it(`should generate a struct declaration for a selection set with a fragment spread with a more specific type condition`, () => {
            const { operations } = compile(`
        query Hero {
          hero {
            name
            ...DroidDetails
          }
        }

        fragment DroidDetails on Droid {
          name
        }
      `);
            const selectionSet = operations['Hero'].selectionSet.selections[0].
            selectionSet;
            generator.structDeclarationForSelectionSet({ structName: 'Hero', selectionSet });
            expect(generator.output).toMatchSnapshot();
        });
        it(`should generate a struct declaration for a selection set with an inline fragment`, () => {
            const { operations } = compile(`
        query Hero {
          hero {
            name
            ... on Droid {
              primaryFunction
            }
          }
        }
      `);
            const selectionSet = operations['Hero'].selectionSet.selections[0].
            selectionSet;
            generator.structDeclarationForSelectionSet({ structName: 'Hero', selectionSet });
            expect(generator.output).toMatchSnapshot();
        });
        it(`should generate a struct declaration for a fragment spread nested in an inline fragment`, () => {
            const { operations } = compile(`
        query Hero {
          hero {
            name
            ... on Droid {
              ...HeroDetails
            }
          }
        }

        fragment HeroDetails on Character {
          name
        }
      `);
            const selectionSet = operations['Hero'].selectionSet.selections[0].
            selectionSet;
            generator.structDeclarationForSelectionSet({ structName: 'Hero', selectionSet });
            expect(generator.output).toMatchSnapshot();
        });
        it(`should generate a struct declaration for a selection set with a conditional field`, () => {
            const { operations } = compile(`
        query Hero($includeName: Boolean!) {
          hero {
            name @include(if: $includeName)
          }
        }
      `);
            const selectionSet = operations['Hero'].selectionSet.selections[0].
            selectionSet;
            generator.structDeclarationForSelectionSet({ structName: 'Hero', selectionSet });
            expect(generator.output).toMatchSnapshot();
        });
    });
    describe('#typeDeclarationForGraphQLType()', () => {
        it('should generate an enum declaration for a GraphQLEnumType', () => {
            generator.typeDeclarationForGraphQLType(schema.getType('Episode'));
            expect(generator.output).toMatchSnapshot();
        });
        it('should escape identifiers in cases of enum declaration for a GraphQLEnumType', () => {
            const albumPrivaciesEnum = new graphql_1.GraphQLEnumType({
                name: 'AlbumPrivacies',
                values: { PUBLIC: { value: 'PUBLIC' }, PRIVATE: { value: 'PRIVATE' } } });

            generator.typeDeclarationForGraphQLType(albumPrivaciesEnum);
            expect(generator.output).toMatchSnapshot();
        });
        it('should generate a struct declaration for a GraphQLInputObjectType', () => {
            generator.typeDeclarationForGraphQLType(schema.getType('ReviewInput'));
            expect(generator.output).toMatchSnapshot();
        });
    });
    describe('#dictionaryLiteralForFieldArguments()', () => {
        it('should include expressions for input objects with variables', () => {
            const { operations } = compile(`
        mutation FieldArgumentsWithInputObjects($commentary: String!, $red: Int!) {
          createReview(episode: JEDI, review: { stars: 2, commentary: $commentary, favorite_color: { red: $red, blue: 100, green: 50 } }) {
            commentary
          }
        }
      `);
            const fieldArguments = operations['FieldArgumentsWithInputObjects'].selectionSet.
            selections[0].args;
            const dictionaryLiteral = generator.helpers.dictionaryLiteralForFieldArguments(fieldArguments);
            expect(dictionaryLiteral).toBe('["episode": "JEDI", "review": ["stars": 2, "commentary": GraphQLVariable("commentary"), "favorite_color": ["red": GraphQLVariable("red"), "blue": 100, "green": 50]]]');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,