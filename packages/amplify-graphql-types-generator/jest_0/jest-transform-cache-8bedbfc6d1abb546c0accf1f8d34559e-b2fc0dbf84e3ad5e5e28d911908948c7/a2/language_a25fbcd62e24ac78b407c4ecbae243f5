b25d1966f4b2f4c34b628cd07c0547fe
'use strict';require('ts-jest').install("/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-types-generator/test/swift/language.ts", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst common_tags_1 = require(\"common-tags\");\nconst language_1 = require(\"../../src/swift/language\");\ndescribe('Swift code generation: Basic language constructs', () => {\n    let generator;\n    beforeEach(() => {\n        generator = new language_1.SwiftGenerator({});\n    });\n    it(`should generate a class declaration`, () => {\n        generator.classDeclaration({ className: 'Hero', modifiers: ['public', 'final'] }, () => {\n            generator.propertyDeclaration({ propertyName: 'name', typeName: 'String' });\n            generator.propertyDeclaration({ propertyName: 'age', typeName: 'Int' });\n        });\n        expect(generator.output).toBe(common_tags_1.stripIndent `\n      public final class Hero {\n        public var name: String\n        public var age: Int\n      }\n    `);\n    });\n    it(`should generate a struct declaration`, () => {\n        generator.structDeclaration({ structName: 'Hero' }, () => {\n            generator.propertyDeclaration({ propertyName: 'name', typeName: 'String' });\n            generator.propertyDeclaration({ propertyName: 'age', typeName: 'Int' });\n        });\n        expect(generator.output).toBe(common_tags_1.stripIndent `\n      public struct Hero {\n        public var name: String\n        public var age: Int\n      }\n    `);\n    });\n    it(`should generate an escaped struct declaration`, () => {\n        generator.structDeclaration({ structName: 'Type' }, () => {\n            generator.propertyDeclaration({ propertyName: 'name', typeName: 'String' });\n            generator.propertyDeclaration({ propertyName: 'yearOfBirth', typeName: 'Int' });\n        });\n        expect(generator.output).toBe(common_tags_1.stripIndent `\n      public struct \\`Type\\` {\n        public var name: String\n        public var yearOfBirth: Int\n      }\n    `);\n    });\n    it(`should generate nested struct declarations`, () => {\n        generator.structDeclaration({ structName: 'Hero' }, () => {\n            generator.propertyDeclaration({ propertyName: 'name', typeName: 'String' });\n            generator.propertyDeclaration({ propertyName: 'friends', typeName: '[Friend]' });\n            generator.structDeclaration({ structName: 'Friend' }, () => {\n                generator.propertyDeclaration({ propertyName: 'name', typeName: 'String' });\n            });\n        });\n        expect(generator.output).toBe(common_tags_1.stripIndent `\n      public struct Hero {\n        public var name: String\n        public var friends: [Friend]\n\n        public struct Friend {\n          public var name: String\n        }\n      }\n    `);\n    });\n    it(`should generate a protocol declaration`, () => {\n        generator.protocolDeclaration({ protocolName: 'HeroDetails', adoptedProtocols: ['HasName'] }, () => {\n            generator.protocolPropertyDeclaration({ propertyName: 'name', typeName: 'String' });\n            generator.protocolPropertyDeclaration({ propertyName: 'age', typeName: 'Int' });\n        });\n        expect(generator.output).toBe(common_tags_1.stripIndent `\n      public protocol HeroDetails: HasName {\n        var name: String { get }\n        var age: Int { get }\n      }\n    `);\n    });\n    it(`should handle multi-line descriptions`, () => {\n        generator.structDeclaration({ structName: 'Hero', description: 'A hero' }, () => {\n            generator.propertyDeclaration({ propertyName: 'name', typeName: 'String', description: `A multiline comment \\n on the hero's name.` });\n            generator.propertyDeclaration({ propertyName: 'age', typeName: 'String', description: `A multiline comment \\n on the hero's age.` });\n        });\n        expect(generator.output).toMatchSnapshot();\n    });\n});\n//# sourceMappingURL=data:application/json;base64,");"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const common_tags_1 = require("common-tags");
const language_1 = require("../../src/swift/language");
describe('Swift code generation: Basic language constructs', () => {
    let generator;
    beforeEach(() => {
        generator = new language_1.SwiftGenerator({});
    });
    it(`should generate a class declaration`, () => {
        generator.classDeclaration({ className: 'Hero', modifiers: ['public', 'final'] }, () => {
            generator.propertyDeclaration({ propertyName: 'name', typeName: 'String' });
            generator.propertyDeclaration({ propertyName: 'age', typeName: 'Int' });
        });
        expect(generator.output).toBe(common_tags_1.stripIndent`
      public final class Hero {
        public var name: String
        public var age: Int
      }
    `);
    });
    it(`should generate a struct declaration`, () => {
        generator.structDeclaration({ structName: 'Hero' }, () => {
            generator.propertyDeclaration({ propertyName: 'name', typeName: 'String' });
            generator.propertyDeclaration({ propertyName: 'age', typeName: 'Int' });
        });
        expect(generator.output).toBe(common_tags_1.stripIndent`
      public struct Hero {
        public var name: String
        public var age: Int
      }
    `);
    });
    it(`should generate an escaped struct declaration`, () => {
        generator.structDeclaration({ structName: 'Type' }, () => {
            generator.propertyDeclaration({ propertyName: 'name', typeName: 'String' });
            generator.propertyDeclaration({ propertyName: 'yearOfBirth', typeName: 'Int' });
        });
        expect(generator.output).toBe(common_tags_1.stripIndent`
      public struct \`Type\` {
        public var name: String
        public var yearOfBirth: Int
      }
    `);
    });
    it(`should generate nested struct declarations`, () => {
        generator.structDeclaration({ structName: 'Hero' }, () => {
            generator.propertyDeclaration({ propertyName: 'name', typeName: 'String' });
            generator.propertyDeclaration({ propertyName: 'friends', typeName: '[Friend]' });
            generator.structDeclaration({ structName: 'Friend' }, () => {
                generator.propertyDeclaration({ propertyName: 'name', typeName: 'String' });
            });
        });
        expect(generator.output).toBe(common_tags_1.stripIndent`
      public struct Hero {
        public var name: String
        public var friends: [Friend]

        public struct Friend {
          public var name: String
        }
      }
    `);
    });
    it(`should generate a protocol declaration`, () => {
        generator.protocolDeclaration({ protocolName: 'HeroDetails', adoptedProtocols: ['HasName'] }, () => {
            generator.protocolPropertyDeclaration({ propertyName: 'name', typeName: 'String' });
            generator.protocolPropertyDeclaration({ propertyName: 'age', typeName: 'Int' });
        });
        expect(generator.output).toBe(common_tags_1.stripIndent`
      public protocol HeroDetails: HasName {
        var name: String { get }
        var age: Int { get }
      }
    `);
    });
    it(`should handle multi-line descriptions`, () => {
        generator.structDeclaration({ structName: 'Hero', description: 'A hero' }, () => {
            generator.propertyDeclaration({ propertyName: 'name', typeName: 'String', description: `A multiline comment \n on the hero's name.` });
            generator.propertyDeclaration({ propertyName: 'age', typeName: 'String', description: `A multiline comment \n on the hero's age.` });
        });
        expect(generator.output).toMatchSnapshot();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUhEO0FBS0EsZUFBTyxVQUFVLE1BQWpCLEVBQXlCLElBQXpCLENBQThCLGNBQUEsV0FBVzs7Ozs7S0FBekM7QUFNRCxLQVpEO0FBY0EsT0FBRyx1Q0FBSCxFQUE0QyxNQUFLO0FBQy9DLGtCQUFVLGlCQUFWLENBQTRCLEVBQUUsWUFBWSxNQUFkLEVBQXNCLGFBQWEsUUFBbkMsRUFBNUIsRUFBMkUsTUFBSztBQUM5RSxzQkFBVSxtQkFBVixDQUE4QixFQUFFLGNBQWMsTUFBaEIsRUFBd0IsVUFBVSxRQUFsQyxFQUE0QyxhQUFhLDRDQUF6RCxFQUE5QjtBQUNBLHNCQUFVLG1CQUFWLENBQThCLEVBQUUsY0FBYyxLQUFoQixFQUF1QixVQUFVLFFBQWpDLEVBQTJDLGFBQWEsMkNBQXhELEVBQTlCO0FBQ0QsU0FIRDtBQUtBLGVBQU8sVUFBVSxNQUFqQixFQUF5QixlQUF6QjtBQUNELEtBUEQ7QUFRRCxDQTdGRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHN0cmlwSW5kZW50IH0gZnJvbSAnY29tbW9uLXRhZ3MnO1xuXG5pbXBvcnQge1xuICBTd2lmdEdlbmVyYXRvclxufSBmcm9tICcuLi8uLi9zcmMvc3dpZnQvbGFuZ3VhZ2UnO1xuXG5kZXNjcmliZSgnU3dpZnQgY29kZSBnZW5lcmF0aW9uOiBCYXNpYyBsYW5ndWFnZSBjb25zdHJ1Y3RzJywgKCkgPT4ge1xuICBsZXQgZ2VuZXJhdG9yOiBTd2lmdEdlbmVyYXRvcjxhbnk+O1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGdlbmVyYXRvciA9IG5ldyBTd2lmdEdlbmVyYXRvcih7fSk7XG4gIH0pO1xuXG4gIGl0KGBzaG91bGQgZ2VuZXJhdGUgYSBjbGFzcyBkZWNsYXJhdGlvbmAsICgpID0+IHtcbiAgICBnZW5lcmF0b3IuY2xhc3NEZWNsYXJhdGlvbih7IGNsYXNzTmFtZTogJ0hlcm8nLCBtb2RpZmllcnM6IFsncHVibGljJywgJ2ZpbmFsJ10gfSwgKCkgPT4ge1xuICAgICAgZ2VuZXJhdG9yLnByb3BlcnR5RGVjbGFyYXRpb24oeyBwcm9wZXJ0eU5hbWU6ICduYW1lJywgdHlwZU5hbWU6ICdTdHJpbmcnIH0pO1xuICAgICAgZ2VuZXJhdG9yLnByb3BlcnR5RGVjbGFyYXRpb24oeyBwcm9wZXJ0eU5hbWU6ICdhZ2UnLCB0eXBlTmFtZTogJ0ludCcgfSk7XG4gICAgfSk7XG5cbiAgICBleHBlY3QoZ2VuZXJhdG9yLm91dHB1dCkudG9CZShzdHJpcEluZGVudGBcbiAgICAgIHB1YmxpYyBmaW5hbCBjbGFzcyBIZXJvIHtcbiAgICAgICAgcHVibGljIHZhciBuYW1lOiBTdHJpbmdcbiAgICAgICAgcHVibGljIHZhciBhZ2U6IEludFxuICAgICAgfVxuICAgIGApO1xuICB9KTtcblxuICBpdChgc2hvdWxkIGdlbmVyYXRlIGEgc3RydWN0IGRlY2xhcmF0aW9uYCwgKCkgPT4ge1xuICAgIGdlbmVyYXRvci5zdHJ1Y3REZWNsYXJhdGlvbih7IHN0cnVjdE5hbWU6ICdIZXJvJyB9LCAoKSA9PiB7XG4gICAgICBnZW5lcmF0b3IucHJvcGVydHlEZWNsYXJhdGlvbih7IHByb3BlcnR5TmFtZTogJ25hbWUnLCB0eXBlTmFtZTogJ1N0cmluZycgfSk7XG4gICAgICBnZW5lcmF0b3IucHJvcGVydHlEZWNsYXJhdGlvbih7IHByb3BlcnR5TmFtZTogJ2FnZScsIHR5cGVOYW1lOiAnSW50JyB9KTtcbiAgICB9KTtcblxuICAgIGV4cGVjdChnZW5lcmF0b3Iub3V0cHV0KS50b0JlKHN0cmlwSW5kZW50YFxuICAgICAgcHVibGljIHN0cnVjdCBIZXJvIHtcbiAgICAgICAgcHVibGljIHZhciBuYW1lOiBTdHJpbmdcbiAgICAgICAgcHVibGljIHZhciBhZ2U6IEludFxuICAgICAgfVxuICAgIGApO1xuICB9KTtcblxuICBpdChgc2hvdWxkIGdlbmVyYXRlIGFuIGVzY2FwZWQgc3RydWN0IGRlY2xhcmF0aW9uYCwgKCkgPT4ge1xuICAgIGdlbmVyYXRvci5zdHJ1Y3REZWNsYXJhdGlvbih7IHN0cnVjdE5hbWU6ICdUeXBlJyB9LCAoKSA9PiB7XG4gICAgICBnZW5lcmF0b3IucHJvcGVydHlEZWNsYXJhdGlvbih7IHByb3BlcnR5TmFtZTogJ25hbWUnLCB0eXBlTmFtZTogJ1N0cmluZycgfSk7XG4gICAgICBnZW5lcmF0b3IucHJvcGVydHlEZWNsYXJhdGlvbih7IHByb3BlcnR5TmFtZTogJ3llYXJPZkJpcnRoJywgdHlwZU5hbWU6ICdJbnQnIH0pO1xuICAgIH0pO1xuXG4gICAgZXhwZWN0KGdlbmVyYXRvci5vdXRwdXQpLnRvQmUoc3RyaXBJbmRlbnRgXG4gICAgICBwdWJsaWMgc3RydWN0IFxcYFR5cGVcXGAge1xuICAgICAgICBwdWJsaWMgdmFyIG5hbWU6IFN0cmluZ1xuICAgICAgICBwdWJsaWMgdmFyIHllYXJPZkJpcnRoOiBJbnRcbiAgICAgIH1cbiAgICBgKTtcbiAgfSk7XG5cbiAgaXQoYHNob3VsZCBnZW5lcmF0ZSBuZXN0ZWQgc3RydWN0IGRlY2xhcmF0aW9uc2AsICgpID0+IHtcbiAgICBnZW5lcmF0b3Iuc3RydWN0RGVjbGFyYXRpb24oeyBzdHJ1Y3ROYW1lOiAnSGVybycgfSwgKCkgPT4ge1xuICAgICAgZ2VuZXJhdG9yLnByb3BlcnR5RGVjbGFyYXRpb24oeyBwcm9wZXJ0eU5hbWU6ICduYW1lJywgdHlwZU5hbWU6ICdTdHJpbmcnIH0pO1xuICAgICAgZ2VuZXJhdG9yLnByb3BlcnR5RGVjbGFyYXRpb24oeyBwcm9wZXJ0eU5hbWU6ICdmcmllbmRzJywgdHlwZU5hbWU6ICdbRnJpZW5kXScgfSk7XG5cbiAgICAgIGdlbmVyYXRvci5zdHJ1Y3REZWNsYXJhdGlvbih7IHN0cnVjdE5hbWU6ICdGcmllbmQnIH0sICgpID0+IHtcbiAgICAgICAgZ2VuZXJhdG9yLnByb3BlcnR5RGVjbGFyYXRpb24oeyBwcm9wZXJ0eU5hbWU6ICduYW1lJywgdHlwZU5hbWU6ICdTdHJpbmcnIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBleHBlY3QoZ2VuZXJhdG9yLm91dHB1dCkudG9CZShzdHJpcEluZGVudGBcbiAgICAgIHB1YmxpYyBzdHJ1Y3QgSGVybyB7XG4gICAgICAgIHB1YmxpYyB2YXIgbmFtZTogU3RyaW5nXG4gICAgICAgIHB1YmxpYyB2YXIgZnJpZW5kczogW0ZyaWVuZF1cblxuICAgICAgICBwdWJsaWMgc3RydWN0IEZyaWVuZCB7XG4gICAgICAgICAgcHVibGljIHZhciBuYW1lOiBTdHJpbmdcbiAgICAgICAgfVxuICAgICAgfVxuICAgIGApO1xuICB9KTtcblxuICBpdChgc2hvdWxkIGdlbmVyYXRlIGEgcHJvdG9jb2wgZGVjbGFyYXRpb25gLCAoKSA9PiB7XG4gICAgZ2VuZXJhdG9yLnByb3RvY29sRGVjbGFyYXRpb24oeyBwcm90b2NvbE5hbWU6ICdIZXJvRGV0YWlscycsIGFkb3B0ZWRQcm90b2NvbHM6IFsnSGFzTmFtZSddIH0sICgpID0+IHtcbiAgICAgIGdlbmVyYXRvci5wcm90b2NvbFByb3BlcnR5RGVjbGFyYXRpb24oeyBwcm9wZXJ0eU5hbWU6ICduYW1lJywgdHlwZU5hbWU6ICdTdHJpbmcnIH0pO1xuICAgICAgZ2VuZXJhdG9yLnByb3RvY29sUHJvcGVydHlEZWNsYXJhdGlvbih7IHByb3BlcnR5TmFtZTogJ2FnZScsIHR5cGVOYW1lOiAnSW50JyB9KTtcbiAgICB9KTtcblxuICAgIGV4cGVjdChnZW5lcmF0b3Iub3V0cHV0KS50b0JlKHN0cmlwSW5kZW50YFxuICAgICAgcHVibGljIHByb3RvY29sIEhlcm9EZXRhaWxzOiBIYXNOYW1lIHtcbiAgICAgICAgdmFyIG5hbWU6IFN0cmluZyB7IGdldCB9XG4gICAgICAgIHZhciBhZ2U6IEludCB7IGdldCB9XG4gICAgICB9XG4gICAgYCk7XG4gIH0pO1xuXG4gIGl0KGBzaG91bGQgaGFuZGxlIG11bHRpLWxpbmUgZGVzY3JpcHRpb25zYCwgKCkgPT4ge1xuICAgIGdlbmVyYXRvci5zdHJ1Y3REZWNsYXJhdGlvbih7IHN0cnVjdE5hbWU6ICdIZXJvJywgZGVzY3JpcHRpb246ICdBIGhlcm8nIH0sICgpID0+IHtcbiAgICAgIGdlbmVyYXRvci5wcm9wZXJ0eURlY2xhcmF0aW9uKHsgcHJvcGVydHlOYW1lOiAnbmFtZScsIHR5cGVOYW1lOiAnU3RyaW5nJywgZGVzY3JpcHRpb246IGBBIG11bHRpbGluZSBjb21tZW50IFxcbiBvbiB0aGUgaGVybydzIG5hbWUuYCB9KTtcbiAgICAgIGdlbmVyYXRvci5wcm9wZXJ0eURlY2xhcmF0aW9uKHsgcHJvcGVydHlOYW1lOiAnYWdlJywgdHlwZU5hbWU6ICdTdHJpbmcnLCBkZXNjcmlwdGlvbjogYEEgbXVsdGlsaW5lIGNvbW1lbnQgXFxuIG9uIHRoZSBoZXJvJ3MgYWdlLmAgfSk7XG4gICAgfSk7XG5cbiAgICBleHBlY3QoZ2VuZXJhdG9yLm91dHB1dCkudG9NYXRjaFNuYXBzaG90KCk7XG4gIH0pO1xufSk7XG4iXSwic291cmNlUm9vdCI6IiJ9