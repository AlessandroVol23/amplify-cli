{"version":3,"sources":["language.ts"],"names":[],"mappings":"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","sourcesContent":["import { stripIndent } from 'common-tags';\n\nimport {\n  SwiftGenerator\n} from '../../src/swift/language';\n\ndescribe('Swift code generation: Basic language constructs', () => {\n  let generator: SwiftGenerator<any>;\n\n  beforeEach(() => {\n    generator = new SwiftGenerator({});\n  });\n\n  it(`should generate a class declaration`, () => {\n    generator.classDeclaration({ className: 'Hero', modifiers: ['public', 'final'] }, () => {\n      generator.propertyDeclaration({ propertyName: 'name', typeName: 'String' });\n      generator.propertyDeclaration({ propertyName: 'age', typeName: 'Int' });\n    });\n\n    expect(generator.output).toBe(stripIndent`\n      public final class Hero {\n        public var name: String\n        public var age: Int\n      }\n    `);\n  });\n\n  it(`should generate a struct declaration`, () => {\n    generator.structDeclaration({ structName: 'Hero' }, () => {\n      generator.propertyDeclaration({ propertyName: 'name', typeName: 'String' });\n      generator.propertyDeclaration({ propertyName: 'age', typeName: 'Int' });\n    });\n\n    expect(generator.output).toBe(stripIndent`\n      public struct Hero {\n        public var name: String\n        public var age: Int\n      }\n    `);\n  });\n\n  it(`should generate an escaped struct declaration`, () => {\n    generator.structDeclaration({ structName: 'Type' }, () => {\n      generator.propertyDeclaration({ propertyName: 'name', typeName: 'String' });\n      generator.propertyDeclaration({ propertyName: 'yearOfBirth', typeName: 'Int' });\n    });\n\n    expect(generator.output).toBe(stripIndent`\n      public struct \\`Type\\` {\n        public var name: String\n        public var yearOfBirth: Int\n      }\n    `);\n  });\n\n  it(`should generate nested struct declarations`, () => {\n    generator.structDeclaration({ structName: 'Hero' }, () => {\n      generator.propertyDeclaration({ propertyName: 'name', typeName: 'String' });\n      generator.propertyDeclaration({ propertyName: 'friends', typeName: '[Friend]' });\n\n      generator.structDeclaration({ structName: 'Friend' }, () => {\n        generator.propertyDeclaration({ propertyName: 'name', typeName: 'String' });\n      });\n    });\n\n    expect(generator.output).toBe(stripIndent`\n      public struct Hero {\n        public var name: String\n        public var friends: [Friend]\n\n        public struct Friend {\n          public var name: String\n        }\n      }\n    `);\n  });\n\n  it(`should generate a protocol declaration`, () => {\n    generator.protocolDeclaration({ protocolName: 'HeroDetails', adoptedProtocols: ['HasName'] }, () => {\n      generator.protocolPropertyDeclaration({ propertyName: 'name', typeName: 'String' });\n      generator.protocolPropertyDeclaration({ propertyName: 'age', typeName: 'Int' });\n    });\n\n    expect(generator.output).toBe(stripIndent`\n      public protocol HeroDetails: HasName {\n        var name: String { get }\n        var age: Int { get }\n      }\n    `);\n  });\n\n  it(`should handle multi-line descriptions`, () => {\n    generator.structDeclaration({ structName: 'Hero', description: 'A hero' }, () => {\n      generator.propertyDeclaration({ propertyName: 'name', typeName: 'String', description: `A multiline comment \\n on the hero's name.` });\n      generator.propertyDeclaration({ propertyName: 'age', typeName: 'String', description: `A multiline comment \\n on the hero's age.` });\n    });\n\n    expect(generator.output).toMatchSnapshot();\n  });\n});\n"],"sourceRoot":""}