{"version":3,"sources":["values.js"],"names":[],"mappings":";;AAAA,MAAA,aAAA,QAAA,uBAAA,CAAA;AAKA,SAAA,aAAA,CAA8B,MAA9B,EAAoC;AAClC,WAAO,OAAO,OAAP,CAAe,IAAf,EAAqB,KAArB,CAAP;AACD;AAFD,QAAA,aAAA,GAAA,aAAA;AAIA,SAAA,eAAA,CAAgC,OAAhC,EAAyC,MAAzC,EAA+C;AAC7C,UAAM,QAAQ,OAAO,KAAP,CAAa,IAAb,CAAd;AACA,UAAM,OAAN,CAAc,CAAC,IAAD,EAAO,KAAP,KAAgB;AAC5B,cAAM,aAAa,SAAS,MAAM,MAAN,GAAe,CAA3C;AACA,gBAAQ,cAAR,CAAuB,IAAI,cAAc,IAAd,CAAmB,GAAvB,IAA8B,aAAa,IAAb,GAAoB,EAAlD,CAAvB;AACD,KAHD;AAID;AAND,QAAA,eAAA,GAAA,eAAA;AAQA,SAAA,kCAAA,CAAmD,IAAnD,EAAuD;AACrD,aAAA,mBAAA,CAA6B,KAA7B,EAAkC;AAChC,YAAI,MAAM,IAAN,KAAe,UAAnB,EAA+B;AAC7B,mBAAO,aAAa,MAAM,YAAY,IAAtC;AACD,SAFD;AAEO,YAAI,MAAM,OAAN,CAAc,KAAd,CAAJ,EAA0B;AAC/B,mBAAO,WAAA,IAAA,CAAK,GAAL,EAAU,WAAA,IAAA,CAAK,MAAM,GAAN,CAAU,mBAAV,CAAL,EAAqC,IAArC,CAAV,EAAsD,GAAtD,CAAP;AACD,SAFM;AAEA,YAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AACpC,mBAAO,WAAA,IAAA,CAAK,GAAL,EAAU,WAAA,IAAA,CAAK,OAAO,OAAP,CAAe,KAAf,EAAsB,GAAtB,CAA0B,CAAC,CAAC,GAAD,EAAM,KAAN,CAAD,KAAiB;AAC/D,uBAAO,IAAI,GAAG,MAAM,oBAAoB,KAApB,CAA0B,EAA9C;AACD,aAFqB,CAAL,EAEb,IAFa,KAEJ,GAFN,EAEW,GAFX,CAAP;AAGD,SAJM;AAIA;AACL,mBAAO,KAAK,SAAL,CAAe,KAAf,CAAP;AACD;AACF;AAED,WAAO,WAAA,IAAA,CAAK,GAAL,EAAU,WAAA,IAAA,CAAK,KAAK,GAAL,CAAS,OAAM;AACnC,eAAO,IAAI,IAAI,IAAI,MAAM,oBAAoB,IAAI,KAAxB,CAA8B,EAAvD;AACD,KAFqB,CAAL,EAEb,IAFa,KAEJ,GAFN,EAEW,GAFX,CAAP;AAGD;AAlBD,QAAA,kCAAA,GAAA,kCAAA","sourcesContent":["import {\n  join,\n  wrap,\n} from '../utilities/printing';\n\nexport function escapedString(string) {\n  return string.replace(/\"/g, '\\\\\"');\n}\n\nexport function multilineString(context, string) {\n  const lines = string.split('\\n');\n  lines.forEach((line, index) => {\n    const isLastLine = index != lines.length - 1;\n    context.printOnNewline(`\"${escapedString(line)}\"` + (isLastLine ? ' +' : ''));\n  });\n}\n\nexport function dictionaryLiteralForFieldArguments(args) {\n  function expressionFromValue(value) {\n    if (value.kind === 'Variable') {\n      return `Variable(\"${value.variableName}\")`;\n    } else if (Array.isArray(value)) {\n      return wrap('[', join(value.map(expressionFromValue), ', '), ']');\n    } else if (typeof value === 'object') {\n      return wrap('[', join(Object.entries(value).map(([key, value]) => {\n        return `\"${key}\": ${expressionFromValue(value)}`;\n      }), ', ') || ':', ']');\n    } else {\n      return JSON.stringify(value);\n    }\n  }\n\n  return wrap('[', join(args.map(arg => {\n    return `\"${arg.name}\": ${expressionFromValue(arg.value)}`;\n  }), ', ') || ':', ']');\n}\n"],"sourceRoot":""}