94c87824cfb6a75465a5dc7df815bf97
'use strict';require('ts-jest').install("/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-types-generator/src/flow/language.js", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst codeGeneration_1 = require(\"./codeGeneration\");\nconst types_1 = require(\"./types\");\nfunction typeDeclaration(generator, { interfaceName, noBrackets }, closure) {\n    generator.printNewlineIfNeeded();\n    generator.printNewline();\n    generator.print(`export type ${interfaceName} = `);\n    generator.pushScope({ typeName: interfaceName });\n    if (noBrackets) {\n        generator.withinBlock(closure, '', '');\n    }\n    else {\n        generator.withinBlock(closure, '{|', '|}');\n    }\n    generator.popScope();\n    generator.print(';');\n}\nexports.typeDeclaration = typeDeclaration;\nfunction propertyDeclaration(generator, { fieldName, type, propertyName, typeName, description, isArray, isNullable, isArrayElementNullable, fragmentSpreads, isInput }, closure, open = ' {|', close = '|}') {\n    const name = fieldName || propertyName;\n    if (description) {\n        description.split('\\n')\n            .forEach(line => {\n            generator.printOnNewline(`// ${line.trim()}`);\n        });\n    }\n    if (closure) {\n        generator.printOnNewline(name);\n        if (isInput && isNullable) {\n            generator.print('?');\n        }\n        generator.print(':');\n        if (isNullable) {\n            generator.print(' ?');\n        }\n        if (isArray) {\n            if (!isNullable) {\n                generator.print(' ');\n            }\n            generator.print(' Array<');\n            if (isArrayElementNullable) {\n                generator.print('?');\n            }\n        }\n        generator.pushScope({ typeName: name });\n        generator.withinBlock(closure, open, close);\n        generator.popScope();\n        if (isArray) {\n            generator.print(' >');\n        }\n    }\n    else {\n        generator.printOnNewline(name);\n        if (isInput && isNullable) {\n            generator.print('?');\n        }\n        generator.print(`: ${typeName || types_1.typeNameFromGraphQLType(generator.context, type)}`);\n    }\n    generator.print(',');\n}\nexports.propertyDeclaration = propertyDeclaration;\nfunction propertySetsDeclaration(generator, property, propertySets, standalone = false) {\n    const { description, fieldName, propertyName, typeName, isNullable, isArray, isArrayElementNullable } = property;\n    const name = fieldName || propertyName;\n    if (description) {\n        description.split('\\n')\n            .forEach(line => {\n            generator.printOnNewline(`// ${line.trim()}`);\n        });\n    }\n    if (!standalone) {\n        generator.printOnNewline(`${name}:`);\n    }\n    if (isNullable) {\n        generator.print(' ?');\n    }\n    if (isArray) {\n        generator.print('Array< ');\n        if (isArrayElementNullable) {\n            generator.print('?');\n        }\n    }\n    generator.pushScope({ typeName: name });\n    generator.withinBlock(() => {\n        propertySets.forEach((propertySet, index, propertySets) => {\n            generator.withinBlock(() => {\n                codeGeneration_1.propertyDeclarations(generator, propertySet);\n            });\n            if (index !== propertySets.length - 1) {\n                generator.print(' |');\n            }\n        });\n    }, '(', ')');\n    generator.popScope();\n    if (isArray) {\n        generator.print(' >');\n    }\n    if (!standalone) {\n        generator.print(',');\n    }\n}\nexports.propertySetsDeclaration = propertySetsDeclaration;\n//# sourceMappingURL=data:application/json;base64,");"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const codeGeneration_1 = require("./codeGeneration");
const types_1 = require("./types");
function typeDeclaration(generator, { interfaceName, noBrackets }, closure) {
    generator.printNewlineIfNeeded();
    generator.printNewline();
    generator.print(`export type ${interfaceName} = `);
    generator.pushScope({ typeName: interfaceName });
    if (noBrackets) {
        generator.withinBlock(closure, '', '');
    } else
    {
        generator.withinBlock(closure, '{|', '|}');
    }
    generator.popScope();
    generator.print(';');
}
exports.typeDeclaration = typeDeclaration;
function propertyDeclaration(generator, { fieldName, type, propertyName, typeName, description, isArray, isNullable, isArrayElementNullable, fragmentSpreads, isInput }, closure, open = ' {|', close = '|}') {
    const name = fieldName || propertyName;
    if (description) {
        description.split('\n').
        forEach(line => {
            generator.printOnNewline(`// ${line.trim()}`);
        });
    }
    if (closure) {
        generator.printOnNewline(name);
        if (isInput && isNullable) {
            generator.print('?');
        }
        generator.print(':');
        if (isNullable) {
            generator.print(' ?');
        }
        if (isArray) {
            if (!isNullable) {
                generator.print(' ');
            }
            generator.print(' Array<');
            if (isArrayElementNullable) {
                generator.print('?');
            }
        }
        generator.pushScope({ typeName: name });
        generator.withinBlock(closure, open, close);
        generator.popScope();
        if (isArray) {
            generator.print(' >');
        }
    } else
    {
        generator.printOnNewline(name);
        if (isInput && isNullable) {
            generator.print('?');
        }
        generator.print(`: ${typeName || types_1.typeNameFromGraphQLType(generator.context, type)}`);
    }
    generator.print(',');
}
exports.propertyDeclaration = propertyDeclaration;
function propertySetsDeclaration(generator, property, propertySets, standalone = false) {
    const { description, fieldName, propertyName, typeName, isNullable, isArray, isArrayElementNullable } = property;
    const name = fieldName || propertyName;
    if (description) {
        description.split('\n').
        forEach(line => {
            generator.printOnNewline(`// ${line.trim()}`);
        });
    }
    if (!standalone) {
        generator.printOnNewline(`${name}:`);
    }
    if (isNullable) {
        generator.print(' ?');
    }
    if (isArray) {
        generator.print('Array< ');
        if (isArrayElementNullable) {
            generator.print('?');
        }
    }
    generator.pushScope({ typeName: name });
    generator.withinBlock(() => {
        propertySets.forEach((propertySet, index, propertySets) => {
            generator.withinBlock(() => {
                codeGeneration_1.propertyDeclarations(generator, propertySet);
            });
            if (index !== propertySets.length - 1) {
                generator.print(' |');
            }
        });
    }, '(', ')');
    generator.popScope();
    if (isArray) {
        generator.print(' >');
    }
    if (!standalone) {
        generator.print(',');
    }
}
exports.propertySetsDeclaration = propertySetsDeclaration;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxhbmd1YWdlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBS0EsTUFBQSxtQkFBQSxRQUFBLGtCQUFBLENBQUE7QUFDQSxNQUFBLFVBQUEsUUFBQSxTQUFBLENBQUE7QUFJQSxTQUFBLGVBQUEsQ0FBZ0MsU0FBaEMsRUFBMkMsRUFBRSxhQUFGLEVBQWlCLFVBQWpCLEVBQTNDLEVBQTBFLE9BQTFFLEVBQWlGO0FBQy9FLGNBQVUsb0JBQVY7QUFDQSxjQUFVLFlBQVY7QUFDQSxjQUFVLEtBQVYsQ0FBZ0IsZUFBZ0IsYUFBYyxLQUE5QztBQUNBLGNBQVUsU0FBVixDQUFvQixFQUFFLFVBQVUsYUFBWixFQUFwQjtBQUNBLFFBQUksVUFBSixFQUFnQjtBQUNkLGtCQUFVLFdBQVYsQ0FBc0IsT0FBdEIsRUFBK0IsRUFBL0IsRUFBbUMsRUFBbkM7QUFDRCxLQUZEO0FBRU87QUFDTCxrQkFBVSxXQUFWLENBQXNCLE9BQXRCLEVBQStCLElBQS9CLEVBQXFDLElBQXJDO0FBQ0Q7QUFDRCxjQUFVLFFBQVY7QUFDQSxjQUFVLEtBQVYsQ0FBZ0IsR0FBaEI7QUFDRDtBQVpELFFBQUEsZUFBQSxHQUFBLGVBQUE7QUFjQSxTQUFBLG1CQUFBLENBQW9DLFNBQXBDLEVBQStDLEVBQzdDLFNBRDZDLEVBRTdDLElBRjZDLEVBRzdDLFlBSDZDLEVBSTdDLFFBSjZDLEVBSzdDLFdBTDZDLEVBTTdDLE9BTjZDLEVBTzdDLFVBUDZDLEVBUTdDLHNCQVI2QyxFQVM3QyxlQVQ2QyxFQVU3QyxPQVY2QyxFQUEvQyxFQVdHLE9BWEgsRUFXWSxPQUFPLEtBWG5CLEVBVzBCLFFBQVEsSUFYbEMsRUFXc0M7QUFDcEMsVUFBTSxPQUFPLGFBQWEsWUFBMUI7QUFFQSxRQUFJLFdBQUosRUFBaUI7QUFDZixvQkFBWSxLQUFaLENBQWtCLElBQWxCO0FBQ0csZUFESCxDQUNXLFFBQU87QUFDZCxzQkFBVSxjQUFWLENBQXlCLE1BQU0sS0FBSyxJQUFMLEVBQVcsRUFBMUM7QUFDRCxTQUhIO0FBSUQ7QUFFRCxRQUFJLE9BQUosRUFBYTtBQUNYLGtCQUFVLGNBQVYsQ0FBeUIsSUFBekI7QUFDQSxZQUFJLFdBQVcsVUFBZixFQUEyQjtBQUN6QixzQkFBVSxLQUFWLENBQWdCLEdBQWhCO0FBQ0Q7QUFDRCxrQkFBVSxLQUFWLENBQWdCLEdBQWhCO0FBQ0EsWUFBSSxVQUFKLEVBQWdCO0FBQ2Qsc0JBQVUsS0FBVixDQUFnQixJQUFoQjtBQUNEO0FBQ0QsWUFBSSxPQUFKLEVBQWE7QUFDWCxnQkFBSSxDQUFDLFVBQUwsRUFBaUI7QUFDZiwwQkFBVSxLQUFWLENBQWdCLEdBQWhCO0FBQ0Q7QUFDRCxzQkFBVSxLQUFWLENBQWdCLFNBQWhCO0FBQ0EsZ0JBQUksc0JBQUosRUFBNEI7QUFDMUIsMEJBQVUsS0FBVixDQUFnQixHQUFoQjtBQUNEO0FBQ0Y7QUFFRCxrQkFBVSxTQUFWLENBQW9CLEVBQUUsVUFBVSxJQUFaLEVBQXBCO0FBRUEsa0JBQVUsV0FBVixDQUFzQixPQUF0QixFQUErQixJQUEvQixFQUFxQyxLQUFyQztBQUVBLGtCQUFVLFFBQVY7QUFFQSxZQUFJLE9BQUosRUFBYTtBQUNYLHNCQUFVLEtBQVYsQ0FBZ0IsSUFBaEI7QUFDRDtBQUVGLEtBN0JEO0FBNkJPO0FBQ0wsa0JBQVUsY0FBVixDQUF5QixJQUF6QjtBQUNBLFlBQUksV0FBVyxVQUFmLEVBQTJCO0FBQ3pCLHNCQUFVLEtBQVYsQ0FBZ0IsR0FBaEI7QUFDRDtBQUNELGtCQUFVLEtBQVYsQ0FBZ0IsS0FBSyxZQUFZLFFBQUEsdUJBQUEsQ0FBd0IsVUFBVSxPQUFsQyxFQUEyQyxJQUEzQyxDQUFnRCxFQUFqRjtBQUNEO0FBQ0QsY0FBVSxLQUFWLENBQWdCLEdBQWhCO0FBQ0Q7QUExREQsUUFBQSxtQkFBQSxHQUFBLG1CQUFBO0FBNERBLFNBQUEsdUJBQUEsQ0FBd0MsU0FBeEMsRUFBbUQsUUFBbkQsRUFBNkQsWUFBN0QsRUFBMkUsYUFBYSxLQUF4RixFQUE2RjtBQUMzRixVQUFNLEVBQ0osV0FESSxFQUNTLFNBRFQsRUFDb0IsWUFEcEIsRUFDa0MsUUFEbEMsRUFFSixVQUZJLEVBRVEsT0FGUixFQUVpQixzQkFGakIsS0FHRixRQUhKO0FBSUEsVUFBTSxPQUFPLGFBQWEsWUFBMUI7QUFFQSxRQUFJLFdBQUosRUFBaUI7QUFDZixvQkFBWSxLQUFaLENBQWtCLElBQWxCO0FBQ0csZUFESCxDQUNXLFFBQU87QUFDZCxzQkFBVSxjQUFWLENBQXlCLE1BQU0sS0FBSyxJQUFMLEVBQVcsRUFBMUM7QUFDRCxTQUhIO0FBSUQ7QUFDRCxRQUFJLENBQUMsVUFBTCxFQUFpQjtBQUNmLGtCQUFVLGNBQVYsQ0FBeUIsR0FBRyxJQUFJLEdBQWhDO0FBQ0Q7QUFFRCxRQUFJLFVBQUosRUFBZ0I7QUFDZCxrQkFBVSxLQUFWLENBQWdCLElBQWhCO0FBQ0Q7QUFFRCxRQUFJLE9BQUosRUFBYTtBQUNYLGtCQUFVLEtBQVYsQ0FBZ0IsU0FBaEI7QUFDQSxZQUFJLHNCQUFKLEVBQTRCO0FBQzFCLHNCQUFVLEtBQVYsQ0FBZ0IsR0FBaEI7QUFDRDtBQUNGO0FBRUQsY0FBVSxTQUFWLENBQW9CLEVBQUUsVUFBVSxJQUFaLEVBQXBCO0FBRUEsY0FBVSxXQUFWLENBQXNCLE1BQUs7QUFDekIscUJBQWEsT0FBYixDQUFxQixDQUFDLFdBQUQsRUFBYyxLQUFkLEVBQXFCLFlBQXJCLEtBQXFDO0FBQ3hELHNCQUFVLFdBQVYsQ0FBc0IsTUFBSztBQUN6QixpQ0FBQSxvQkFBQSxDQUFxQixTQUFyQixFQUFnQyxXQUFoQztBQUNELGFBRkQ7QUFHQSxnQkFBSSxVQUFVLGFBQWEsTUFBYixHQUFzQixDQUFwQyxFQUF1QztBQUNyQywwQkFBVSxLQUFWLENBQWdCLElBQWhCO0FBQ0Q7QUFDRixTQVBEO0FBUUQsS0FURCxFQVNHLEdBVEgsRUFTUSxHQVRSO0FBV0EsY0FBVSxRQUFWO0FBRUEsUUFBSSxPQUFKLEVBQWE7QUFDWCxrQkFBVSxLQUFWLENBQWdCLElBQWhCO0FBQ0Q7QUFFRCxRQUFJLENBQUMsVUFBTCxFQUFpQjtBQUNmLGtCQUFVLEtBQVYsQ0FBZ0IsR0FBaEI7QUFDRDtBQUNGO0FBbERELFFBQUEsdUJBQUEsR0FBQSx1QkFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGpvaW4sXG4gIHdyYXAsXG59IGZyb20gJy4uL3V0aWxpdGllcy9wcmludGluZyc7XG5cbmltcG9ydCB7IHByb3BlcnR5RGVjbGFyYXRpb25zIH0gZnJvbSAnLi9jb2RlR2VuZXJhdGlvbic7XG5pbXBvcnQgeyB0eXBlTmFtZUZyb21HcmFwaFFMVHlwZSB9IGZyb20gJy4vdHlwZXMnO1xuXG5pbXBvcnQgeyBwYXNjYWxDYXNlIH0gZnJvbSAnY2hhbmdlLWNhc2UnO1xuXG5leHBvcnQgZnVuY3Rpb24gdHlwZURlY2xhcmF0aW9uKGdlbmVyYXRvciwgeyBpbnRlcmZhY2VOYW1lLCBub0JyYWNrZXRzIH0sIGNsb3N1cmUpIHtcbiAgZ2VuZXJhdG9yLnByaW50TmV3bGluZUlmTmVlZGVkKCk7XG4gIGdlbmVyYXRvci5wcmludE5ld2xpbmUoKTtcbiAgZ2VuZXJhdG9yLnByaW50KGBleHBvcnQgdHlwZSAkeyBpbnRlcmZhY2VOYW1lIH0gPSBgKTtcbiAgZ2VuZXJhdG9yLnB1c2hTY29wZSh7IHR5cGVOYW1lOiBpbnRlcmZhY2VOYW1lIH0pO1xuICBpZiAobm9CcmFja2V0cykge1xuICAgIGdlbmVyYXRvci53aXRoaW5CbG9jayhjbG9zdXJlLCAnJywgJycpO1xuICB9IGVsc2Uge1xuICAgIGdlbmVyYXRvci53aXRoaW5CbG9jayhjbG9zdXJlLCAne3wnLCAnfH0nKTtcbiAgfVxuICBnZW5lcmF0b3IucG9wU2NvcGUoKTtcbiAgZ2VuZXJhdG9yLnByaW50KCc7Jyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm9wZXJ0eURlY2xhcmF0aW9uKGdlbmVyYXRvciwge1xuICBmaWVsZE5hbWUsXG4gIHR5cGUsXG4gIHByb3BlcnR5TmFtZSxcbiAgdHlwZU5hbWUsXG4gIGRlc2NyaXB0aW9uLFxuICBpc0FycmF5LFxuICBpc051bGxhYmxlLFxuICBpc0FycmF5RWxlbWVudE51bGxhYmxlLFxuICBmcmFnbWVudFNwcmVhZHMsXG4gIGlzSW5wdXRcbn0sIGNsb3N1cmUsIG9wZW4gPSAnIHt8JywgY2xvc2UgPSAnfH0nKSB7XG4gIGNvbnN0IG5hbWUgPSBmaWVsZE5hbWUgfHwgcHJvcGVydHlOYW1lO1xuXG4gIGlmIChkZXNjcmlwdGlvbikge1xuICAgIGRlc2NyaXB0aW9uLnNwbGl0KCdcXG4nKVxuICAgICAgLmZvckVhY2gobGluZSA9PiB7XG4gICAgICAgIGdlbmVyYXRvci5wcmludE9uTmV3bGluZShgLy8gJHtsaW5lLnRyaW0oKX1gKTtcbiAgICAgIH0pXG4gIH1cblxuICBpZiAoY2xvc3VyZSkge1xuICAgIGdlbmVyYXRvci5wcmludE9uTmV3bGluZShuYW1lKVxuICAgIGlmIChpc0lucHV0ICYmIGlzTnVsbGFibGUpIHtcbiAgICAgIGdlbmVyYXRvci5wcmludCgnPycpXG4gICAgfVxuICAgIGdlbmVyYXRvci5wcmludCgnOicpXG4gICAgaWYgKGlzTnVsbGFibGUpIHtcbiAgICAgIGdlbmVyYXRvci5wcmludCgnID8nKTtcbiAgICB9XG4gICAgaWYgKGlzQXJyYXkpIHtcbiAgICAgIGlmICghaXNOdWxsYWJsZSkge1xuICAgICAgICBnZW5lcmF0b3IucHJpbnQoJyAnKTtcbiAgICAgIH1cbiAgICAgIGdlbmVyYXRvci5wcmludCgnIEFycmF5PCcpO1xuICAgICAgaWYgKGlzQXJyYXlFbGVtZW50TnVsbGFibGUpIHtcbiAgICAgICAgZ2VuZXJhdG9yLnByaW50KCc/Jyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZ2VuZXJhdG9yLnB1c2hTY29wZSh7IHR5cGVOYW1lOiBuYW1lIH0pO1xuXG4gICAgZ2VuZXJhdG9yLndpdGhpbkJsb2NrKGNsb3N1cmUsIG9wZW4sIGNsb3NlKTtcblxuICAgIGdlbmVyYXRvci5wb3BTY29wZSgpO1xuXG4gICAgaWYgKGlzQXJyYXkpIHtcbiAgICAgIGdlbmVyYXRvci5wcmludCgnID4nKTtcbiAgICB9XG5cbiAgfSBlbHNlIHtcbiAgICBnZW5lcmF0b3IucHJpbnRPbk5ld2xpbmUobmFtZSlcbiAgICBpZiAoaXNJbnB1dCAmJiBpc051bGxhYmxlKSB7XG4gICAgICBnZW5lcmF0b3IucHJpbnQoJz8nKVxuICAgIH1cbiAgICBnZW5lcmF0b3IucHJpbnQoYDogJHt0eXBlTmFtZSB8fCB0eXBlTmFtZUZyb21HcmFwaFFMVHlwZShnZW5lcmF0b3IuY29udGV4dCwgdHlwZSl9YCk7XG4gIH1cbiAgZ2VuZXJhdG9yLnByaW50KCcsJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm9wZXJ0eVNldHNEZWNsYXJhdGlvbihnZW5lcmF0b3IsIHByb3BlcnR5LCBwcm9wZXJ0eVNldHMsIHN0YW5kYWxvbmUgPSBmYWxzZSkge1xuICBjb25zdCB7XG4gICAgZGVzY3JpcHRpb24sIGZpZWxkTmFtZSwgcHJvcGVydHlOYW1lLCB0eXBlTmFtZSxcbiAgICBpc051bGxhYmxlLCBpc0FycmF5LCBpc0FycmF5RWxlbWVudE51bGxhYmxlXG4gIH0gPSBwcm9wZXJ0eTtcbiAgY29uc3QgbmFtZSA9IGZpZWxkTmFtZSB8fCBwcm9wZXJ0eU5hbWU7XG5cbiAgaWYgKGRlc2NyaXB0aW9uKSB7XG4gICAgZGVzY3JpcHRpb24uc3BsaXQoJ1xcbicpXG4gICAgICAuZm9yRWFjaChsaW5lID0+IHtcbiAgICAgICAgZ2VuZXJhdG9yLnByaW50T25OZXdsaW5lKGAvLyAke2xpbmUudHJpbSgpfWApO1xuICAgICAgfSlcbiAgfVxuICBpZiAoIXN0YW5kYWxvbmUpIHtcbiAgICBnZW5lcmF0b3IucHJpbnRPbk5ld2xpbmUoYCR7bmFtZX06YCk7XG4gIH1cblxuICBpZiAoaXNOdWxsYWJsZSkge1xuICAgIGdlbmVyYXRvci5wcmludCgnID8nKTtcbiAgfVxuXG4gIGlmIChpc0FycmF5KSB7XG4gICAgZ2VuZXJhdG9yLnByaW50KCdBcnJheTwgJyk7XG4gICAgaWYgKGlzQXJyYXlFbGVtZW50TnVsbGFibGUpIHtcbiAgICAgIGdlbmVyYXRvci5wcmludCgnPycpO1xuICAgIH1cbiAgfVxuXG4gIGdlbmVyYXRvci5wdXNoU2NvcGUoeyB0eXBlTmFtZTogbmFtZSB9KTtcblxuICBnZW5lcmF0b3Iud2l0aGluQmxvY2soKCkgPT4ge1xuICAgIHByb3BlcnR5U2V0cy5mb3JFYWNoKChwcm9wZXJ0eVNldCwgaW5kZXgsIHByb3BlcnR5U2V0cykgPT4ge1xuICAgICAgZ2VuZXJhdG9yLndpdGhpbkJsb2NrKCgpID0+IHtcbiAgICAgICAgcHJvcGVydHlEZWNsYXJhdGlvbnMoZ2VuZXJhdG9yLCBwcm9wZXJ0eVNldCk7XG4gICAgICB9KTtcbiAgICAgIGlmIChpbmRleCAhPT0gcHJvcGVydHlTZXRzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgZ2VuZXJhdG9yLnByaW50KCcgfCcpO1xuICAgICAgfVxuICAgIH0pXG4gIH0sICcoJywgJyknKTtcblxuICBnZW5lcmF0b3IucG9wU2NvcGUoKTtcblxuICBpZiAoaXNBcnJheSkge1xuICAgIGdlbmVyYXRvci5wcmludCgnID4nKTtcbiAgfVxuXG4gIGlmICghc3RhbmRhbG9uZSkge1xuICAgIGdlbmVyYXRvci5wcmludCgnLCcpO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9