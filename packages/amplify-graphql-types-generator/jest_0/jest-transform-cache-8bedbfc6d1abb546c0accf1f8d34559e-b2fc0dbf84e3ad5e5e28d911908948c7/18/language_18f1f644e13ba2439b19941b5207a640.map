{"version":3,"sources":["language.js"],"names":[],"mappings":"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","sourcesContent":["import {\n  join,\n  wrap,\n} from '../utilities/printing';\n\nimport { propertyDeclarations } from './codeGeneration';\nimport { typeNameFromGraphQLType } from './types';\n\nimport { pascalCase } from 'change-case';\n\nexport function typeDeclaration(generator, { interfaceName, noBrackets }, closure) {\n  generator.printNewlineIfNeeded();\n  generator.printNewline();\n  generator.print(`export type ${ interfaceName } = `);\n  generator.pushScope({ typeName: interfaceName });\n  if (noBrackets) {\n    generator.withinBlock(closure, '', '');\n  } else {\n    generator.withinBlock(closure, '{|', '|}');\n  }\n  generator.popScope();\n  generator.print(';');\n}\n\nexport function propertyDeclaration(generator, {\n  fieldName,\n  type,\n  propertyName,\n  typeName,\n  description,\n  isArray,\n  isNullable,\n  isArrayElementNullable,\n  fragmentSpreads,\n  isInput\n}, closure, open = ' {|', close = '|}') {\n  const name = fieldName || propertyName;\n\n  if (description) {\n    description.split('\\n')\n      .forEach(line => {\n        generator.printOnNewline(`// ${line.trim()}`);\n      })\n  }\n\n  if (closure) {\n    generator.printOnNewline(name)\n    if (isInput && isNullable) {\n      generator.print('?')\n    }\n    generator.print(':')\n    if (isNullable) {\n      generator.print(' ?');\n    }\n    if (isArray) {\n      if (!isNullable) {\n        generator.print(' ');\n      }\n      generator.print(' Array<');\n      if (isArrayElementNullable) {\n        generator.print('?');\n      }\n    }\n\n    generator.pushScope({ typeName: name });\n\n    generator.withinBlock(closure, open, close);\n\n    generator.popScope();\n\n    if (isArray) {\n      generator.print(' >');\n    }\n\n  } else {\n    generator.printOnNewline(name)\n    if (isInput && isNullable) {\n      generator.print('?')\n    }\n    generator.print(`: ${typeName || typeNameFromGraphQLType(generator.context, type)}`);\n  }\n  generator.print(',');\n}\n\nexport function propertySetsDeclaration(generator, property, propertySets, standalone = false) {\n  const {\n    description, fieldName, propertyName, typeName,\n    isNullable, isArray, isArrayElementNullable\n  } = property;\n  const name = fieldName || propertyName;\n\n  if (description) {\n    description.split('\\n')\n      .forEach(line => {\n        generator.printOnNewline(`// ${line.trim()}`);\n      })\n  }\n  if (!standalone) {\n    generator.printOnNewline(`${name}:`);\n  }\n\n  if (isNullable) {\n    generator.print(' ?');\n  }\n\n  if (isArray) {\n    generator.print('Array< ');\n    if (isArrayElementNullable) {\n      generator.print('?');\n    }\n  }\n\n  generator.pushScope({ typeName: name });\n\n  generator.withinBlock(() => {\n    propertySets.forEach((propertySet, index, propertySets) => {\n      generator.withinBlock(() => {\n        propertyDeclarations(generator, propertySet);\n      });\n      if (index !== propertySets.length - 1) {\n        generator.print(' |');\n      }\n    })\n  }, '(', ')');\n\n  generator.popScope();\n\n  if (isArray) {\n    generator.print(' >');\n  }\n\n  if (!standalone) {\n    generator.print(',');\n  }\n}\n"],"sourceRoot":""}