ceb4f6bdb961adb1edd744b1dbcad4c0
'use strict';require('ts-jest').install("/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-types-generator/src/flow-modern/codeGeneration.ts", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst t = require(\"@babel/types\");\nconst common_tags_1 = require(\"common-tags\");\nconst graphql_1 = require(\"graphql\");\nconst path = require(\"path\");\nconst typeCase_1 = require(\"../compiler/visitors/typeCase\");\nconst collectAndMergeFields_1 = require(\"../compiler/visitors/collectAndMergeFields\");\nconst language_1 = require(\"./language\");\nconst printer_1 = require(\"./printer\");\nclass FlowGeneratedFile {\n    constructor(fileContents) {\n        this.fileContents = fileContents;\n    }\n    get output() {\n        return this.fileContents;\n    }\n}\nfunction printEnumsAndInputObjects(generator, context) {\n    generator.printer.enqueue(common_tags_1.stripIndent `\n    //==============================================================\n    // START Enums and Input Objects\n    // All enums and input objects are included in every output file\n    // for now, but this will be changed soon.\n    // TODO: Link to issue to fix this.\n    //==============================================================\n  `);\n    context.typesUsed\n        .filter(type => (type instanceof graphql_1.GraphQLEnumType))\n        .forEach((enumType) => {\n        generator.typeAliasForEnumType(enumType);\n    });\n    context.typesUsed\n        .filter(type => type instanceof graphql_1.GraphQLInputObjectType)\n        .forEach((inputObjectType) => {\n        generator.typeAliasForInputObjectType(inputObjectType);\n    });\n    generator.printer.enqueue(common_tags_1.stripIndent `\n    //==============================================================\n    // END Enums and Input Objects\n    //==============================================================\n  `);\n}\nfunction generateSource(context) {\n    const generator = new FlowAPIGenerator(context);\n    const generatedFiles = {};\n    Object.values(context.operations)\n        .forEach((operation) => {\n        generator.fileHeader();\n        generator.typeAliasesForOperation(operation);\n        printEnumsAndInputObjects(generator, context);\n        const output = generator.printer.printAndClear();\n        const outputFilePath = path.join(path.dirname(operation.filePath), '__generated__', `${operation.operationName}.js`);\n        generatedFiles[outputFilePath] = new FlowGeneratedFile(output);\n    });\n    Object.values(context.fragments)\n        .forEach((fragment) => {\n        generator.fileHeader();\n        generator.typeAliasesForFragment(fragment);\n        printEnumsAndInputObjects(generator, context);\n        const output = generator.printer.printAndClear();\n        const outputFilePath = path.join(path.dirname(fragment.filePath), '__generated__', `${fragment.fragmentName}.js`);\n        generatedFiles[outputFilePath] = new FlowGeneratedFile(output);\n    });\n    return generatedFiles;\n}\nexports.generateSource = generateSource;\nclass FlowAPIGenerator extends language_1.default {\n    constructor(context) {\n        super(context.options);\n        this.context = context;\n        this.printer = new printer_1.default();\n        this.scopeStack = [];\n    }\n    fileHeader() {\n        this.printer.enqueue(common_tags_1.stripIndent `\n        /* @flow */\n        // This file was automatically generated and should not be edited.\n      `);\n    }\n    typeAliasForEnumType(enumType) {\n        this.printer.enqueue(this.enumerationDeclaration(enumType));\n    }\n    typeAliasForInputObjectType(inputObjectType) {\n        this.printer.enqueue(this.inputObjectDeclaration(inputObjectType));\n    }\n    typeAliasesForOperation(operation) {\n        const { operationType, operationName, selectionSet } = operation;\n        this.scopeStackPush(operationName);\n        this.printer.enqueue(common_tags_1.stripIndent `\n      // ====================================================\n      // GraphQL ${operationType} operation: ${operationName}\n      // ====================================================\n    `);\n        const variants = this.getVariantsForSelectionSet(selectionSet);\n        const variant = variants[0];\n        const properties = this.getPropertiesForVariant(variant);\n        const exportedTypeAlias = this.exportDeclaration(this.typeAliasObject(operationName, properties));\n        this.printer.enqueue(exportedTypeAlias);\n        this.scopeStackPop();\n    }\n    typeAliasesForFragment(fragment) {\n        const { fragmentName, selectionSet } = fragment;\n        this.scopeStackPush(fragmentName);\n        this.printer.enqueue(common_tags_1.stripIndent `\n      // ====================================================\n      // GraphQL fragment: ${fragmentName}\n      // ====================================================\n    `);\n        const variants = this.getVariantsForSelectionSet(selectionSet);\n        if (variants.length === 1) {\n            const properties = this.getPropertiesForVariant(variants[0]);\n            const name = this.annotationFromScopeStack(this.scopeStack).id.name;\n            const exportedTypeAlias = this.exportDeclaration(this.typeAliasObject(name, properties));\n            this.printer.enqueue(exportedTypeAlias);\n        }\n        else {\n            const unionMembers = [];\n            variants.forEach(variant => {\n                this.scopeStackPush(variant.possibleTypes[0].toString());\n                const properties = this.getPropertiesForVariant(variant);\n                const name = this.annotationFromScopeStack(this.scopeStack).id.name;\n                const exportedTypeAlias = this.exportDeclaration(this.typeAliasObject(name, properties));\n                this.printer.enqueue(exportedTypeAlias);\n                unionMembers.push(this.annotationFromScopeStack(this.scopeStack));\n                this.scopeStackPop();\n            });\n            this.printer.enqueue(this.exportDeclaration(this.typeAliasGenericUnion(this.annotationFromScopeStack(this.scopeStack).id.name, unionMembers)));\n        }\n        this.scopeStackPop();\n    }\n    getVariantsForSelectionSet(selectionSet) {\n        return this.getTypeCasesForSelectionSet(selectionSet).exhaustiveVariants;\n    }\n    getTypeCasesForSelectionSet(selectionSet) {\n        return typeCase_1.typeCaseForSelectionSet(selectionSet, this.context.options.mergeInFieldsFromFragmentSpreads);\n    }\n    getPropertiesForVariant(variant) {\n        const fields = collectAndMergeFields_1.collectAndMergeFields(variant, this.context.options.mergeInFieldsFromFragmentSpreads);\n        return fields.map(field => {\n            const fieldName = field.alias !== undefined ? field.alias : field.name;\n            this.scopeStackPush(fieldName);\n            let res;\n            if (field.selectionSet) {\n                const genericAnnotation = this.annotationFromScopeStack(this.scopeStack);\n                if (field.type instanceof graphql_1.GraphQLNonNull) {\n                    genericAnnotation.id.name = genericAnnotation.id.name;\n                }\n                else {\n                    genericAnnotation.id.name = '?' + genericAnnotation.id.name;\n                }\n                res = this.handleFieldSelectionSetValue(genericAnnotation, field);\n            }\n            else {\n                res = this.handleFieldValue(field, variant);\n            }\n            this.scopeStackPop();\n            return res;\n        });\n    }\n    handleFieldSelectionSetValue(genericAnnotation, field) {\n        const { selectionSet } = field;\n        const typeCase = this.getTypeCasesForSelectionSet(selectionSet);\n        const variants = typeCase.exhaustiveVariants;\n        let exportedTypeAlias;\n        if (variants.length === 1) {\n            const variant = variants[0];\n            const properties = this.getPropertiesForVariant(variant);\n            exportedTypeAlias = this.exportDeclaration(this.typeAliasObject(this.annotationFromScopeStack(this.scopeStack).id.name, properties));\n        }\n        else {\n            const propertySets = variants.map(variant => {\n                this.scopeStackPush(variant.possibleTypes[0].toString());\n                const properties = this.getPropertiesForVariant(variant);\n                this.scopeStackPop();\n                return properties;\n            });\n            exportedTypeAlias = this.exportDeclaration(this.typeAliasObjectUnion(genericAnnotation.id.name, propertySets));\n        }\n        this.printer.enqueue(exportedTypeAlias);\n        return {\n            name: field.alias ? field.alias : field.name,\n            description: field.description,\n            annotation: genericAnnotation\n        };\n    }\n    handleFieldValue(field, variant) {\n        let res;\n        if (field.name === '__typename') {\n            const annotations = variant.possibleTypes\n                .map(type => {\n                const annotation = t.stringLiteralTypeAnnotation();\n                annotation.value = type.toString();\n                return annotation;\n            });\n            res = {\n                name: field.alias ? field.alias : field.name,\n                description: field.description,\n                annotation: t.unionTypeAnnotation(annotations)\n            };\n        }\n        else {\n            res = {\n                name: field.alias ? field.alias : field.name,\n                description: field.description,\n                annotation: this.typeAnnotationFromGraphQLType(field.type)\n            };\n        }\n        return res;\n    }\n    get output() {\n        return this.printer.print();\n    }\n    scopeStackPush(name) {\n        this.scopeStack.push(name);\n    }\n    scopeStackPop() {\n        const popped = this.scopeStack.pop();\n        return popped;\n    }\n}\nexports.FlowAPIGenerator = FlowAPIGenerator;\n//# sourceMappingURL=data:application/json;base64,");"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const t = require("@babel/types");
const common_tags_1 = require("common-tags");
const graphql_1 = require("graphql");
const path = require("path");
const typeCase_1 = require("../compiler/visitors/typeCase");
const collectAndMergeFields_1 = require("../compiler/visitors/collectAndMergeFields");
const language_1 = require("./language");
const printer_1 = require("./printer");
class FlowGeneratedFile {
    constructor(fileContents) {
        this.fileContents = fileContents;
    }
    get output() {
        return this.fileContents;
    }}

function printEnumsAndInputObjects(generator, context) {
    generator.printer.enqueue(common_tags_1.stripIndent`
    //==============================================================
    // START Enums and Input Objects
    // All enums and input objects are included in every output file
    // for now, but this will be changed soon.
    // TODO: Link to issue to fix this.
    //==============================================================
  `);
    context.typesUsed.
    filter(type => type instanceof graphql_1.GraphQLEnumType).
    forEach(enumType => {
        generator.typeAliasForEnumType(enumType);
    });
    context.typesUsed.
    filter(type => type instanceof graphql_1.GraphQLInputObjectType).
    forEach(inputObjectType => {
        generator.typeAliasForInputObjectType(inputObjectType);
    });
    generator.printer.enqueue(common_tags_1.stripIndent`
    //==============================================================
    // END Enums and Input Objects
    //==============================================================
  `);
}
function generateSource(context) {
    const generator = new FlowAPIGenerator(context);
    const generatedFiles = {};
    Object.values(context.operations).
    forEach(operation => {
        generator.fileHeader();
        generator.typeAliasesForOperation(operation);
        printEnumsAndInputObjects(generator, context);
        const output = generator.printer.printAndClear();
        const outputFilePath = path.join(path.dirname(operation.filePath), '__generated__', `${operation.operationName}.js`);
        generatedFiles[outputFilePath] = new FlowGeneratedFile(output);
    });
    Object.values(context.fragments).
    forEach(fragment => {
        generator.fileHeader();
        generator.typeAliasesForFragment(fragment);
        printEnumsAndInputObjects(generator, context);
        const output = generator.printer.printAndClear();
        const outputFilePath = path.join(path.dirname(fragment.filePath), '__generated__', `${fragment.fragmentName}.js`);
        generatedFiles[outputFilePath] = new FlowGeneratedFile(output);
    });
    return generatedFiles;
}
exports.generateSource = generateSource;
class FlowAPIGenerator extends language_1.default {
    constructor(context) {
        super(context.options);
        this.context = context;
        this.printer = new printer_1.default();
        this.scopeStack = [];
    }
    fileHeader() {
        this.printer.enqueue(common_tags_1.stripIndent`
        /* @flow */
        // This file was automatically generated and should not be edited.
      `);
    }
    typeAliasForEnumType(enumType) {
        this.printer.enqueue(this.enumerationDeclaration(enumType));
    }
    typeAliasForInputObjectType(inputObjectType) {
        this.printer.enqueue(this.inputObjectDeclaration(inputObjectType));
    }
    typeAliasesForOperation(operation) {
        const { operationType, operationName, selectionSet } = operation;
        this.scopeStackPush(operationName);
        this.printer.enqueue(common_tags_1.stripIndent`
      // ====================================================
      // GraphQL ${operationType} operation: ${operationName}
      // ====================================================
    `);
        const variants = this.getVariantsForSelectionSet(selectionSet);
        const variant = variants[0];
        const properties = this.getPropertiesForVariant(variant);
        const exportedTypeAlias = this.exportDeclaration(this.typeAliasObject(operationName, properties));
        this.printer.enqueue(exportedTypeAlias);
        this.scopeStackPop();
    }
    typeAliasesForFragment(fragment) {
        const { fragmentName, selectionSet } = fragment;
        this.scopeStackPush(fragmentName);
        this.printer.enqueue(common_tags_1.stripIndent`
      // ====================================================
      // GraphQL fragment: ${fragmentName}
      // ====================================================
    `);
        const variants = this.getVariantsForSelectionSet(selectionSet);
        if (variants.length === 1) {
            const properties = this.getPropertiesForVariant(variants[0]);
            const name = this.annotationFromScopeStack(this.scopeStack).id.name;
            const exportedTypeAlias = this.exportDeclaration(this.typeAliasObject(name, properties));
            this.printer.enqueue(exportedTypeAlias);
        } else
        {
            const unionMembers = [];
            variants.forEach(variant => {
                this.scopeStackPush(variant.possibleTypes[0].toString());
                const properties = this.getPropertiesForVariant(variant);
                const name = this.annotationFromScopeStack(this.scopeStack).id.name;
                const exportedTypeAlias = this.exportDeclaration(this.typeAliasObject(name, properties));
                this.printer.enqueue(exportedTypeAlias);
                unionMembers.push(this.annotationFromScopeStack(this.scopeStack));
                this.scopeStackPop();
            });
            this.printer.enqueue(this.exportDeclaration(this.typeAliasGenericUnion(this.annotationFromScopeStack(this.scopeStack).id.name, unionMembers)));
        }
        this.scopeStackPop();
    }
    getVariantsForSelectionSet(selectionSet) {
        return this.getTypeCasesForSelectionSet(selectionSet).exhaustiveVariants;
    }
    getTypeCasesForSelectionSet(selectionSet) {
        return typeCase_1.typeCaseForSelectionSet(selectionSet, this.context.options.mergeInFieldsFromFragmentSpreads);
    }
    getPropertiesForVariant(variant) {
        const fields = collectAndMergeFields_1.collectAndMergeFields(variant, this.context.options.mergeInFieldsFromFragmentSpreads);
        return fields.map(field => {
            const fieldName = field.alias !== undefined ? field.alias : field.name;
            this.scopeStackPush(fieldName);
            let res;
            if (field.selectionSet) {
                const genericAnnotation = this.annotationFromScopeStack(this.scopeStack);
                if (field.type instanceof graphql_1.GraphQLNonNull) {
                    genericAnnotation.id.name = genericAnnotation.id.name;
                } else
                {
                    genericAnnotation.id.name = '?' + genericAnnotation.id.name;
                }
                res = this.handleFieldSelectionSetValue(genericAnnotation, field);
            } else
            {
                res = this.handleFieldValue(field, variant);
            }
            this.scopeStackPop();
            return res;
        });
    }
    handleFieldSelectionSetValue(genericAnnotation, field) {
        const { selectionSet } = field;
        const typeCase = this.getTypeCasesForSelectionSet(selectionSet);
        const variants = typeCase.exhaustiveVariants;
        let exportedTypeAlias;
        if (variants.length === 1) {
            const variant = variants[0];
            const properties = this.getPropertiesForVariant(variant);
            exportedTypeAlias = this.exportDeclaration(this.typeAliasObject(this.annotationFromScopeStack(this.scopeStack).id.name, properties));
        } else
        {
            const propertySets = variants.map(variant => {
                this.scopeStackPush(variant.possibleTypes[0].toString());
                const properties = this.getPropertiesForVariant(variant);
                this.scopeStackPop();
                return properties;
            });
            exportedTypeAlias = this.exportDeclaration(this.typeAliasObjectUnion(genericAnnotation.id.name, propertySets));
        }
        this.printer.enqueue(exportedTypeAlias);
        return {
            name: field.alias ? field.alias : field.name,
            description: field.description,
            annotation: genericAnnotation };

    }
    handleFieldValue(field, variant) {
        let res;
        if (field.name === '__typename') {
            const annotations = variant.possibleTypes.
            map(type => {
                const annotation = t.stringLiteralTypeAnnotation();
                annotation.value = type.toString();
                return annotation;
            });
            res = {
                name: field.alias ? field.alias : field.name,
                description: field.description,
                annotation: t.unionTypeAnnotation(annotations) };

        } else
        {
            res = {
                name: field.alias ? field.alias : field.name,
                description: field.description,
                annotation: this.typeAnnotationFromGraphQLType(field.type) };

        }
        return res;
    }
    get output() {
        return this.printer.print();
    }
    scopeStackPush(name) {
        this.scopeStack.push(name);
    }
    scopeStackPop() {
        const popped = this.scopeStack.pop();
        return popped;
    }}

exports.FlowAPIGenerator = FlowAPIGenerator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFuQixFQUFpQztBQUMvQixrQkFBTSxjQUFjLFFBQVEsYUFBUjtBQUNqQixlQURpQixDQUNiLFFBQU87QUFDVixzQkFBTSxhQUFhLEVBQUUsMkJBQUYsRUFBbkI7QUFDQSwyQkFBVyxLQUFYLEdBQW1CLEtBQUssUUFBTCxFQUFuQjtBQUNBLHVCQUFPLFVBQVA7QUFDRCxhQUxpQixDQUFwQjtBQU9BLGtCQUFNO0FBQ0osc0JBQU0sTUFBTSxLQUFOLEdBQWMsTUFBTSxLQUFwQixHQUE0QixNQUFNLElBRHBDO0FBRUosNkJBQWEsTUFBTSxXQUZmO0FBR0osNEJBQVksRUFBRSxtQkFBRixDQUFzQixXQUF0QixDQUhSLEVBQU47O0FBS0QsU0FiRDtBQWFPO0FBRUwsa0JBQU07QUFDSixzQkFBTSxNQUFNLEtBQU4sR0FBYyxNQUFNLEtBQXBCLEdBQTRCLE1BQU0sSUFEcEM7QUFFSiw2QkFBYSxNQUFNLFdBRmY7QUFHSiw0QkFBWSxLQUFLLDZCQUFMLENBQW1DLE1BQU0sSUFBekMsQ0FIUixFQUFOOztBQUtEO0FBRUQsZUFBTyxHQUFQO0FBQ0Q7QUFFRCxRQUFXLE1BQVgsR0FBaUI7QUFDZixlQUFPLEtBQUssT0FBTCxDQUFhLEtBQWIsRUFBUDtBQUNEO0FBRUQsbUJBQWUsSUFBZixFQUEyQjtBQUN6QixhQUFLLFVBQUwsQ0FBZ0IsSUFBaEIsQ0FBcUIsSUFBckI7QUFDRDtBQUVELG9CQUFhO0FBQ1gsY0FBTSxTQUFTLEtBQUssVUFBTCxDQUFnQixHQUFoQixFQUFmO0FBQ0EsZUFBTyxNQUFQO0FBQ0QsS0F2UGdEOztBQUFuRCxRQUFBLGdCQUFBLEdBQUEsZ0JBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyB0IGZyb20gJ0BiYWJlbC90eXBlcyc7XG5pbXBvcnQgeyBzdHJpcEluZGVudCB9IGZyb20gJ2NvbW1vbi10YWdzJztcbmltcG9ydCB7XG4gIEdyYXBoUUxFbnVtVHlwZSxcbiAgR3JhcGhRTElucHV0T2JqZWN0VHlwZSxcbiAgR3JhcGhRTE5vbk51bGwsXG59IGZyb20gJ2dyYXBocWwnO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcblxuaW1wb3J0IHtcbiAgQ29tcGlsZXJDb250ZXh0LFxuICBPcGVyYXRpb24sXG4gIEZyYWdtZW50LFxuICBTZWxlY3Rpb25TZXQsXG4gIEZpZWxkLFxufSBmcm9tICcuLi9jb21waWxlcic7XG5cbmltcG9ydCB7XG4gIHR5cGVDYXNlRm9yU2VsZWN0aW9uU2V0LFxuICBWYXJpYW50XG59IGZyb20gJy4uL2NvbXBpbGVyL3Zpc2l0b3JzL3R5cGVDYXNlJztcblxuaW1wb3J0IHtcbiAgY29sbGVjdEFuZE1lcmdlRmllbGRzXG59IGZyb20gJy4uL2NvbXBpbGVyL3Zpc2l0b3JzL2NvbGxlY3RBbmRNZXJnZUZpZWxkcyc7XG5cbmltcG9ydCB7IEJhc2ljR2VuZXJhdGVkRmlsZSB9IGZyb20gJy4uL3V0aWxpdGllcy9Db2RlR2VuZXJhdG9yJztcbmltcG9ydCBGbG93R2VuZXJhdG9yLCB7IE9iamVjdFByb3BlcnR5LCBGbG93Q29tcGlsZXJPcHRpb25zLCB9IGZyb20gJy4vbGFuZ3VhZ2UnO1xuaW1wb3J0IFByaW50ZXIgZnJvbSAnLi9wcmludGVyJztcblxuY2xhc3MgRmxvd0dlbmVyYXRlZEZpbGUgaW1wbGVtZW50cyBCYXNpY0dlbmVyYXRlZEZpbGUge1xuICBmaWxlQ29udGVudHM6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihmaWxlQ29udGVudHM6IHN0cmluZykge1xuICAgIHRoaXMuZmlsZUNvbnRlbnRzID0gZmlsZUNvbnRlbnRzO1xuICB9XG4gIGdldCBvdXRwdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZmlsZUNvbnRlbnRzXG4gIH1cbn1cblxuZnVuY3Rpb24gcHJpbnRFbnVtc0FuZElucHV0T2JqZWN0cyhnZW5lcmF0b3I6IEZsb3dBUElHZW5lcmF0b3IsIGNvbnRleHQ6IENvbXBpbGVyQ29udGV4dCkge1xuICBnZW5lcmF0b3IucHJpbnRlci5lbnF1ZXVlKHN0cmlwSW5kZW50YFxuICAgIC8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAvLyBTVEFSVCBFbnVtcyBhbmQgSW5wdXQgT2JqZWN0c1xuICAgIC8vIEFsbCBlbnVtcyBhbmQgaW5wdXQgb2JqZWN0cyBhcmUgaW5jbHVkZWQgaW4gZXZlcnkgb3V0cHV0IGZpbGVcbiAgICAvLyBmb3Igbm93LCBidXQgdGhpcyB3aWxsIGJlIGNoYW5nZWQgc29vbi5cbiAgICAvLyBUT0RPOiBMaW5rIHRvIGlzc3VlIHRvIGZpeCB0aGlzLlxuICAgIC8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgYCk7XG5cbiAgY29udGV4dC50eXBlc1VzZWRcbiAgICAuZmlsdGVyKHR5cGUgPT4gKHR5cGUgaW5zdGFuY2VvZiBHcmFwaFFMRW51bVR5cGUpKVxuICAgIC5mb3JFYWNoKChlbnVtVHlwZSkgPT4ge1xuICAgICAgZ2VuZXJhdG9yLnR5cGVBbGlhc0ZvckVudW1UeXBlKGVudW1UeXBlIGFzIEdyYXBoUUxFbnVtVHlwZSk7XG4gICAgfSk7XG5cbiAgY29udGV4dC50eXBlc1VzZWRcbiAgICAuZmlsdGVyKHR5cGUgPT4gdHlwZSBpbnN0YW5jZW9mIEdyYXBoUUxJbnB1dE9iamVjdFR5cGUpXG4gICAgLmZvckVhY2goKGlucHV0T2JqZWN0VHlwZSkgPT4ge1xuICAgICAgZ2VuZXJhdG9yLnR5cGVBbGlhc0ZvcklucHV0T2JqZWN0VHlwZShpbnB1dE9iamVjdFR5cGUgYXMgR3JhcGhRTElucHV0T2JqZWN0VHlwZSk7XG4gICAgfSk7XG5cbiAgZ2VuZXJhdG9yLnByaW50ZXIuZW5xdWV1ZShzdHJpcEluZGVudGBcbiAgICAvLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgLy8gRU5EIEVudW1zIGFuZCBJbnB1dCBPYmplY3RzXG4gICAgLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICBgKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVTb3VyY2UoXG4gIGNvbnRleHQ6IENvbXBpbGVyQ29udGV4dCxcbikge1xuICBjb25zdCBnZW5lcmF0b3IgPSBuZXcgRmxvd0FQSUdlbmVyYXRvcihjb250ZXh0KTtcbiAgY29uc3QgZ2VuZXJhdGVkRmlsZXM6IHsgW2ZpbGVQYXRoOiBzdHJpbmddOiBGbG93R2VuZXJhdGVkRmlsZSB9ID0ge307XG5cbiAgT2JqZWN0LnZhbHVlcyhjb250ZXh0Lm9wZXJhdGlvbnMpXG4gICAgLmZvckVhY2goKG9wZXJhdGlvbikgPT4ge1xuICAgICAgZ2VuZXJhdG9yLmZpbGVIZWFkZXIoKTtcbiAgICAgIGdlbmVyYXRvci50eXBlQWxpYXNlc0Zvck9wZXJhdGlvbihvcGVyYXRpb24pO1xuICAgICAgcHJpbnRFbnVtc0FuZElucHV0T2JqZWN0cyhnZW5lcmF0b3IsIGNvbnRleHQpO1xuXG4gICAgICBjb25zdCBvdXRwdXQgPSBnZW5lcmF0b3IucHJpbnRlci5wcmludEFuZENsZWFyKCk7XG5cbiAgICAgIGNvbnN0IG91dHB1dEZpbGVQYXRoID0gcGF0aC5qb2luKFxuICAgICAgICBwYXRoLmRpcm5hbWUob3BlcmF0aW9uLmZpbGVQYXRoKSxcbiAgICAgICAgJ19fZ2VuZXJhdGVkX18nLFxuICAgICAgICBgJHtvcGVyYXRpb24ub3BlcmF0aW9uTmFtZX0uanNgXG4gICAgICApO1xuXG4gICAgICBnZW5lcmF0ZWRGaWxlc1tvdXRwdXRGaWxlUGF0aF0gPSBuZXcgRmxvd0dlbmVyYXRlZEZpbGUob3V0cHV0KTtcbiAgICB9KTtcblxuICBPYmplY3QudmFsdWVzKGNvbnRleHQuZnJhZ21lbnRzKVxuICAgIC5mb3JFYWNoKChmcmFnbWVudCkgPT4ge1xuICAgICAgZ2VuZXJhdG9yLmZpbGVIZWFkZXIoKTtcbiAgICAgIGdlbmVyYXRvci50eXBlQWxpYXNlc0ZvckZyYWdtZW50KGZyYWdtZW50KTtcbiAgICAgIHByaW50RW51bXNBbmRJbnB1dE9iamVjdHMoZ2VuZXJhdG9yLCBjb250ZXh0KTtcblxuICAgICAgY29uc3Qgb3V0cHV0ID0gZ2VuZXJhdG9yLnByaW50ZXIucHJpbnRBbmRDbGVhcigpO1xuXG4gICAgICBjb25zdCBvdXRwdXRGaWxlUGF0aCA9IHBhdGguam9pbihcbiAgICAgICAgcGF0aC5kaXJuYW1lKGZyYWdtZW50LmZpbGVQYXRoKSxcbiAgICAgICAgJ19fZ2VuZXJhdGVkX18nLFxuICAgICAgICBgJHtmcmFnbWVudC5mcmFnbWVudE5hbWV9LmpzYFxuICAgICAgKTtcblxuICAgICAgZ2VuZXJhdGVkRmlsZXNbb3V0cHV0RmlsZVBhdGhdID0gbmV3IEZsb3dHZW5lcmF0ZWRGaWxlKG91dHB1dCk7XG4gICAgfSk7XG5cbiAgcmV0dXJuIGdlbmVyYXRlZEZpbGVzO1xufVxuXG5leHBvcnQgY2xhc3MgRmxvd0FQSUdlbmVyYXRvciBleHRlbmRzIEZsb3dHZW5lcmF0b3Ige1xuICBjb250ZXh0OiBDb21waWxlckNvbnRleHRcbiAgcHJpbnRlcjogUHJpbnRlclxuICBzY29wZVN0YWNrOiBzdHJpbmdbXVxuXG4gIGNvbnN0cnVjdG9yKGNvbnRleHQ6IENvbXBpbGVyQ29udGV4dCkge1xuICAgIHN1cGVyKGNvbnRleHQub3B0aW9ucyBhcyBGbG93Q29tcGlsZXJPcHRpb25zKTtcblxuICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gICAgdGhpcy5wcmludGVyID0gbmV3IFByaW50ZXIoKTtcbiAgICB0aGlzLnNjb3BlU3RhY2sgPSBbXTtcbiAgfVxuXG4gIGZpbGVIZWFkZXIoKSB7XG4gICAgdGhpcy5wcmludGVyLmVucXVldWUoXG4gICAgICBzdHJpcEluZGVudGBcbiAgICAgICAgLyogQGZsb3cgKi9cbiAgICAgICAgLy8gVGhpcyBmaWxlIHdhcyBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZCBhbmQgc2hvdWxkIG5vdCBiZSBlZGl0ZWQuXG4gICAgICBgXG4gICAgKTtcbiAgfVxuXG4gIHB1YmxpYyB0eXBlQWxpYXNGb3JFbnVtVHlwZShlbnVtVHlwZTogR3JhcGhRTEVudW1UeXBlKSB7XG4gICAgdGhpcy5wcmludGVyLmVucXVldWUodGhpcy5lbnVtZXJhdGlvbkRlY2xhcmF0aW9uKGVudW1UeXBlKSk7XG4gIH1cblxuICBwdWJsaWMgdHlwZUFsaWFzRm9ySW5wdXRPYmplY3RUeXBlKGlucHV0T2JqZWN0VHlwZTogR3JhcGhRTElucHV0T2JqZWN0VHlwZSkge1xuICAgIHRoaXMucHJpbnRlci5lbnF1ZXVlKHRoaXMuaW5wdXRPYmplY3REZWNsYXJhdGlvbihpbnB1dE9iamVjdFR5cGUpKTtcbiAgfVxuXG4gIHB1YmxpYyB0eXBlQWxpYXNlc0Zvck9wZXJhdGlvbihvcGVyYXRpb246IE9wZXJhdGlvbikge1xuICAgIGNvbnN0IHtcbiAgICAgIG9wZXJhdGlvblR5cGUsXG4gICAgICBvcGVyYXRpb25OYW1lLFxuICAgICAgc2VsZWN0aW9uU2V0XG4gICAgfSA9IG9wZXJhdGlvbjtcblxuICAgIHRoaXMuc2NvcGVTdGFja1B1c2gob3BlcmF0aW9uTmFtZSk7XG5cbiAgICB0aGlzLnByaW50ZXIuZW5xdWV1ZShzdHJpcEluZGVudGBcbiAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgIC8vIEdyYXBoUUwgJHtvcGVyYXRpb25UeXBlfSBvcGVyYXRpb246ICR7b3BlcmF0aW9uTmFtZX1cbiAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICBgKVxuXG4gICAgLy8gVGhlIHJvb3Qgb3BlcmF0aW9uIG9ubHkgaGFzIG9uZSB2YXJpYW50XG4gICAgLy8gRG8gd2UgbmVlZCB0byBnZXQgZXhoYXVzdGl2ZSB2YXJpYW50cyBhbnl3YXk/XG4gICAgY29uc3QgdmFyaWFudHMgPSB0aGlzLmdldFZhcmlhbnRzRm9yU2VsZWN0aW9uU2V0KHNlbGVjdGlvblNldCk7XG5cbiAgICBjb25zdCB2YXJpYW50ID0gdmFyaWFudHNbMF07XG4gICAgY29uc3QgcHJvcGVydGllcyA9IHRoaXMuZ2V0UHJvcGVydGllc0ZvclZhcmlhbnQodmFyaWFudCk7XG5cbiAgICBjb25zdCBleHBvcnRlZFR5cGVBbGlhcyA9IHRoaXMuZXhwb3J0RGVjbGFyYXRpb24oXG4gICAgICB0aGlzLnR5cGVBbGlhc09iamVjdChvcGVyYXRpb25OYW1lLCBwcm9wZXJ0aWVzKVxuICAgICk7XG5cbiAgICB0aGlzLnByaW50ZXIuZW5xdWV1ZShleHBvcnRlZFR5cGVBbGlhcyk7XG4gICAgdGhpcy5zY29wZVN0YWNrUG9wKCk7XG4gIH1cblxuICBwdWJsaWMgdHlwZUFsaWFzZXNGb3JGcmFnbWVudChmcmFnbWVudDogRnJhZ21lbnQpIHtcbiAgICBjb25zdCB7XG4gICAgICBmcmFnbWVudE5hbWUsXG4gICAgICBzZWxlY3Rpb25TZXRcbiAgICB9ID0gZnJhZ21lbnQ7XG5cbiAgICB0aGlzLnNjb3BlU3RhY2tQdXNoKGZyYWdtZW50TmFtZSk7XG5cbiAgICB0aGlzLnByaW50ZXIuZW5xdWV1ZShzdHJpcEluZGVudGBcbiAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgIC8vIEdyYXBoUUwgZnJhZ21lbnQ6ICR7ZnJhZ21lbnROYW1lfVxuICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgIGApO1xuXG4gICAgY29uc3QgdmFyaWFudHMgPSB0aGlzLmdldFZhcmlhbnRzRm9yU2VsZWN0aW9uU2V0KHNlbGVjdGlvblNldCk7XG5cbiAgICBpZiAodmFyaWFudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICBjb25zdCBwcm9wZXJ0aWVzID0gdGhpcy5nZXRQcm9wZXJ0aWVzRm9yVmFyaWFudCh2YXJpYW50c1swXSk7XG5cbiAgICAgIGNvbnN0IG5hbWUgPSB0aGlzLmFubm90YXRpb25Gcm9tU2NvcGVTdGFjayh0aGlzLnNjb3BlU3RhY2spLmlkLm5hbWU7XG4gICAgICBjb25zdCBleHBvcnRlZFR5cGVBbGlhcyA9IHRoaXMuZXhwb3J0RGVjbGFyYXRpb24oXG4gICAgICAgIHRoaXMudHlwZUFsaWFzT2JqZWN0KFxuICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgcHJvcGVydGllc1xuICAgICAgICApXG4gICAgICApO1xuXG4gICAgICB0aGlzLnByaW50ZXIuZW5xdWV1ZShleHBvcnRlZFR5cGVBbGlhcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHVuaW9uTWVtYmVyczogdC5GbG93VHlwZUFubm90YXRpb25bXSA9IFtdO1xuICAgICAgdmFyaWFudHMuZm9yRWFjaCh2YXJpYW50ID0+IHtcbiAgICAgICAgdGhpcy5zY29wZVN0YWNrUHVzaCh2YXJpYW50LnBvc3NpYmxlVHlwZXNbMF0udG9TdHJpbmcoKSk7XG4gICAgICAgIGNvbnN0IHByb3BlcnRpZXMgPSB0aGlzLmdldFByb3BlcnRpZXNGb3JWYXJpYW50KHZhcmlhbnQpO1xuXG4gICAgICAgIGNvbnN0IG5hbWUgPSB0aGlzLmFubm90YXRpb25Gcm9tU2NvcGVTdGFjayh0aGlzLnNjb3BlU3RhY2spLmlkLm5hbWU7XG4gICAgICAgIGNvbnN0IGV4cG9ydGVkVHlwZUFsaWFzID0gdGhpcy5leHBvcnREZWNsYXJhdGlvbihcbiAgICAgICAgICB0aGlzLnR5cGVBbGlhc09iamVjdChcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICBwcm9wZXJ0aWVzXG4gICAgICAgICAgKVxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMucHJpbnRlci5lbnF1ZXVlKGV4cG9ydGVkVHlwZUFsaWFzKTtcblxuICAgICAgICB1bmlvbk1lbWJlcnMucHVzaCh0aGlzLmFubm90YXRpb25Gcm9tU2NvcGVTdGFjayh0aGlzLnNjb3BlU3RhY2spKTtcblxuICAgICAgICB0aGlzLnNjb3BlU3RhY2tQb3AoKTtcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLnByaW50ZXIuZW5xdWV1ZShcbiAgICAgICAgdGhpcy5leHBvcnREZWNsYXJhdGlvbihcbiAgICAgICAgICB0aGlzLnR5cGVBbGlhc0dlbmVyaWNVbmlvbihcbiAgICAgICAgICAgIHRoaXMuYW5ub3RhdGlvbkZyb21TY29wZVN0YWNrKHRoaXMuc2NvcGVTdGFjaykuaWQubmFtZSxcbiAgICAgICAgICAgIHVuaW9uTWVtYmVyc1xuICAgICAgICAgIClcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICB0aGlzLnNjb3BlU3RhY2tQb3AoKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0VmFyaWFudHNGb3JTZWxlY3Rpb25TZXQoc2VsZWN0aW9uU2V0OiBTZWxlY3Rpb25TZXQpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRUeXBlQ2FzZXNGb3JTZWxlY3Rpb25TZXQoc2VsZWN0aW9uU2V0KS5leGhhdXN0aXZlVmFyaWFudHM7XG4gIH1cblxuICBwcml2YXRlIGdldFR5cGVDYXNlc0ZvclNlbGVjdGlvblNldChzZWxlY3Rpb25TZXQ6IFNlbGVjdGlvblNldCkge1xuICAgIHJldHVybiB0eXBlQ2FzZUZvclNlbGVjdGlvblNldChcbiAgICAgIHNlbGVjdGlvblNldCxcbiAgICAgIHRoaXMuY29udGV4dC5vcHRpb25zLm1lcmdlSW5GaWVsZHNGcm9tRnJhZ21lbnRTcHJlYWRzXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0UHJvcGVydGllc0ZvclZhcmlhbnQodmFyaWFudDogVmFyaWFudCk6IE9iamVjdFByb3BlcnR5W10ge1xuICAgIGNvbnN0IGZpZWxkcyA9IGNvbGxlY3RBbmRNZXJnZUZpZWxkcyhcbiAgICAgIHZhcmlhbnQsXG4gICAgICB0aGlzLmNvbnRleHQub3B0aW9ucy5tZXJnZUluRmllbGRzRnJvbUZyYWdtZW50U3ByZWFkc1xuICAgICk7XG5cbiAgICByZXR1cm4gZmllbGRzLm1hcChmaWVsZCA9PiB7XG4gICAgICBjb25zdCBmaWVsZE5hbWUgPSBmaWVsZC5hbGlhcyAhPT0gdW5kZWZpbmVkID8gZmllbGQuYWxpYXMgOiBmaWVsZC5uYW1lO1xuICAgICAgdGhpcy5zY29wZVN0YWNrUHVzaChmaWVsZE5hbWUpO1xuXG4gICAgICBsZXQgcmVzO1xuICAgICAgaWYgKGZpZWxkLnNlbGVjdGlvblNldCkge1xuICAgICAgICBjb25zdCBnZW5lcmljQW5ub3RhdGlvbiA9IHRoaXMuYW5ub3RhdGlvbkZyb21TY29wZVN0YWNrKHRoaXMuc2NvcGVTdGFjayk7XG4gICAgICAgIGlmIChmaWVsZC50eXBlIGluc3RhbmNlb2YgR3JhcGhRTE5vbk51bGwpIHtcbiAgICAgICAgICBnZW5lcmljQW5ub3RhdGlvbi5pZC5uYW1lID0gZ2VuZXJpY0Fubm90YXRpb24uaWQubmFtZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBnZW5lcmljQW5ub3RhdGlvbi5pZC5uYW1lID0gJz8nICsgZ2VuZXJpY0Fubm90YXRpb24uaWQubmFtZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlcyA9IHRoaXMuaGFuZGxlRmllbGRTZWxlY3Rpb25TZXRWYWx1ZShcbiAgICAgICAgICBnZW5lcmljQW5ub3RhdGlvbixcbiAgICAgICAgICBmaWVsZFxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzID0gdGhpcy5oYW5kbGVGaWVsZFZhbHVlKFxuICAgICAgICAgIGZpZWxkLFxuICAgICAgICAgIHZhcmlhbnRcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zY29wZVN0YWNrUG9wKCk7XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBoYW5kbGVGaWVsZFNlbGVjdGlvblNldFZhbHVlKGdlbmVyaWNBbm5vdGF0aW9uOiB0LkdlbmVyaWNUeXBlQW5ub3RhdGlvbiwgZmllbGQ6IEZpZWxkKSB7XG4gICAgY29uc3QgeyBzZWxlY3Rpb25TZXQgfSA9IGZpZWxkO1xuXG4gICAgY29uc3QgdHlwZUNhc2UgPSB0aGlzLmdldFR5cGVDYXNlc0ZvclNlbGVjdGlvblNldChzZWxlY3Rpb25TZXQgYXMgU2VsZWN0aW9uU2V0KTtcbiAgICBjb25zdCB2YXJpYW50cyA9IHR5cGVDYXNlLmV4aGF1c3RpdmVWYXJpYW50cztcblxuICAgIGxldCBleHBvcnRlZFR5cGVBbGlhcztcbiAgICBpZiAodmFyaWFudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICBjb25zdCB2YXJpYW50ID0gdmFyaWFudHNbMF07XG4gICAgICBjb25zdCBwcm9wZXJ0aWVzID0gdGhpcy5nZXRQcm9wZXJ0aWVzRm9yVmFyaWFudCh2YXJpYW50KTtcbiAgICAgIGV4cG9ydGVkVHlwZUFsaWFzID0gdGhpcy5leHBvcnREZWNsYXJhdGlvbihcbiAgICAgICAgdGhpcy50eXBlQWxpYXNPYmplY3QoXG4gICAgICAgICAgdGhpcy5hbm5vdGF0aW9uRnJvbVNjb3BlU3RhY2sodGhpcy5zY29wZVN0YWNrKS5pZC5uYW1lLFxuICAgICAgICAgIHByb3BlcnRpZXNcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgcHJvcGVydHlTZXRzID0gdmFyaWFudHMubWFwKHZhcmlhbnQgPT4ge1xuICAgICAgICB0aGlzLnNjb3BlU3RhY2tQdXNoKHZhcmlhbnQucG9zc2libGVUeXBlc1swXS50b1N0cmluZygpKVxuICAgICAgICBjb25zdCBwcm9wZXJ0aWVzID0gdGhpcy5nZXRQcm9wZXJ0aWVzRm9yVmFyaWFudCh2YXJpYW50KTtcbiAgICAgICAgdGhpcy5zY29wZVN0YWNrUG9wKCk7XG4gICAgICAgIHJldHVybiBwcm9wZXJ0aWVzO1xuICAgICAgfSlcblxuICAgICAgZXhwb3J0ZWRUeXBlQWxpYXMgPSB0aGlzLmV4cG9ydERlY2xhcmF0aW9uKFxuICAgICAgICB0aGlzLnR5cGVBbGlhc09iamVjdFVuaW9uKFxuICAgICAgICAgIGdlbmVyaWNBbm5vdGF0aW9uLmlkLm5hbWUsXG4gICAgICAgICAgcHJvcGVydHlTZXRzXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdGhpcy5wcmludGVyLmVucXVldWUoZXhwb3J0ZWRUeXBlQWxpYXMpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IGZpZWxkLmFsaWFzID8gZmllbGQuYWxpYXMgOiBmaWVsZC5uYW1lLFxuICAgICAgZGVzY3JpcHRpb246IGZpZWxkLmRlc2NyaXB0aW9uLFxuICAgICAgYW5ub3RhdGlvbjogZ2VuZXJpY0Fubm90YXRpb25cbiAgICB9O1xuICB9XG5cbiAgcHJpdmF0ZSBoYW5kbGVGaWVsZFZhbHVlKGZpZWxkOiBGaWVsZCwgdmFyaWFudDogVmFyaWFudCkge1xuICAgIGxldCByZXM7XG4gICAgaWYgKGZpZWxkLm5hbWUgPT09ICdfX3R5cGVuYW1lJykge1xuICAgICAgY29uc3QgYW5ub3RhdGlvbnMgPSB2YXJpYW50LnBvc3NpYmxlVHlwZXNcbiAgICAgICAgLm1hcCh0eXBlID0+IHtcbiAgICAgICAgICBjb25zdCBhbm5vdGF0aW9uID0gdC5zdHJpbmdMaXRlcmFsVHlwZUFubm90YXRpb24oKTtcbiAgICAgICAgICBhbm5vdGF0aW9uLnZhbHVlID0gdHlwZS50b1N0cmluZygpO1xuICAgICAgICAgIHJldHVybiBhbm5vdGF0aW9uO1xuICAgICAgICB9KTtcblxuICAgICAgcmVzID0ge1xuICAgICAgICBuYW1lOiBmaWVsZC5hbGlhcyA/IGZpZWxkLmFsaWFzIDogZmllbGQubmFtZSxcbiAgICAgICAgZGVzY3JpcHRpb246IGZpZWxkLmRlc2NyaXB0aW9uLFxuICAgICAgICBhbm5vdGF0aW9uOiB0LnVuaW9uVHlwZUFubm90YXRpb24oYW5ub3RhdGlvbnMpXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUT0RPOiBEb3VibGUgY2hlY2sgdGhhdCB0aGlzIHdvcmtzXG4gICAgICByZXMgPSB7XG4gICAgICAgIG5hbWU6IGZpZWxkLmFsaWFzID8gZmllbGQuYWxpYXMgOiBmaWVsZC5uYW1lLFxuICAgICAgICBkZXNjcmlwdGlvbjogZmllbGQuZGVzY3JpcHRpb24sXG4gICAgICAgIGFubm90YXRpb246IHRoaXMudHlwZUFubm90YXRpb25Gcm9tR3JhcGhRTFR5cGUoZmllbGQudHlwZSlcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfVxuXG4gIHB1YmxpYyBnZXQgb3V0cHV0KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMucHJpbnRlci5wcmludCgpO1xuICB9XG5cbiAgc2NvcGVTdGFja1B1c2gobmFtZTogc3RyaW5nKSB7XG4gICAgdGhpcy5zY29wZVN0YWNrLnB1c2gobmFtZSk7XG4gIH1cblxuICBzY29wZVN0YWNrUG9wKCkge1xuICAgIGNvbnN0IHBvcHBlZCA9IHRoaXMuc2NvcGVTdGFjay5wb3AoKVxuICAgIHJldHVybiBwb3BwZWQ7XG4gIH1cblxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==