{"version":3,"sources":["codeGeneration.ts"],"names":[],"mappings":";;AAAA,MAAA,IAAA,QAAA,cAAA,CAAA;AACA,MAAA,gBAAA,QAAA,aAAA,CAAA;AACA,MAAA,YAAA,QAAA,SAAA,CAAA;AAKA,MAAA,OAAA,QAAA,MAAA,CAAA;AAUA,MAAA,aAAA,QAAA,+BAAA,CAAA;AAKA,MAAA,0BAAA,QAAA,4CAAA,CAAA;AAKA,MAAA,aAAA,QAAA,YAAA,CAAA;AACA,MAAA,YAAA,QAAA,WAAA,CAAA;AAEA,MAAA,iBAAA,CAAA;AAGE,gBAAY,YAAZ,EAAgC;AAC9B,aAAK,YAAL,GAAoB,YAApB;AACD;AACD,QAAI,MAAJ,GAAU;AACR,eAAO,KAAK,YAAZ;AACD,KARH;;AAWA,SAAA,yBAAA,CAAmC,SAAnC,EAAgE,OAAhE,EAAwF;AACtF,cAAU,OAAV,CAAkB,OAAlB,CAA0B,cAAA,WAAW;;;;;;;GAArC;AASA,YAAQ,SAAR;AACG,UADH,CACU,QAAS,gBAAgB,UAAA,eADnC;AAEG,WAFH,CAEY,QAAD,IAAa;AACpB,kBAAU,oBAAV,CAA+B,QAA/B;AACD,KAJH;AAMA,YAAQ,SAAR;AACG,UADH,CACU,QAAQ,gBAAgB,UAAA,sBADlC;AAEG,WAFH,CAEY,eAAD,IAAoB;AAC3B,kBAAU,2BAAV,CAAsC,eAAtC;AACD,KAJH;AAMA,cAAU,OAAV,CAAkB,OAAlB,CAA0B,cAAA,WAAW;;;;GAArC;AAKD;AAED,SAAA,cAAA,CACE,OADF,EAC0B;AAExB,UAAM,YAAY,IAAI,gBAAJ,CAAqB,OAArB,CAAlB;AACA,UAAM,iBAA4D,EAAlE;AAEA,WAAO,MAAP,CAAc,QAAQ,UAAtB;AACG,WADH,CACY,SAAD,IAAc;AACrB,kBAAU,UAAV;AACA,kBAAU,uBAAV,CAAkC,SAAlC;AACA,kCAA0B,SAA1B,EAAqC,OAArC;AAEA,cAAM,SAAS,UAAU,OAAV,CAAkB,aAAlB,EAAf;AAEA,cAAM,iBAAiB,KAAK,IAAL,CACrB,KAAK,OAAL,CAAa,UAAU,QAAvB,CADqB,EAErB,eAFqB,EAGrB,GAAG,UAAU,aAAa,KAHL,CAAvB;AAMA,uBAAe,cAAf,IAAiC,IAAI,iBAAJ,CAAsB,MAAtB,CAAjC;AACD,KAfH;AAiBA,WAAO,MAAP,CAAc,QAAQ,SAAtB;AACG,WADH,CACY,QAAD,IAAa;AACpB,kBAAU,UAAV;AACA,kBAAU,sBAAV,CAAiC,QAAjC;AACA,kCAA0B,SAA1B,EAAqC,OAArC;AAEA,cAAM,SAAS,UAAU,OAAV,CAAkB,aAAlB,EAAf;AAEA,cAAM,iBAAiB,KAAK,IAAL,CACrB,KAAK,OAAL,CAAa,SAAS,QAAtB,CADqB,EAErB,eAFqB,EAGrB,GAAG,SAAS,YAAY,KAHH,CAAvB;AAMA,uBAAe,cAAf,IAAiC,IAAI,iBAAJ,CAAsB,MAAtB,CAAjC;AACD,KAfH;AAiBA,WAAO,cAAP;AACD;AAzCD,QAAA,cAAA,GAAA,cAAA;AA2CA,MAAA,gBAAA,SAAsC,WAAA,OAAtC,CAAmD;AAKjD,gBAAY,OAAZ,EAAoC;AAClC,cAAM,QAAQ,OAAd;AAEA,aAAK,OAAL,GAAe,OAAf;AACA,aAAK,OAAL,GAAe,IAAI,UAAA,OAAJ,EAAf;AACA,aAAK,UAAL,GAAkB,EAAlB;AACD;AAED,iBAAU;AACR,aAAK,OAAL,CAAa,OAAb,CACE,cAAA,WAAW;;;OADb;AAMD;AAEM,yBAAqB,QAArB,EAA8C;AACnD,aAAK,OAAL,CAAa,OAAb,CAAqB,KAAK,sBAAL,CAA4B,QAA5B,CAArB;AACD;AAEM,gCAA4B,eAA5B,EAAmE;AACxE,aAAK,OAAL,CAAa,OAAb,CAAqB,KAAK,sBAAL,CAA4B,eAA5B,CAArB;AACD;AAEM,4BAAwB,SAAxB,EAA4C;AACjD,cAAM,EACJ,aADI,EAEJ,aAFI,EAGJ,YAHI,KAIF,SAJJ;AAMA,aAAK,cAAL,CAAoB,aAApB;AAEA,aAAK,OAAL,CAAa,OAAb,CAAqB,cAAA,WAAW;;mBAEjB,aAAa,eAAe,aAAa;;KAFxD;AAQA,cAAM,WAAW,KAAK,0BAAL,CAAgC,YAAhC,CAAjB;AAEA,cAAM,UAAU,SAAS,CAAT,CAAhB;AACA,cAAM,aAAa,KAAK,uBAAL,CAA6B,OAA7B,CAAnB;AAEA,cAAM,oBAAoB,KAAK,iBAAL,CACxB,KAAK,eAAL,CAAqB,aAArB,EAAoC,UAApC,CADwB,CAA1B;AAIA,aAAK,OAAL,CAAa,OAAb,CAAqB,iBAArB;AACA,aAAK,aAAL;AACD;AAEM,2BAAuB,QAAvB,EAAyC;AAC9C,cAAM,EACJ,YADI,EAEJ,YAFI,KAGF,QAHJ;AAKA,aAAK,cAAL,CAAoB,YAApB;AAEA,aAAK,OAAL,CAAa,OAAb,CAAqB,cAAA,WAAW;;6BAEP,YAAY;;KAFrC;AAMA,cAAM,WAAW,KAAK,0BAAL,CAAgC,YAAhC,CAAjB;AAEA,YAAI,SAAS,MAAT,KAAoB,CAAxB,EAA2B;AACzB,kBAAM,aAAa,KAAK,uBAAL,CAA6B,SAAS,CAAT,CAA7B,CAAnB;AAEA,kBAAM,OAAO,KAAK,wBAAL,CAA8B,KAAK,UAAnC,EAA+C,EAA/C,CAAkD,IAA/D;AACA,kBAAM,oBAAoB,KAAK,iBAAL,CACxB,KAAK,eAAL,CACE,IADF,EAEE,UAFF,CADwB,CAA1B;AAOA,iBAAK,OAAL,CAAa,OAAb,CAAqB,iBAArB;AACD,SAZD;AAYO;AACL,kBAAM,eAAuC,EAA7C;AACA,qBAAS,OAAT,CAAiB,WAAU;AACzB,qBAAK,cAAL,CAAoB,QAAQ,aAAR,CAAsB,CAAtB,EAAyB,QAAzB,EAApB;AACA,sBAAM,aAAa,KAAK,uBAAL,CAA6B,OAA7B,CAAnB;AAEA,sBAAM,OAAO,KAAK,wBAAL,CAA8B,KAAK,UAAnC,EAA+C,EAA/C,CAAkD,IAA/D;AACA,sBAAM,oBAAoB,KAAK,iBAAL,CACxB,KAAK,eAAL,CACE,IADF,EAEE,UAFF,CADwB,CAA1B;AAOA,qBAAK,OAAL,CAAa,OAAb,CAAqB,iBAArB;AAEA,6BAAa,IAAb,CAAkB,KAAK,wBAAL,CAA8B,KAAK,UAAnC,CAAlB;AAEA,qBAAK,aAAL;AACD,aAjBD;AAmBA,iBAAK,OAAL,CAAa,OAAb,CACE,KAAK,iBAAL,CACE,KAAK,qBAAL,CACE,KAAK,wBAAL,CAA8B,KAAK,UAAnC,EAA+C,EAA/C,CAAkD,IADpD,EAEE,YAFF,CADF,CADF;AAQD;AAED,aAAK,aAAL;AACD;AAEO,+BAA2B,YAA3B,EAAqD;AAC3D,eAAO,KAAK,2BAAL,CAAiC,YAAjC,EAA+C,kBAAtD;AACD;AAEO,gCAA4B,YAA5B,EAAsD;AAC5D,eAAO,WAAA,uBAAA,CACL,YADK,EAEL,KAAK,OAAL,CAAa,OAAb,CAAqB,gCAFhB,CAAP;AAID;AAEO,4BAAwB,OAAxB,EAAwC;AAC9C,cAAM,SAAS,wBAAA,qBAAA,CACb,OADa,EAEb,KAAK,OAAL,CAAa,OAAb,CAAqB,gCAFR,CAAf;AAKA,eAAO,OAAO,GAAP,CAAW,SAAQ;AACxB,kBAAM,YAAY,MAAM,KAAN,KAAgB,SAAhB,GAA4B,MAAM,KAAlC,GAA0C,MAAM,IAAlE;AACA,iBAAK,cAAL,CAAoB,SAApB;AAEA,gBAAI,GAAJ;AACA,gBAAI,MAAM,YAAV,EAAwB;AACtB,sBAAM,oBAAoB,KAAK,wBAAL,CAA8B,KAAK,UAAnC,CAA1B;AACA,oBAAI,MAAM,IAAN,YAAsB,UAAA,cAA1B,EAA0C;AACxC,sCAAkB,EAAlB,CAAqB,IAArB,GAA4B,kBAAkB,EAAlB,CAAqB,IAAjD;AACD,iBAFD;AAEO;AACL,sCAAkB,EAAlB,CAAqB,IAArB,GAA4B,MAAM,kBAAkB,EAAlB,CAAqB,IAAvD;AACD;AAED,sBAAM,KAAK,4BAAL,CACJ,iBADI,EAEJ,KAFI,CAAN;AAID,aAZD;AAYO;AACL,sBAAM,KAAK,gBAAL,CACJ,KADI,EAEJ,OAFI,CAAN;AAID;AAED,iBAAK,aAAL;AACA,mBAAO,GAAP;AACD,SA1BM,CAAP;AA2BD;AAEO,iCAA6B,iBAA7B,EAAyE,KAAzE,EAAqF;AAC3F,cAAM,EAAE,YAAF,KAAmB,KAAzB;AAEA,cAAM,WAAW,KAAK,2BAAL,CAAiC,YAAjC,CAAjB;AACA,cAAM,WAAW,SAAS,kBAA1B;AAEA,YAAI,iBAAJ;AACA,YAAI,SAAS,MAAT,KAAoB,CAAxB,EAA2B;AACzB,kBAAM,UAAU,SAAS,CAAT,CAAhB;AACA,kBAAM,aAAa,KAAK,uBAAL,CAA6B,OAA7B,CAAnB;AACA,gCAAoB,KAAK,iBAAL,CAClB,KAAK,eAAL,CACE,KAAK,wBAAL,CAA8B,KAAK,UAAnC,EAA+C,EAA/C,CAAkD,IADpD,EAEE,UAFF,CADkB,CAApB;AAMD,SATD;AASO;AACL,kBAAM,eAAe,SAAS,GAAT,CAAa,WAAU;AAC1C,qBAAK,cAAL,CAAoB,QAAQ,aAAR,CAAsB,CAAtB,EAAyB,QAAzB,EAApB;AACA,sBAAM,aAAa,KAAK,uBAAL,CAA6B,OAA7B,CAAnB;AACA,qBAAK,aAAL;AACA,uBAAO,UAAP;AACD,aALoB,CAArB;AAOA,gCAAoB,KAAK,iBAAL,CAClB,KAAK,oBAAL,CACE,kBAAkB,EAAlB,CAAqB,IADvB,EAEE,YAFF,CADkB,CAApB;AAMD;AAED,aAAK,OAAL,CAAa,OAAb,CAAqB,iBAArB;AAEA,eAAO;AACL,kBAAM,MAAM,KAAN,GAAc,MAAM,KAApB,GAA4B,MAAM,IADnC;AAEL,yBAAa,MAAM,WAFd;AAGL,wBAAY,iBAHP,EAAP;;AAKD;AAEO,qBAAiB,KAAjB,EAA+B,OAA/B,EAA+C;AACrD,YAAI,GAAJ;AACA,YAAI,MAAM,IAAN,KAAe,YAAnB,EAAiC;AAC/B,kBAAM,cAAc,QAAQ,aAAR;AACjB,eADiB,CACb,QAAO;AACV,sBAAM,aAAa,EAAE,2BAAF,EAAnB;AACA,2BAAW,KAAX,GAAmB,KAAK,QAAL,EAAnB;AACA,uBAAO,UAAP;AACD,aALiB,CAApB;AAOA,kBAAM;AACJ,sBAAM,MAAM,KAAN,GAAc,MAAM,KAApB,GAA4B,MAAM,IADpC;AAEJ,6BAAa,MAAM,WAFf;AAGJ,4BAAY,EAAE,mBAAF,CAAsB,WAAtB,CAHR,EAAN;;AAKD,SAbD;AAaO;AAEL,kBAAM;AACJ,sBAAM,MAAM,KAAN,GAAc,MAAM,KAApB,GAA4B,MAAM,IADpC;AAEJ,6BAAa,MAAM,WAFf;AAGJ,4BAAY,KAAK,6BAAL,CAAmC,MAAM,IAAzC,CAHR,EAAN;;AAKD;AAED,eAAO,GAAP;AACD;AAED,QAAW,MAAX,GAAiB;AACf,eAAO,KAAK,OAAL,CAAa,KAAb,EAAP;AACD;AAED,mBAAe,IAAf,EAA2B;AACzB,aAAK,UAAL,CAAgB,IAAhB,CAAqB,IAArB;AACD;AAED,oBAAa;AACX,cAAM,SAAS,KAAK,UAAL,CAAgB,GAAhB,EAAf;AACA,eAAO,MAAP;AACD,KAvPgD;;AAAnD,QAAA,gBAAA,GAAA,gBAAA","sourcesContent":["import * as t from '@babel/types';\nimport { stripIndent } from 'common-tags';\nimport {\n  GraphQLEnumType,\n  GraphQLInputObjectType,\n  GraphQLNonNull,\n} from 'graphql';\nimport * as path from 'path';\n\nimport {\n  CompilerContext,\n  Operation,\n  Fragment,\n  SelectionSet,\n  Field,\n} from '../compiler';\n\nimport {\n  typeCaseForSelectionSet,\n  Variant\n} from '../compiler/visitors/typeCase';\n\nimport {\n  collectAndMergeFields\n} from '../compiler/visitors/collectAndMergeFields';\n\nimport { BasicGeneratedFile } from '../utilities/CodeGenerator';\nimport FlowGenerator, { ObjectProperty, FlowCompilerOptions, } from './language';\nimport Printer from './printer';\n\nclass FlowGeneratedFile implements BasicGeneratedFile {\n  fileContents: string;\n\n  constructor(fileContents: string) {\n    this.fileContents = fileContents;\n  }\n  get output() {\n    return this.fileContents\n  }\n}\n\nfunction printEnumsAndInputObjects(generator: FlowAPIGenerator, context: CompilerContext) {\n  generator.printer.enqueue(stripIndent`\n    //==============================================================\n    // START Enums and Input Objects\n    // All enums and input objects are included in every output file\n    // for now, but this will be changed soon.\n    // TODO: Link to issue to fix this.\n    //==============================================================\n  `);\n\n  context.typesUsed\n    .filter(type => (type instanceof GraphQLEnumType))\n    .forEach((enumType) => {\n      generator.typeAliasForEnumType(enumType as GraphQLEnumType);\n    });\n\n  context.typesUsed\n    .filter(type => type instanceof GraphQLInputObjectType)\n    .forEach((inputObjectType) => {\n      generator.typeAliasForInputObjectType(inputObjectType as GraphQLInputObjectType);\n    });\n\n  generator.printer.enqueue(stripIndent`\n    //==============================================================\n    // END Enums and Input Objects\n    //==============================================================\n  `)\n}\n\nexport function generateSource(\n  context: CompilerContext,\n) {\n  const generator = new FlowAPIGenerator(context);\n  const generatedFiles: { [filePath: string]: FlowGeneratedFile } = {};\n\n  Object.values(context.operations)\n    .forEach((operation) => {\n      generator.fileHeader();\n      generator.typeAliasesForOperation(operation);\n      printEnumsAndInputObjects(generator, context);\n\n      const output = generator.printer.printAndClear();\n\n      const outputFilePath = path.join(\n        path.dirname(operation.filePath),\n        '__generated__',\n        `${operation.operationName}.js`\n      );\n\n      generatedFiles[outputFilePath] = new FlowGeneratedFile(output);\n    });\n\n  Object.values(context.fragments)\n    .forEach((fragment) => {\n      generator.fileHeader();\n      generator.typeAliasesForFragment(fragment);\n      printEnumsAndInputObjects(generator, context);\n\n      const output = generator.printer.printAndClear();\n\n      const outputFilePath = path.join(\n        path.dirname(fragment.filePath),\n        '__generated__',\n        `${fragment.fragmentName}.js`\n      );\n\n      generatedFiles[outputFilePath] = new FlowGeneratedFile(output);\n    });\n\n  return generatedFiles;\n}\n\nexport class FlowAPIGenerator extends FlowGenerator {\n  context: CompilerContext\n  printer: Printer\n  scopeStack: string[]\n\n  constructor(context: CompilerContext) {\n    super(context.options as FlowCompilerOptions);\n\n    this.context = context;\n    this.printer = new Printer();\n    this.scopeStack = [];\n  }\n\n  fileHeader() {\n    this.printer.enqueue(\n      stripIndent`\n        /* @flow */\n        // This file was automatically generated and should not be edited.\n      `\n    );\n  }\n\n  public typeAliasForEnumType(enumType: GraphQLEnumType) {\n    this.printer.enqueue(this.enumerationDeclaration(enumType));\n  }\n\n  public typeAliasForInputObjectType(inputObjectType: GraphQLInputObjectType) {\n    this.printer.enqueue(this.inputObjectDeclaration(inputObjectType));\n  }\n\n  public typeAliasesForOperation(operation: Operation) {\n    const {\n      operationType,\n      operationName,\n      selectionSet\n    } = operation;\n\n    this.scopeStackPush(operationName);\n\n    this.printer.enqueue(stripIndent`\n      // ====================================================\n      // GraphQL ${operationType} operation: ${operationName}\n      // ====================================================\n    `)\n\n    // The root operation only has one variant\n    // Do we need to get exhaustive variants anyway?\n    const variants = this.getVariantsForSelectionSet(selectionSet);\n\n    const variant = variants[0];\n    const properties = this.getPropertiesForVariant(variant);\n\n    const exportedTypeAlias = this.exportDeclaration(\n      this.typeAliasObject(operationName, properties)\n    );\n\n    this.printer.enqueue(exportedTypeAlias);\n    this.scopeStackPop();\n  }\n\n  public typeAliasesForFragment(fragment: Fragment) {\n    const {\n      fragmentName,\n      selectionSet\n    } = fragment;\n\n    this.scopeStackPush(fragmentName);\n\n    this.printer.enqueue(stripIndent`\n      // ====================================================\n      // GraphQL fragment: ${fragmentName}\n      // ====================================================\n    `);\n\n    const variants = this.getVariantsForSelectionSet(selectionSet);\n\n    if (variants.length === 1) {\n      const properties = this.getPropertiesForVariant(variants[0]);\n\n      const name = this.annotationFromScopeStack(this.scopeStack).id.name;\n      const exportedTypeAlias = this.exportDeclaration(\n        this.typeAliasObject(\n          name,\n          properties\n        )\n      );\n\n      this.printer.enqueue(exportedTypeAlias);\n    } else {\n      const unionMembers: t.FlowTypeAnnotation[] = [];\n      variants.forEach(variant => {\n        this.scopeStackPush(variant.possibleTypes[0].toString());\n        const properties = this.getPropertiesForVariant(variant);\n\n        const name = this.annotationFromScopeStack(this.scopeStack).id.name;\n        const exportedTypeAlias = this.exportDeclaration(\n          this.typeAliasObject(\n            name,\n            properties\n          )\n        );\n\n        this.printer.enqueue(exportedTypeAlias);\n\n        unionMembers.push(this.annotationFromScopeStack(this.scopeStack));\n\n        this.scopeStackPop();\n      });\n\n      this.printer.enqueue(\n        this.exportDeclaration(\n          this.typeAliasGenericUnion(\n            this.annotationFromScopeStack(this.scopeStack).id.name,\n            unionMembers\n          )\n        )\n      );\n    }\n\n    this.scopeStackPop();\n  }\n\n  private getVariantsForSelectionSet(selectionSet: SelectionSet) {\n    return this.getTypeCasesForSelectionSet(selectionSet).exhaustiveVariants;\n  }\n\n  private getTypeCasesForSelectionSet(selectionSet: SelectionSet) {\n    return typeCaseForSelectionSet(\n      selectionSet,\n      this.context.options.mergeInFieldsFromFragmentSpreads\n    );\n  }\n\n  private getPropertiesForVariant(variant: Variant): ObjectProperty[] {\n    const fields = collectAndMergeFields(\n      variant,\n      this.context.options.mergeInFieldsFromFragmentSpreads\n    );\n\n    return fields.map(field => {\n      const fieldName = field.alias !== undefined ? field.alias : field.name;\n      this.scopeStackPush(fieldName);\n\n      let res;\n      if (field.selectionSet) {\n        const genericAnnotation = this.annotationFromScopeStack(this.scopeStack);\n        if (field.type instanceof GraphQLNonNull) {\n          genericAnnotation.id.name = genericAnnotation.id.name;\n        } else {\n          genericAnnotation.id.name = '?' + genericAnnotation.id.name;\n        }\n\n        res = this.handleFieldSelectionSetValue(\n          genericAnnotation,\n          field\n        );\n      } else {\n        res = this.handleFieldValue(\n          field,\n          variant\n        );\n      }\n\n      this.scopeStackPop();\n      return res;\n    });\n  }\n\n  private handleFieldSelectionSetValue(genericAnnotation: t.GenericTypeAnnotation, field: Field) {\n    const { selectionSet } = field;\n\n    const typeCase = this.getTypeCasesForSelectionSet(selectionSet as SelectionSet);\n    const variants = typeCase.exhaustiveVariants;\n\n    let exportedTypeAlias;\n    if (variants.length === 1) {\n      const variant = variants[0];\n      const properties = this.getPropertiesForVariant(variant);\n      exportedTypeAlias = this.exportDeclaration(\n        this.typeAliasObject(\n          this.annotationFromScopeStack(this.scopeStack).id.name,\n          properties\n        )\n      );\n    } else {\n      const propertySets = variants.map(variant => {\n        this.scopeStackPush(variant.possibleTypes[0].toString())\n        const properties = this.getPropertiesForVariant(variant);\n        this.scopeStackPop();\n        return properties;\n      })\n\n      exportedTypeAlias = this.exportDeclaration(\n        this.typeAliasObjectUnion(\n          genericAnnotation.id.name,\n          propertySets\n        )\n      );\n    }\n\n    this.printer.enqueue(exportedTypeAlias);\n\n    return {\n      name: field.alias ? field.alias : field.name,\n      description: field.description,\n      annotation: genericAnnotation\n    };\n  }\n\n  private handleFieldValue(field: Field, variant: Variant) {\n    let res;\n    if (field.name === '__typename') {\n      const annotations = variant.possibleTypes\n        .map(type => {\n          const annotation = t.stringLiteralTypeAnnotation();\n          annotation.value = type.toString();\n          return annotation;\n        });\n\n      res = {\n        name: field.alias ? field.alias : field.name,\n        description: field.description,\n        annotation: t.unionTypeAnnotation(annotations)\n      };\n    } else {\n      // TODO: Double check that this works\n      res = {\n        name: field.alias ? field.alias : field.name,\n        description: field.description,\n        annotation: this.typeAnnotationFromGraphQLType(field.type)\n      };\n    }\n\n    return res;\n  }\n\n  public get output(): string {\n    return this.printer.print();\n  }\n\n  scopeStackPush(name: string) {\n    this.scopeStack.push(name);\n  }\n\n  scopeStackPop() {\n    const popped = this.scopeStack.pop()\n    return popped;\n  }\n\n}\n"],"sourceRoot":""}