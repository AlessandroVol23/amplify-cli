{"version":3,"sources":["conditionalFields.ts"],"names":[],"mappings":"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","sourcesContent":["import { SelectionSet, Field, BooleanCondition } from '../../../src/compiler';\nimport { collectAndMergeFields } from '../../../src/compiler/visitors/collectAndMergeFields';\nimport { typeCaseForSelectionSet } from '../../../src/compiler/visitors/typeCase';\n\nimport { compile } from '../../test-utils/helpers';\n\ndescribe('@skip/@include directives', () => {\n  it('should not mark a field as conditional when it has a no directives', () => {\n    const context = compile(`\n      query Hero {\n        hero {\n          name\n        }\n      }\n    `);\n\n    const selectionSet = (context.operations['Hero'].selectionSet.selections[0] as Field)\n      .selectionSet as SelectionSet;\n\n    expect(selectionSet).toMatchSelectionSet(['Human', 'Droid'], ['name']);\n    expect(collectAndMergeFields(selectionSet)[0].isConditional).toBeFalsy();\n  });\n\n  it('should mark a field as conditional when it has a @skip directive', () => {\n    const context = compile(`\n      query Hero($skipName: Boolean!) {\n        hero {\n          name @skip(if: $skipName)\n        }\n      }\n    `);\n\n    const selectionSet = (context.operations['Hero'].selectionSet.selections[0] as Field)\n      .selectionSet as SelectionSet;\n\n    expect(selectionSet).toMatchSelectionSet(['Human', 'Droid'], ['name']);\n    expect(collectAndMergeFields(selectionSet)[0].isConditional).toBeTruthy();\n\n    expect(selectionSet.selections[0]).toMatchObject({ variableName: 'skipName' });\n  });\n\n  it('should not mark a field as conditional when it has a @skip directive that is always false', () => {\n    const context = compile(`\n      query Hero {\n        hero {\n          name @skip(if: false)\n        }\n      }\n    `);\n\n    const selectionSet = (context.operations['Hero'].selectionSet.selections[0] as Field)\n      .selectionSet as SelectionSet;\n\n    expect(selectionSet).toMatchSelectionSet(['Human', 'Droid'], ['name']);\n    expect(collectAndMergeFields(selectionSet)[0].isConditional).toBeFalsy();\n  });\n\n  it('should not include a field when it has a @skip directive that is always true', () => {\n    const context = compile(`\n      query Hero {\n        hero {\n          name @skip(if: true)\n        }\n      }\n    `);\n\n    const selectionSet = (context.operations['Hero'].selectionSet.selections[0] as Field)\n      .selectionSet as SelectionSet;\n\n    expect(selectionSet).toMatchSelectionSet(['Human', 'Droid'], []);\n  });\n\n  it('should mark a field as conditional when it has a @include directive', () => {\n    const context = compile(`\n      query Hero($includeName: Boolean!) {\n        hero {\n          name @include(if: $includeName)\n        }\n      }\n    `);\n\n    const selectionSet = (context.operations['Hero'].selectionSet.selections[0] as Field)\n      .selectionSet as SelectionSet;\n\n    expect(selectionSet).toMatchSelectionSet(['Human', 'Droid'], ['name']);\n    expect(collectAndMergeFields(selectionSet)[0].isConditional).toBeTruthy();\n\n    expect(selectionSet.selections[0]).toMatchObject({ variableName: 'includeName' });\n  });\n\n  it('should not mark a field as conditional when it has a @include directive that is always true', () => {\n    const context = compile(`\n      query Hero {\n        hero {\n          name @include(if: true)\n        }\n      }\n    `);\n\n    const selectionSet = (context.operations['Hero'].selectionSet.selections[0] as Field)\n      .selectionSet as SelectionSet;\n\n    expect(selectionSet).toMatchSelectionSet(['Human', 'Droid'], ['name']);\n    expect(collectAndMergeFields(selectionSet)[0].isConditional).toBeFalsy();\n  });\n\n  it('should not include a field when it has a @include directive that is always false', () => {\n    const context = compile(`\n      query Hero {\n        hero {\n          name @include(if: false)\n        }\n      }\n    `);\n\n    const selectionSet = (context.operations['Hero'].selectionSet.selections[0] as Field)\n      .selectionSet as SelectionSet;\n\n    expect(selectionSet).toMatchSelectionSet(['Human', 'Droid'], []);\n  });\n\n  it('should mark a field as conditional when it has both a @skip and an @include directive', () => {\n    const context = compile(`\n      query Hero($skipName: Boolean!, $includeName: Boolean!) {\n        hero {\n          name @skip(if: $skipName) @include(if: $includeName)\n        }\n      }\n    `);\n\n    const selectionSet = (context.operations['Hero'].selectionSet.selections[0] as Field)\n      .selectionSet as SelectionSet;\n\n    expect(selectionSet).toMatchSelectionSet(['Human', 'Droid'], ['name']);\n    expect(collectAndMergeFields(selectionSet)[0].isConditional).toBeTruthy();\n\n    expect(selectionSet.selections[0]).toMatchObject({ variableName: 'includeName' });\n    expect((selectionSet.selections[0] as BooleanCondition).selectionSet.selections[0]).toMatchObject({\n      variableName: 'skipName'\n    });\n  });\n\n  it('should mark a field as conditional when it is included twice, once with a @skip and once with an @include directive', () => {\n    const context = compile(`\n      query Hero($skipName: Boolean!, $includeName: Boolean!) {\n        hero {\n          name @skip(if: $skipName)\n          name @include(if: $includeName)\n        }\n      }\n    `);\n\n    const selectionSet = (context.operations['Hero'].selectionSet.selections[0] as Field)\n      .selectionSet as SelectionSet;\n\n    expect(selectionSet).toMatchSelectionSet(['Human', 'Droid'], ['name']);\n    expect(collectAndMergeFields(selectionSet)[0].isConditional).toBeTruthy();\n\n    expect(selectionSet.selections[0]).toMatchObject({ variableName: 'skipName' });\n    expect(selectionSet.selections[1]).toMatchObject({ variableName: 'includeName' });\n  });\n\n  it('should not include a field when when it has both a @skip directive and an @include directive that is always false', () => {\n    const context = compile(`\n      query Hero($skipName: Boolean!) {\n        hero {\n          name @skip(if: $skipName) @include(if: false)\n        }\n      }\n    `);\n\n    const selectionSet = (context.operations['Hero'].selectionSet.selections[0] as Field)\n      .selectionSet as SelectionSet;\n\n    expect(selectionSet).toMatchSelectionSet(['Human', 'Droid'], []);\n  });\n\n  it('should not mark a field as conditional when it is included twice, once with and once without an @include directive', () => {\n    const context = compile(`\n      query Hero($includeName: Boolean!) {\n        hero {\n          name\n          name @include(if: $includeName)\n        }\n      }\n    `);\n\n    const selectionSet = (context.operations['Hero'].selectionSet.selections[0] as Field)\n      .selectionSet as SelectionSet;\n\n    expect(selectionSet).toMatchSelectionSet(['Human', 'Droid'], ['name']);\n    expect(collectAndMergeFields(selectionSet)[0].isConditional).toBeFalsy();\n  });\n\n  it('should not mark a field as conditional when it is included twice, once with an @include directive that is always false and once without', () => {\n    const context = compile(`\n      query Hero {\n        hero {\n          name\n          name @include(if: false)\n        }\n      }\n    `);\n\n    const selectionSet = (context.operations['Hero'].selectionSet.selections[0] as Field)\n      .selectionSet as SelectionSet;\n\n    expect(selectionSet).toMatchSelectionSet(['Human', 'Droid'], ['name']);\n    expect(collectAndMergeFields(selectionSet)[0].isConditional).toBeFalsy();\n  });\n\n  it('should not mark a field as conditional in a variant when it is included without a directive in an inline fragment', () => {\n    const context = compile(`\n      query Hero($skipName: Boolean!) {\n        hero {\n          name @skip(if: $skipName)\n          ... on Droid {\n            name\n          }\n        }\n      }\n    `);\n\n    const selectionSet = (context.operations['Hero'].selectionSet.selections[0] as Field)\n      .selectionSet as SelectionSet;\n    const typeCase = typeCaseForSelectionSet(selectionSet);\n\n    expect(typeCase.default).toMatchSelectionSet(['Human', 'Droid'], ['name']);\n    expect(collectAndMergeFields(typeCase.default)[0].isConditional).toBeTruthy();\n\n    expect(typeCase.variants).toHaveLength(1);\n    expect(typeCase.variants).toContainSelectionSetMatching(['Droid'], ['name']);\n    expect(collectAndMergeFields(typeCase.variants[0])[0].isConditional).toBeFalsy();\n  });\n\n  it('should not mark a field as conditional in a variant when it is included without a directive in the default case', () => {\n    const context = compile(`\n      query Hero($skipName: Boolean!) {\n        hero {\n          name\n          ... on Droid {\n            name @skip(if: $skipName)\n          }\n        }\n      }\n    `);\n\n    const selectionSet = (context.operations['Hero'].selectionSet.selections[0] as Field)\n      .selectionSet as SelectionSet;\n    const typeCase = typeCaseForSelectionSet(selectionSet);\n\n    expect(typeCase.default).toMatchSelectionSet(['Human', 'Droid'], ['name']);\n    expect(collectAndMergeFields(typeCase.default)[0].isConditional).toBeFalsy();\n\n    expect(typeCase.variants).toHaveLength(1);\n    expect(typeCase.variants).toContainSelectionSetMatching(['Droid'], ['name']);\n    expect(collectAndMergeFields(typeCase.variants[0])[0].isConditional).toBeFalsy();\n  });\n\n  it('should not mark a field as conditional when the parent selection set is included conditionally', () => {\n    const context = compile(`\n      query Hero($includeFriends: Boolean!) {\n        hero {\n          friends @include(if: $includeFriends) {\n            name\n          }\n        }\n      }\n    `);\n\n    const heroField = context.operations['Hero'].selectionSet.selections[0];\n    const friendsField = collectAndMergeFields(heroField.selectionSet as SelectionSet)[0];\n\n    expect(friendsField.isConditional).toBeTruthy();\n    expect(friendsField.selectionSet as SelectionSet).toMatchSelectionSet(['Human', 'Droid'], ['name']);\n    expect(collectAndMergeFields(friendsField.selectionSet as SelectionSet)[0].isConditional).toBeFalsy();\n  });\n\n  it('should mark a field as conditional when the parent selection set is first included conditionally and then the parent field is also included unconditionally', () => {\n    const context = compile(`\n      query Hero($includeFriends: Boolean!) {\n        hero {\n          friends @include(if: $includeFriends) {\n            name\n          }\n          friends {\n            id\n          }\n        }\n      }\n    `);\n\n    const heroField = context.operations['Hero'].selectionSet.selections[0];\n    const friendsField = collectAndMergeFields(heroField.selectionSet as SelectionSet)[0];\n\n    expect(friendsField.isConditional).toBeFalsy();\n    expect(friendsField.selectionSet).toMatchSelectionSet(['Human', 'Droid'], ['name', 'id']);\n    expect(collectAndMergeFields(friendsField.selectionSet as SelectionSet)[0].isConditional).toBeTruthy();\n    expect(collectAndMergeFields(friendsField.selectionSet as SelectionSet)[1].isConditional).toBeFalsy();\n  });\n\n  it('should mark a field as conditional when the parent selection set is first included unconditionally and then the parent field is also included conditionally', () => {\n    const context = compile(`\n      query Hero($includeFriends: Boolean!) {\n        hero {\n          friends {\n            id\n          }\n          friends @include(if: $includeFriends) {\n            name\n          }\n        }\n      }\n    `);\n\n    const heroField = context.operations['Hero'].selectionSet.selections[0];\n    const friendsField = collectAndMergeFields(heroField.selectionSet as SelectionSet)[0];\n\n    expect(friendsField.isConditional).toBeFalsy();\n    expect(friendsField.selectionSet).toMatchSelectionSet(['Human', 'Droid'], ['id', 'name']);\n    expect(collectAndMergeFields(friendsField.selectionSet as SelectionSet)[0].isConditional).toBeFalsy();\n    expect(collectAndMergeFields(friendsField.selectionSet as SelectionSet)[1].isConditional).toBeTruthy();\n  });\n});\n"],"sourceRoot":""}