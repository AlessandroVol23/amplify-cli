94a7e1ddd616111937e6711de57b3a53
'use strict';require('ts-jest').install("/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-types-generator/test/compiler/visitors/conditionalFields.ts", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst collectAndMergeFields_1 = require(\"../../../src/compiler/visitors/collectAndMergeFields\");\nconst typeCase_1 = require(\"../../../src/compiler/visitors/typeCase\");\nconst helpers_1 = require(\"../../test-utils/helpers\");\ndescribe('@skip/@include directives', () => {\n    it('should not mark a field as conditional when it has a no directives', () => {\n        const context = helpers_1.compile(`\n      query Hero {\n        hero {\n          name\n        }\n      }\n    `);\n        const selectionSet = context.operations['Hero'].selectionSet.selections[0]\n            .selectionSet;\n        expect(selectionSet).toMatchSelectionSet(['Human', 'Droid'], ['name']);\n        expect(collectAndMergeFields_1.collectAndMergeFields(selectionSet)[0].isConditional).toBeFalsy();\n    });\n    it('should mark a field as conditional when it has a @skip directive', () => {\n        const context = helpers_1.compile(`\n      query Hero($skipName: Boolean!) {\n        hero {\n          name @skip(if: $skipName)\n        }\n      }\n    `);\n        const selectionSet = context.operations['Hero'].selectionSet.selections[0]\n            .selectionSet;\n        expect(selectionSet).toMatchSelectionSet(['Human', 'Droid'], ['name']);\n        expect(collectAndMergeFields_1.collectAndMergeFields(selectionSet)[0].isConditional).toBeTruthy();\n        expect(selectionSet.selections[0]).toMatchObject({ variableName: 'skipName' });\n    });\n    it('should not mark a field as conditional when it has a @skip directive that is always false', () => {\n        const context = helpers_1.compile(`\n      query Hero {\n        hero {\n          name @skip(if: false)\n        }\n      }\n    `);\n        const selectionSet = context.operations['Hero'].selectionSet.selections[0]\n            .selectionSet;\n        expect(selectionSet).toMatchSelectionSet(['Human', 'Droid'], ['name']);\n        expect(collectAndMergeFields_1.collectAndMergeFields(selectionSet)[0].isConditional).toBeFalsy();\n    });\n    it('should not include a field when it has a @skip directive that is always true', () => {\n        const context = helpers_1.compile(`\n      query Hero {\n        hero {\n          name @skip(if: true)\n        }\n      }\n    `);\n        const selectionSet = context.operations['Hero'].selectionSet.selections[0]\n            .selectionSet;\n        expect(selectionSet).toMatchSelectionSet(['Human', 'Droid'], []);\n    });\n    it('should mark a field as conditional when it has a @include directive', () => {\n        const context = helpers_1.compile(`\n      query Hero($includeName: Boolean!) {\n        hero {\n          name @include(if: $includeName)\n        }\n      }\n    `);\n        const selectionSet = context.operations['Hero'].selectionSet.selections[0]\n            .selectionSet;\n        expect(selectionSet).toMatchSelectionSet(['Human', 'Droid'], ['name']);\n        expect(collectAndMergeFields_1.collectAndMergeFields(selectionSet)[0].isConditional).toBeTruthy();\n        expect(selectionSet.selections[0]).toMatchObject({ variableName: 'includeName' });\n    });\n    it('should not mark a field as conditional when it has a @include directive that is always true', () => {\n        const context = helpers_1.compile(`\n      query Hero {\n        hero {\n          name @include(if: true)\n        }\n      }\n    `);\n        const selectionSet = context.operations['Hero'].selectionSet.selections[0]\n            .selectionSet;\n        expect(selectionSet).toMatchSelectionSet(['Human', 'Droid'], ['name']);\n        expect(collectAndMergeFields_1.collectAndMergeFields(selectionSet)[0].isConditional).toBeFalsy();\n    });\n    it('should not include a field when it has a @include directive that is always false', () => {\n        const context = helpers_1.compile(`\n      query Hero {\n        hero {\n          name @include(if: false)\n        }\n      }\n    `);\n        const selectionSet = context.operations['Hero'].selectionSet.selections[0]\n            .selectionSet;\n        expect(selectionSet).toMatchSelectionSet(['Human', 'Droid'], []);\n    });\n    it('should mark a field as conditional when it has both a @skip and an @include directive', () => {\n        const context = helpers_1.compile(`\n      query Hero($skipName: Boolean!, $includeName: Boolean!) {\n        hero {\n          name @skip(if: $skipName) @include(if: $includeName)\n        }\n      }\n    `);\n        const selectionSet = context.operations['Hero'].selectionSet.selections[0]\n            .selectionSet;\n        expect(selectionSet).toMatchSelectionSet(['Human', 'Droid'], ['name']);\n        expect(collectAndMergeFields_1.collectAndMergeFields(selectionSet)[0].isConditional).toBeTruthy();\n        expect(selectionSet.selections[0]).toMatchObject({ variableName: 'includeName' });\n        expect(selectionSet.selections[0].selectionSet.selections[0]).toMatchObject({\n            variableName: 'skipName'\n        });\n    });\n    it('should mark a field as conditional when it is included twice, once with a @skip and once with an @include directive', () => {\n        const context = helpers_1.compile(`\n      query Hero($skipName: Boolean!, $includeName: Boolean!) {\n        hero {\n          name @skip(if: $skipName)\n          name @include(if: $includeName)\n        }\n      }\n    `);\n        const selectionSet = context.operations['Hero'].selectionSet.selections[0]\n            .selectionSet;\n        expect(selectionSet).toMatchSelectionSet(['Human', 'Droid'], ['name']);\n        expect(collectAndMergeFields_1.collectAndMergeFields(selectionSet)[0].isConditional).toBeTruthy();\n        expect(selectionSet.selections[0]).toMatchObject({ variableName: 'skipName' });\n        expect(selectionSet.selections[1]).toMatchObject({ variableName: 'includeName' });\n    });\n    it('should not include a field when when it has both a @skip directive and an @include directive that is always false', () => {\n        const context = helpers_1.compile(`\n      query Hero($skipName: Boolean!) {\n        hero {\n          name @skip(if: $skipName) @include(if: false)\n        }\n      }\n    `);\n        const selectionSet = context.operations['Hero'].selectionSet.selections[0]\n            .selectionSet;\n        expect(selectionSet).toMatchSelectionSet(['Human', 'Droid'], []);\n    });\n    it('should not mark a field as conditional when it is included twice, once with and once without an @include directive', () => {\n        const context = helpers_1.compile(`\n      query Hero($includeName: Boolean!) {\n        hero {\n          name\n          name @include(if: $includeName)\n        }\n      }\n    `);\n        const selectionSet = context.operations['Hero'].selectionSet.selections[0]\n            .selectionSet;\n        expect(selectionSet).toMatchSelectionSet(['Human', 'Droid'], ['name']);\n        expect(collectAndMergeFields_1.collectAndMergeFields(selectionSet)[0].isConditional).toBeFalsy();\n    });\n    it('should not mark a field as conditional when it is included twice, once with an @include directive that is always false and once without', () => {\n        const context = helpers_1.compile(`\n      query Hero {\n        hero {\n          name\n          name @include(if: false)\n        }\n      }\n    `);\n        const selectionSet = context.operations['Hero'].selectionSet.selections[0]\n            .selectionSet;\n        expect(selectionSet).toMatchSelectionSet(['Human', 'Droid'], ['name']);\n        expect(collectAndMergeFields_1.collectAndMergeFields(selectionSet)[0].isConditional).toBeFalsy();\n    });\n    it('should not mark a field as conditional in a variant when it is included without a directive in an inline fragment', () => {\n        const context = helpers_1.compile(`\n      query Hero($skipName: Boolean!) {\n        hero {\n          name @skip(if: $skipName)\n          ... on Droid {\n            name\n          }\n        }\n      }\n    `);\n        const selectionSet = context.operations['Hero'].selectionSet.selections[0]\n            .selectionSet;\n        const typeCase = typeCase_1.typeCaseForSelectionSet(selectionSet);\n        expect(typeCase.default).toMatchSelectionSet(['Human', 'Droid'], ['name']);\n        expect(collectAndMergeFields_1.collectAndMergeFields(typeCase.default)[0].isConditional).toBeTruthy();\n        expect(typeCase.variants).toHaveLength(1);\n        expect(typeCase.variants).toContainSelectionSetMatching(['Droid'], ['name']);\n        expect(collectAndMergeFields_1.collectAndMergeFields(typeCase.variants[0])[0].isConditional).toBeFalsy();\n    });\n    it('should not mark a field as conditional in a variant when it is included without a directive in the default case', () => {\n        const context = helpers_1.compile(`\n      query Hero($skipName: Boolean!) {\n        hero {\n          name\n          ... on Droid {\n            name @skip(if: $skipName)\n          }\n        }\n      }\n    `);\n        const selectionSet = context.operations['Hero'].selectionSet.selections[0]\n            .selectionSet;\n        const typeCase = typeCase_1.typeCaseForSelectionSet(selectionSet);\n        expect(typeCase.default).toMatchSelectionSet(['Human', 'Droid'], ['name']);\n        expect(collectAndMergeFields_1.collectAndMergeFields(typeCase.default)[0].isConditional).toBeFalsy();\n        expect(typeCase.variants).toHaveLength(1);\n        expect(typeCase.variants).toContainSelectionSetMatching(['Droid'], ['name']);\n        expect(collectAndMergeFields_1.collectAndMergeFields(typeCase.variants[0])[0].isConditional).toBeFalsy();\n    });\n    it('should not mark a field as conditional when the parent selection set is included conditionally', () => {\n        const context = helpers_1.compile(`\n      query Hero($includeFriends: Boolean!) {\n        hero {\n          friends @include(if: $includeFriends) {\n            name\n          }\n        }\n      }\n    `);\n        const heroField = context.operations['Hero'].selectionSet.selections[0];\n        const friendsField = collectAndMergeFields_1.collectAndMergeFields(heroField.selectionSet)[0];\n        expect(friendsField.isConditional).toBeTruthy();\n        expect(friendsField.selectionSet).toMatchSelectionSet(['Human', 'Droid'], ['name']);\n        expect(collectAndMergeFields_1.collectAndMergeFields(friendsField.selectionSet)[0].isConditional).toBeFalsy();\n    });\n    it('should mark a field as conditional when the parent selection set is first included conditionally and then the parent field is also included unconditionally', () => {\n        const context = helpers_1.compile(`\n      query Hero($includeFriends: Boolean!) {\n        hero {\n          friends @include(if: $includeFriends) {\n            name\n          }\n          friends {\n            id\n          }\n        }\n      }\n    `);\n        const heroField = context.operations['Hero'].selectionSet.selections[0];\n        const friendsField = collectAndMergeFields_1.collectAndMergeFields(heroField.selectionSet)[0];\n        expect(friendsField.isConditional).toBeFalsy();\n        expect(friendsField.selectionSet).toMatchSelectionSet(['Human', 'Droid'], ['name', 'id']);\n        expect(collectAndMergeFields_1.collectAndMergeFields(friendsField.selectionSet)[0].isConditional).toBeTruthy();\n        expect(collectAndMergeFields_1.collectAndMergeFields(friendsField.selectionSet)[1].isConditional).toBeFalsy();\n    });\n    it('should mark a field as conditional when the parent selection set is first included unconditionally and then the parent field is also included conditionally', () => {\n        const context = helpers_1.compile(`\n      query Hero($includeFriends: Boolean!) {\n        hero {\n          friends {\n            id\n          }\n          friends @include(if: $includeFriends) {\n            name\n          }\n        }\n      }\n    `);\n        const heroField = context.operations['Hero'].selectionSet.selections[0];\n        const friendsField = collectAndMergeFields_1.collectAndMergeFields(heroField.selectionSet)[0];\n        expect(friendsField.isConditional).toBeFalsy();\n        expect(friendsField.selectionSet).toMatchSelectionSet(['Human', 'Droid'], ['id', 'name']);\n        expect(collectAndMergeFields_1.collectAndMergeFields(friendsField.selectionSet)[0].isConditional).toBeFalsy();\n        expect(collectAndMergeFields_1.collectAndMergeFields(friendsField.selectionSet)[1].isConditional).toBeTruthy();\n    });\n});\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZGl0aW9uYWxGaWVsZHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjb25kaXRpb25hbEZpZWxkcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLGdHQUE2RjtBQUM3RixzRUFBa0Y7QUFFbEYsc0RBQW1EO0FBRW5ELFFBQVEsQ0FBQywyQkFBMkIsRUFBRSxHQUFHLEVBQUU7SUFDekMsRUFBRSxDQUFDLG9FQUFvRSxFQUFFLEdBQUcsRUFBRTtRQUM1RSxNQUFNLE9BQU8sR0FBRyxpQkFBTyxDQUFDOzs7Ozs7S0FNdkIsQ0FBQyxDQUFDO1FBRUgsTUFBTSxZQUFZLEdBQUksT0FBTyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBVzthQUNsRixZQUE0QixDQUFDO1FBRWhDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDdkUsTUFBTSxDQUFDLDZDQUFxQixDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQzNFLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLGtFQUFrRSxFQUFFLEdBQUcsRUFBRTtRQUMxRSxNQUFNLE9BQU8sR0FBRyxpQkFBTyxDQUFDOzs7Ozs7S0FNdkIsQ0FBQyxDQUFDO1FBRUgsTUFBTSxZQUFZLEdBQUksT0FBTyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBVzthQUNsRixZQUE0QixDQUFDO1FBRWhDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDdkUsTUFBTSxDQUFD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OztLQVd2QixDQUFDLENBQUM7UUFFSCxNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDeEUsTUFBTSxZQUFZLEdBQUcsNkNBQXFCLENBQUMsU0FBUyxDQUFDLFlBQTRCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUV0RixNQUFNLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQy9DLE1BQU0sQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUMxRixNQUFNLENBQUMsNkNBQXFCLENBQUMsWUFBWSxDQUFDLFlBQTRCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUN0RyxNQUFNLENBQUMsNkNBQXFCLENBQUMsWUFBWSxDQUFDLFlBQTRCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUN6RyxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2VsZWN0aW9uU2V0LCBGaWVsZCwgQm9vbGVhbkNvbmRpdGlvbiB9IGZyb20gJy4uLy4uLy4uL3NyYy9jb21waWxlcic7XG5pbXBvcnQgeyBjb2xsZWN0QW5kTWVyZ2VGaWVsZHMgfSBmcm9tICcuLi8uLi8uLi9zcmMvY29tcGlsZXIvdmlzaXRvcnMvY29sbGVjdEFuZE1lcmdlRmllbGRzJztcbmltcG9ydCB7IHR5cGVDYXNlRm9yU2VsZWN0aW9uU2V0IH0gZnJvbSAnLi4vLi4vLi4vc3JjL2NvbXBpbGVyL3Zpc2l0b3JzL3R5cGVDYXNlJztcblxuaW1wb3J0IHsgY29tcGlsZSB9IGZyb20gJy4uLy4uL3Rlc3QtdXRpbHMvaGVscGVycyc7XG5cbmRlc2NyaWJlKCdAc2tpcC9AaW5jbHVkZSBkaXJlY3RpdmVzJywgKCkgPT4ge1xuICBpdCgnc2hvdWxkIG5vdCBtYXJrIGEgZmllbGQgYXMgY29uZGl0aW9uYWwgd2hlbiBpdCBoYXMgYSBubyBkaXJlY3RpdmVzJywgKCkgPT4ge1xuICAgIGNvbnN0IGNvbnRleHQgPSBjb21waWxlKGBcbiAgICAgIHF1ZXJ5IEhlcm8ge1xuICAgICAgICBoZXJvIHtcbiAgICAgICAgICBuYW1lXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBgKTtcblxuICAgIGNvbnN0IHNlbGVjdGlvblNldCA9IChjb250ZXh0Lm9wZXJhdGlvbnNbJ0hlcm8nXS5zZWxlY3Rpb25TZXQuc2VsZWN0aW9uc1swXSBhcyBGaWVsZClcbiAgICAgIC5zZWxlY3Rpb25TZXQgYXMgU2VsZWN0aW9uU2V0O1xuXG4gICAgZXhwZWN0KHNlbGVjdGlvblNldCkudG9NYXRjaFNlbGVjdGlvblNldChbJ0h1bWFuJywgJ0Ryb2lkJ10sIFsnbmFtZSddKTtcbiAgICBleHBlY3QoY29sbGVjdEFuZE1lcmdlRmllbGRzKHNlbGVjdGlvblNldClbMF0uaXNDb25kaXRpb25hbCkudG9CZUZhbHN5KCk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgbWFyayBhIGZpZWxkIGFzIGNvbmRpdGlvbmFsIHdoZW4gaXQgaGFzIGEgQHNraXAgZGlyZWN0aXZlJywgKCkgPT4ge1xuICAgIGNvbnN0IGNvbnRleHQgPSBjb21waWxlKGBcbiAgICAgIHF1ZXJ5IEhlcm8oJHNraXBOYW1lOiBCb29sZWFuISkge1xuICAgICAgICBoZXJvIHtcbiAgICAgICAgICBuYW1lIEBza2lwKGlmOiAkc2tpcE5hbWUpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBgKTtcblxuICAgIGNvbnN0IHNlbGVjdGlvblNldCA9IChjb250ZXh0Lm9wZXJhdGlvbnNbJ0hlcm8nXS5zZWxlY3Rpb25TZXQuc2VsZWN0aW9uc1swXSBhcyBGaWVsZClcbiAgICAgIC5zZWxlY3Rpb25TZXQgYXMgU2VsZWN0aW9uU2V0O1xuXG4gICAgZXhwZWN0KHNlbGVjdGlvblNldCkudG9NYXRjaFNlbGVjdGlvblNldChbJ0h1bWFuJywgJ0Ryb2lkJ10sIFsnbmFtZSddKTtcbiAgICBleHBlY3QoY29sbGVjdEFuZE1lcmdlRmllbGRzKHNlbGVjdGlvblNldClbMF0uaXNDb25kaXRpb25hbCkudG9CZVRydXRoeSgpO1xuXG4gICAgZXhwZWN0KHNlbGVjdGlvblNldC5zZWxlY3Rpb25zWzBdKS50b01hdGNoT2JqZWN0KHsgdmFyaWFibGVOYW1lOiAnc2tpcE5hbWUnIH0pO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIG5vdCBtYXJrIGEgZmllbGQgYXMgY29uZGl0aW9uYWwgd2hlbiBpdCBoYXMgYSBAc2tpcCBkaXJlY3RpdmUgdGhhdCBpcyBhbHdheXMgZmFsc2UnLCAoKSA9PiB7XG4gICAgY29uc3QgY29udGV4dCA9IGNvbXBpbGUoYFxuICAgICAgcXVlcnkgSGVybyB7XG4gICAgICAgIGhlcm8ge1xuICAgICAgICAgIG5hbWUgQHNraXAoaWY6IGZhbHNlKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgYCk7XG5cbiAgICBjb25zdCBzZWxlY3Rpb25TZXQgPSAoY29udGV4dC5vcGVyYXRpb25zWydIZXJvJ10uc2VsZWN0aW9uU2V0LnNlbGVjdGlvbnNbMF0gYXMgRmllbGQpXG4gICAgICAuc2VsZWN0aW9uU2V0IGFzIFNlbGVjdGlvblNldDtcblxuICAgIGV4cGVjdChzZWxlY3Rpb25TZXQpLnRvTWF0Y2hTZWxlY3Rpb25TZXQoWydIdW1hbicsICdEcm9pZCddLCBbJ25hbWUnXSk7XG4gICAgZXhwZWN0KGNvbGxlY3RBbmRNZXJnZUZpZWxkcyhzZWxlY3Rpb25TZXQpWzBdLmlzQ29uZGl0aW9uYWwpLnRvQmVGYWxzeSgpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIG5vdCBpbmNsdWRlIGEgZmllbGQgd2hlbiBpdCBoYXMgYSBAc2tpcCBkaXJlY3RpdmUgdGhhdCBpcyBhbHdheXMgdHJ1ZScsICgpID0+IHtcbiAgICBjb25zdCBjb250ZXh0ID0gY29tcGlsZShgXG4gICAgICBxdWVyeSBIZXJvIHtcbiAgICAgICAgaGVybyB7XG4gICAgICAgICAgbmFtZSBAc2tpcChpZjogdHJ1ZSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIGApO1xuXG4gICAgY29uc3Qgc2VsZWN0aW9uU2V0ID0gKGNvbnRleHQub3BlcmF0aW9uc1snSGVybyddLnNlbGVjdGlvblNldC5zZWxlY3Rpb25zWzBdIGFzIEZpZWxkKVxuICAgICAgLnNlbGVjdGlvblNldCBhcyBTZWxlY3Rpb25TZXQ7XG5cbiAgICBleHBlY3Qoc2VsZWN0aW9uU2V0KS50b01hdGNoU2VsZWN0aW9uU2V0KFsnSHVtYW4nLCAnRHJvaWQnXSwgW10pO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIG1hcmsgYSBmaWVsZCBhcyBjb25kaXRpb25hbCB3aGVuIGl0IGhhcyBhIEBpbmNsdWRlIGRpcmVjdGl2ZScsICgpID0+IHtcbiAgICBjb25zdCBjb250ZXh0ID0gY29tcGlsZShgXG4gICAgICBxdWVyeSBIZXJvKCRpbmNsdWRlTmFtZTogQm9vbGVhbiEpIHtcbiAgICAgICAgaGVybyB7XG4gICAgICAgICAgbmFtZSBAaW5jbHVkZShpZjogJGluY2x1ZGVOYW1lKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgYCk7XG5cbiAgICBjb25zdCBzZWxlY3Rpb25TZXQgPSAoY29udGV4dC5vcGVyYXRpb25zWydIZXJvJ10uc2VsZWN0aW9uU2V0LnNlbGVjdGlvbnNbMF0gYXMgRmllbGQpXG4gICAgICAuc2VsZWN0aW9uU2V0IGFzIFNlbGVjdGlvblNldDtcblxuICAgIGV4cGVjdChzZWxlY3Rpb25TZXQpLnRvTWF0Y2hTZWxlY3Rpb25TZXQoWydIdW1hbicsICdEcm9pZCddLCBbJ25hbWUnXSk7XG4gICAgZXhwZWN0KGNvbGxlY3RBbmRNZXJnZUZpZWxkcyhzZWxlY3Rpb25TZXQpWzBdLmlzQ29uZGl0aW9uYWwpLnRvQmVUcnV0aHkoKTtcblxuICAgIGV4cGVjdChzZWxlY3Rpb25TZXQuc2VsZWN0aW9uc1swXSkudG9NYXRjaE9iamVjdCh7IHZhcmlhYmxlTmFtZTogJ2luY2x1ZGVOYW1lJyB9KTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBub3QgbWFyayBhIGZpZWxkIGFzIGNvbmRpdGlvbmFsIHdoZW4gaXQgaGFzIGEgQGluY2x1ZGUgZGlyZWN0aXZlIHRoYXQgaXMgYWx3YXlzIHRydWUnLCAoKSA9PiB7XG4gICAgY29uc3QgY29udGV4dCA9IGNvbXBpbGUoYFxuICAgICAgcXVlcnkgSGVybyB7XG4gICAgICAgIGhlcm8ge1xuICAgICAgICAgIG5hbWUgQGluY2x1ZGUoaWY6IHRydWUpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBgKTtcblxuICAgIGNvbnN0IHNlbGVjdGlvblNldCA9IChjb250ZXh0Lm9wZXJhdGlvbnNbJ0hlcm8nXS5zZWxlY3Rpb25TZXQuc2VsZWN0aW9uc1swXSBhcyBGaWVsZClcbiAgICAgIC5zZWxlY3Rpb25TZXQgYXMgU2VsZWN0aW9uU2V0O1xuXG4gICAgZXhwZWN0KHNlbGVjdGlvblNldCkudG9NYXRjaFNlbGVjdGlvblNldChbJ0h1bWFuJywgJ0Ryb2lkJ10sIFsnbmFtZSddKTtcbiAgICBleHBlY3QoY29sbGVjdEFuZE1lcmdlRmllbGRzKHNlbGVjdGlvblNldClbMF0uaXNDb25kaXRpb25hbCkudG9CZUZhbHN5KCk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgbm90IGluY2x1ZGUgYSBmaWVsZCB3aGVuIGl0IGhhcyBhIEBpbmNsdWRlIGRpcmVjdGl2ZSB0aGF0IGlzIGFsd2F5cyBmYWxzZScsICgpID0+IHtcbiAgICBjb25zdCBjb250ZXh0ID0gY29tcGlsZShgXG4gICAgICBxdWVyeSBIZXJvIHtcbiAgICAgICAgaGVybyB7XG4gICAgICAgICAgbmFtZSBAaW5jbHVkZShpZjogZmFsc2UpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBgKTtcblxuICAgIGNvbnN0IHNlbGVjdGlvblNldCA9IChjb250ZXh0Lm9wZXJhdGlvbnNbJ0hlcm8nXS5zZWxlY3Rpb25TZXQuc2VsZWN0aW9uc1swXSBhcyBGaWVsZClcbiAgICAgIC5zZWxlY3Rpb25TZXQgYXMgU2VsZWN0aW9uU2V0O1xuXG4gICAgZXhwZWN0KHNlbGVjdGlvblNldCkudG9NYXRjaFNlbGVjdGlvblNldChbJ0h1bWFuJywgJ0Ryb2lkJ10sIFtdKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBtYXJrIGEgZmllbGQgYXMgY29uZGl0aW9uYWwgd2hlbiBpdCBoYXMgYm90aCBhIEBza2lwIGFuZCBhbiBAaW5jbHVkZSBkaXJlY3RpdmUnLCAoKSA9PiB7XG4gICAgY29uc3QgY29udGV4dCA9IGNvbXBpbGUoYFxuICAgICAgcXVlcnkgSGVybygkc2tpcE5hbWU6IEJvb2xlYW4hLCAkaW5jbHVkZU5hbWU6IEJvb2xlYW4hKSB7XG4gICAgICAgIGhlcm8ge1xuICAgICAgICAgIG5hbWUgQHNraXAoaWY6ICRza2lwTmFtZSkgQGluY2x1ZGUoaWY6ICRpbmNsdWRlTmFtZSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIGApO1xuXG4gICAgY29uc3Qgc2VsZWN0aW9uU2V0ID0gKGNvbnRleHQub3BlcmF0aW9uc1snSGVybyddLnNlbGVjdGlvblNldC5zZWxlY3Rpb25zWzBdIGFzIEZpZWxkKVxuICAgICAgLnNlbGVjdGlvblNldCBhcyBTZWxlY3Rpb25TZXQ7XG5cbiAgICBleHBlY3Qoc2VsZWN0aW9uU2V0KS50b01hdGNoU2VsZWN0aW9uU2V0KFsnSHVtYW4nLCAnRHJvaWQnXSwgWyduYW1lJ10pO1xuICAgIGV4cGVjdChjb2xsZWN0QW5kTWVyZ2VGaWVsZHMoc2VsZWN0aW9uU2V0KVswXS5pc0NvbmRpdGlvbmFsKS50b0JlVHJ1dGh5KCk7XG5cbiAgICBleHBlY3Qoc2VsZWN0aW9uU2V0LnNlbGVjdGlvbnNbMF0pLnRvTWF0Y2hPYmplY3QoeyB2YXJpYWJsZU5hbWU6ICdpbmNsdWRlTmFtZScgfSk7XG4gICAgZXhwZWN0KChzZWxlY3Rpb25TZXQuc2VsZWN0aW9uc1swXSBhcyBCb29sZWFuQ29uZGl0aW9uKS5zZWxlY3Rpb25TZXQuc2VsZWN0aW9uc1swXSkudG9NYXRjaE9iamVjdCh7XG4gICAgICB2YXJpYWJsZU5hbWU6ICdza2lwTmFtZSdcbiAgICB9KTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBtYXJrIGEgZmllbGQgYXMgY29uZGl0aW9uYWwgd2hlbiBpdCBpcyBpbmNsdWRlZCB0d2ljZSwgb25jZSB3aXRoIGEgQHNraXAgYW5kIG9uY2Ugd2l0aCBhbiBAaW5jbHVkZSBkaXJlY3RpdmUnLCAoKSA9PiB7XG4gICAgY29uc3QgY29udGV4dCA9IGNvbXBpbGUoYFxuICAgICAgcXVlcnkgSGVybygkc2tpcE5hbWU6IEJvb2xlYW4hLCAkaW5jbHVkZU5hbWU6IEJvb2xlYW4hKSB7XG4gICAgICAgIGhlcm8ge1xuICAgICAgICAgIG5hbWUgQHNraXAoaWY6ICRza2lwTmFtZSlcbiAgICAgICAgICBuYW1lIEBpbmNsdWRlKGlmOiAkaW5jbHVkZU5hbWUpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBgKTtcblxuICAgIGNvbnN0IHNlbGVjdGlvblNldCA9IChjb250ZXh0Lm9wZXJhdGlvbnNbJ0hlcm8nXS5zZWxlY3Rpb25TZXQuc2VsZWN0aW9uc1swXSBhcyBGaWVsZClcbiAgICAgIC5zZWxlY3Rpb25TZXQgYXMgU2VsZWN0aW9uU2V0O1xuXG4gICAgZXhwZWN0KHNlbGVjdGlvblNldCkudG9NYXRjaFNlbGVjdGlvblNldChbJ0h1bWFuJywgJ0Ryb2lkJ10sIFsnbmFtZSddKTtcbiAgICBleHBlY3QoY29sbGVjdEFuZE1lcmdlRmllbGRzKHNlbGVjdGlvblNldClbMF0uaXNDb25kaXRpb25hbCkudG9CZVRydXRoeSgpO1xuXG4gICAgZXhwZWN0KHNlbGVjdGlvblNldC5zZWxlY3Rpb25zWzBdKS50b01hdGNoT2JqZWN0KHsgdmFyaWFibGVOYW1lOiAnc2tpcE5hbWUnIH0pO1xuICAgIGV4cGVjdChzZWxlY3Rpb25TZXQuc2VsZWN0aW9uc1sxXSkudG9NYXRjaE9iamVjdCh7IHZhcmlhYmxlTmFtZTogJ2luY2x1ZGVOYW1lJyB9KTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBub3QgaW5jbHVkZSBhIGZpZWxkIHdoZW4gd2hlbiBpdCBoYXMgYm90aCBhIEBza2lwIGRpcmVjdGl2ZSBhbmQgYW4gQGluY2x1ZGUgZGlyZWN0aXZlIHRoYXQgaXMgYWx3YXlzIGZhbHNlJywgKCkgPT4ge1xuICAgIGNvbnN0IGNvbnRleHQgPSBjb21waWxlKGBcbiAgICAgIHF1ZXJ5IEhlcm8oJHNraXBOYW1lOiBCb29sZWFuISkge1xuICAgICAgICBoZXJvIHtcbiAgICAgICAgICBuYW1lIEBza2lwKGlmOiAkc2tpcE5hbWUpIEBpbmNsdWRlKGlmOiBmYWxzZSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIGApO1xuXG4gICAgY29uc3Qgc2VsZWN0aW9uU2V0ID0gKGNvbnRleHQub3BlcmF0aW9uc1snSGVybyddLnNlbGVjdGlvblNldC5zZWxlY3Rpb25zWzBdIGFzIEZpZWxkKVxuICAgICAgLnNlbGVjdGlvblNldCBhcyBTZWxlY3Rpb25TZXQ7XG5cbiAgICBleHBlY3Qoc2VsZWN0aW9uU2V0KS50b01hdGNoU2VsZWN0aW9uU2V0KFsnSHVtYW4nLCAnRHJvaWQnXSwgW10pO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIG5vdCBtYXJrIGEgZmllbGQgYXMgY29uZGl0aW9uYWwgd2hlbiBpdCBpcyBpbmNsdWRlZCB0d2ljZSwgb25jZSB3aXRoIGFuZCBvbmNlIHdpdGhvdXQgYW4gQGluY2x1ZGUgZGlyZWN0aXZlJywgKCkgPT4ge1xuICAgIGNvbnN0IGNvbnRleHQgPSBjb21waWxlKGBcbiAgICAgIHF1ZXJ5IEhlcm8oJGluY2x1ZGVOYW1lOiBCb29sZWFuISkge1xuICAgICAgICBoZXJvIHtcbiAgICAgICAgICBuYW1lXG4gICAgICAgICAgbmFtZSBAaW5jbHVkZShpZjogJGluY2x1ZGVOYW1lKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgYCk7XG5cbiAgICBjb25zdCBzZWxlY3Rpb25TZXQgPSAoY29udGV4dC5vcGVyYXRpb25zWydIZXJvJ10uc2VsZWN0aW9uU2V0LnNlbGVjdGlvbnNbMF0gYXMgRmllbGQpXG4gICAgICAuc2VsZWN0aW9uU2V0IGFzIFNlbGVjdGlvblNldDtcblxuICAgIGV4cGVjdChzZWxlY3Rpb25TZXQpLnRvTWF0Y2hTZWxlY3Rpb25TZXQoWydIdW1hbicsICdEcm9pZCddLCBbJ25hbWUnXSk7XG4gICAgZXhwZWN0KGNvbGxlY3RBbmRNZXJnZUZpZWxkcyhzZWxlY3Rpb25TZXQpWzBdLmlzQ29uZGl0aW9uYWwpLnRvQmVGYWxzeSgpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIG5vdCBtYXJrIGEgZmllbGQgYXMgY29uZGl0aW9uYWwgd2hlbiBpdCBpcyBpbmNsdWRlZCB0d2ljZSwgb25jZSB3aXRoIGFuIEBpbmNsdWRlIGRpcmVjdGl2ZSB0aGF0IGlzIGFsd2F5cyBmYWxzZSBhbmQgb25jZSB3aXRob3V0JywgKCkgPT4ge1xuICAgIGNvbnN0IGNvbnRleHQgPSBjb21waWxlKGBcbiAgICAgIHF1ZXJ5IEhlcm8ge1xuICAgICAgICBoZXJvIHtcbiAgICAgICAgICBuYW1lXG4gICAgICAgICAgbmFtZSBAaW5jbHVkZShpZjogZmFsc2UpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBgKTtcblxuICAgIGNvbnN0IHNlbGVjdGlvblNldCA9IChjb250ZXh0Lm9wZXJhdGlvbnNbJ0hlcm8nXS5zZWxlY3Rpb25TZXQuc2VsZWN0aW9uc1swXSBhcyBGaWVsZClcbiAgICAgIC5zZWxlY3Rpb25TZXQgYXMgU2VsZWN0aW9uU2V0O1xuXG4gICAgZXhwZWN0KHNlbGVjdGlvblNldCkudG9NYXRjaFNlbGVjdGlvblNldChbJ0h1bWFuJywgJ0Ryb2lkJ10sIFsnbmFtZSddKTtcbiAgICBleHBlY3QoY29sbGVjdEFuZE1lcmdlRmllbGRzKHNlbGVjdGlvblNldClbMF0uaXNDb25kaXRpb25hbCkudG9CZUZhbHN5KCk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgbm90IG1hcmsgYSBmaWVsZCBhcyBjb25kaXRpb25hbCBpbiBhIHZhcmlhbnQgd2hlbiBpdCBpcyBpbmNsdWRlZCB3aXRob3V0IGEgZGlyZWN0aXZlIGluIGFuIGlubGluZSBmcmFnbWVudCcsICgpID0+IHtcbiAgICBjb25zdCBjb250ZXh0ID0gY29tcGlsZShgXG4gICAgICBxdWVyeSBIZXJvKCRza2lwTmFtZTogQm9vbGVhbiEpIHtcbiAgICAgICAgaGVybyB7XG4gICAgICAgICAgbmFtZSBAc2tpcChpZjogJHNraXBOYW1lKVxuICAgICAgICAgIC4uLiBvbiBEcm9pZCB7XG4gICAgICAgICAgICBuYW1lXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgYCk7XG5cbiAgICBjb25zdCBzZWxlY3Rpb25TZXQgPSAoY29udGV4dC5vcGVyYXRpb25zWydIZXJvJ10uc2VsZWN0aW9uU2V0LnNlbGVjdGlvbnNbMF0gYXMgRmllbGQpXG4gICAgICAuc2VsZWN0aW9uU2V0IGFzIFNlbGVjdGlvblNldDtcbiAgICBjb25zdCB0eXBlQ2FzZSA9IHR5cGVDYXNlRm9yU2VsZWN0aW9uU2V0KHNlbGVjdGlvblNldCk7XG5cbiAgICBleHBlY3QodHlwZUNhc2UuZGVmYXVsdCkudG9NYXRjaFNlbGVjdGlvblNldChbJ0h1bWFuJywgJ0Ryb2lkJ10sIFsnbmFtZSddKTtcbiAgICBleHBlY3QoY29sbGVjdEFuZE1lcmdlRmllbGRzKHR5cGVDYXNlLmRlZmF1bHQpWzBdLmlzQ29uZGl0aW9uYWwpLnRvQmVUcnV0aHkoKTtcblxuICAgIGV4cGVjdCh0eXBlQ2FzZS52YXJpYW50cykudG9IYXZlTGVuZ3RoKDEpO1xuICAgIGV4cGVjdCh0eXBlQ2FzZS52YXJpYW50cykudG9Db250YWluU2VsZWN0aW9uU2V0TWF0Y2hpbmcoWydEcm9pZCddLCBbJ25hbWUnXSk7XG4gICAgZXhwZWN0KGNvbGxlY3RBbmRNZXJnZUZpZWxkcyh0eXBlQ2FzZS52YXJpYW50c1swXSlbMF0uaXNDb25kaXRpb25hbCkudG9CZUZhbHN5KCk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgbm90IG1hcmsgYSBmaWVsZCBhcyBjb25kaXRpb25hbCBpbiBhIHZhcmlhbnQgd2hlbiBpdCBpcyBpbmNsdWRlZCB3aXRob3V0IGEgZGlyZWN0aXZlIGluIHRoZSBkZWZhdWx0IGNhc2UnLCAoKSA9PiB7XG4gICAgY29uc3QgY29udGV4dCA9IGNvbXBpbGUoYFxuICAgICAgcXVlcnkgSGVybygkc2tpcE5hbWU6IEJvb2xlYW4hKSB7XG4gICAgICAgIGhlcm8ge1xuICAgICAgICAgIG5hbWVcbiAgICAgICAgICAuLi4gb24gRHJvaWQge1xuICAgICAgICAgICAgbmFtZSBAc2tpcChpZjogJHNraXBOYW1lKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIGApO1xuXG4gICAgY29uc3Qgc2VsZWN0aW9uU2V0ID0gKGNvbnRleHQub3BlcmF0aW9uc1snSGVybyddLnNlbGVjdGlvblNldC5zZWxlY3Rpb25zWzBdIGFzIEZpZWxkKVxuICAgICAgLnNlbGVjdGlvblNldCBhcyBTZWxlY3Rpb25TZXQ7XG4gICAgY29uc3QgdHlwZUNhc2UgPSB0eXBlQ2FzZUZvclNlbGVjdGlvblNldChzZWxlY3Rpb25TZXQpO1xuXG4gICAgZXhwZWN0KHR5cGVDYXNlLmRlZmF1bHQpLnRvTWF0Y2hTZWxlY3Rpb25TZXQoWydIdW1hbicsICdEcm9pZCddLCBbJ25hbWUnXSk7XG4gICAgZXhwZWN0KGNvbGxlY3RBbmRNZXJnZUZpZWxkcyh0eXBlQ2FzZS5kZWZhdWx0KVswXS5pc0NvbmRpdGlvbmFsKS50b0JlRmFsc3koKTtcblxuICAgIGV4cGVjdCh0eXBlQ2FzZS52YXJpYW50cykudG9IYXZlTGVuZ3RoKDEpO1xuICAgIGV4cGVjdCh0eXBlQ2FzZS52YXJpYW50cykudG9Db250YWluU2VsZWN0aW9uU2V0TWF0Y2hpbmcoWydEcm9pZCddLCBbJ25hbWUnXSk7XG4gICAgZXhwZWN0KGNvbGxlY3RBbmRNZXJnZUZpZWxkcyh0eXBlQ2FzZS52YXJpYW50c1swXSlbMF0uaXNDb25kaXRpb25hbCkudG9CZUZhbHN5KCk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgbm90IG1hcmsgYSBmaWVsZCBhcyBjb25kaXRpb25hbCB3aGVuIHRoZSBwYXJlbnQgc2VsZWN0aW9uIHNldCBpcyBpbmNsdWRlZCBjb25kaXRpb25hbGx5JywgKCkgPT4ge1xuICAgIGNvbnN0IGNvbnRleHQgPSBjb21waWxlKGBcbiAgICAgIHF1ZXJ5IEhlcm8oJGluY2x1ZGVGcmllbmRzOiBCb29sZWFuISkge1xuICAgICAgICBoZXJvIHtcbiAgICAgICAgICBmcmllbmRzIEBpbmNsdWRlKGlmOiAkaW5jbHVkZUZyaWVuZHMpIHtcbiAgICAgICAgICAgIG5hbWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBgKTtcblxuICAgIGNvbnN0IGhlcm9GaWVsZCA9IGNvbnRleHQub3BlcmF0aW9uc1snSGVybyddLnNlbGVjdGlvblNldC5zZWxlY3Rpb25zWzBdO1xuICAgIGNvbnN0IGZyaWVuZHNGaWVsZCA9IGNvbGxlY3RBbmRNZXJnZUZpZWxkcyhoZXJvRmllbGQuc2VsZWN0aW9uU2V0IGFzIFNlbGVjdGlvblNldClbMF07XG5cbiAgICBleHBlY3QoZnJpZW5kc0ZpZWxkLmlzQ29uZGl0aW9uYWwpLnRvQmVUcnV0aHkoKTtcbiAgICBleHBlY3QoZnJpZW5kc0ZpZWxkLnNlbGVjdGlvblNldCBhcyBTZWxlY3Rpb25TZXQpLnRvTWF0Y2hTZWxlY3Rpb25TZXQoWydIdW1hbicsICdEcm9pZCddLCBbJ25hbWUnXSk7XG4gICAgZXhwZWN0KGNvbGxlY3RBbmRNZXJnZUZpZWxkcyhmcmllbmRzRmllbGQuc2VsZWN0aW9uU2V0IGFzIFNlbGVjdGlvblNldClbMF0uaXNDb25kaXRpb25hbCkudG9CZUZhbHN5KCk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgbWFyayBhIGZpZWxkIGFzIGNvbmRpdGlvbmFsIHdoZW4gdGhlIHBhcmVudCBzZWxlY3Rpb24gc2V0IGlzIGZpcnN0IGluY2x1ZGVkIGNvbmRpdGlvbmFsbHkgYW5kIHRoZW4gdGhlIHBhcmVudCBmaWVsZCBpcyBhbHNvIGluY2x1ZGVkIHVuY29uZGl0aW9uYWxseScsICgpID0+IHtcbiAgICBjb25zdCBjb250ZXh0ID0gY29tcGlsZShgXG4gICAgICBxdWVyeSBIZXJvKCRpbmNsdWRlRnJpZW5kczogQm9vbGVhbiEpIHtcbiAgICAgICAgaGVybyB7XG4gICAgICAgICAgZnJpZW5kcyBAaW5jbHVkZShpZjogJGluY2x1ZGVGcmllbmRzKSB7XG4gICAgICAgICAgICBuYW1lXG4gICAgICAgICAgfVxuICAgICAgICAgIGZyaWVuZHMge1xuICAgICAgICAgICAgaWRcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBgKTtcblxuICAgIGNvbnN0IGhlcm9GaWVsZCA9IGNvbnRleHQub3BlcmF0aW9uc1snSGVybyddLnNlbGVjdGlvblNldC5zZWxlY3Rpb25zWzBdO1xuICAgIGNvbnN0IGZyaWVuZHNGaWVsZCA9IGNvbGxlY3RBbmRNZXJnZUZpZWxkcyhoZXJvRmllbGQuc2VsZWN0aW9uU2V0IGFzIFNlbGVjdGlvblNldClbMF07XG5cbiAgICBleHBlY3QoZnJpZW5kc0ZpZWxkLmlzQ29uZGl0aW9uYWwpLnRvQmVGYWxzeSgpO1xuICAgIGV4cGVjdChmcmllbmRzRmllbGQuc2VsZWN0aW9uU2V0KS50b01hdGNoU2VsZWN0aW9uU2V0KFsnSHVtYW4nLCAnRHJvaWQnXSwgWyduYW1lJywgJ2lkJ10pO1xuICAgIGV4cGVjdChjb2xsZWN0QW5kTWVyZ2VGaWVsZHMoZnJpZW5kc0ZpZWxkLnNlbGVjdGlvblNldCBhcyBTZWxlY3Rpb25TZXQpWzBdLmlzQ29uZGl0aW9uYWwpLnRvQmVUcnV0aHkoKTtcbiAgICBleHBlY3QoY29sbGVjdEFuZE1lcmdlRmllbGRzKGZyaWVuZHNGaWVsZC5zZWxlY3Rpb25TZXQgYXMgU2VsZWN0aW9uU2V0KVsxXS5pc0NvbmRpdGlvbmFsKS50b0JlRmFsc3koKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBtYXJrIGEgZmllbGQgYXMgY29uZGl0aW9uYWwgd2hlbiB0aGUgcGFyZW50IHNlbGVjdGlvbiBzZXQgaXMgZmlyc3QgaW5jbHVkZWQgdW5jb25kaXRpb25hbGx5IGFuZCB0aGVuIHRoZSBwYXJlbnQgZmllbGQgaXMgYWxzbyBpbmNsdWRlZCBjb25kaXRpb25hbGx5JywgKCkgPT4ge1xuICAgIGNvbnN0IGNvbnRleHQgPSBjb21waWxlKGBcbiAgICAgIHF1ZXJ5IEhlcm8oJGluY2x1ZGVGcmllbmRzOiBCb29sZWFuISkge1xuICAgICAgICBoZXJvIHtcbiAgICAgICAgICBmcmllbmRzIHtcbiAgICAgICAgICAgIGlkXG4gICAgICAgICAgfVxuICAgICAgICAgIGZyaWVuZHMgQGluY2x1ZGUoaWY6ICRpbmNsdWRlRnJpZW5kcykge1xuICAgICAgICAgICAgbmFtZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIGApO1xuXG4gICAgY29uc3QgaGVyb0ZpZWxkID0gY29udGV4dC5vcGVyYXRpb25zWydIZXJvJ10uc2VsZWN0aW9uU2V0LnNlbGVjdGlvbnNbMF07XG4gICAgY29uc3QgZnJpZW5kc0ZpZWxkID0gY29sbGVjdEFuZE1lcmdlRmllbGRzKGhlcm9GaWVsZC5zZWxlY3Rpb25TZXQgYXMgU2VsZWN0aW9uU2V0KVswXTtcblxuICAgIGV4cGVjdChmcmllbmRzRmllbGQuaXNDb25kaXRpb25hbCkudG9CZUZhbHN5KCk7XG4gICAgZXhwZWN0KGZyaWVuZHNGaWVsZC5zZWxlY3Rpb25TZXQpLnRvTWF0Y2hTZWxlY3Rpb25TZXQoWydIdW1hbicsICdEcm9pZCddLCBbJ2lkJywgJ25hbWUnXSk7XG4gICAgZXhwZWN0KGNvbGxlY3RBbmRNZXJnZUZpZWxkcyhmcmllbmRzRmllbGQuc2VsZWN0aW9uU2V0IGFzIFNlbGVjdGlvblNldClbMF0uaXNDb25kaXRpb25hbCkudG9CZUZhbHN5KCk7XG4gICAgZXhwZWN0KGNvbGxlY3RBbmRNZXJnZUZpZWxkcyhmcmllbmRzRmllbGQuc2VsZWN0aW9uU2V0IGFzIFNlbGVjdGlvblNldClbMV0uaXNDb25kaXRpb25hbCkudG9CZVRydXRoeSgpO1xuICB9KTtcbn0pO1xuIl19");"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const collectAndMergeFields_1 = require("../../../src/compiler/visitors/collectAndMergeFields");
const typeCase_1 = require("../../../src/compiler/visitors/typeCase");
const helpers_1 = require("../../test-utils/helpers");
describe('@skip/@include directives', () => {
  it('should not mark a field as conditional when it has a no directives', () => {
    const context = helpers_1.compile(`
      query Hero {
        hero {
          name
        }
      }
    `);
    const selectionSet = context.operations['Hero'].selectionSet.selections[0].
    selectionSet;
    expect(selectionSet).toMatchSelectionSet(['Human', 'Droid'], ['name']);
    expect(collectAndMergeFields_1.collectAndMergeFields(selectionSet)[0].isConditional).toBeFalsy();
  });
  it('should mark a field as conditional when it has a @skip directive', () => {
    const context = helpers_1.compile(`
      query Hero($skipName: Boolean!) {
        hero {
          name @skip(if: $skipName)
        }
      }
    `);
    const selectionSet = context.operations['Hero'].selectionSet.selections[0].
    selectionSet;
    expect(selectionSet).toMatchSelectionSet(['Human', 'Droid'], ['name']);
    expect(collectAndMergeFields_1.collectAndMergeFields(selectionSet)[0].isConditional).toBeTruthy();
    expect(selectionSet.selections[0]).toMatchObject({ variableName: 'skipName' });
  });
  it('should not mark a field as conditional when it has a @skip directive that is always false', () => {
    const context = helpers_1.compile(`
      query Hero {
        hero {
          name @skip(if: false)
        }
      }
    `);
    const selectionSet = context.operations['Hero'].selectionSet.selections[0].
    selectionSet;
    expect(selectionSet).toMatchSelectionSet(['Human', 'Droid'], ['name']);
    expect(collectAndMergeFields_1.collectAndMergeFields(selectionSet)[0].isConditional).toBeFalsy();
  });
  it('should not include a field when it has a @skip directive that is always true', () => {
    const context = helpers_1.compile(`
      query Hero {
        hero {
          name @skip(if: true)
        }
      }
    `);
    const selectionSet = context.operations['Hero'].selectionSet.selections[0].
    selectionSet;
    expect(selectionSet).toMatchSelectionSet(['Human', 'Droid'], []);
  });
  it('should mark a field as conditional when it has a @include directive', () => {
    const context = helpers_1.compile(`
      query Hero($includeName: Boolean!) {
        hero {
          name @include(if: $includeName)
        }
      }
    `);
    const selectionSet = context.operations['Hero'].selectionSet.selections[0].
    selectionSet;
    expect(selectionSet).toMatchSelectionSet(['Human', 'Droid'], ['name']);
    expect(collectAndMergeFields_1.collectAndMergeFields(selectionSet)[0].isConditional).toBeTruthy();
    expect(selectionSet.selections[0]).toMatchObject({ variableName: 'includeName' });
  });
  it('should not mark a field as conditional when it has a @include directive that is always true', () => {
    const context = helpers_1.compile(`
      query Hero {
        hero {
          name @include(if: true)
        }
      }
    `);
    const selectionSet = context.operations['Hero'].selectionSet.selections[0].
    selectionSet;
    expect(selectionSet).toMatchSelectionSet(['Human', 'Droid'], ['name']);
    expect(collectAndMergeFields_1.collectAndMergeFields(selectionSet)[0].isConditional).toBeFalsy();
  });
  it('should not include a field when it has a @include directive that is always false', () => {
    const context = helpers_1.compile(`
      query Hero {
        hero {
          name @include(if: false)
        }
      }
    `);
    const selectionSet = context.operations['Hero'].selectionSet.selections[0].
    selectionSet;
    expect(selectionSet).toMatchSelectionSet(['Human', 'Droid'], []);
  });
  it('should mark a field as conditional when it has both a @skip and an @include directive', () => {
    const context = helpers_1.compile(`
      query Hero($skipName: Boolean!, $includeName: Boolean!) {
        hero {
          name @skip(if: $skipName) @include(if: $includeName)
        }
      }
    `);
    const selectionSet = context.operations['Hero'].selectionSet.selections[0].
    selectionSet;
    expect(selectionSet).toMatchSelectionSet(['Human', 'Droid'], ['name']);
    expect(collectAndMergeFields_1.collectAndMergeFields(selectionSet)[0].isConditional).toBeTruthy();
    expect(selectionSet.selections[0]).toMatchObject({ variableName: 'includeName' });
    expect(selectionSet.selections[0].selectionSet.selections[0]).toMatchObject({
      variableName: 'skipName' });

  });
  it('should mark a field as conditional when it is included twice, once with a @skip and once with an @include directive', () => {
    const context = helpers_1.compile(`
      query Hero($skipName: Boolean!, $includeName: Boolean!) {
        hero {
          name @skip(if: $skipName)
          name @include(if: $includeName)
        }
      }
    `);
    const selectionSet = context.operations['Hero'].selectionSet.selections[0].
    selectionSet;
    expect(selectionSet).toMatchSelectionSet(['Human', 'Droid'], ['name']);
    expect(collectAndMergeFields_1.collectAndMergeFields(selectionSet)[0].isConditional).toBeTruthy();
    expect(selectionSet.selections[0]).toMatchObject({ variableName: 'skipName' });
    expect(selectionSet.selections[1]).toMatchObject({ variableName: 'includeName' });
  });
  it('should not include a field when when it has both a @skip directive and an @include directive that is always false', () => {
    const context = helpers_1.compile(`
      query Hero($skipName: Boolean!) {
        hero {
          name @skip(if: $skipName) @include(if: false)
        }
      }
    `);
    const selectionSet = context.operations['Hero'].selectionSet.selections[0].
    selectionSet;
    expect(selectionSet).toMatchSelectionSet(['Human', 'Droid'], []);
  });
  it('should not mark a field as conditional when it is included twice, once with and once without an @include directive', () => {
    const context = helpers_1.compile(`
      query Hero($includeName: Boolean!) {
        hero {
          name
          name @include(if: $includeName)
        }
      }
    `);
    const selectionSet = context.operations['Hero'].selectionSet.selections[0].
    selectionSet;
    expect(selectionSet).toMatchSelectionSet(['Human', 'Droid'], ['name']);
    expect(collectAndMergeFields_1.collectAndMergeFields(selectionSet)[0].isConditional).toBeFalsy();
  });
  it('should not mark a field as conditional when it is included twice, once with an @include directive that is always false and once without', () => {
    const context = helpers_1.compile(`
      query Hero {
        hero {
          name
          name @include(if: false)
        }
      }
    `);
    const selectionSet = context.operations['Hero'].selectionSet.selections[0].
    selectionSet;
    expect(selectionSet).toMatchSelectionSet(['Human', 'Droid'], ['name']);
    expect(collectAndMergeFields_1.collectAndMergeFields(selectionSet)[0].isConditional).toBeFalsy();
  });
  it('should not mark a field as conditional in a variant when it is included without a directive in an inline fragment', () => {
    const context = helpers_1.compile(`
      query Hero($skipName: Boolean!) {
        hero {
          name @skip(if: $skipName)
          ... on Droid {
            name
          }
        }
      }
    `);
    const selectionSet = context.operations['Hero'].selectionSet.selections[0].
    selectionSet;
    const typeCase = typeCase_1.typeCaseForSelectionSet(selectionSet);
    expect(typeCase.default).toMatchSelectionSet(['Human', 'Droid'], ['name']);
    expect(collectAndMergeFields_1.collectAndMergeFields(typeCase.default)[0].isConditional).toBeTruthy();
    expect(typeCase.variants).toHaveLength(1);
    expect(typeCase.variants).toContainSelectionSetMatching(['Droid'], ['name']);
    expect(collectAndMergeFields_1.collectAndMergeFields(typeCase.variants[0])[0].isConditional).toBeFalsy();
  });
  it('should not mark a field as conditional in a variant when it is included without a directive in the default case', () => {
    const context = helpers_1.compile(`
      query Hero($skipName: Boolean!) {
        hero {
          name
          ... on Droid {
            name @skip(if: $skipName)
          }
        }
      }
    `);
    const selectionSet = context.operations['Hero'].selectionSet.selections[0].
    selectionSet;
    const typeCase = typeCase_1.typeCaseForSelectionSet(selectionSet);
    expect(typeCase.default).toMatchSelectionSet(['Human', 'Droid'], ['name']);
    expect(collectAndMergeFields_1.collectAndMergeFields(typeCase.default)[0].isConditional).toBeFalsy();
    expect(typeCase.variants).toHaveLength(1);
    expect(typeCase.variants).toContainSelectionSetMatching(['Droid'], ['name']);
    expect(collectAndMergeFields_1.collectAndMergeFields(typeCase.variants[0])[0].isConditional).toBeFalsy();
  });
  it('should not mark a field as conditional when the parent selection set is included conditionally', () => {
    const context = helpers_1.compile(`
      query Hero($includeFriends: Boolean!) {
        hero {
          friends @include(if: $includeFriends) {
            name
          }
        }
      }
    `);
    const heroField = context.operations['Hero'].selectionSet.selections[0];
    const friendsField = collectAndMergeFields_1.collectAndMergeFields(heroField.selectionSet)[0];
    expect(friendsField.isConditional).toBeTruthy();
    expect(friendsField.selectionSet).toMatchSelectionSet(['Human', 'Droid'], ['name']);
    expect(collectAndMergeFields_1.collectAndMergeFields(friendsField.selectionSet)[0].isConditional).toBeFalsy();
  });
  it('should mark a field as conditional when the parent selection set is first included conditionally and then the parent field is also included unconditionally', () => {
    const context = helpers_1.compile(`
      query Hero($includeFriends: Boolean!) {
        hero {
          friends @include(if: $includeFriends) {
            name
          }
          friends {
            id
          }
        }
      }
    `);
    const heroField = context.operations['Hero'].selectionSet.selections[0];
    const friendsField = collectAndMergeFields_1.collectAndMergeFields(heroField.selectionSet)[0];
    expect(friendsField.isConditional).toBeFalsy();
    expect(friendsField.selectionSet).toMatchSelectionSet(['Human', 'Droid'], ['name', 'id']);
    expect(collectAndMergeFields_1.collectAndMergeFields(friendsField.selectionSet)[0].isConditional).toBeTruthy();
    expect(collectAndMergeFields_1.collectAndMergeFields(friendsField.selectionSet)[1].isConditional).toBeFalsy();
  });
  it('should mark a field as conditional when the parent selection set is first included unconditionally and then the parent field is also included conditionally', () => {
    const context = helpers_1.compile(`
      query Hero($includeFriends: Boolean!) {
        hero {
          friends {
            id
          }
          friends @include(if: $includeFriends) {
            name
          }
        }
      }
    `);
    const heroField = context.operations['Hero'].selectionSet.selections[0];
    const friendsField = collectAndMergeFields_1.collectAndMergeFields(heroField.selectionSet)[0];
    expect(friendsField.isConditional).toBeFalsy();
    expect(friendsField.selectionSet).toMatchSelectionSet(['Human', 'Droid'], ['id', 'name']);
    expect(collectAndMergeFields_1.collectAndMergeFields(friendsField.selectionSet)[0].isConditional).toBeFalsy();
    expect(collectAndMergeFields_1.collectAndMergeFields(friendsField.selectionSet)[1].isConditional).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,