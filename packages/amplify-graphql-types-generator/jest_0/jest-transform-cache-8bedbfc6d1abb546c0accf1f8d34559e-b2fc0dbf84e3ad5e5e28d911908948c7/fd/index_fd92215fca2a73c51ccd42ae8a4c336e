6bfa63fe0bb47d9cd70cc3a0e248967b
'use strict';require('ts-jest').install("/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-types-generator/src/angular/index.ts", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst graphql_1 = require(\"graphql\");\nconst prettier = require(\"prettier\");\nconst CodeGenerator_1 = require(\"../utilities/CodeGenerator\");\nconst codeGeneration_1 = require(\"../typescript/codeGeneration\");\nconst types_1 = require(\"../typescript/types\");\nfunction generateSource(context) {\n    const generator = new CodeGenerator_1.default(context);\n    generator.printOnNewline('/* tslint:disable */');\n    generator.printOnNewline('//  This file was automatically generated and should not be edited.');\n    generator.printOnNewline(`import { Injectable } from '@angular/core';`);\n    generator.printOnNewline(`import API, { graphqlOperation } from '@aws-amplify/api';`);\n    generator.printOnNewline(`import { GraphQLResult } from \"@aws-amplify/api/lib/types\";`);\n    generator.printOnNewline(`import * as Observable from 'zen-observable';`);\n    generator.printNewline();\n    generateTypes(generator, context);\n    generator.printNewline();\n    generateAngularService(generator, context);\n    return prettier.format(generator.output, { parser: 'typescript' });\n}\nexports.generateSource = generateSource;\nfunction generateTypes(generator, context) {\n    context.typesUsed.forEach(type => codeGeneration_1.typeDeclarationForGraphQLType(generator, type));\n    Object.values(context.operations).forEach(operation => {\n        const resultField = getOperationResultField(operation);\n        codeGeneration_1.interfaceDeclarationForOperation(generator, Object.assign({}, operation, { fields: resultField ? resultField.fields || [] : operation.fields }));\n    });\n    Object.values(context.fragments).forEach(operation => codeGeneration_1.interfaceDeclarationForFragment(generator, operation));\n}\nfunction getOperationResultField(operation) {\n    if (operation.fields.length && operation.fields[0].fields) {\n        return operation.fields[0];\n    }\n}\nfunction generateAngularService(generator, context) {\n    const operations = context.operations;\n    generator.printOnNewline(`@Injectable({\n    providedIn: 'root'\n  })`);\n    generator.printOnNewline(`export class APIService {`);\n    generator.withIndent(() => {\n        Object.values(operations).forEach((op) => {\n            if (op.operationType === 'subscription') {\n                return generateSubscriptionOperation(generator, op);\n            }\n            if (op.operationType === 'query' || op.operationType === 'mutation') {\n                return generateQueryOrMutationOperation(generator, op);\n            }\n        });\n        generator.printOnNewline('}');\n    });\n}\nfunction generateSubscriptionOperation(generator, op) {\n    const statement = formatTemplateString(generator, op.source);\n    const { operationName, operationType } = op;\n    const returnType = codeGeneration_1.interfaceNameFromOperation({ operationName, operationType });\n    generator.printNewline();\n    const subscriptionName = `${operationName}Listener`;\n    generator.print(`${subscriptionName}: Observable<${returnType}> = API.graphql(graphqlOperation(\\n\\`${statement}\\`)) as Observable<${returnType}>`);\n    generator.printNewline();\n}\nfunction generateQueryOrMutationOperation(generator, op) {\n    const statement = formatTemplateString(generator, op.source);\n    const { operationName, operationType } = op;\n    const vars = variablesFromField(generator.context, op.variables);\n    const returnType = codeGeneration_1.interfaceNameFromOperation({ operationName, operationType });\n    const resultField = getOperationResultField(op);\n    const resultProp = resultField ? `.${resultField.responseName}` : '';\n    generator.printNewline();\n    generator.print(`async ${op.operationName}(`);\n    variableDeclaration(generator, vars);\n    generator.print(`) : Promise<${returnType}> {`);\n    generator.withIndent(() => {\n        generator.printNewlineIfNeeded();\n        generator.print(`const statement = \\`${statement}\\``);\n        const params = ['statement'];\n        if (op.variables.length) {\n            variableAssignmentToInput(generator, vars);\n            params.push('gqlAPIServiceArguments');\n        }\n        generator.printOnNewline(`const response = await API.graphql(graphqlOperation(${params.join(', ')})) as any;`);\n        generator.printOnNewline(`return (<${returnType}>response.data${resultProp})`);\n    });\n    generator.printOnNewline('}');\n}\nfunction variablesFromField(context, fields) {\n    return fields.map(field => propertyFromVar(context, field));\n}\nexports.variablesFromField = variablesFromField;\nfunction propertyFromVar(context, field) {\n    let { name: fieldName, type: fieldType } = field;\n    fieldName = fieldName || field.responseName;\n    const propertyName = fieldName;\n    let property = { fieldName, fieldType, propertyName };\n    let isNullable = true;\n    if (fieldType instanceof graphql_1.GraphQLNonNull) {\n        isNullable = false;\n    }\n    const typeName = types_1.typeNameFromGraphQLType(context, fieldType, null, false);\n    return Object.assign({}, property, { typeName, isComposite: false, fieldType, isNullable });\n}\nexports.propertyFromVar = propertyFromVar;\nfunction variableDeclaration(generator, properties) {\n    properties\n        .sort((a, b) => {\n        if (!a.isNullable && b.isNullable) {\n            return -1;\n        }\n        if (!b.isNullable && a.isNullable) {\n            return 1;\n        }\n        return 0;\n    })\n        .forEach(property => {\n        const { fieldName, typeName, isArray, isNullable } = property;\n        generator.print(fieldName);\n        if (isNullable) {\n            generator.print('?');\n        }\n        generator.print(':');\n        if (isArray) {\n            generator.print(' Array<');\n        }\n        generator.print(`${typeName}`);\n        if (isArray) {\n            generator.print('>');\n        }\n        generator.print(', ');\n    });\n}\nfunction variableAssignmentToInput(generator, vars) {\n    if (vars.length > 0) {\n        generator.printOnNewline('const gqlAPIServiceArguments : any = ');\n        generator.withinBlock(() => {\n            vars.filter(v => !v.isNullable).forEach(v => {\n                generator.printOnNewline(`${v.fieldName},`);\n            });\n        }, '{', '}');\n        vars.filter(v => v.isNullable).forEach(v => {\n            generator.printOnNewline(`if (${v.fieldName}) `);\n            generator.withinBlock(() => {\n                generator.printOnNewline(`gqlAPIServiceArguments.${v.fieldName} = ${v.fieldName}`);\n            }, '{', '}');\n        });\n    }\n}\nfunction formatTemplateString(generator, str) {\n    const indentation = ' '.repeat(generator.currentFile.indentWidth * (generator.currentFile.indentLevel + 2));\n    return str\n        .split('\\n')\n        .map((line, idx) => (idx > 0 ? indentation + line : line))\n        .join('\\n');\n}\n//# sourceMappingURL=data:application/json;base64,");"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = require("graphql");
const prettier = require("prettier");
const CodeGenerator_1 = require("../utilities/CodeGenerator");
const codeGeneration_1 = require("../typescript/codeGeneration");
const types_1 = require("../typescript/types");
function generateSource(context) {
    const generator = new CodeGenerator_1.default(context);
    generator.printOnNewline('/* tslint:disable */');
    generator.printOnNewline('//  This file was automatically generated and should not be edited.');
    generator.printOnNewline(`import { Injectable } from '@angular/core';`);
    generator.printOnNewline(`import API, { graphqlOperation } from '@aws-amplify/api';`);
    generator.printOnNewline(`import { GraphQLResult } from "@aws-amplify/api/lib/types";`);
    generator.printOnNewline(`import * as Observable from 'zen-observable';`);
    generator.printNewline();
    generateTypes(generator, context);
    generator.printNewline();
    generateAngularService(generator, context);
    return prettier.format(generator.output, { parser: 'typescript' });
}
exports.generateSource = generateSource;
function generateTypes(generator, context) {
    context.typesUsed.forEach(type => codeGeneration_1.typeDeclarationForGraphQLType(generator, type));
    Object.values(context.operations).forEach(operation => {
        const resultField = getOperationResultField(operation);
        codeGeneration_1.interfaceDeclarationForOperation(generator, Object.assign({}, operation, { fields: resultField ? resultField.fields || [] : operation.fields }));
    });
    Object.values(context.fragments).forEach(operation => codeGeneration_1.interfaceDeclarationForFragment(generator, operation));
}
function getOperationResultField(operation) {
    if (operation.fields.length && operation.fields[0].fields) {
        return operation.fields[0];
    }
}
function generateAngularService(generator, context) {
    const operations = context.operations;
    generator.printOnNewline(`@Injectable({
    providedIn: 'root'
  })`);
    generator.printOnNewline(`export class APIService {`);
    generator.withIndent(() => {
        Object.values(operations).forEach(op => {
            if (op.operationType === 'subscription') {
                return generateSubscriptionOperation(generator, op);
            }
            if (op.operationType === 'query' || op.operationType === 'mutation') {
                return generateQueryOrMutationOperation(generator, op);
            }
        });
        generator.printOnNewline('}');
    });
}
function generateSubscriptionOperation(generator, op) {
    const statement = formatTemplateString(generator, op.source);
    const { operationName, operationType } = op;
    const returnType = codeGeneration_1.interfaceNameFromOperation({ operationName, operationType });
    generator.printNewline();
    const subscriptionName = `${operationName}Listener`;
    generator.print(`${subscriptionName}: Observable<${returnType}> = API.graphql(graphqlOperation(\n\`${statement}\`)) as Observable<${returnType}>`);
    generator.printNewline();
}
function generateQueryOrMutationOperation(generator, op) {
    const statement = formatTemplateString(generator, op.source);
    const { operationName, operationType } = op;
    const vars = variablesFromField(generator.context, op.variables);
    const returnType = codeGeneration_1.interfaceNameFromOperation({ operationName, operationType });
    const resultField = getOperationResultField(op);
    const resultProp = resultField ? `.${resultField.responseName}` : '';
    generator.printNewline();
    generator.print(`async ${op.operationName}(`);
    variableDeclaration(generator, vars);
    generator.print(`) : Promise<${returnType}> {`);
    generator.withIndent(() => {
        generator.printNewlineIfNeeded();
        generator.print(`const statement = \`${statement}\``);
        const params = ['statement'];
        if (op.variables.length) {
            variableAssignmentToInput(generator, vars);
            params.push('gqlAPIServiceArguments');
        }
        generator.printOnNewline(`const response = await API.graphql(graphqlOperation(${params.join(', ')})) as any;`);
        generator.printOnNewline(`return (<${returnType}>response.data${resultProp})`);
    });
    generator.printOnNewline('}');
}
function variablesFromField(context, fields) {
    return fields.map(field => propertyFromVar(context, field));
}
exports.variablesFromField = variablesFromField;
function propertyFromVar(context, field) {
    let { name: fieldName, type: fieldType } = field;
    fieldName = fieldName || field.responseName;
    const propertyName = fieldName;
    let property = { fieldName, fieldType, propertyName };
    let isNullable = true;
    if (fieldType instanceof graphql_1.GraphQLNonNull) {
        isNullable = false;
    }
    const typeName = types_1.typeNameFromGraphQLType(context, fieldType, null, false);
    return Object.assign({}, property, { typeName, isComposite: false, fieldType, isNullable });
}
exports.propertyFromVar = propertyFromVar;
function variableDeclaration(generator, properties) {
    properties.
    sort((a, b) => {
        if (!a.isNullable && b.isNullable) {
            return -1;
        }
        if (!b.isNullable && a.isNullable) {
            return 1;
        }
        return 0;
    }).
    forEach(property => {
        const { fieldName, typeName, isArray, isNullable } = property;
        generator.print(fieldName);
        if (isNullable) {
            generator.print('?');
        }
        generator.print(':');
        if (isArray) {
            generator.print(' Array<');
        }
        generator.print(`${typeName}`);
        if (isArray) {
            generator.print('>');
        }
        generator.print(', ');
    });
}
function variableAssignmentToInput(generator, vars) {
    if (vars.length > 0) {
        generator.printOnNewline('const gqlAPIServiceArguments : any = ');
        generator.withinBlock(() => {
            vars.filter(v => !v.isNullable).forEach(v => {
                generator.printOnNewline(`${v.fieldName},`);
            });
        }, '{', '}');
        vars.filter(v => v.isNullable).forEach(v => {
            generator.printOnNewline(`if (${v.fieldName}) `);
            generator.withinBlock(() => {
                generator.printOnNewline(`gqlAPIServiceArguments.${v.fieldName} = ${v.fieldName}`);
            }, '{', '}');
        });
    }
}
function formatTemplateString(generator, str) {
    const indentation = ' '.repeat(generator.currentFile.indentWidth * (generator.currentFile.indentLevel + 2));
    return str.
    split('\n').
    map((line, idx) => idx > 0 ? indentation + line : line).
    join('\n');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,