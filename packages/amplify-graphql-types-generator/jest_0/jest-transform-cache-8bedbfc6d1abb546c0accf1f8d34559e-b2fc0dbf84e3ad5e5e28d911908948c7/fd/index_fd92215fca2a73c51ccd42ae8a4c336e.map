{"version":3,"sources":["index.ts"],"names":[],"mappings":"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","sourcesContent":["import { GraphQLNonNull, GraphQLType } from 'graphql';\nimport * as prettier from 'prettier';\nimport {\n  LegacyCompilerContext,\n  LegacyOperation,\n  LegacyInlineFragment,\n  LegacyField\n} from '../compiler/legacyIR';\n\nimport CodeGenerator from '../utilities/CodeGenerator';\nimport {\n  typeDeclarationForGraphQLType,\n  interfaceDeclarationForOperation,\n  interfaceDeclarationForFragment,\n  interfaceNameFromOperation\n} from '../typescript/codeGeneration';\nimport { typeNameFromGraphQLType } from '../typescript/types';\nimport { Property } from '../typescript/language';\n\nexport function generateSource(context: LegacyCompilerContext) {\n  const generator = new CodeGenerator<LegacyCompilerContext>(context);\n\n  generator.printOnNewline('/* tslint:disable */');\n  generator.printOnNewline('//  This file was automatically generated and should not be edited.');\n\n  generator.printOnNewline(`import { Injectable } from '@angular/core';`);\n  generator.printOnNewline(`import API, { graphqlOperation } from '@aws-amplify/api';`);\n  generator.printOnNewline(`import { GraphQLResult } from \"@aws-amplify/api/lib/types\";`);\n\n  generator.printOnNewline(`import * as Observable from 'zen-observable';`);\n  generator.printNewline();\n\n  generateTypes(generator, context);\n  generator.printNewline();\n\n  generateAngularService(generator, context);\n  return prettier.format(generator.output, { parser: 'typescript' });\n}\n\nfunction generateTypes(generator: CodeGenerator, context: LegacyCompilerContext) {\n  context.typesUsed.forEach(type => typeDeclarationForGraphQLType(generator, type));\n\n  Object.values(context.operations).forEach(operation => {\n    const resultField = getOperationResultField(operation);\n    interfaceDeclarationForOperation(generator, {\n      ...operation,\n      fields: resultField ? resultField.fields || [] : operation.fields\n    });\n  });\n\n  Object.values(context.fragments).forEach(operation =>\n    interfaceDeclarationForFragment(generator, operation)\n  );\n}\n\nfunction getOperationResultField(operation: LegacyOperation): LegacyField | void {\n  if (operation.fields.length && operation.fields[0].fields) {\n    return operation.fields[0];\n  }\n}\n\nfunction generateAngularService(generator: CodeGenerator, context: LegacyCompilerContext) {\n  const operations = context.operations;\n  generator.printOnNewline(`@Injectable({\n    providedIn: 'root'\n  })`);\n  generator.printOnNewline(`export class APIService {`);\n\n  generator.withIndent(() => {\n    Object.values(operations).forEach((op: LegacyOperation) => {\n      if (op.operationType === 'subscription') {\n        return generateSubscriptionOperation(generator, op);\n      }\n      if (op.operationType === 'query' || op.operationType === 'mutation') {\n        return generateQueryOrMutationOperation(generator, op);\n      }\n    });\n    generator.printOnNewline('}');\n  });\n}\nfunction generateSubscriptionOperation(generator: CodeGenerator, op: LegacyOperation) {\n  const statement = formatTemplateString(generator, op.source);\n  const { operationName, operationType } = op;\n  const returnType = interfaceNameFromOperation({ operationName, operationType });\n  generator.printNewline();\n  const subscriptionName = `${operationName}Listener`;\n  generator.print(\n    `${subscriptionName}: Observable<${returnType}> = API.graphql(graphqlOperation(\\n\\`${statement}\\`)) as Observable<${returnType}>`\n  );\n  generator.printNewline();\n}\n\nfunction generateQueryOrMutationOperation(generator: CodeGenerator, op: LegacyOperation) {\n  const statement = formatTemplateString(generator, op.source);\n  const { operationName, operationType } = op;\n  const vars = variablesFromField(generator.context, op.variables);\n  const returnType = interfaceNameFromOperation({ operationName, operationType });\n  const resultField = getOperationResultField(op);\n  const resultProp = resultField ? `.${resultField.responseName}` : '';\n\n  generator.printNewline();\n  generator.print(`async ${op.operationName}(`);\n  variableDeclaration(generator, vars);\n  generator.print(`) : Promise<${returnType}> {`);\n  generator.withIndent(() => {\n    generator.printNewlineIfNeeded();\n    generator.print(`const statement = \\`${statement}\\``);\n    const params = ['statement'];\n    if (op.variables.length) {\n      variableAssignmentToInput(generator, vars);\n      params.push('gqlAPIServiceArguments');\n    }\n    generator.printOnNewline(\n      `const response = await API.graphql(graphqlOperation(${params.join(', ')})) as any;`\n    );\n    generator.printOnNewline(`return (<${returnType}>response.data${resultProp})`);\n  });\n  generator.printOnNewline('}');\n}\n\nexport function variablesFromField(\n  context: LegacyCompilerContext,\n  fields: {\n    name?: string;\n    type: GraphQLType;\n    responseName?: string;\n    description?: string;\n    fragmentSpreads?: any;\n    inlineFragments?: LegacyInlineFragment[];\n    fieldName?: string;\n  }[]\n) {\n  return fields.map(field => propertyFromVar(context, field));\n}\n\nexport function propertyFromVar(\n  context: LegacyCompilerContext,\n  field: {\n    name?: string;\n    type: GraphQLType;\n    fields?: any[];\n    responseName?: string;\n    description?: string;\n    fragmentSpreads?: any;\n    inlineFragments?: LegacyInlineFragment[];\n    fieldName?: string;\n  }\n): Property {\n  let { name: fieldName, type: fieldType } = field;\n  fieldName = fieldName || field.responseName;\n\n  const propertyName = fieldName;\n\n  let property = { fieldName, fieldType, propertyName };\n\n  let isNullable = true;\n  if (fieldType instanceof GraphQLNonNull) {\n    isNullable = false;\n  }\n  const typeName = typeNameFromGraphQLType(context, fieldType, null, false);\n  return { ...property, typeName, isComposite: false, fieldType, isNullable };\n}\n\nfunction variableDeclaration(generator: CodeGenerator, properties: Property[]) {\n  properties\n    .sort((a, b) => {\n      if (!a.isNullable && b.isNullable) {\n        return -1;\n      }\n      if (!b.isNullable && a.isNullable) {\n        return 1;\n      }\n      return 0;\n    })\n    .forEach(property => {\n      const { fieldName, typeName, isArray, isNullable } = property;\n      generator.print(fieldName);\n      if (isNullable) {\n        generator.print('?');\n      }\n      generator.print(':');\n      if (isArray) {\n        generator.print(' Array<');\n      }\n      generator.print(`${typeName}`);\n      if (isArray) {\n        generator.print('>');\n      }\n      generator.print(', ');\n    });\n}\n\nfunction variableAssignmentToInput(generator: CodeGenerator, vars: Property[]) {\n  if (vars.length > 0) {\n    generator.printOnNewline('const gqlAPIServiceArguments : any = ');\n    generator.withinBlock(\n      () => {\n        // non nullable arguments\n        vars.filter(v => !v.isNullable).forEach(v => {\n          generator.printOnNewline(`${v.fieldName},`);\n        });\n      },\n      '{',\n      '}'\n    );\n    // null able arguments\n    vars.filter(v => v.isNullable).forEach(v => {\n      generator.printOnNewline(`if (${v.fieldName}) `);\n      generator.withinBlock(\n        () => {\n          generator.printOnNewline(`gqlAPIServiceArguments.${v.fieldName} = ${v.fieldName}`);\n        },\n        '{',\n        '}'\n      );\n    });\n  }\n}\n\nfunction formatTemplateString(generator: CodeGenerator, str: string): string {\n  const indentation = ' '.repeat(\n    generator.currentFile.indentWidth * (generator.currentFile.indentLevel + 2)\n  );\n  return str\n    .split('\\n')\n    .map((line, idx) => (idx > 0 ? indentation + line : line))\n    .join('\\n');\n}\n"],"sourceRoot":""}