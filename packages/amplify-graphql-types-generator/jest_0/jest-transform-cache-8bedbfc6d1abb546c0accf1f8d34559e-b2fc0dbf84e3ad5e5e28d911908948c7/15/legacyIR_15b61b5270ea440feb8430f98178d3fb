5b5c869bcfd6541873e3038490cb2d63
'use strict';require('ts-jest').install("/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-types-generator/test/compiler/legacyIR.js", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst common_tags_1 = require(\"common-tags\");\nconst graphql_1 = require(\"graphql\");\nconst loading_1 = require(\"../../src/loading\");\nconst legacyIR_1 = require(\"../../src/compiler/legacyIR\");\nconst serializeToJSON_1 = require(\"../../src/serializeToJSON\");\nfunction withStringifiedTypes(ir) {\n    return JSON.parse(serializeToJSON_1.serializeAST(ir));\n}\nconst schema = loading_1.loadSchema(require.resolve('../fixtures/starwars/schema.json'));\ndescribe('Compiling query documents to the legacy IR', () => {\n    it(`should include variables defined in operations`, () => {\n        const document = graphql_1.parse(`\n      query HeroName($episode: Episode) {\n        hero(episode: $episode) {\n          name\n        }\n      }\n\n      query Search($text: String!) {\n        search(text: $text) {\n          ... on Character {\n            name\n          }\n        }\n      }\n\n      mutation CreateReviewForEpisode($episode: Episode!, $review: ReviewInput!) {\n        createReview(episode: $episode, review: $review) {\n          stars\n          commentary\n        }\n      }\n    `);\n        const { operations } = withStringifiedTypes(legacyIR_1.compileToLegacyIR(schema, document));\n        expect(operations['HeroName'].variables).toEqual([\n            { name: 'episode', type: 'Episode' }\n        ]);\n        expect(operations['Search'].variables).toEqual([\n            { name: 'text', type: 'String!' }\n        ]);\n        expect(operations['CreateReviewForEpisode'].variables).toEqual([\n            { name: 'episode', type: 'Episode!' },\n            { name: 'review', type: 'ReviewInput!' }\n        ]);\n    });\n    it(`should keep track of enums and input object types used in variables`, () => {\n        const document = graphql_1.parse(`\n      query HeroName($episode: Episode) {\n        hero(episode: $episode) {\n          name\n        }\n      }\n\n      query Search($text: String) {\n        search(text: $text) {\n          ... on Character {\n            name\n          }\n        }\n      }\n\n      mutation CreateReviewForEpisode($episode: Episode!, $review: ReviewInput!) {\n        createReview(episode: $episode, review: $review) {\n          stars\n          commentary\n        }\n      }\n    `);\n        const { typesUsed } = withStringifiedTypes(legacyIR_1.compileToLegacyIR(schema, document));\n        expect(typesUsed).toEqual(['Episode', 'ReviewInput', 'ColorInput']);\n    });\n    it(`should keep track of enums used in fields`, () => {\n        const document = graphql_1.parse(`\n      query Hero {\n        hero {\n          name\n          appearsIn\n        }\n\n        droid(id: \"2001\") {\n          appearsIn\n        }\n      }\n    `);\n        const { typesUsed } = withStringifiedTypes(legacyIR_1.compileToLegacyIR(schema, document));\n        expect(typesUsed).toEqual(['Episode']);\n    });\n    it(`should keep track of types used in fields of input objects`, () => {\n        const document = graphql_1.parse(`\n      mutation FieldArgumentsWithInputObjects($review: ReviewInput!) {\n        createReview(episode: JEDI, review: $review) {\n          commentary\n        }\n      }\n      `);\n        const { typesUsed } = withStringifiedTypes(legacyIR_1.compileToLegacyIR(schema, document));\n        expect(typesUsed).toContain('ReviewInput');\n        expect(typesUsed).toContain('ColorInput');\n    });\n    it(`should include the original field name for an aliased field`, () => {\n        const document = graphql_1.parse(`\n      query HeroName {\n        r2: hero {\n          name\n        }\n        luke: hero(episode: EMPIRE) {\n          name\n        }\n      }\n    `);\n        const { operations } = legacyIR_1.compileToLegacyIR(schema, document);\n        expect(operations['HeroName'].fields[0].fieldName).toBe(\"hero\");\n    });\n    it(`should include field arguments`, () => {\n        const document = graphql_1.parse(`\n      query HeroName {\n        hero(episode: EMPIRE) {\n          name\n        }\n      }\n    `);\n        const { operations } = legacyIR_1.compileToLegacyIR(schema, document);\n        expect(operations['HeroName'].fields[0].args)\n            .toEqual([{ name: \"episode\", value: \"EMPIRE\", type: schema.getType(\"Episode\") }]);\n    });\n    it(`should include isConditional if a field has skip or include directives with variables`, () => {\n        const document = graphql_1.parse(`\n      query HeroNameConditionalInclusion($includeName: Boolean!) {\n        hero {\n          name @include(if: $includeName)\n        }\n      }\n\n      query HeroNameConditionalExclusion($skipName: Boolean!) {\n        hero {\n          name @skip(if: $skipName)\n        }\n      }\n    `);\n        const { operations } = legacyIR_1.compileToLegacyIR(schema, document);\n        expect(operations['HeroNameConditionalInclusion'].fields[0].fields[0]).toMatchObject({\n            fieldName: 'name',\n            isConditional: true\n        });\n        expect(operations['HeroNameConditionalExclusion'].fields[0].fields[0]).toMatchObject({\n            fieldName: 'name',\n            isConditional: true\n        });\n    });\n    it(`should not include isConditional if a field has skip or include directives with a boolean literal that always passes`, () => {\n        const document = graphql_1.parse(`\n      query HeroNameConditionalInclusion {\n        hero {\n          name @include(if: true)\n        }\n      }\n\n      query HeroNameConditionalExclusion {\n        hero {\n          name @skip(if: false)\n        }\n      }\n    `);\n        const { operations } = legacyIR_1.compileToLegacyIR(schema, document);\n        expect(operations['HeroNameConditionalInclusion'].fields[0].fields[0]).toMatchObject({\n            fieldName: 'name',\n            isConditional: false\n        });\n        expect(operations['HeroNameConditionalExclusion'].fields[0].fields[0]).toMatchObject({\n            fieldName: 'name',\n            isConditional: false\n        });\n    });\n    it(`should not include field if it has skip or include directives with a boolean literal that always fails`, () => {\n        const document = graphql_1.parse(`\n      query HeroNameConditionalInclusion {\n        hero {\n          name @include(if: false)\n        }\n      }\n\n      query HeroNameConditionalExclusion {\n        hero {\n          name @skip(if: true)\n        }\n      }\n    `);\n        const { operations } = legacyIR_1.compileToLegacyIR(schema, document);\n        expect(operations['HeroNameConditionalInclusion'].fields[0].fields).toHaveLength(0);\n        expect(operations['HeroNameConditionalExclusion'].fields[0].fields).toHaveLength(0);\n    });\n    it(`should include isConditional if a field in inside an inline fragment with skip or include directives with variables`, () => {\n        const document = graphql_1.parse(`\n      query HeroNameConditionalInclusion($includeName: Boolean!) {\n        hero {\n          ... @include(if: $includeName) {\n            name\n          }\n        }\n      }\n\n      query HeroNameConditionalExclusion($skipName: Boolean!) {\n        hero {\n          ... @skip(if: $skipName) {\n            name\n          }\n        }\n      }\n    `);\n        const { operations } = legacyIR_1.compileToLegacyIR(schema, document);\n        expect(operations['HeroNameConditionalInclusion'].fields[0].fields[0]).toMatchObject({\n            fieldName: 'name',\n            isConditional: true\n        });\n        expect(operations['HeroNameConditionalExclusion'].fields[0].fields[0]).toMatchObject({\n            fieldName: 'name',\n            isConditional: true\n        });\n    });\n    it(`should include isConditional if a field in inside a fragment spread with skip or include directives with variables`, () => {\n        const document = graphql_1.parse(`\n      query HeroNameConditionalInclusion($includeName: Boolean!) {\n        hero {\n          ...HeroName @include(if: $includeName)\n        }\n      }\n\n      query HeroNameConditionalExclusion($skipName: Boolean!) {\n        hero {\n          ...HeroName @skip(if: $skipName)\n        }\n      }\n\n      fragment HeroName on Character {\n        name\n      }\n    `);\n        const { operations } = legacyIR_1.compileToLegacyIR(schema, document);\n        expect(operations['HeroNameConditionalInclusion'].fields[0].fields[0]).toMatchObject({\n            fieldName: 'name',\n            isConditional: true\n        });\n        expect(operations['HeroNameConditionalExclusion'].fields[0].fields[0]).toMatchObject({\n            fieldName: 'name',\n            isConditional: true\n        });\n        expect(operations['HeroNameConditionalInclusion'].fragmentsReferenced).toEqual(['HeroName']);\n        expect(operations['HeroNameConditionalInclusion'].fields[0].fragmentSpreads).toEqual(['HeroName']);\n        expect(operations['HeroNameConditionalExclusion'].fragmentsReferenced).toEqual(['HeroName']);\n        expect(operations['HeroNameConditionalExclusion'].fields[0].fragmentSpreads).toEqual(['HeroName']);\n    });\n    it(`should recursively flatten inline fragments with type conditions that match the parent type`, () => {\n        const document = graphql_1.parse(`\n      query Hero {\n        hero {\n          id\n          ... on Character {\n            name\n            ... on Character {\n              id\n              appearsIn\n            }\n            id\n          }\n        }\n      }\n    `);\n        const { operations } = legacyIR_1.compileToLegacyIR(schema, document);\n        expect(operations['Hero'].fields[0].fields.map(field => field.fieldName))\n            .toEqual(['id', 'name', 'appearsIn']);\n    });\n    it(`should recursively include fragment spreads with type conditions that match the parent type`, () => {\n        const document = graphql_1.parse(`\n      query Hero {\n        hero {\n          id\n          ...HeroDetails\n        }\n      }\n\n      fragment HeroDetails on Character {\n        name\n        ...MoreHeroDetails\n        id\n      }\n\n      fragment MoreHeroDetails on Character {\n        appearsIn\n      }\n    `);\n        const { operations, fragments } = legacyIR_1.compileToLegacyIR(schema, document);\n        expect(operations['Hero'].fields[0].fields.map(field => field.fieldName))\n            .toEqual(['id', 'name', 'appearsIn']);\n        expect(fragments['HeroDetails'].fields.map(field => field.fieldName))\n            .toEqual(['name', 'appearsIn', 'id']);\n        expect(fragments['MoreHeroDetails'].fields.map(field => field.fieldName))\n            .toEqual(['appearsIn']);\n        expect(operations['Hero'].fragmentsReferenced).toEqual(['HeroDetails', 'MoreHeroDetails']);\n        expect(operations['Hero'].fields[0].fragmentSpreads).toEqual(['HeroDetails']);\n        expect(fragments['HeroDetails'].fragmentSpreads).toEqual(['MoreHeroDetails']);\n    });\n    it(`should include fragment spreads from subselections`, () => {\n        const document = graphql_1.parse(`\n      query HeroAndFriends {\n        hero {\n          ...HeroDetails\n          appearsIn\n          id\n          friends {\n            id\n            ...HeroDetails\n          }\n        }\n      }\n\n      fragment HeroDetails on Character {\n      \tname\n        id\n      }\n    `);\n        const { operations, fragments } = legacyIR_1.compileToLegacyIR(schema, document);\n        expect(operations['HeroAndFriends'].fields[0].fields.map(field => field.fieldName))\n            .toEqual(['name', 'id', 'appearsIn', 'friends']);\n        expect(operations['HeroAndFriends'].fields[0].fields[3].fields.map(field => field.fieldName))\n            .toEqual(['id', 'name']);\n        expect(fragments['HeroDetails'].fields.map(field => field.fieldName))\n            .toEqual(['name', 'id']);\n        expect(operations['HeroAndFriends'].fragmentsReferenced).toEqual(['HeroDetails']);\n        expect(operations['HeroAndFriends'].fields[0].fragmentSpreads).toEqual(['HeroDetails']);\n    });\n    it(`should include type conditions with merged fields for inline fragments`, () => {\n        const document = graphql_1.parse(`\n      query Hero {\n        hero {\n          name\n          ... on Droid {\n            primaryFunction\n          }\n          ... on Human {\n            height\n          }\n        }\n      }\n    `);\n        const { operations } = legacyIR_1.compileToLegacyIR(schema, document);\n        expect(operations['Hero'].fields[0].fields.map(field => field.fieldName))\n            .toEqual(['name']);\n        return;\n        expect(operations['Hero'].fields[0].inlineFragments[\"Droid\"].typeCondition.toString()).toEqual('Droid');\n        expect(operations['Hero'].fields[0].inlineFragments[\"Droid\"].fields.map(field => field.fieldName))\n            .toEqual(['name', 'primaryFunction']);\n        expect(operations['Hero'].fields[0].inlineFragments[\"Human\"].typeCondition.toString()).toEqual('Human');\n        expect(operations['Hero'].fields[0].inlineFragments[\"Human\"].fields.map(field => field.fieldName))\n            .toEqual(['name', 'height']);\n    });\n    it(`should include fragment spreads with type conditions`, () => {\n        const document = graphql_1.parse(`\n      query Hero {\n        hero {\n          name\n          ...DroidDetails\n          ...HumanDetails\n        }\n      }\n\n      fragment DroidDetails on Droid {\n        primaryFunction\n      }\n\n      fragment HumanDetails on Human {\n        height\n      }\n    `);\n        const { operations, fragments } = legacyIR_1.compileToLegacyIR(schema, document);\n        expect(operations['Hero'].fields[0].fields.map(field => field.fieldName))\n            .toEqual(['name']);\n        expect(operations['Hero'].fields[0].inlineFragments[\"Droid\"].typeCondition.toString()).toEqual('Droid');\n        expect(operations['Hero'].fields[0].inlineFragments[\"Droid\"].fields.map(field => field.fieldName))\n            .toEqual(['name', 'primaryFunction']);\n        expect(operations['Hero'].fields[0].inlineFragments['Human'].typeCondition.toString()).toEqual('Human');\n        expect(operations['Hero'].fields[0].inlineFragments['Human'].fields.map(field => field.fieldName))\n            .toEqual(['name', 'height']);\n        expect(operations['Hero'].fragmentsReferenced).toEqual(['DroidDetails', 'HumanDetails']);\n        expect(operations['Hero'].fields[0].fragmentSpreads).toEqual(['DroidDetails', 'HumanDetails']);\n    });\n    it(`should not include type conditions for fragment spreads with type conditions that match the parent type`, () => {\n        const document = graphql_1.parse(`\n      query Hero {\n        hero {\n          name\n          ...HeroDetails\n        }\n      }\n\n      fragment HeroDetails on Character {\n        name\n      }\n    `);\n        const { operations } = legacyIR_1.compileToLegacyIR(schema, document);\n        expect(operations['Hero'].fields[0].fields.map(field => field.fieldName))\n            .toEqual(['name']);\n        expect(operations['Hero'].fields[0].inlineFragments).toEqual([]);\n    });\n    it(`should include type conditions for inline fragments in fragments`, () => {\n        const document = graphql_1.parse(`\n      query Hero {\n        hero {\n          ...HeroDetails\n        }\n      }\n\n      fragment HeroDetails on Character {\n        name\n        ... on Droid {\n          primaryFunction\n        }\n        ... on Human {\n          height\n        }\n      }\n    `);\n        const { operations, fragments } = legacyIR_1.compileToLegacyIR(schema, document);\n        expect(operations['Hero'].fields[0].fields.map(field => field.fieldName))\n            .toEqual(['name']);\n        expect(operations['Hero'].fields[0].inlineFragments['Droid'].typeCondition.toString()).toEqual('Droid');\n        expect(operations['Hero'].fields[0].inlineFragments['Droid'].fields.map(field => field.fieldName))\n            .toEqual(['name', 'primaryFunction']);\n        expect(operations['Hero'].fields[0].inlineFragments['Human'].typeCondition.toString()).toEqual('Human');\n        expect(operations['Hero'].fields[0].inlineFragments['Human'].fields.map(field => field.fieldName))\n            .toEqual(['name', 'height']);\n        expect(operations['Hero'].fragmentsReferenced).toEqual(['HeroDetails']);\n        expect(operations['Hero'].fields[0].fragmentSpreads).toEqual(['HeroDetails']);\n    });\n    it(`should inherit type condition when nesting an inline fragment in an inline fragment with a more specific type condition`, () => {\n        const document = graphql_1.parse(`\n      query HeroName {\n        hero {\n          ... on Droid {\n            ... on Character {\n              name\n            }\n          }\n        }\n      }\n    `);\n        const { operations } = legacyIR_1.compileToLegacyIR(schema, document);\n        expect(operations['HeroName'].fields[0].fields.map(field => field.fieldName))\n            .toEqual([]);\n        expect(operations['HeroName'].fields[0].inlineFragments['Droid'].typeCondition.toString()).toEqual('Droid');\n        expect(operations['HeroName'].fields[0].inlineFragments['Droid'].fields.map(field => field.fieldName))\n            .toEqual(['name']);\n    });\n    it(`should not inherit type condition when nesting an inline fragment in an inline fragment with a less specific type condition`, () => {\n        const document = graphql_1.parse(`\n      query HeroName {\n        hero {\n          ... on Character {\n            ... on Droid {\n              name\n            }\n          }\n        }\n      }\n    `);\n        const { operations } = legacyIR_1.compileToLegacyIR(schema, document);\n        expect(operations['HeroName'].fields[0].fields.map(field => field.fieldName))\n            .toEqual([]);\n        expect(operations['HeroName'].fields[0].inlineFragments['Droid'].typeCondition.toString()).toEqual('Droid');\n        expect(operations['HeroName'].fields[0].inlineFragments['Droid'].fields.map(field => field.fieldName))\n            .toEqual(['name']);\n    });\n    it(`should inherit type condition when nesting a fragment spread in an inline fragment with a more specific type condition`, () => {\n        const document = graphql_1.parse(`\n      query HeroName {\n        hero {\n          ... on Droid {\n            ...CharacterName\n          }\n        }\n      }\n\n      fragment CharacterName on Character {\n        name\n      }\n    `);\n        const { operations } = legacyIR_1.compileToLegacyIR(schema, document);\n        expect(operations['HeroName'].fields[0].fields.map(field => field.fieldName))\n            .toEqual([]);\n        expect(operations['HeroName'].fields[0].inlineFragments[\"Droid\"].typeCondition.toString()).toEqual('Droid');\n        expect(operations['HeroName'].fields[0].inlineFragments[\"Droid\"].fields.map(field => field.fieldName))\n            .toEqual(['name']);\n        expect(operations['HeroName'].fields[0].inlineFragments[\"Droid\"].fragmentSpreads).toEqual(['CharacterName']);\n        expect(operations['HeroName'].fragmentsReferenced).toEqual(['CharacterName']);\n        expect(operations['HeroName'].fields[0].fragmentSpreads).toEqual([]);\n    });\n    it(`should not inherit type condition when nesting a fragment spread in an inline fragment with a less specific type condition`, () => {\n        const document = graphql_1.parse(`\n      query HeroName {\n        hero {\n          ... on Character {\n            ...DroidName\n          }\n        }\n      }\n\n      fragment DroidName on Droid {\n        name\n      }\n    `);\n        const { operations } = legacyIR_1.compileToLegacyIR(schema, document);\n        expect(operations['HeroName'].fields[0].fields.map(field => field.fieldName))\n            .toEqual([]);\n        expect(operations['HeroName'].fields[0].inlineFragments[\"Droid\"].typeCondition.toString()).toEqual('Droid');\n        expect(operations['HeroName'].fields[0].inlineFragments[\"Droid\"].fields.map(field => field.fieldName))\n            .toEqual(['name']);\n        expect(operations['HeroName'].fields[0].inlineFragments[\"Droid\"].fragmentSpreads).toEqual(['DroidName']);\n        expect(operations['HeroName'].fragmentsReferenced).toEqual(['DroidName']);\n        expect(operations['HeroName'].fields[0].fragmentSpreads).toEqual(['DroidName']);\n    });\n    it(`should ignore inline fragment when the type condition does not overlap with the currently effective type`, () => {\n        const document = graphql_1.parse(`\n      fragment CharacterDetails on Character {\n        ... on Droid {\n          primaryFunction\n        }\n        ... on Human {\n          height\n        }\n      }\n\n      query HumanAndDroid {\n        human(id: \"human\") {\n          ...CharacterDetails\n        }\n        droid(id: \"droid\") {\n          ...CharacterDetails\n        }\n      }\n    `);\n        const { operations } = legacyIR_1.compileToLegacyIR(schema, document);\n        expect(operations['HumanAndDroid'].fields.map(field => field.fieldName))\n            .toEqual(['human', 'droid']);\n        expect(operations['HumanAndDroid'].fields[0].fields.map(field => field.fieldName))\n            .toEqual(['height']);\n        expect(operations['HumanAndDroid'].fields[0].inlineFragments).toEqual([]);\n        expect(operations['HumanAndDroid'].fields[1].fields.map(field => field.fieldName))\n            .toEqual(['primaryFunction']);\n        expect(operations['HumanAndDroid'].fields[1].inlineFragments).toEqual([]);\n    });\n    it(`should ignore fragment spread when the type condition does not overlap with the currently effective type`, () => {\n        const document = graphql_1.parse(`\n      fragment DroidPrimaryFunction on Droid {\n        primaryFunction\n      }\n\n      fragment HumanHeight on Human {\n        height\n      }\n\n      fragment CharacterDetails on Character {\n        ...DroidPrimaryFunction\n        ...HumanHeight\n      }\n\n      query HumanAndDroid {\n        human(id: \"human\") {\n          ...CharacterDetails\n        }\n        droid(id: \"droid\") {\n          ...CharacterDetails\n        }\n      }\n    `);\n        const { operations } = legacyIR_1.compileToLegacyIR(schema, document);\n        expect(operations['HumanAndDroid'].fields.map(field => field.fieldName))\n            .toEqual(['human', 'droid']);\n        expect(operations['HumanAndDroid'].fields[0].fields.map(field => field.fieldName))\n            .toEqual(['height']);\n        expect(operations['HumanAndDroid'].fields[0].inlineFragments).toEqual([]);\n        expect(operations['HumanAndDroid'].fields[1].fields.map(field => field.fieldName))\n            .toEqual(['primaryFunction']);\n        expect(operations['HumanAndDroid'].fields[1].inlineFragments).toEqual([]);\n    });\n    it(`should include type conditions for inline fragments on a union type`, () => {\n        const document = graphql_1.parse(`\n      query Search {\n        search(text: \"an\") {\n          ... on Character {\n            name\n          }\n          ... on Droid {\n            primaryFunction\n          }\n          ... on Human {\n            height\n          }\n        }\n      }\n    `);\n        const { operations } = legacyIR_1.compileToLegacyIR(schema, document);\n        expect(operations['Search'].fields[0].fields.map(field => field.fieldName))\n            .toEqual([]);\n        expect(operations['Search'].fields[0].inlineFragments[\"Droid\"].typeCondition.toString()).toEqual('Droid');\n        expect(operations['Search'].fields[0].inlineFragments[\"Droid\"].fields.map(field => field.fieldName))\n            .toEqual(['name', 'primaryFunction']);\n        expect(operations['Search'].fields[0].inlineFragments[\"Human\"].typeCondition.toString()).toEqual('Human');\n        expect(operations['Search'].fields[0].inlineFragments[\"Human\"].fields.map(field => field.fieldName))\n            .toEqual(['name', 'height']);\n    });\n    it(`should keep correct field ordering even if fragment is visited multiple times`, () => {\n        const document = graphql_1.parse(`\n      query Hero {\n        hero {\n          ...HeroName\n          appearsIn\n          ...HeroName\n        }\n      }\n\n      fragment HeroName on Character {\n        name\n      }\n    `);\n        const { operations } = legacyIR_1.compileToLegacyIR(schema, document);\n        expect(operations['Hero'].fields[0].fields.map(field => field.fieldName))\n            .toEqual(['name', 'appearsIn']);\n    });\n    it(`should keep correct field ordering even if field has been visited before for other type condition`, () => {\n        const document = graphql_1.parse(`\n      fragment HeroDetails on Character {\n        ... on Human {\n          appearsIn\n        }\n\n        ... on Droid {\n          name\n          appearsIn\n        }\n      }\n    `);\n        const { fragments } = legacyIR_1.compileToLegacyIR(schema, document);\n        expect(fragments['HeroDetails'].inlineFragments['Droid'].typeCondition.toString()).toEqual('Droid');\n        expect(fragments['HeroDetails'].inlineFragments['Droid'].fields.map(field => field.fieldName))\n            .toEqual(['name', 'appearsIn']);\n    });\n    it(`should keep track of fragments referenced in a subselection`, () => {\n        const document = graphql_1.parse(`\n      query HeroAndFriends {\n        hero {\n          name\n          friends {\n            ...HeroDetails\n          }\n        }\n      }\n\n      fragment HeroDetails on Character {\n        name\n      }\n    `);\n        const { operations } = legacyIR_1.compileToLegacyIR(schema, document);\n        expect(operations['HeroAndFriends'].fragmentsReferenced).toEqual(['HeroDetails']);\n    });\n    it(`should keep track of fragments referenced in a fragment within a subselection`, () => {\n        const document = graphql_1.parse(`\n      query HeroAndFriends {\n        hero {\n          ...HeroDetails\n        }\n      }\n\n      fragment HeroDetails on Character {\n        friends {\n          ...HeroName\n        }\n      }\n\n      fragment HeroName on Character {\n        name\n      }\n    `);\n        const { operations } = legacyIR_1.compileToLegacyIR(schema, document);\n        expect(operations['HeroAndFriends'].fragmentsReferenced).toEqual(['HeroDetails', 'HeroName']);\n    });\n    it(`should keep track of fragments referenced in a subselection nested in an inline fragment`, () => {\n        const document = graphql_1.parse(`\n      query HeroAndFriends {\n        hero {\n          name\n          ... on Droid {\n            friends {\n              ...HeroDetails\n            }\n          }\n        }\n      }\n\n      fragment HeroDetails on Character {\n        name\n      }\n    `);\n        const { operations } = legacyIR_1.compileToLegacyIR(schema, document);\n        expect(operations['HeroAndFriends'].fragmentsReferenced).toEqual(['HeroDetails']);\n    });\n    describe(\"with mergeInFieldsFromFragmentSpreads set to false\", () => {\n        it(`should not morge fields from recursively included fragment spreads with type conditions that match the parent type`, () => {\n            const document = graphql_1.parse(`\n        query Hero {\n          hero {\n            id\n            ...HeroDetails\n          }\n        }\n\n        fragment HeroDetails on Character {\n          name\n          ...MoreHeroDetails\n          id\n        }\n\n        fragment MoreHeroDetails on Character {\n          appearsIn\n        }\n      `);\n            const { operations, fragments } = legacyIR_1.compileToLegacyIR(schema, document, { mergeInFieldsFromFragmentSpreads: false });\n            expect(operations['Hero'].fields[0].fields.map(field => field.fieldName))\n                .toEqual(['id']);\n            expect(fragments['HeroDetails'].fields.map(field => field.fieldName))\n                .toEqual(['name', 'id']);\n            expect(fragments['MoreHeroDetails'].fields.map(field => field.fieldName))\n                .toEqual(['appearsIn']);\n            expect(operations['Hero'].fragmentsReferenced).toEqual(['HeroDetails', 'MoreHeroDetails']);\n            expect(operations['Hero'].fields[0].fragmentSpreads).toEqual(['HeroDetails']);\n            expect(fragments['HeroDetails'].fragmentSpreads).toEqual(['MoreHeroDetails']);\n        });\n        it(`should not merge fields from fragment spreads from subselections`, () => {\n            const document = graphql_1.parse(`\n        query HeroAndFriends {\n          hero {\n            ...HeroDetails\n            appearsIn\n            id\n            friends {\n              id\n              ...HeroDetails\n            }\n          }\n        }\n\n        fragment HeroDetails on Character {\n          name\n          id\n        }\n      `);\n            const { operations, fragments } = legacyIR_1.compileToLegacyIR(schema, document, { mergeInFieldsFromFragmentSpreads: false });\n            expect(operations['HeroAndFriends'].fields[0].fields.map(field => field.fieldName))\n                .toEqual(['appearsIn', 'id', 'friends']);\n            expect(operations['HeroAndFriends'].fields[0].fields[2].fields.map(field => field.fieldName))\n                .toEqual(['id']);\n            expect(fragments['HeroDetails'].fields.map(field => field.fieldName))\n                .toEqual(['name', 'id']);\n            expect(operations['HeroAndFriends'].fragmentsReferenced).toEqual(['HeroDetails']);\n            expect(operations['HeroAndFriends'].fields[0].fragmentSpreads).toEqual(['HeroDetails']);\n        });\n        it(`should not merge fields from fragment spreads with type conditions`, () => {\n            const document = graphql_1.parse(`\n        query Hero {\n          hero {\n            name\n            ...DroidDetails\n            ...HumanDetails\n          }\n        }\n\n        fragment DroidDetails on Droid {\n          primaryFunction\n        }\n\n        fragment HumanDetails on Human {\n          height\n        }\n      `);\n            const { operations, fragments } = legacyIR_1.compileToLegacyIR(schema, document, { mergeInFieldsFromFragmentSpreads: false });\n            expect(operations['Hero'].fields[0].fields.map(field => field.fieldName))\n                .toEqual(['name']);\n            expect(operations['Hero'].fields[0].inlineFragment).toBeUndefined();\n            expect(operations['Hero'].fragmentsReferenced).toEqual(['DroidDetails', 'HumanDetails']);\n            expect(operations['Hero'].fields[0].fragmentSpreads).toEqual(['DroidDetails', 'HumanDetails']);\n        });\n    });\n    it(`should include the source of operations`, () => {\n        const source = common_tags_1.stripIndent `\n      query HeroName {\n        hero {\n          name\n        }\n      }\n    `;\n        const document = graphql_1.parse(source);\n        const { operations } = legacyIR_1.compileToLegacyIR(schema, document);\n        expect(operations['HeroName'].source).toBe(source);\n    });\n    it(`should include the source of fragments`, () => {\n        const source = common_tags_1.stripIndent `\n      fragment HeroDetails on Character {\n        name\n      }\n    `;\n        const document = graphql_1.parse(source);\n        const { fragments } = legacyIR_1.compileToLegacyIR(schema, document);\n        expect(fragments['HeroDetails'].source).toBe(source);\n    });\n    it(`should include the source of operations with __typename added when addTypename is true`, () => {\n        const source = common_tags_1.stripIndent `\n      query HeroName {\n        hero {\n          name\n        }\n      }\n    `;\n        const document = graphql_1.parse(source);\n        const { operations } = legacyIR_1.compileToLegacyIR(schema, document, { addTypename: true });\n        expect(operations['HeroName'].source).toBe(common_tags_1.stripIndent `\n      query HeroName {\n        hero {\n          __typename\n          name\n        }\n      }\n    `);\n    });\n    it(`should include the source of fragments with __typename added when addTypename is true`, () => {\n        const source = common_tags_1.stripIndent `\n      fragment HeroDetails on Character {\n        name\n      }\n    `;\n        const document = graphql_1.parse(source);\n        const { fragments } = legacyIR_1.compileToLegacyIR(schema, document, { addTypename: true });\n        expect(fragments['HeroDetails'].source).toBe(common_tags_1.stripIndent `\n      fragment HeroDetails on Character {\n        __typename\n        name\n      }\n    `);\n    });\n    it(`should include the operationType for a query`, () => {\n        const source = common_tags_1.stripIndent `\n      query HeroName {\n        hero {\n          name\n        }\n      }\n    `;\n        const document = graphql_1.parse(source);\n        const { operations } = legacyIR_1.compileToLegacyIR(schema, document);\n        expect(operations['HeroName'].operationType).toBe('query');\n    });\n    it(`should include the operationType for a mutation`, () => {\n        const source = common_tags_1.stripIndent `\n      mutation CreateReview {\n        createReview {\n          stars\n          commentary\n        }\n      }\n    `;\n        const document = graphql_1.parse(source);\n        const { operations } = legacyIR_1.compileToLegacyIR(schema, document);\n        expect(operations['CreateReview'].operationType).toBe('mutation');\n    });\n});\n//# sourceMappingURL=data:application/json;base64,");"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const common_tags_1 = require("common-tags");
const graphql_1 = require("graphql");
const loading_1 = require("../../src/loading");
const legacyIR_1 = require("../../src/compiler/legacyIR");
const serializeToJSON_1 = require("../../src/serializeToJSON");
function withStringifiedTypes(ir) {
  return JSON.parse(serializeToJSON_1.serializeAST(ir));
}
const schema = loading_1.loadSchema(require.resolve('../fixtures/starwars/schema.json'));
describe('Compiling query documents to the legacy IR', () => {
  it(`should include variables defined in operations`, () => {
    const document = graphql_1.parse(`
      query HeroName($episode: Episode) {
        hero(episode: $episode) {
          name
        }
      }

      query Search($text: String!) {
        search(text: $text) {
          ... on Character {
            name
          }
        }
      }

      mutation CreateReviewForEpisode($episode: Episode!, $review: ReviewInput!) {
        createReview(episode: $episode, review: $review) {
          stars
          commentary
        }
      }
    `);
    const { operations } = withStringifiedTypes(legacyIR_1.compileToLegacyIR(schema, document));
    expect(operations['HeroName'].variables).toEqual([
    { name: 'episode', type: 'Episode' }]);

    expect(operations['Search'].variables).toEqual([
    { name: 'text', type: 'String!' }]);

    expect(operations['CreateReviewForEpisode'].variables).toEqual([
    { name: 'episode', type: 'Episode!' },
    { name: 'review', type: 'ReviewInput!' }]);

  });
  it(`should keep track of enums and input object types used in variables`, () => {
    const document = graphql_1.parse(`
      query HeroName($episode: Episode) {
        hero(episode: $episode) {
          name
        }
      }

      query Search($text: String) {
        search(text: $text) {
          ... on Character {
            name
          }
        }
      }

      mutation CreateReviewForEpisode($episode: Episode!, $review: ReviewInput!) {
        createReview(episode: $episode, review: $review) {
          stars
          commentary
        }
      }
    `);
    const { typesUsed } = withStringifiedTypes(legacyIR_1.compileToLegacyIR(schema, document));
    expect(typesUsed).toEqual(['Episode', 'ReviewInput', 'ColorInput']);
  });
  it(`should keep track of enums used in fields`, () => {
    const document = graphql_1.parse(`
      query Hero {
        hero {
          name
          appearsIn
        }

        droid(id: "2001") {
          appearsIn
        }
      }
    `);
    const { typesUsed } = withStringifiedTypes(legacyIR_1.compileToLegacyIR(schema, document));
    expect(typesUsed).toEqual(['Episode']);
  });
  it(`should keep track of types used in fields of input objects`, () => {
    const document = graphql_1.parse(`
      mutation FieldArgumentsWithInputObjects($review: ReviewInput!) {
        createReview(episode: JEDI, review: $review) {
          commentary
        }
      }
      `);
    const { typesUsed } = withStringifiedTypes(legacyIR_1.compileToLegacyIR(schema, document));
    expect(typesUsed).toContain('ReviewInput');
    expect(typesUsed).toContain('ColorInput');
  });
  it(`should include the original field name for an aliased field`, () => {
    const document = graphql_1.parse(`
      query HeroName {
        r2: hero {
          name
        }
        luke: hero(episode: EMPIRE) {
          name
        }
      }
    `);
    const { operations } = legacyIR_1.compileToLegacyIR(schema, document);
    expect(operations['HeroName'].fields[0].fieldName).toBe("hero");
  });
  it(`should include field arguments`, () => {
    const document = graphql_1.parse(`
      query HeroName {
        hero(episode: EMPIRE) {
          name
        }
      }
    `);
    const { operations } = legacyIR_1.compileToLegacyIR(schema, document);
    expect(operations['HeroName'].fields[0].args).
    toEqual([{ name: "episode", value: "EMPIRE", type: schema.getType("Episode") }]);
  });
  it(`should include isConditional if a field has skip or include directives with variables`, () => {
    const document = graphql_1.parse(`
      query HeroNameConditionalInclusion($includeName: Boolean!) {
        hero {
          name @include(if: $includeName)
        }
      }

      query HeroNameConditionalExclusion($skipName: Boolean!) {
        hero {
          name @skip(if: $skipName)
        }
      }
    `);
    const { operations } = legacyIR_1.compileToLegacyIR(schema, document);
    expect(operations['HeroNameConditionalInclusion'].fields[0].fields[0]).toMatchObject({
      fieldName: 'name',
      isConditional: true });

    expect(operations['HeroNameConditionalExclusion'].fields[0].fields[0]).toMatchObject({
      fieldName: 'name',
      isConditional: true });

  });
  it(`should not include isConditional if a field has skip or include directives with a boolean literal that always passes`, () => {
    const document = graphql_1.parse(`
      query HeroNameConditionalInclusion {
        hero {
          name @include(if: true)
        }
      }

      query HeroNameConditionalExclusion {
        hero {
          name @skip(if: false)
        }
      }
    `);
    const { operations } = legacyIR_1.compileToLegacyIR(schema, document);
    expect(operations['HeroNameConditionalInclusion'].fields[0].fields[0]).toMatchObject({
      fieldName: 'name',
      isConditional: false });

    expect(operations['HeroNameConditionalExclusion'].fields[0].fields[0]).toMatchObject({
      fieldName: 'name',
      isConditional: false });

  });
  it(`should not include field if it has skip or include directives with a boolean literal that always fails`, () => {
    const document = graphql_1.parse(`
      query HeroNameConditionalInclusion {
        hero {
          name @include(if: false)
        }
      }

      query HeroNameConditionalExclusion {
        hero {
          name @skip(if: true)
        }
      }
    `);
    const { operations } = legacyIR_1.compileToLegacyIR(schema, document);
    expect(operations['HeroNameConditionalInclusion'].fields[0].fields).toHaveLength(0);
    expect(operations['HeroNameConditionalExclusion'].fields[0].fields).toHaveLength(0);
  });
  it(`should include isConditional if a field in inside an inline fragment with skip or include directives with variables`, () => {
    const document = graphql_1.parse(`
      query HeroNameConditionalInclusion($includeName: Boolean!) {
        hero {
          ... @include(if: $includeName) {
            name
          }
        }
      }

      query HeroNameConditionalExclusion($skipName: Boolean!) {
        hero {
          ... @skip(if: $skipName) {
            name
          }
        }
      }
    `);
    const { operations } = legacyIR_1.compileToLegacyIR(schema, document);
    expect(operations['HeroNameConditionalInclusion'].fields[0].fields[0]).toMatchObject({
      fieldName: 'name',
      isConditional: true });

    expect(operations['HeroNameConditionalExclusion'].fields[0].fields[0]).toMatchObject({
      fieldName: 'name',
      isConditional: true });

  });
  it(`should include isConditional if a field in inside a fragment spread with skip or include directives with variables`, () => {
    const document = graphql_1.parse(`
      query HeroNameConditionalInclusion($includeName: Boolean!) {
        hero {
          ...HeroName @include(if: $includeName)
        }
      }

      query HeroNameConditionalExclusion($skipName: Boolean!) {
        hero {
          ...HeroName @skip(if: $skipName)
        }
      }

      fragment HeroName on Character {
        name
      }
    `);
    const { operations } = legacyIR_1.compileToLegacyIR(schema, document);
    expect(operations['HeroNameConditionalInclusion'].fields[0].fields[0]).toMatchObject({
      fieldName: 'name',
      isConditional: true });

    expect(operations['HeroNameConditionalExclusion'].fields[0].fields[0]).toMatchObject({
      fieldName: 'name',
      isConditional: true });

    expect(operations['HeroNameConditionalInclusion'].fragmentsReferenced).toEqual(['HeroName']);
    expect(operations['HeroNameConditionalInclusion'].fields[0].fragmentSpreads).toEqual(['HeroName']);
    expect(operations['HeroNameConditionalExclusion'].fragmentsReferenced).toEqual(['HeroName']);
    expect(operations['HeroNameConditionalExclusion'].fields[0].fragmentSpreads).toEqual(['HeroName']);
  });
  it(`should recursively flatten inline fragments with type conditions that match the parent type`, () => {
    const document = graphql_1.parse(`
      query Hero {
        hero {
          id
          ... on Character {
            name
            ... on Character {
              id
              appearsIn
            }
            id
          }
        }
      }
    `);
    const { operations } = legacyIR_1.compileToLegacyIR(schema, document);
    expect(operations['Hero'].fields[0].fields.map(field => field.fieldName)).
    toEqual(['id', 'name', 'appearsIn']);
  });
  it(`should recursively include fragment spreads with type conditions that match the parent type`, () => {
    const document = graphql_1.parse(`
      query Hero {
        hero {
          id
          ...HeroDetails
        }
      }

      fragment HeroDetails on Character {
        name
        ...MoreHeroDetails
        id
      }

      fragment MoreHeroDetails on Character {
        appearsIn
      }
    `);
    const { operations, fragments } = legacyIR_1.compileToLegacyIR(schema, document);
    expect(operations['Hero'].fields[0].fields.map(field => field.fieldName)).
    toEqual(['id', 'name', 'appearsIn']);
    expect(fragments['HeroDetails'].fields.map(field => field.fieldName)).
    toEqual(['name', 'appearsIn', 'id']);
    expect(fragments['MoreHeroDetails'].fields.map(field => field.fieldName)).
    toEqual(['appearsIn']);
    expect(operations['Hero'].fragmentsReferenced).toEqual(['HeroDetails', 'MoreHeroDetails']);
    expect(operations['Hero'].fields[0].fragmentSpreads).toEqual(['HeroDetails']);
    expect(fragments['HeroDetails'].fragmentSpreads).toEqual(['MoreHeroDetails']);
  });
  it(`should include fragment spreads from subselections`, () => {
    const document = graphql_1.parse(`
      query HeroAndFriends {
        hero {
          ...HeroDetails
          appearsIn
          id
          friends {
            id
            ...HeroDetails
          }
        }
      }

      fragment HeroDetails on Character {
      	name
        id
      }
    `);
    const { operations, fragments } = legacyIR_1.compileToLegacyIR(schema, document);
    expect(operations['HeroAndFriends'].fields[0].fields.map(field => field.fieldName)).
    toEqual(['name', 'id', 'appearsIn', 'friends']);
    expect(operations['HeroAndFriends'].fields[0].fields[3].fields.map(field => field.fieldName)).
    toEqual(['id', 'name']);
    expect(fragments['HeroDetails'].fields.map(field => field.fieldName)).
    toEqual(['name', 'id']);
    expect(operations['HeroAndFriends'].fragmentsReferenced).toEqual(['HeroDetails']);
    expect(operations['HeroAndFriends'].fields[0].fragmentSpreads).toEqual(['HeroDetails']);
  });
  it(`should include type conditions with merged fields for inline fragments`, () => {
    const document = graphql_1.parse(`
      query Hero {
        hero {
          name
          ... on Droid {
            primaryFunction
          }
          ... on Human {
            height
          }
        }
      }
    `);
    const { operations } = legacyIR_1.compileToLegacyIR(schema, document);
    expect(operations['Hero'].fields[0].fields.map(field => field.fieldName)).
    toEqual(['name']);
    return;
    expect(operations['Hero'].fields[0].inlineFragments["Droid"].typeCondition.toString()).toEqual('Droid');
    expect(operations['Hero'].fields[0].inlineFragments["Droid"].fields.map(field => field.fieldName)).
    toEqual(['name', 'primaryFunction']);
    expect(operations['Hero'].fields[0].inlineFragments["Human"].typeCondition.toString()).toEqual('Human');
    expect(operations['Hero'].fields[0].inlineFragments["Human"].fields.map(field => field.fieldName)).
    toEqual(['name', 'height']);
  });
  it(`should include fragment spreads with type conditions`, () => {
    const document = graphql_1.parse(`
      query Hero {
        hero {
          name
          ...DroidDetails
          ...HumanDetails
        }
      }

      fragment DroidDetails on Droid {
        primaryFunction
      }

      fragment HumanDetails on Human {
        height
      }
    `);
    const { operations, fragments } = legacyIR_1.compileToLegacyIR(schema, document);
    expect(operations['Hero'].fields[0].fields.map(field => field.fieldName)).
    toEqual(['name']);
    expect(operations['Hero'].fields[0].inlineFragments["Droid"].typeCondition.toString()).toEqual('Droid');
    expect(operations['Hero'].fields[0].inlineFragments["Droid"].fields.map(field => field.fieldName)).
    toEqual(['name', 'primaryFunction']);
    expect(operations['Hero'].fields[0].inlineFragments['Human'].typeCondition.toString()).toEqual('Human');
    expect(operations['Hero'].fields[0].inlineFragments['Human'].fields.map(field => field.fieldName)).
    toEqual(['name', 'height']);
    expect(operations['Hero'].fragmentsReferenced).toEqual(['DroidDetails', 'HumanDetails']);
    expect(operations['Hero'].fields[0].fragmentSpreads).toEqual(['DroidDetails', 'HumanDetails']);
  });
  it(`should not include type conditions for fragment spreads with type conditions that match the parent type`, () => {
    const document = graphql_1.parse(`
      query Hero {
        hero {
          name
          ...HeroDetails
        }
      }

      fragment HeroDetails on Character {
        name
      }
    `);
    const { operations } = legacyIR_1.compileToLegacyIR(schema, document);
    expect(operations['Hero'].fields[0].fields.map(field => field.fieldName)).
    toEqual(['name']);
    expect(operations['Hero'].fields[0].inlineFragments).toEqual([]);
  });
  it(`should include type conditions for inline fragments in fragments`, () => {
    const document = graphql_1.parse(`
      query Hero {
        hero {
          ...HeroDetails
        }
      }

      fragment HeroDetails on Character {
        name
        ... on Droid {
          primaryFunction
        }
        ... on Human {
          height
        }
      }
    `);
    const { operations, fragments } = legacyIR_1.compileToLegacyIR(schema, document);
    expect(operations['Hero'].fields[0].fields.map(field => field.fieldName)).
    toEqual(['name']);
    expect(operations['Hero'].fields[0].inlineFragments['Droid'].typeCondition.toString()).toEqual('Droid');
    expect(operations['Hero'].fields[0].inlineFragments['Droid'].fields.map(field => field.fieldName)).
    toEqual(['name', 'primaryFunction']);
    expect(operations['Hero'].fields[0].inlineFragments['Human'].typeCondition.toString()).toEqual('Human');
    expect(operations['Hero'].fields[0].inlineFragments['Human'].fields.map(field => field.fieldName)).
    toEqual(['name', 'height']);
    expect(operations['Hero'].fragmentsReferenced).toEqual(['HeroDetails']);
    expect(operations['Hero'].fields[0].fragmentSpreads).toEqual(['HeroDetails']);
  });
  it(`should inherit type condition when nesting an inline fragment in an inline fragment with a more specific type condition`, () => {
    const document = graphql_1.parse(`
      query HeroName {
        hero {
          ... on Droid {
            ... on Character {
              name
            }
          }
        }
      }
    `);
    const { operations } = legacyIR_1.compileToLegacyIR(schema, document);
    expect(operations['HeroName'].fields[0].fields.map(field => field.fieldName)).
    toEqual([]);
    expect(operations['HeroName'].fields[0].inlineFragments['Droid'].typeCondition.toString()).toEqual('Droid');
    expect(operations['HeroName'].fields[0].inlineFragments['Droid'].fields.map(field => field.fieldName)).
    toEqual(['name']);
  });
  it(`should not inherit type condition when nesting an inline fragment in an inline fragment with a less specific type condition`, () => {
    const document = graphql_1.parse(`
      query HeroName {
        hero {
          ... on Character {
            ... on Droid {
              name
            }
          }
        }
      }
    `);
    const { operations } = legacyIR_1.compileToLegacyIR(schema, document);
    expect(operations['HeroName'].fields[0].fields.map(field => field.fieldName)).
    toEqual([]);
    expect(operations['HeroName'].fields[0].inlineFragments['Droid'].typeCondition.toString()).toEqual('Droid');
    expect(operations['HeroName'].fields[0].inlineFragments['Droid'].fields.map(field => field.fieldName)).
    toEqual(['name']);
  });
  it(`should inherit type condition when nesting a fragment spread in an inline fragment with a more specific type condition`, () => {
    const document = graphql_1.parse(`
      query HeroName {
        hero {
          ... on Droid {
            ...CharacterName
          }
        }
      }

      fragment CharacterName on Character {
        name
      }
    `);
    const { operations } = legacyIR_1.compileToLegacyIR(schema, document);
    expect(operations['HeroName'].fields[0].fields.map(field => field.fieldName)).
    toEqual([]);
    expect(operations['HeroName'].fields[0].inlineFragments["Droid"].typeCondition.toString()).toEqual('Droid');
    expect(operations['HeroName'].fields[0].inlineFragments["Droid"].fields.map(field => field.fieldName)).
    toEqual(['name']);
    expect(operations['HeroName'].fields[0].inlineFragments["Droid"].fragmentSpreads).toEqual(['CharacterName']);
    expect(operations['HeroName'].fragmentsReferenced).toEqual(['CharacterName']);
    expect(operations['HeroName'].fields[0].fragmentSpreads).toEqual([]);
  });
  it(`should not inherit type condition when nesting a fragment spread in an inline fragment with a less specific type condition`, () => {
    const document = graphql_1.parse(`
      query HeroName {
        hero {
          ... on Character {
            ...DroidName
          }
        }
      }

      fragment DroidName on Droid {
        name
      }
    `);
    const { operations } = legacyIR_1.compileToLegacyIR(schema, document);
    expect(operations['HeroName'].fields[0].fields.map(field => field.fieldName)).
    toEqual([]);
    expect(operations['HeroName'].fields[0].inlineFragments["Droid"].typeCondition.toString()).toEqual('Droid');
    expect(operations['HeroName'].fields[0].inlineFragments["Droid"].fields.map(field => field.fieldName)).
    toEqual(['name']);
    expect(operations['HeroName'].fields[0].inlineFragments["Droid"].fragmentSpreads).toEqual(['DroidName']);
    expect(operations['HeroName'].fragmentsReferenced).toEqual(['DroidName']);
    expect(operations['HeroName'].fields[0].fragmentSpreads).toEqual(['DroidName']);
  });
  it(`should ignore inline fragment when the type condition does not overlap with the currently effective type`, () => {
    const document = graphql_1.parse(`
      fragment CharacterDetails on Character {
        ... on Droid {
          primaryFunction
        }
        ... on Human {
          height
        }
      }

      query HumanAndDroid {
        human(id: "human") {
          ...CharacterDetails
        }
        droid(id: "droid") {
          ...CharacterDetails
        }
      }
    `);
    const { operations } = legacyIR_1.compileToLegacyIR(schema, document);
    expect(operations['HumanAndDroid'].fields.map(field => field.fieldName)).
    toEqual(['human', 'droid']);
    expect(operations['HumanAndDroid'].fields[0].fields.map(field => field.fieldName)).
    toEqual(['height']);
    expect(operations['HumanAndDroid'].fields[0].inlineFragments).toEqual([]);
    expect(operations['HumanAndDroid'].fields[1].fields.map(field => field.fieldName)).
    toEqual(['primaryFunction']);
    expect(operations['HumanAndDroid'].fields[1].inlineFragments).toEqual([]);
  });
  it(`should ignore fragment spread when the type condition does not overlap with the currently effective type`, () => {
    const document = graphql_1.parse(`
      fragment DroidPrimaryFunction on Droid {
        primaryFunction
      }

      fragment HumanHeight on Human {
        height
      }

      fragment CharacterDetails on Character {
        ...DroidPrimaryFunction
        ...HumanHeight
      }

      query HumanAndDroid {
        human(id: "human") {
          ...CharacterDetails
        }
        droid(id: "droid") {
          ...CharacterDetails
        }
      }
    `);
    const { operations } = legacyIR_1.compileToLegacyIR(schema, document);
    expect(operations['HumanAndDroid'].fields.map(field => field.fieldName)).
    toEqual(['human', 'droid']);
    expect(operations['HumanAndDroid'].fields[0].fields.map(field => field.fieldName)).
    toEqual(['height']);
    expect(operations['HumanAndDroid'].fields[0].inlineFragments).toEqual([]);
    expect(operations['HumanAndDroid'].fields[1].fields.map(field => field.fieldName)).
    toEqual(['primaryFunction']);
    expect(operations['HumanAndDroid'].fields[1].inlineFragments).toEqual([]);
  });
  it(`should include type conditions for inline fragments on a union type`, () => {
    const document = graphql_1.parse(`
      query Search {
        search(text: "an") {
          ... on Character {
            name
          }
          ... on Droid {
            primaryFunction
          }
          ... on Human {
            height
          }
        }
      }
    `);
    const { operations } = legacyIR_1.compileToLegacyIR(schema, document);
    expect(operations['Search'].fields[0].fields.map(field => field.fieldName)).
    toEqual([]);
    expect(operations['Search'].fields[0].inlineFragments["Droid"].typeCondition.toString()).toEqual('Droid');
    expect(operations['Search'].fields[0].inlineFragments["Droid"].fields.map(field => field.fieldName)).
    toEqual(['name', 'primaryFunction']);
    expect(operations['Search'].fields[0].inlineFragments["Human"].typeCondition.toString()).toEqual('Human');
    expect(operations['Search'].fields[0].inlineFragments["Human"].fields.map(field => field.fieldName)).
    toEqual(['name', 'height']);
  });
  it(`should keep correct field ordering even if fragment is visited multiple times`, () => {
    const document = graphql_1.parse(`
      query Hero {
        hero {
          ...HeroName
          appearsIn
          ...HeroName
        }
      }

      fragment HeroName on Character {
        name
      }
    `);
    const { operations } = legacyIR_1.compileToLegacyIR(schema, document);
    expect(operations['Hero'].fields[0].fields.map(field => field.fieldName)).
    toEqual(['name', 'appearsIn']);
  });
  it(`should keep correct field ordering even if field has been visited before for other type condition`, () => {
    const document = graphql_1.parse(`
      fragment HeroDetails on Character {
        ... on Human {
          appearsIn
        }

        ... on Droid {
          name
          appearsIn
        }
      }
    `);
    const { fragments } = legacyIR_1.compileToLegacyIR(schema, document);
    expect(fragments['HeroDetails'].inlineFragments['Droid'].typeCondition.toString()).toEqual('Droid');
    expect(fragments['HeroDetails'].inlineFragments['Droid'].fields.map(field => field.fieldName)).
    toEqual(['name', 'appearsIn']);
  });
  it(`should keep track of fragments referenced in a subselection`, () => {
    const document = graphql_1.parse(`
      query HeroAndFriends {
        hero {
          name
          friends {
            ...HeroDetails
          }
        }
      }

      fragment HeroDetails on Character {
        name
      }
    `);
    const { operations } = legacyIR_1.compileToLegacyIR(schema, document);
    expect(operations['HeroAndFriends'].fragmentsReferenced).toEqual(['HeroDetails']);
  });
  it(`should keep track of fragments referenced in a fragment within a subselection`, () => {
    const document = graphql_1.parse(`
      query HeroAndFriends {
        hero {
          ...HeroDetails
        }
      }

      fragment HeroDetails on Character {
        friends {
          ...HeroName
        }
      }

      fragment HeroName on Character {
        name
      }
    `);
    const { operations } = legacyIR_1.compileToLegacyIR(schema, document);
    expect(operations['HeroAndFriends'].fragmentsReferenced).toEqual(['HeroDetails', 'HeroName']);
  });
  it(`should keep track of fragments referenced in a subselection nested in an inline fragment`, () => {
    const document = graphql_1.parse(`
      query HeroAndFriends {
        hero {
          name
          ... on Droid {
            friends {
              ...HeroDetails
            }
          }
        }
      }

      fragment HeroDetails on Character {
        name
      }
    `);
    const { operations } = legacyIR_1.compileToLegacyIR(schema, document);
    expect(operations['HeroAndFriends'].fragmentsReferenced).toEqual(['HeroDetails']);
  });
  describe("with mergeInFieldsFromFragmentSpreads set to false", () => {
    it(`should not morge fields from recursively included fragment spreads with type conditions that match the parent type`, () => {
      const document = graphql_1.parse(`
        query Hero {
          hero {
            id
            ...HeroDetails
          }
        }

        fragment HeroDetails on Character {
          name
          ...MoreHeroDetails
          id
        }

        fragment MoreHeroDetails on Character {
          appearsIn
        }
      `);
      const { operations, fragments } = legacyIR_1.compileToLegacyIR(schema, document, { mergeInFieldsFromFragmentSpreads: false });
      expect(operations['Hero'].fields[0].fields.map(field => field.fieldName)).
      toEqual(['id']);
      expect(fragments['HeroDetails'].fields.map(field => field.fieldName)).
      toEqual(['name', 'id']);
      expect(fragments['MoreHeroDetails'].fields.map(field => field.fieldName)).
      toEqual(['appearsIn']);
      expect(operations['Hero'].fragmentsReferenced).toEqual(['HeroDetails', 'MoreHeroDetails']);
      expect(operations['Hero'].fields[0].fragmentSpreads).toEqual(['HeroDetails']);
      expect(fragments['HeroDetails'].fragmentSpreads).toEqual(['MoreHeroDetails']);
    });
    it(`should not merge fields from fragment spreads from subselections`, () => {
      const document = graphql_1.parse(`
        query HeroAndFriends {
          hero {
            ...HeroDetails
            appearsIn
            id
            friends {
              id
              ...HeroDetails
            }
          }
        }

        fragment HeroDetails on Character {
          name
          id
        }
      `);
      const { operations, fragments } = legacyIR_1.compileToLegacyIR(schema, document, { mergeInFieldsFromFragmentSpreads: false });
      expect(operations['HeroAndFriends'].fields[0].fields.map(field => field.fieldName)).
      toEqual(['appearsIn', 'id', 'friends']);
      expect(operations['HeroAndFriends'].fields[0].fields[2].fields.map(field => field.fieldName)).
      toEqual(['id']);
      expect(fragments['HeroDetails'].fields.map(field => field.fieldName)).
      toEqual(['name', 'id']);
      expect(operations['HeroAndFriends'].fragmentsReferenced).toEqual(['HeroDetails']);
      expect(operations['HeroAndFriends'].fields[0].fragmentSpreads).toEqual(['HeroDetails']);
    });
    it(`should not merge fields from fragment spreads with type conditions`, () => {
      const document = graphql_1.parse(`
        query Hero {
          hero {
            name
            ...DroidDetails
            ...HumanDetails
          }
        }

        fragment DroidDetails on Droid {
          primaryFunction
        }

        fragment HumanDetails on Human {
          height
        }
      `);
      const { operations, fragments } = legacyIR_1.compileToLegacyIR(schema, document, { mergeInFieldsFromFragmentSpreads: false });
      expect(operations['Hero'].fields[0].fields.map(field => field.fieldName)).
      toEqual(['name']);
      expect(operations['Hero'].fields[0].inlineFragment).toBeUndefined();
      expect(operations['Hero'].fragmentsReferenced).toEqual(['DroidDetails', 'HumanDetails']);
      expect(operations['Hero'].fields[0].fragmentSpreads).toEqual(['DroidDetails', 'HumanDetails']);
    });
  });
  it(`should include the source of operations`, () => {
    const source = common_tags_1.stripIndent`
      query HeroName {
        hero {
          name
        }
      }
    `;
    const document = graphql_1.parse(source);
    const { operations } = legacyIR_1.compileToLegacyIR(schema, document);
    expect(operations['HeroName'].source).toBe(source);
  });
  it(`should include the source of fragments`, () => {
    const source = common_tags_1.stripIndent`
      fragment HeroDetails on Character {
        name
      }
    `;
    const document = graphql_1.parse(source);
    const { fragments } = legacyIR_1.compileToLegacyIR(schema, document);
    expect(fragments['HeroDetails'].source).toBe(source);
  });
  it(`should include the source of operations with __typename added when addTypename is true`, () => {
    const source = common_tags_1.stripIndent`
      query HeroName {
        hero {
          name
        }
      }
    `;
    const document = graphql_1.parse(source);
    const { operations } = legacyIR_1.compileToLegacyIR(schema, document, { addTypename: true });
    expect(operations['HeroName'].source).toBe(common_tags_1.stripIndent`
      query HeroName {
        hero {
          __typename
          name
        }
      }
    `);
  });
  it(`should include the source of fragments with __typename added when addTypename is true`, () => {
    const source = common_tags_1.stripIndent`
      fragment HeroDetails on Character {
        name
      }
    `;
    const document = graphql_1.parse(source);
    const { fragments } = legacyIR_1.compileToLegacyIR(schema, document, { addTypename: true });
    expect(fragments['HeroDetails'].source).toBe(common_tags_1.stripIndent`
      fragment HeroDetails on Character {
        __typename
        name
      }
    `);
  });
  it(`should include the operationType for a query`, () => {
    const source = common_tags_1.stripIndent`
      query HeroName {
        hero {
          name
        }
      }
    `;
    const document = graphql_1.parse(source);
    const { operations } = legacyIR_1.compileToLegacyIR(schema, document);
    expect(operations['HeroName'].operationType).toBe('query');
  });
  it(`should include the operationType for a mutation`, () => {
    const source = common_tags_1.stripIndent`
      mutation CreateReview {
        createReview {
          stars
          commentary
        }
      }
    `;
    const document = graphql_1.parse(source);
    const { operations } = legacyIR_1.compileToLegacyIR(schema, document);
    expect(operations['CreateReview'].operationType).toBe('mutation');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,