758310290022fb6df745c2c370d43e75
'use strict';require('ts-jest').install("/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-types-generator/src/swift/helpers.ts", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst graphql_1 = require(\"graphql\");\nconst change_case_1 = require(\"change-case\");\nconst Inflector = require(\"inflected\");\nconst printing_1 = require(\"../utilities/printing\");\nconst graphql_2 = require(\"../utilities/graphql\");\nconst collectAndMergeFields_1 = require(\"../compiler/visitors/collectAndMergeFields\");\nconst aws_scalar_helper_1 = require(\"./aws-scalar-helper\");\nconst builtInScalarMap = {\n    [graphql_1.GraphQLString.name]: 'String',\n    [graphql_1.GraphQLInt.name]: 'Int',\n    [graphql_1.GraphQLFloat.name]: 'Double',\n    [graphql_1.GraphQLBoolean.name]: 'Bool',\n    [graphql_1.GraphQLID.name]: 'GraphQLID'\n};\nclass Helpers {\n    constructor(options) {\n        this.options = options;\n    }\n    typeNameFromGraphQLType(type, unmodifiedTypeName, isOptional) {\n        if (graphql_1.isNonNullType(type)) {\n            return this.typeNameFromGraphQLType(type.ofType, unmodifiedTypeName, false);\n        }\n        else if (isOptional === undefined) {\n            isOptional = true;\n        }\n        let typeName;\n        if (graphql_1.isListType(type)) {\n            typeName = '[' + this.typeNameFromGraphQLType(type.ofType, unmodifiedTypeName) + ']';\n        }\n        else if (type instanceof graphql_1.GraphQLScalarType) {\n            typeName = this.typeNameForScalarType(type);\n        }\n        else {\n            typeName = unmodifiedTypeName || type.name;\n        }\n        return isOptional ? typeName + '?' : typeName;\n    }\n    typeNameForScalarType(type) {\n        return (builtInScalarMap[type.name] ||\n            (this.options.passthroughCustomScalars\n                ? this.options.customScalarsPrefix + type.name\n                : aws_scalar_helper_1.getTypeForAWSScalar(type) ? aws_scalar_helper_1.getTypeForAWSScalar(type) : graphql_1.GraphQLString.name));\n    }\n    fieldTypeEnum(type, structName) {\n        if (graphql_1.isNonNullType(type)) {\n            return `.nonNull(${this.fieldTypeEnum(type.ofType, structName)})`;\n        }\n        else if (graphql_1.isListType(type)) {\n            return `.list(${this.fieldTypeEnum(type.ofType, structName)})`;\n        }\n        else if (type instanceof graphql_1.GraphQLScalarType) {\n            return `.scalar(${this.typeNameForScalarType(type)}.self)`;\n        }\n        else if (type instanceof graphql_1.GraphQLEnumType) {\n            return `.scalar(${type.name}.self)`;\n        }\n        else if (graphql_1.isCompositeType(type)) {\n            return `.object(${structName}.selections)`;\n        }\n        else {\n            throw new Error(`Unknown field type: ${type}`);\n        }\n    }\n    enumCaseName(name) {\n        return change_case_1.camelCase(name);\n    }\n    enumDotCaseName(name) {\n        return `.${change_case_1.camelCase(name)}`;\n    }\n    operationClassName(name) {\n        return change_case_1.pascalCase(name);\n    }\n    structNameForPropertyName(propertyName) {\n        return change_case_1.pascalCase(Inflector.singularize(propertyName));\n    }\n    structNameForFragmentName(fragmentName) {\n        return change_case_1.pascalCase(fragmentName);\n    }\n    structNameForVariant(variant) {\n        return 'As' + variant.possibleTypes.map(type => change_case_1.pascalCase(type.name)).join('Or');\n    }\n    propertyFromField(field, namespace) {\n        const { responseKey, isConditional } = field;\n        const propertyName = graphql_2.isMetaFieldName(responseKey) ? responseKey : change_case_1.camelCase(responseKey);\n        const structName = printing_1.join([namespace, this.structNameForPropertyName(responseKey)], '.');\n        let type = field.type;\n        if (isConditional && graphql_1.isNonNullType(type)) {\n            type = type.ofType;\n        }\n        const isOptional = !(type instanceof graphql_1.GraphQLNonNull);\n        const unmodifiedType = graphql_1.getNamedType(field.type);\n        const unmodifiedTypeName = graphql_1.isCompositeType(unmodifiedType) ? structName : unmodifiedType.name;\n        const typeName = this.typeNameFromGraphQLType(type, unmodifiedTypeName);\n        return Object.assign({}, field, {\n            responseKey,\n            propertyName,\n            typeName,\n            structName,\n            isOptional\n        });\n    }\n    propertyFromVariant(variant) {\n        const structName = this.structNameForVariant(variant);\n        return Object.assign(variant, {\n            propertyName: change_case_1.camelCase(structName),\n            typeName: structName + '?',\n            structName\n        });\n    }\n    propertyFromFragmentSpread(fragmentSpread, isConditional) {\n        const structName = this.structNameForFragmentName(fragmentSpread.fragmentName);\n        return Object.assign({}, fragmentSpread, {\n            propertyName: change_case_1.camelCase(fragmentSpread.fragmentName),\n            typeName: isConditional ? structName + '?' : structName,\n            structName,\n            isConditional\n        });\n    }\n    propertyFromInputField(field) {\n        return Object.assign({}, {\n            propertyName: change_case_1.camelCase(field.name),\n            typeName: this.typeNameFromGraphQLType(field.type),\n            isOptional: !(field.type instanceof graphql_1.GraphQLNonNull),\n            description: field.description || null,\n            name: field.name,\n        });\n    }\n    propertiesForSelectionSet(selectionSet, namespace) {\n        const properties = collectAndMergeFields_1.collectAndMergeFields(selectionSet, true)\n            .filter(field => field.name !== '__typename')\n            .map(field => this.propertyFromField(field, namespace));\n        if (selectionSet.selections.some(selection => selection.kind === 'FragmentSpread') &&\n            properties.some(property => graphql_1.isCompositeType(graphql_1.getNamedType(property.type)))) {\n            return undefined;\n        }\n        return properties;\n    }\n    dictionaryLiteralForFieldArguments(args) {\n        function expressionFromValue(value) {\n            if (value.kind === 'Variable') {\n                return `GraphQLVariable(\"${value.variableName}\")`;\n            }\n            else if (Array.isArray(value)) {\n                return printing_1.wrap('[', printing_1.join(value.map(expressionFromValue), ', '), ']');\n            }\n            else if (typeof value === 'object') {\n                return printing_1.wrap('[', printing_1.join(Object.entries(value).map(([key, value]) => {\n                    return `\"${key}\": ${expressionFromValue(value)}`;\n                }), ', ') || ':', ']');\n            }\n            else {\n                return JSON.stringify(value);\n            }\n        }\n        return printing_1.wrap('[', printing_1.join(args.map(arg => {\n            return `\"${arg.name}\": ${expressionFromValue(arg.value)}`;\n        }), ', ') || ':', ']');\n    }\n    mapExpressionForType(type, expression, identifier = '') {\n        let isOptional;\n        if (graphql_1.isNonNullType(type)) {\n            isOptional = false;\n            type = type.ofType;\n        }\n        else {\n            isOptional = true;\n        }\n        if (graphql_1.isListType(type)) {\n            if (isOptional) {\n                return `${identifier}.flatMap { $0.map { ${this.mapExpressionForType(type.ofType, expression, '$0')} } }`;\n            }\n            else {\n                return `${identifier}.map { ${this.mapExpressionForType(type.ofType, expression, '$0')} }`;\n            }\n        }\n        else if (isOptional) {\n            return `${identifier}.flatMap { ${expression('$0')} }`;\n        }\n        else {\n            return expression(identifier);\n        }\n    }\n}\nexports.Helpers = Helpers;\n//# sourceMappingURL=data:application/json;base64,");"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = require("graphql");
const change_case_1 = require("change-case");
const Inflector = require("inflected");
const printing_1 = require("../utilities/printing");
const graphql_2 = require("../utilities/graphql");
const collectAndMergeFields_1 = require("../compiler/visitors/collectAndMergeFields");
const aws_scalar_helper_1 = require("./aws-scalar-helper");
const builtInScalarMap = {
    [graphql_1.GraphQLString.name]: 'String',
    [graphql_1.GraphQLInt.name]: 'Int',
    [graphql_1.GraphQLFloat.name]: 'Double',
    [graphql_1.GraphQLBoolean.name]: 'Bool',
    [graphql_1.GraphQLID.name]: 'GraphQLID' };

class Helpers {
    constructor(options) {
        this.options = options;
    }
    typeNameFromGraphQLType(type, unmodifiedTypeName, isOptional) {
        if (graphql_1.isNonNullType(type)) {
            return this.typeNameFromGraphQLType(type.ofType, unmodifiedTypeName, false);
        } else
        if (isOptional === undefined) {
            isOptional = true;
        }
        let typeName;
        if (graphql_1.isListType(type)) {
            typeName = '[' + this.typeNameFromGraphQLType(type.ofType, unmodifiedTypeName) + ']';
        } else
        if (type instanceof graphql_1.GraphQLScalarType) {
            typeName = this.typeNameForScalarType(type);
        } else
        {
            typeName = unmodifiedTypeName || type.name;
        }
        return isOptional ? typeName + '?' : typeName;
    }
    typeNameForScalarType(type) {
        return builtInScalarMap[type.name] || (
        this.options.passthroughCustomScalars ?
        this.options.customScalarsPrefix + type.name :
        aws_scalar_helper_1.getTypeForAWSScalar(type) ? aws_scalar_helper_1.getTypeForAWSScalar(type) : graphql_1.GraphQLString.name);
    }
    fieldTypeEnum(type, structName) {
        if (graphql_1.isNonNullType(type)) {
            return `.nonNull(${this.fieldTypeEnum(type.ofType, structName)})`;
        } else
        if (graphql_1.isListType(type)) {
            return `.list(${this.fieldTypeEnum(type.ofType, structName)})`;
        } else
        if (type instanceof graphql_1.GraphQLScalarType) {
            return `.scalar(${this.typeNameForScalarType(type)}.self)`;
        } else
        if (type instanceof graphql_1.GraphQLEnumType) {
            return `.scalar(${type.name}.self)`;
        } else
        if (graphql_1.isCompositeType(type)) {
            return `.object(${structName}.selections)`;
        } else
        {
            throw new Error(`Unknown field type: ${type}`);
        }
    }
    enumCaseName(name) {
        return change_case_1.camelCase(name);
    }
    enumDotCaseName(name) {
        return `.${change_case_1.camelCase(name)}`;
    }
    operationClassName(name) {
        return change_case_1.pascalCase(name);
    }
    structNameForPropertyName(propertyName) {
        return change_case_1.pascalCase(Inflector.singularize(propertyName));
    }
    structNameForFragmentName(fragmentName) {
        return change_case_1.pascalCase(fragmentName);
    }
    structNameForVariant(variant) {
        return 'As' + variant.possibleTypes.map(type => change_case_1.pascalCase(type.name)).join('Or');
    }
    propertyFromField(field, namespace) {
        const { responseKey, isConditional } = field;
        const propertyName = graphql_2.isMetaFieldName(responseKey) ? responseKey : change_case_1.camelCase(responseKey);
        const structName = printing_1.join([namespace, this.structNameForPropertyName(responseKey)], '.');
        let type = field.type;
        if (isConditional && graphql_1.isNonNullType(type)) {
            type = type.ofType;
        }
        const isOptional = !(type instanceof graphql_1.GraphQLNonNull);
        const unmodifiedType = graphql_1.getNamedType(field.type);
        const unmodifiedTypeName = graphql_1.isCompositeType(unmodifiedType) ? structName : unmodifiedType.name;
        const typeName = this.typeNameFromGraphQLType(type, unmodifiedTypeName);
        return Object.assign({}, field, {
            responseKey,
            propertyName,
            typeName,
            structName,
            isOptional });

    }
    propertyFromVariant(variant) {
        const structName = this.structNameForVariant(variant);
        return Object.assign(variant, {
            propertyName: change_case_1.camelCase(structName),
            typeName: structName + '?',
            structName });

    }
    propertyFromFragmentSpread(fragmentSpread, isConditional) {
        const structName = this.structNameForFragmentName(fragmentSpread.fragmentName);
        return Object.assign({}, fragmentSpread, {
            propertyName: change_case_1.camelCase(fragmentSpread.fragmentName),
            typeName: isConditional ? structName + '?' : structName,
            structName,
            isConditional });

    }
    propertyFromInputField(field) {
        return Object.assign({}, {
            propertyName: change_case_1.camelCase(field.name),
            typeName: this.typeNameFromGraphQLType(field.type),
            isOptional: !(field.type instanceof graphql_1.GraphQLNonNull),
            description: field.description || null,
            name: field.name });

    }
    propertiesForSelectionSet(selectionSet, namespace) {
        const properties = collectAndMergeFields_1.collectAndMergeFields(selectionSet, true).
        filter(field => field.name !== '__typename').
        map(field => this.propertyFromField(field, namespace));
        if (selectionSet.selections.some(selection => selection.kind === 'FragmentSpread') &&
        properties.some(property => graphql_1.isCompositeType(graphql_1.getNamedType(property.type)))) {
            return undefined;
        }
        return properties;
    }
    dictionaryLiteralForFieldArguments(args) {
        function expressionFromValue(value) {
            if (value.kind === 'Variable') {
                return `GraphQLVariable("${value.variableName}")`;
            } else
            if (Array.isArray(value)) {
                return printing_1.wrap('[', printing_1.join(value.map(expressionFromValue), ', '), ']');
            } else
            if (typeof value === 'object') {
                return printing_1.wrap('[', printing_1.join(Object.entries(value).map(([key, value]) => {
                    return `"${key}": ${expressionFromValue(value)}`;
                }), ', ') || ':', ']');
            } else
            {
                return JSON.stringify(value);
            }
        }
        return printing_1.wrap('[', printing_1.join(args.map(arg => {
            return `"${arg.name}": ${expressionFromValue(arg.value)}`;
        }), ', ') || ':', ']');
    }
    mapExpressionForType(type, expression, identifier = '') {
        let isOptional;
        if (graphql_1.isNonNullType(type)) {
            isOptional = false;
            type = type.ofType;
        } else
        {
            isOptional = true;
        }
        if (graphql_1.isListType(type)) {
            if (isOptional) {
                return `${identifier}.flatMap { $0.map { ${this.mapExpressionForType(type.ofType, expression, '$0')} } }`;
            } else
            {
                return `${identifier}.map { ${this.mapExpressionForType(type.ofType, expression, '$0')} }`;
            }
        } else
        if (isOptional) {
            return `${identifier}.flatMap { ${expression('$0')} }`;
        } else
        {
            return expression(identifier);
        }
    }}

exports.Helpers = Helpers;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,