2aa925cfd0293e860199813ccd90a2a6
'use strict';require('ts-jest').install("/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-types-generator/src/typescript/codeGeneration.ts", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst graphql_1 = require(\"graphql\");\nconst printing_1 = require(\"../utilities/printing\");\nconst CodeGenerator_1 = require(\"../utilities/CodeGenerator\");\nconst language_1 = require(\"./language\");\nconst types_1 = require(\"./types\");\nfunction generateSource(context) {\n    const generator = new CodeGenerator_1.default(context);\n    generator.printOnNewline('/* tslint:disable */');\n    generator.printOnNewline('//  This file was automatically generated and should not be edited.');\n    context.typesUsed.forEach(type => typeDeclarationForGraphQLType(generator, type));\n    Object.values(context.operations).forEach(operation => {\n        interfaceVariablesDeclarationForOperation(generator, operation);\n        interfaceDeclarationForOperation(generator, operation);\n    });\n    Object.values(context.fragments).forEach(operation => interfaceDeclarationForFragment(generator, operation));\n    generator.printNewline();\n    return generator.output;\n}\nexports.generateSource = generateSource;\nfunction typeDeclarationForGraphQLType(generator, type) {\n    if (type instanceof graphql_1.GraphQLEnumType) {\n        enumerationDeclaration(generator, type);\n    }\n    else if (type instanceof graphql_1.GraphQLInputObjectType) {\n        structDeclarationForInputObjectType(generator, type);\n    }\n}\nexports.typeDeclarationForGraphQLType = typeDeclarationForGraphQLType;\nfunction enumerationDeclaration(generator, type) {\n    const { name, description } = type;\n    const values = type.getValues();\n    generator.printNewlineIfNeeded();\n    if (description) {\n        description.split('\\n')\n            .forEach(line => {\n            generator.printOnNewline(`// ${line.trim()}`);\n        });\n    }\n    generator.printOnNewline(`export enum ${name} {`);\n    values.forEach((value) => {\n        if (!value.description || value.description.indexOf('\\n') === -1) {\n            generator.printOnNewline(`  ${value.value} = \"${value.value}\",${printing_1.wrap(' // ', value.description || '')}`);\n        }\n        else {\n            if (value.description) {\n                value.description.split('\\n')\n                    .forEach(line => {\n                    generator.printOnNewline(`  // ${line.trim()}`);\n                });\n            }\n            generator.printOnNewline(`  ${value.value} = \"${value.value}\",`);\n        }\n    });\n    generator.printOnNewline(`}`);\n    generator.printNewline();\n}\nfunction structDeclarationForInputObjectType(generator, type) {\n    const interfaceName = type.name;\n    language_1.interfaceDeclaration(generator, {\n        interfaceName,\n    }, () => {\n        const properties = propertiesFromFields(generator.context, Object.values(type.getFields()));\n        propertyDeclarations(generator, properties, true);\n    });\n}\nfunction interfaceNameFromOperation({ operationName, operationType }) {\n    switch (operationType) {\n        case 'query':\n            return `${operationName}Query`;\n            break;\n        case 'mutation':\n            return `${operationName}Mutation`;\n            break;\n        case 'subscription':\n            return `${operationName}Subscription`;\n            break;\n        default:\n            throw new graphql_1.GraphQLError(`Unsupported operation type \"${operationType}\"`);\n    }\n}\nexports.interfaceNameFromOperation = interfaceNameFromOperation;\nfunction interfaceVariablesDeclarationForOperation(generator, { operationName, operationType, variables }) {\n    if (!variables || variables.length < 1) {\n        return;\n    }\n    const interfaceName = `${interfaceNameFromOperation({ operationName, operationType })}Variables`;\n    language_1.interfaceDeclaration(generator, {\n        interfaceName,\n    }, () => {\n        const properties = propertiesFromFields(generator.context, variables);\n        propertyDeclarations(generator, properties, true);\n    });\n}\nexports.interfaceVariablesDeclarationForOperation = interfaceVariablesDeclarationForOperation;\nfunction getObjectTypeName(type) {\n    if (graphql_1.isListType(type)) {\n        return getObjectTypeName(type.ofType);\n    }\n    if (graphql_1.isNonNullType(type)) {\n        return getObjectTypeName(type.ofType);\n    }\n    if (type instanceof graphql_1.GraphQLObjectType) {\n        return `\"${type.name}\"`;\n    }\n    if (type instanceof graphql_1.GraphQLUnionType) {\n        return type.getTypes().map(type => getObjectTypeName(type)).join(\" | \");\n    }\n    return `\"${type.name}\"`;\n}\nfunction updateTypeNameField(rootField) {\n    const fields = rootField.fields && rootField.fields.map(field => {\n        if (field.fieldName === '__typename') {\n            const objectTypeName = getObjectTypeName(rootField.type);\n            return Object.assign({}, field, { typeName: objectTypeName, type: { name: objectTypeName } });\n        }\n        if (field.fields) {\n            return updateTypeNameField(field);\n        }\n        return field;\n    });\n    return Object.assign({}, rootField, { fields });\n}\nexports.updateTypeNameField = updateTypeNameField;\nfunction interfaceDeclarationForOperation(generator, { operationName, operationType, fields }) {\n    const interfaceName = interfaceNameFromOperation({ operationName, operationType });\n    fields = fields.map(field => updateTypeNameField(field));\n    const properties = propertiesFromFields(generator.context, fields);\n    language_1.interfaceDeclaration(generator, {\n        interfaceName,\n    }, () => {\n        propertyDeclarations(generator, properties);\n    });\n}\nexports.interfaceDeclarationForOperation = interfaceDeclarationForOperation;\nfunction interfaceDeclarationForFragment(generator, fragment) {\n    const { fragmentName, typeCondition, fields, inlineFragments } = fragment;\n    const interfaceName = `${fragmentName}Fragment`;\n    language_1.interfaceDeclaration(generator, {\n        interfaceName,\n        noBrackets: graphql_1.isAbstractType(typeCondition)\n    }, () => {\n        if (graphql_1.isAbstractType(typeCondition)) {\n            const propertySets = fragment.possibleTypes\n                .map(type => {\n                const inlineFragment = inlineFragments.find(inlineFragment => {\n                    return inlineFragment.typeCondition.toString() == type.toString();\n                });\n                if (inlineFragment) {\n                    const fields = inlineFragment.fields.map(field => {\n                        if (field.fieldName === '__typename') {\n                            return Object.assign({}, field, { typeName: `\"${inlineFragment.typeCondition}\"`, type: { name: `\"${inlineFragment.typeCondition}\"` } });\n                        }\n                        else {\n                            return field;\n                        }\n                    });\n                    return propertiesFromFields(generator.context, fields);\n                }\n                else {\n                    const fragmentFields = fields.map(field => {\n                        if (field.fieldName === '__typename') {\n                            return Object.assign({}, field, { typeName: `\"${type}\"`, type: { name: `\"${type}\"` } });\n                        }\n                        else {\n                            return field;\n                        }\n                    });\n                    return propertiesFromFields(generator.context, fragmentFields);\n                }\n            });\n            language_1.propertySetsDeclaration(generator, fragment, propertySets, true);\n        }\n        else {\n            const fragmentFields = fields.map(field => {\n                if (field.fieldName === '__typename') {\n                    return Object.assign({}, field, { typeName: `\"${fragment.typeCondition}\"`, type: { name: `\"${fragment.typeCondition}\"` } });\n                }\n                else {\n                    return field;\n                }\n            });\n            const properties = propertiesFromFields(generator.context, fragmentFields);\n            propertyDeclarations(generator, properties);\n        }\n    });\n}\nexports.interfaceDeclarationForFragment = interfaceDeclarationForFragment;\nfunction propertiesFromFields(context, fields) {\n    return fields.map(field => propertyFromField(context, field));\n}\nexports.propertiesFromFields = propertiesFromFields;\nfunction propertyFromField(context, field) {\n    let { name: fieldName, type: fieldType, description, fragmentSpreads, inlineFragments } = field;\n    fieldName = fieldName || field.responseName;\n    const propertyName = fieldName;\n    let property = { fieldName, fieldType, propertyName, description };\n    const namedType = graphql_1.getNamedType(fieldType);\n    let isNullable = true;\n    if (fieldType instanceof graphql_1.GraphQLNonNull) {\n        isNullable = false;\n    }\n    if (graphql_1.isCompositeType(namedType)) {\n        const typeName = types_1.typeNameFromGraphQLType(context, fieldType);\n        let isArray = false;\n        let isArrayElementNullable = null;\n        if (graphql_1.isListType(fieldType)) {\n            isArray = true;\n            isArrayElementNullable = !(fieldType.ofType instanceof graphql_1.GraphQLNonNull);\n        }\n        else if (graphql_1.isNonNullType(fieldType) && graphql_1.isListType(fieldType.ofType)) {\n            isArray = true;\n            isArrayElementNullable = !(fieldType.ofType.ofType instanceof graphql_1.GraphQLNonNull);\n        }\n        return Object.assign({}, property, { typeName, fields: field.fields, isComposite: true, fragmentSpreads, inlineFragments, fieldType,\n            isArray, isNullable, isArrayElementNullable });\n    }\n    else {\n        if (field.fieldName === '__typename') {\n            const typeName = types_1.typeNameFromGraphQLType(context, fieldType, null, false);\n            return Object.assign({}, property, { typeName, isComposite: false, fieldType, isNullable: false });\n        }\n        else {\n            const typeName = types_1.typeNameFromGraphQLType(context, fieldType, null, isNullable);\n            return Object.assign({}, property, { typeName, isComposite: false, fieldType, isNullable });\n        }\n    }\n}\nexports.propertyFromField = propertyFromField;\nfunction propertyDeclarations(generator, properties, isInput = false) {\n    if (!properties)\n        return;\n    properties.forEach(property => {\n        if (graphql_1.isAbstractType(graphql_1.getNamedType(property.type || property.fieldType))) {\n            const propertySets = getPossibleTypeNames(generator, property)\n                .map(type => {\n                const inlineFragment = property.inlineFragments && property.inlineFragments.find(inlineFragment => {\n                    return inlineFragment.typeCondition.toString() == type;\n                });\n                if (inlineFragment) {\n                    const fields = inlineFragment.fields.map(field => {\n                        if (field.fieldName === '__typename') {\n                            return Object.assign({}, field, { typeName: `\"${inlineFragment.typeCondition}\"`, type: { name: `\"${inlineFragment.typeCondition}\"` } });\n                        }\n                        else {\n                            return field;\n                        }\n                    });\n                    return propertiesFromFields(generator.context, fields);\n                }\n                else {\n                    const fields = property.fields.map(field => {\n                        if (field.fieldName === '__typename') {\n                            return Object.assign({}, field, { typeName: `\"${type}\"`, type: { name: `\"${type}\"` } });\n                        }\n                        else {\n                            return field;\n                        }\n                    });\n                    return propertiesFromFields(generator.context, fields);\n                }\n            });\n            language_1.propertySetsDeclaration(generator, property, propertySets);\n        }\n        else {\n            if (property.fields && property.fields.length > 0\n                || property.inlineFragments && property.inlineFragments.length > 0\n                || property.fragmentSpreads && property.fragmentSpreads.length > 0) {\n                language_1.propertyDeclaration(generator, property, () => {\n                    const properties = propertiesFromFields(generator.context, property.fields);\n                    propertyDeclarations(generator, properties, isInput);\n                });\n            }\n            else {\n                language_1.propertyDeclaration(generator, Object.assign({}, property, { isInput }));\n            }\n        }\n    });\n}\nexports.propertyDeclarations = propertyDeclarations;\nfunction getPossibleTypeNames(generator, property) {\n    const type = graphql_1.getNamedType(property.fieldType || property.type);\n    if (type instanceof graphql_1.GraphQLUnionType || type instanceof graphql_1.GraphQLInterfaceType) {\n        return generator.context.schema.getPossibleTypes(type).map(type => type.name);\n    }\n    return [];\n}\n//# sourceMappingURL=data:application/json;base64,");"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = require("graphql");
const printing_1 = require("../utilities/printing");
const CodeGenerator_1 = require("../utilities/CodeGenerator");
const language_1 = require("./language");
const types_1 = require("./types");
function generateSource(context) {
    const generator = new CodeGenerator_1.default(context);
    generator.printOnNewline('/* tslint:disable */');
    generator.printOnNewline('//  This file was automatically generated and should not be edited.');
    context.typesUsed.forEach(type => typeDeclarationForGraphQLType(generator, type));
    Object.values(context.operations).forEach(operation => {
        interfaceVariablesDeclarationForOperation(generator, operation);
        interfaceDeclarationForOperation(generator, operation);
    });
    Object.values(context.fragments).forEach(operation => interfaceDeclarationForFragment(generator, operation));
    generator.printNewline();
    return generator.output;
}
exports.generateSource = generateSource;
function typeDeclarationForGraphQLType(generator, type) {
    if (type instanceof graphql_1.GraphQLEnumType) {
        enumerationDeclaration(generator, type);
    } else
    if (type instanceof graphql_1.GraphQLInputObjectType) {
        structDeclarationForInputObjectType(generator, type);
    }
}
exports.typeDeclarationForGraphQLType = typeDeclarationForGraphQLType;
function enumerationDeclaration(generator, type) {
    const { name, description } = type;
    const values = type.getValues();
    generator.printNewlineIfNeeded();
    if (description) {
        description.split('\n').
        forEach(line => {
            generator.printOnNewline(`// ${line.trim()}`);
        });
    }
    generator.printOnNewline(`export enum ${name} {`);
    values.forEach(value => {
        if (!value.description || value.description.indexOf('\n') === -1) {
            generator.printOnNewline(`  ${value.value} = "${value.value}",${printing_1.wrap(' // ', value.description || '')}`);
        } else
        {
            if (value.description) {
                value.description.split('\n').
                forEach(line => {
                    generator.printOnNewline(`  // ${line.trim()}`);
                });
            }
            generator.printOnNewline(`  ${value.value} = "${value.value}",`);
        }
    });
    generator.printOnNewline(`}`);
    generator.printNewline();
}
function structDeclarationForInputObjectType(generator, type) {
    const interfaceName = type.name;
    language_1.interfaceDeclaration(generator, {
        interfaceName },
    () => {
        const properties = propertiesFromFields(generator.context, Object.values(type.getFields()));
        propertyDeclarations(generator, properties, true);
    });
}
function interfaceNameFromOperation({ operationName, operationType }) {
    switch (operationType) {
        case 'query':
            return `${operationName}Query`;
            break;
        case 'mutation':
            return `${operationName}Mutation`;
            break;
        case 'subscription':
            return `${operationName}Subscription`;
            break;
        default:
            throw new graphql_1.GraphQLError(`Unsupported operation type "${operationType}"`);}

}
exports.interfaceNameFromOperation = interfaceNameFromOperation;
function interfaceVariablesDeclarationForOperation(generator, { operationName, operationType, variables }) {
    if (!variables || variables.length < 1) {
        return;
    }
    const interfaceName = `${interfaceNameFromOperation({ operationName, operationType })}Variables`;
    language_1.interfaceDeclaration(generator, {
        interfaceName },
    () => {
        const properties = propertiesFromFields(generator.context, variables);
        propertyDeclarations(generator, properties, true);
    });
}
exports.interfaceVariablesDeclarationForOperation = interfaceVariablesDeclarationForOperation;
function getObjectTypeName(type) {
    if (graphql_1.isListType(type)) {
        return getObjectTypeName(type.ofType);
    }
    if (graphql_1.isNonNullType(type)) {
        return getObjectTypeName(type.ofType);
    }
    if (type instanceof graphql_1.GraphQLObjectType) {
        return `"${type.name}"`;
    }
    if (type instanceof graphql_1.GraphQLUnionType) {
        return type.getTypes().map(type => getObjectTypeName(type)).join(" | ");
    }
    return `"${type.name}"`;
}
function updateTypeNameField(rootField) {
    const fields = rootField.fields && rootField.fields.map(field => {
        if (field.fieldName === '__typename') {
            const objectTypeName = getObjectTypeName(rootField.type);
            return Object.assign({}, field, { typeName: objectTypeName, type: { name: objectTypeName } });
        }
        if (field.fields) {
            return updateTypeNameField(field);
        }
        return field;
    });
    return Object.assign({}, rootField, { fields });
}
exports.updateTypeNameField = updateTypeNameField;
function interfaceDeclarationForOperation(generator, { operationName, operationType, fields }) {
    const interfaceName = interfaceNameFromOperation({ operationName, operationType });
    fields = fields.map(field => updateTypeNameField(field));
    const properties = propertiesFromFields(generator.context, fields);
    language_1.interfaceDeclaration(generator, {
        interfaceName },
    () => {
        propertyDeclarations(generator, properties);
    });
}
exports.interfaceDeclarationForOperation = interfaceDeclarationForOperation;
function interfaceDeclarationForFragment(generator, fragment) {
    const { fragmentName, typeCondition, fields, inlineFragments } = fragment;
    const interfaceName = `${fragmentName}Fragment`;
    language_1.interfaceDeclaration(generator, {
        interfaceName,
        noBrackets: graphql_1.isAbstractType(typeCondition) },
    () => {
        if (graphql_1.isAbstractType(typeCondition)) {
            const propertySets = fragment.possibleTypes.
            map(type => {
                const inlineFragment = inlineFragments.find(inlineFragment => {
                    return inlineFragment.typeCondition.toString() == type.toString();
                });
                if (inlineFragment) {
                    const fields = inlineFragment.fields.map(field => {
                        if (field.fieldName === '__typename') {
                            return Object.assign({}, field, { typeName: `"${inlineFragment.typeCondition}"`, type: { name: `"${inlineFragment.typeCondition}"` } });
                        } else
                        {
                            return field;
                        }
                    });
                    return propertiesFromFields(generator.context, fields);
                } else
                {
                    const fragmentFields = fields.map(field => {
                        if (field.fieldName === '__typename') {
                            return Object.assign({}, field, { typeName: `"${type}"`, type: { name: `"${type}"` } });
                        } else
                        {
                            return field;
                        }
                    });
                    return propertiesFromFields(generator.context, fragmentFields);
                }
            });
            language_1.propertySetsDeclaration(generator, fragment, propertySets, true);
        } else
        {
            const fragmentFields = fields.map(field => {
                if (field.fieldName === '__typename') {
                    return Object.assign({}, field, { typeName: `"${fragment.typeCondition}"`, type: { name: `"${fragment.typeCondition}"` } });
                } else
                {
                    return field;
                }
            });
            const properties = propertiesFromFields(generator.context, fragmentFields);
            propertyDeclarations(generator, properties);
        }
    });
}
exports.interfaceDeclarationForFragment = interfaceDeclarationForFragment;
function propertiesFromFields(context, fields) {
    return fields.map(field => propertyFromField(context, field));
}
exports.propertiesFromFields = propertiesFromFields;
function propertyFromField(context, field) {
    let { name: fieldName, type: fieldType, description, fragmentSpreads, inlineFragments } = field;
    fieldName = fieldName || field.responseName;
    const propertyName = fieldName;
    let property = { fieldName, fieldType, propertyName, description };
    const namedType = graphql_1.getNamedType(fieldType);
    let isNullable = true;
    if (fieldType instanceof graphql_1.GraphQLNonNull) {
        isNullable = false;
    }
    if (graphql_1.isCompositeType(namedType)) {
        const typeName = types_1.typeNameFromGraphQLType(context, fieldType);
        let isArray = false;
        let isArrayElementNullable = null;
        if (graphql_1.isListType(fieldType)) {
            isArray = true;
            isArrayElementNullable = !(fieldType.ofType instanceof graphql_1.GraphQLNonNull);
        } else
        if (graphql_1.isNonNullType(fieldType) && graphql_1.isListType(fieldType.ofType)) {
            isArray = true;
            isArrayElementNullable = !(fieldType.ofType.ofType instanceof graphql_1.GraphQLNonNull);
        }
        return Object.assign({}, property, { typeName, fields: field.fields, isComposite: true, fragmentSpreads, inlineFragments, fieldType,
            isArray, isNullable, isArrayElementNullable });
    } else
    {
        if (field.fieldName === '__typename') {
            const typeName = types_1.typeNameFromGraphQLType(context, fieldType, null, false);
            return Object.assign({}, property, { typeName, isComposite: false, fieldType, isNullable: false });
        } else
        {
            const typeName = types_1.typeNameFromGraphQLType(context, fieldType, null, isNullable);
            return Object.assign({}, property, { typeName, isComposite: false, fieldType, isNullable });
        }
    }
}
exports.propertyFromField = propertyFromField;
function propertyDeclarations(generator, properties, isInput = false) {
    if (!properties)
    return;
    properties.forEach(property => {
        if (graphql_1.isAbstractType(graphql_1.getNamedType(property.type || property.fieldType))) {
            const propertySets = getPossibleTypeNames(generator, property).
            map(type => {
                const inlineFragment = property.inlineFragments && property.inlineFragments.find(inlineFragment => {
                    return inlineFragment.typeCondition.toString() == type;
                });
                if (inlineFragment) {
                    const fields = inlineFragment.fields.map(field => {
                        if (field.fieldName === '__typename') {
                            return Object.assign({}, field, { typeName: `"${inlineFragment.typeCondition}"`, type: { name: `"${inlineFragment.typeCondition}"` } });
                        } else
                        {
                            return field;
                        }
                    });
                    return propertiesFromFields(generator.context, fields);
                } else
                {
                    const fields = property.fields.map(field => {
                        if (field.fieldName === '__typename') {
                            return Object.assign({}, field, { typeName: `"${type}"`, type: { name: `"${type}"` } });
                        } else
                        {
                            return field;
                        }
                    });
                    return propertiesFromFields(generator.context, fields);
                }
            });
            language_1.propertySetsDeclaration(generator, property, propertySets);
        } else
        {
            if (property.fields && property.fields.length > 0 ||
            property.inlineFragments && property.inlineFragments.length > 0 ||
            property.fragmentSpreads && property.fragmentSpreads.length > 0) {
                language_1.propertyDeclaration(generator, property, () => {
                    const properties = propertiesFromFields(generator.context, property.fields);
                    propertyDeclarations(generator, properties, isInput);
                });
            } else
            {
                language_1.propertyDeclaration(generator, Object.assign({}, property, { isInput }));
            }
        }
    });
}
exports.propertyDeclarations = propertyDeclarations;
function getPossibleTypeNames(generator, property) {
    const type = graphql_1.getNamedType(property.fieldType || property.type);
    if (type instanceof graphql_1.GraphQLUnionType || type instanceof graphql_1.GraphQLInterfaceType) {
        return generator.context.schema.getPossibleTypes(type).map(type => type.name);
    }
    return [];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,