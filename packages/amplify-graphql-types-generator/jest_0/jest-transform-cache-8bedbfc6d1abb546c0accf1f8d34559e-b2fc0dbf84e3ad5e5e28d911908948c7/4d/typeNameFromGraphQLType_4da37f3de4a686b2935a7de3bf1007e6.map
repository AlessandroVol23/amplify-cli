{"version":3,"sources":["typeNameFromGraphQLType.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  GraphQLString,\n  GraphQLInt,\n  GraphQLFloat,\n  GraphQLBoolean,\n  GraphQLID,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLScalarType\n} from 'graphql';\n\nimport { Helpers } from '../../src/swift/helpers';\n\ndescribe('Swift code generation: Types', () => {\n  let helpers: Helpers;\n\n  beforeEach(() => {\n    helpers = new Helpers({});\n  });\n\n  describe('#typeNameFromGraphQLType()', () => {\n    it('should return String? for GraphQLString', () => {\n      expect(helpers.typeNameFromGraphQLType(GraphQLString)).toBe('String?');\n    });\n\n    it('should return String for GraphQLNonNull(GraphQLString)', () => {\n      expect(helpers.typeNameFromGraphQLType(new GraphQLNonNull(GraphQLString))).toBe('String');\n    });\n\n    it('should return [String?]? for GraphQLList(GraphQLString)', () => {\n      expect(helpers.typeNameFromGraphQLType(new GraphQLList(GraphQLString))).toBe('[String?]?');\n    });\n\n    it('should return [String?] for GraphQLNonNull(GraphQLList(GraphQLString))', () => {\n      expect(helpers.typeNameFromGraphQLType(new GraphQLNonNull(new GraphQLList(GraphQLString)))).toBe(\n        '[String?]'\n      );\n    });\n\n    it('should return [String]? for GraphQLList(GraphQLNonNull(GraphQLString))', () => {\n      expect(helpers.typeNameFromGraphQLType(new GraphQLList(new GraphQLNonNull(GraphQLString)))).toBe(\n        '[String]?'\n      );\n    });\n\n    it('should return [String] for GraphQLNonNull(GraphQLList(GraphQLNonNull(GraphQLString)))', () => {\n      expect(\n        helpers.typeNameFromGraphQLType(\n          new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(GraphQLString)))\n        )\n      ).toBe('[String]');\n    });\n\n    it('should return [[String?]?]? for GraphQLList(GraphQLList(GraphQLString))', () => {\n      expect(helpers.typeNameFromGraphQLType(new GraphQLList(new GraphQLList(GraphQLString)))).toBe(\n        '[[String?]?]?'\n      );\n    });\n\n    it('should return [[String?]]? for GraphQLList(GraphQLNonNull(GraphQLList(GraphQLString)))', () => {\n      expect(\n        helpers.typeNameFromGraphQLType(new GraphQLList(new GraphQLNonNull(new GraphQLList(GraphQLString))))\n      ).toBe('[[String?]]?');\n    });\n\n    it('should return Int? for GraphQLInt', () => {\n      expect(helpers.typeNameFromGraphQLType(GraphQLInt)).toBe('Int?');\n    });\n\n    it('should return Double? for GraphQLFloat', () => {\n      expect(helpers.typeNameFromGraphQLType(GraphQLFloat)).toBe('Double?');\n    });\n\n    it('should return Bool? for GraphQLBoolean', () => {\n      expect(helpers.typeNameFromGraphQLType(GraphQLBoolean)).toBe('Bool?');\n    });\n\n    it('should return GraphQLID? for GraphQLID', () => {\n      expect(helpers.typeNameFromGraphQLType(GraphQLID)).toBe('GraphQLID?');\n    });\n\n    it('should return String? for a custom scalar type', () => {\n      expect(\n        helpers.typeNameFromGraphQLType(\n          new GraphQLScalarType({ name: 'CustomScalarType', serialize: String })\n        )\n      ).toBe('String?');\n    });\n\n    it('should return a passed through custom scalar type with the passthroughCustomScalars option', () => {\n      helpers.options.passthroughCustomScalars = true;\n      helpers.options.customScalarsPrefix = '';\n\n      expect(\n        helpers.typeNameFromGraphQLType(\n          new GraphQLScalarType({ name: 'CustomScalarType', serialize: String })\n        )\n      ).toBe('CustomScalarType?');\n    });\n\n    it('should return a passed through custom scalar type with a prefix with the customScalarsPrefix option', () => {\n      helpers.options.passthroughCustomScalars = true;\n      helpers.options.customScalarsPrefix = 'My';\n\n      expect(\n        helpers.typeNameFromGraphQLType(\n          new GraphQLScalarType({ name: 'CustomScalarType', serialize: String })\n        )\n      ).toBe('MyCustomScalarType?');\n    });\n  });\n});\n"],"sourceRoot":""}