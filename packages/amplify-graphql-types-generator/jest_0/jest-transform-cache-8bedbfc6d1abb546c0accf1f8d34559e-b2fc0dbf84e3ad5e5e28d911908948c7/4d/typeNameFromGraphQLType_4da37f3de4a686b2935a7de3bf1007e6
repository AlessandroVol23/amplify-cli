63aca20d3d4343edbb23f40844c68b92
'use strict';require('ts-jest').install("/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-types-generator/test/swift/typeNameFromGraphQLType.ts", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst graphql_1 = require(\"graphql\");\nconst helpers_1 = require(\"../../src/swift/helpers\");\ndescribe('Swift code generation: Types', () => {\n    let helpers;\n    beforeEach(() => {\n        helpers = new helpers_1.Helpers({});\n    });\n    describe('#typeNameFromGraphQLType()', () => {\n        it('should return String? for GraphQLString', () => {\n            expect(helpers.typeNameFromGraphQLType(graphql_1.GraphQLString)).toBe('String?');\n        });\n        it('should return String for GraphQLNonNull(GraphQLString)', () => {\n            expect(helpers.typeNameFromGraphQLType(new graphql_1.GraphQLNonNull(graphql_1.GraphQLString))).toBe('String');\n        });\n        it('should return [String?]? for GraphQLList(GraphQLString)', () => {\n            expect(helpers.typeNameFromGraphQLType(new graphql_1.GraphQLList(graphql_1.GraphQLString))).toBe('[String?]?');\n        });\n        it('should return [String?] for GraphQLNonNull(GraphQLList(GraphQLString))', () => {\n            expect(helpers.typeNameFromGraphQLType(new graphql_1.GraphQLNonNull(new graphql_1.GraphQLList(graphql_1.GraphQLString)))).toBe('[String?]');\n        });\n        it('should return [String]? for GraphQLList(GraphQLNonNull(GraphQLString))', () => {\n            expect(helpers.typeNameFromGraphQLType(new graphql_1.GraphQLList(new graphql_1.GraphQLNonNull(graphql_1.GraphQLString)))).toBe('[String]?');\n        });\n        it('should return [String] for GraphQLNonNull(GraphQLList(GraphQLNonNull(GraphQLString)))', () => {\n            expect(helpers.typeNameFromGraphQLType(new graphql_1.GraphQLNonNull(new graphql_1.GraphQLList(new graphql_1.GraphQLNonNull(graphql_1.GraphQLString))))).toBe('[String]');\n        });\n        it('should return [[String?]?]? for GraphQLList(GraphQLList(GraphQLString))', () => {\n            expect(helpers.typeNameFromGraphQLType(new graphql_1.GraphQLList(new graphql_1.GraphQLList(graphql_1.GraphQLString)))).toBe('[[String?]?]?');\n        });\n        it('should return [[String?]]? for GraphQLList(GraphQLNonNull(GraphQLList(GraphQLString)))', () => {\n            expect(helpers.typeNameFromGraphQLType(new graphql_1.GraphQLList(new graphql_1.GraphQLNonNull(new graphql_1.GraphQLList(graphql_1.GraphQLString))))).toBe('[[String?]]?');\n        });\n        it('should return Int? for GraphQLInt', () => {\n            expect(helpers.typeNameFromGraphQLType(graphql_1.GraphQLInt)).toBe('Int?');\n        });\n        it('should return Double? for GraphQLFloat', () => {\n            expect(helpers.typeNameFromGraphQLType(graphql_1.GraphQLFloat)).toBe('Double?');\n        });\n        it('should return Bool? for GraphQLBoolean', () => {\n            expect(helpers.typeNameFromGraphQLType(graphql_1.GraphQLBoolean)).toBe('Bool?');\n        });\n        it('should return GraphQLID? for GraphQLID', () => {\n            expect(helpers.typeNameFromGraphQLType(graphql_1.GraphQLID)).toBe('GraphQLID?');\n        });\n        it('should return String? for a custom scalar type', () => {\n            expect(helpers.typeNameFromGraphQLType(new graphql_1.GraphQLScalarType({ name: 'CustomScalarType', serialize: String }))).toBe('String?');\n        });\n        it('should return a passed through custom scalar type with the passthroughCustomScalars option', () => {\n            helpers.options.passthroughCustomScalars = true;\n            helpers.options.customScalarsPrefix = '';\n            expect(helpers.typeNameFromGraphQLType(new graphql_1.GraphQLScalarType({ name: 'CustomScalarType', serialize: String }))).toBe('CustomScalarType?');\n        });\n        it('should return a passed through custom scalar type with a prefix with the customScalarsPrefix option', () => {\n            helpers.options.passthroughCustomScalars = true;\n            helpers.options.customScalarsPrefix = 'My';\n            expect(helpers.typeNameFromGraphQLType(new graphql_1.GraphQLScalarType({ name: 'CustomScalarType', serialize: String }))).toBe('MyCustomScalarType?');\n        });\n    });\n});\n//# sourceMappingURL=data:application/json;base64,");"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = require("graphql");
const helpers_1 = require("../../src/swift/helpers");
describe('Swift code generation: Types', () => {
    let helpers;
    beforeEach(() => {
        helpers = new helpers_1.Helpers({});
    });
    describe('#typeNameFromGraphQLType()', () => {
        it('should return String? for GraphQLString', () => {
            expect(helpers.typeNameFromGraphQLType(graphql_1.GraphQLString)).toBe('String?');
        });
        it('should return String for GraphQLNonNull(GraphQLString)', () => {
            expect(helpers.typeNameFromGraphQLType(new graphql_1.GraphQLNonNull(graphql_1.GraphQLString))).toBe('String');
        });
        it('should return [String?]? for GraphQLList(GraphQLString)', () => {
            expect(helpers.typeNameFromGraphQLType(new graphql_1.GraphQLList(graphql_1.GraphQLString))).toBe('[String?]?');
        });
        it('should return [String?] for GraphQLNonNull(GraphQLList(GraphQLString))', () => {
            expect(helpers.typeNameFromGraphQLType(new graphql_1.GraphQLNonNull(new graphql_1.GraphQLList(graphql_1.GraphQLString)))).toBe('[String?]');
        });
        it('should return [String]? for GraphQLList(GraphQLNonNull(GraphQLString))', () => {
            expect(helpers.typeNameFromGraphQLType(new graphql_1.GraphQLList(new graphql_1.GraphQLNonNull(graphql_1.GraphQLString)))).toBe('[String]?');
        });
        it('should return [String] for GraphQLNonNull(GraphQLList(GraphQLNonNull(GraphQLString)))', () => {
            expect(helpers.typeNameFromGraphQLType(new graphql_1.GraphQLNonNull(new graphql_1.GraphQLList(new graphql_1.GraphQLNonNull(graphql_1.GraphQLString))))).toBe('[String]');
        });
        it('should return [[String?]?]? for GraphQLList(GraphQLList(GraphQLString))', () => {
            expect(helpers.typeNameFromGraphQLType(new graphql_1.GraphQLList(new graphql_1.GraphQLList(graphql_1.GraphQLString)))).toBe('[[String?]?]?');
        });
        it('should return [[String?]]? for GraphQLList(GraphQLNonNull(GraphQLList(GraphQLString)))', () => {
            expect(helpers.typeNameFromGraphQLType(new graphql_1.GraphQLList(new graphql_1.GraphQLNonNull(new graphql_1.GraphQLList(graphql_1.GraphQLString))))).toBe('[[String?]]?');
        });
        it('should return Int? for GraphQLInt', () => {
            expect(helpers.typeNameFromGraphQLType(graphql_1.GraphQLInt)).toBe('Int?');
        });
        it('should return Double? for GraphQLFloat', () => {
            expect(helpers.typeNameFromGraphQLType(graphql_1.GraphQLFloat)).toBe('Double?');
        });
        it('should return Bool? for GraphQLBoolean', () => {
            expect(helpers.typeNameFromGraphQLType(graphql_1.GraphQLBoolean)).toBe('Bool?');
        });
        it('should return GraphQLID? for GraphQLID', () => {
            expect(helpers.typeNameFromGraphQLType(graphql_1.GraphQLID)).toBe('GraphQLID?');
        });
        it('should return String? for a custom scalar type', () => {
            expect(helpers.typeNameFromGraphQLType(new graphql_1.GraphQLScalarType({ name: 'CustomScalarType', serialize: String }))).toBe('String?');
        });
        it('should return a passed through custom scalar type with the passthroughCustomScalars option', () => {
            helpers.options.passthroughCustomScalars = true;
            helpers.options.customScalarsPrefix = '';
            expect(helpers.typeNameFromGraphQLType(new graphql_1.GraphQLScalarType({ name: 'CustomScalarType', serialize: String }))).toBe('CustomScalarType?');
        });
        it('should return a passed through custom scalar type with a prefix with the customScalarsPrefix option', () => {
            helpers.options.passthroughCustomScalars = true;
            helpers.options.customScalarsPrefix = 'My';
            expect(helpers.typeNameFromGraphQLType(new graphql_1.GraphQLScalarType({ name: 'CustomScalarType', serialize: String }))).toBe('MyCustomScalarType?');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,