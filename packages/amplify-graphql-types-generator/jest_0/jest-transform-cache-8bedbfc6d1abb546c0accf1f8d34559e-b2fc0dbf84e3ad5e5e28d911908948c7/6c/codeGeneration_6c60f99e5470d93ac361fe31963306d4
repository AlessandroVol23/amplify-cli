be2b0438200d1fdcb127928054e24032
'use strict';require('ts-jest').install("/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-types-generator/src/flow-modern/__tests__/codeGeneration.ts", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst graphql_1 = require(\"graphql\");\nconst loading_1 = require(\"../../loading\");\nconst schema = loading_1.loadSchema(require.resolve('../../../test/fixtures/starwars/schema.json'));\nconst compiler_1 = require(\"../../compiler\");\nconst codeGeneration_1 = require(\"../codeGeneration\");\nfunction compile(source, options = {\n    mergeInFieldsFromFragmentSpreads: true,\n    addTypename: true\n}) {\n    const document = graphql_1.parse(source);\n    return compiler_1.compileToIR(schema, document, options);\n}\ndescribe('Flow codeGeneration', () => {\n    test('multiple files', () => {\n        const context = compile(`\n      query HeroName($episode: Episode) {\n        hero(episode: $episode) {\n          name\n          id\n        }\n      }\n\n      query SomeOther($episode: Episode) {\n        hero(episode: $episode) {\n          name\n          ...someFragment\n        }\n      }\n\n      fragment someFragment on Character {\n        appearsIn\n      }\n\n      mutation ReviewMovie($episode: Episode, $review: ReviewInput) {\n        createReview(episode: $episode, review: $review) {\n          stars\n          commentary\n        }\n      }\n    `);\n        context.operations[\"HeroName\"].filePath = '/some/file/ComponentA.js';\n        context.operations[\"SomeOther\"].filePath = '/some/file/ComponentB.js';\n        context.fragments['someFragment'].filePath = '/some/file/ComponentB.js';\n        const output = codeGeneration_1.generateSource(context);\n        expect(output).toBeInstanceOf(Object);\n        Object.keys(output)\n            .forEach((filePath) => {\n            expect(filePath).toMatchSnapshot();\n            expect(output[filePath]).toMatchSnapshot();\n        });\n    });\n    test('simple hero query', () => {\n        const context = compile(`\n      query HeroName($episode: Episode) {\n        hero(episode: $episode) {\n          name\n          id\n        }\n      }\n    `);\n        const output = codeGeneration_1.generateSource(context);\n        expect(output).toMatchSnapshot();\n    });\n    test('simple mutation', () => {\n        const context = compile(`\n      mutation ReviewMovie($episode: Episode, $review: ReviewInput) {\n        createReview(episode: $episode, review: $review) {\n          stars\n          commentary\n        }\n      }\n    `);\n        const output = codeGeneration_1.generateSource(context);\n        expect(output).toMatchSnapshot();\n    });\n    test('simple fragment', () => {\n        const context = compile(`\n      fragment SimpleFragment on Character{\n        name\n      }\n    `);\n        const output = codeGeneration_1.generateSource(context);\n        expect(output).toMatchSnapshot();\n    });\n    test('fragment with fragment spreads', () => {\n        const context = compile(`\n      fragment simpleFragment on Character {\n        name\n      }\n\n      fragment anotherFragment on Character {\n        id\n        ...simpleFragment\n      }\n    `);\n        const output = codeGeneration_1.generateSource(context);\n        expect(output).toMatchSnapshot();\n    });\n    test('fragment with fragment spreads with inline fragment', () => {\n        const context = compile(`\n      fragment simpleFragment on Character {\n        name\n      }\n\n      fragment anotherFragment on Character {\n        id\n        ...simpleFragment\n\n        ... on Human {\n          appearsIn\n        }\n      }\n    `);\n        const output = codeGeneration_1.generateSource(context);\n        expect(output).toMatchSnapshot();\n    });\n    test('query with fragment spreads', () => {\n        const context = compile(`\n      fragment simpleFragment on Character {\n        name\n      }\n\n      query HeroFragment($episode: Episode) {\n        hero(episode: $episode) {\n          ...simpleFragment\n          id\n        }\n      }\n    `);\n        const output = codeGeneration_1.generateSource(context);\n        expect(output).toMatchSnapshot();\n    });\n    test('inline fragment', () => {\n        const context = compile(`\n      query HeroInlineFragment($episode: Episode) {\n        hero(episode: $episode) {\n          ... on Character {\n            name\n          }\n          id\n        }\n      }\n    `);\n        const output = codeGeneration_1.generateSource(context);\n        expect(output).toMatchSnapshot();\n    });\n    test('inline fragment on type conditions', () => {\n        const context = compile(`\n      query HeroName($episode: Episode) {\n        hero(episode: $episode) {\n          name\n          id\n\n          ... on Human {\n            homePlanet\n            friends {\n              name\n            }\n          }\n\n          ... on Droid {\n            appearsIn\n          }\n        }\n      }\n    `);\n        const output = codeGeneration_1.generateSource(context);\n        expect(output).toMatchSnapshot();\n    });\n    test('inline fragment on type conditions with differing inner fields', () => {\n        const context = compile(`\n      query HeroName($episode: Episode) {\n        hero(episode: $episode) {\n          name\n          id\n\n          ... on Human {\n            homePlanet\n            friends {\n              name\n            }\n          }\n\n          ... on Droid {\n            appearsIn\n            friends {\n              id\n            }\n          }\n        }\n      }\n    `);\n        const output = codeGeneration_1.generateSource(context);\n        expect(output).toMatchSnapshot();\n    });\n    test('fragment spreads with inline fragments', () => {\n        const context = compile(`\n      query HeroName($episode: Episode) {\n        hero(episode: $episode) {\n          name\n          id\n          ...humanFragment\n          ...droidFragment\n        }\n      }\n\n      fragment humanFragment on Human {\n        homePlanet\n        friends {\n          ... on Human {\n            name\n          }\n\n          ... on Droid {\n            id\n          }\n        }\n      }\n\n      fragment droidFragment on Droid {\n        appearsIn\n      }\n    `);\n        const output = codeGeneration_1.generateSource(context);\n        expect(output).toMatchSnapshot();\n    });\n});\n//# sourceMappingURL=data:application/json;base64,");"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = require("graphql");
const loading_1 = require("../../loading");
const schema = loading_1.loadSchema(require.resolve('../../../test/fixtures/starwars/schema.json'));
const compiler_1 = require("../../compiler");
const codeGeneration_1 = require("../codeGeneration");
function compile(source, options = {
  mergeInFieldsFromFragmentSpreads: true,
  addTypename: true })
{
  const document = graphql_1.parse(source);
  return compiler_1.compileToIR(schema, document, options);
}
describe('Flow codeGeneration', () => {
  test('multiple files', () => {
    const context = compile(`
      query HeroName($episode: Episode) {
        hero(episode: $episode) {
          name
          id
        }
      }

      query SomeOther($episode: Episode) {
        hero(episode: $episode) {
          name
          ...someFragment
        }
      }

      fragment someFragment on Character {
        appearsIn
      }

      mutation ReviewMovie($episode: Episode, $review: ReviewInput) {
        createReview(episode: $episode, review: $review) {
          stars
          commentary
        }
      }
    `);
    context.operations["HeroName"].filePath = '/some/file/ComponentA.js';
    context.operations["SomeOther"].filePath = '/some/file/ComponentB.js';
    context.fragments['someFragment'].filePath = '/some/file/ComponentB.js';
    const output = codeGeneration_1.generateSource(context);
    expect(output).toBeInstanceOf(Object);
    Object.keys(output).
    forEach(filePath => {
      expect(filePath).toMatchSnapshot();
      expect(output[filePath]).toMatchSnapshot();
    });
  });
  test('simple hero query', () => {
    const context = compile(`
      query HeroName($episode: Episode) {
        hero(episode: $episode) {
          name
          id
        }
      }
    `);
    const output = codeGeneration_1.generateSource(context);
    expect(output).toMatchSnapshot();
  });
  test('simple mutation', () => {
    const context = compile(`
      mutation ReviewMovie($episode: Episode, $review: ReviewInput) {
        createReview(episode: $episode, review: $review) {
          stars
          commentary
        }
      }
    `);
    const output = codeGeneration_1.generateSource(context);
    expect(output).toMatchSnapshot();
  });
  test('simple fragment', () => {
    const context = compile(`
      fragment SimpleFragment on Character{
        name
      }
    `);
    const output = codeGeneration_1.generateSource(context);
    expect(output).toMatchSnapshot();
  });
  test('fragment with fragment spreads', () => {
    const context = compile(`
      fragment simpleFragment on Character {
        name
      }

      fragment anotherFragment on Character {
        id
        ...simpleFragment
      }
    `);
    const output = codeGeneration_1.generateSource(context);
    expect(output).toMatchSnapshot();
  });
  test('fragment with fragment spreads with inline fragment', () => {
    const context = compile(`
      fragment simpleFragment on Character {
        name
      }

      fragment anotherFragment on Character {
        id
        ...simpleFragment

        ... on Human {
          appearsIn
        }
      }
    `);
    const output = codeGeneration_1.generateSource(context);
    expect(output).toMatchSnapshot();
  });
  test('query with fragment spreads', () => {
    const context = compile(`
      fragment simpleFragment on Character {
        name
      }

      query HeroFragment($episode: Episode) {
        hero(episode: $episode) {
          ...simpleFragment
          id
        }
      }
    `);
    const output = codeGeneration_1.generateSource(context);
    expect(output).toMatchSnapshot();
  });
  test('inline fragment', () => {
    const context = compile(`
      query HeroInlineFragment($episode: Episode) {
        hero(episode: $episode) {
          ... on Character {
            name
          }
          id
        }
      }
    `);
    const output = codeGeneration_1.generateSource(context);
    expect(output).toMatchSnapshot();
  });
  test('inline fragment on type conditions', () => {
    const context = compile(`
      query HeroName($episode: Episode) {
        hero(episode: $episode) {
          name
          id

          ... on Human {
            homePlanet
            friends {
              name
            }
          }

          ... on Droid {
            appearsIn
          }
        }
      }
    `);
    const output = codeGeneration_1.generateSource(context);
    expect(output).toMatchSnapshot();
  });
  test('inline fragment on type conditions with differing inner fields', () => {
    const context = compile(`
      query HeroName($episode: Episode) {
        hero(episode: $episode) {
          name
          id

          ... on Human {
            homePlanet
            friends {
              name
            }
          }

          ... on Droid {
            appearsIn
            friends {
              id
            }
          }
        }
      }
    `);
    const output = codeGeneration_1.generateSource(context);
    expect(output).toMatchSnapshot();
  });
  test('fragment spreads with inline fragments', () => {
    const context = compile(`
      query HeroName($episode: Episode) {
        hero(episode: $episode) {
          name
          id
          ...humanFragment
          ...droidFragment
        }
      }

      fragment humanFragment on Human {
        homePlanet
        friends {
          ... on Human {
            name
          }

          ... on Droid {
            id
          }
        }
      }

      fragment droidFragment on Droid {
        appearsIn
      }
    `);
    const output = codeGeneration_1.generateSource(context);
    expect(output).toMatchSnapshot();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,