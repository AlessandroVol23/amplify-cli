8aed6197c6ec64d64d37b54056837ac6
'use strict';require('ts-jest').install("/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-types-generator/test/angular/index.js", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst graphql_1 = require(\"graphql\");\nconst angular_1 = require(\"../../src/angular\");\nconst loading_1 = require(\"../../src/loading\");\nconst starWarsSchema = loading_1.loadSchema(require.resolve('../fixtures/starwars/schema.json'));\nconst miscSchema = loading_1.loadSchema(require.resolve('../fixtures/misc/schema.json'));\nconst CodeGenerator_1 = require(\"../../src/utilities/CodeGenerator\");\nconst legacyIR_1 = require(\"../../src/compiler/legacyIR\");\ndescribe('Angular code generation', function () {\n    let generator;\n    let compileFromSource;\n    let addFragment;\n    function setup(schema) {\n        const context = {\n            schema: schema,\n            operations: {},\n            fragments: {},\n            typesUsed: {}\n        };\n        generator = new CodeGenerator_1.default(context);\n        compileFromSource = (source) => {\n            const document = graphql_1.parse(source);\n            const context = legacyIR_1.compileToLegacyIR(schema, document, {\n                mergeInFieldsFromFragmentSpreads: true,\n                addTypename: true\n            });\n            generator.context = context;\n            return context;\n        };\n        addFragment = (fragment) => {\n            generator.context.fragments[fragment.fragmentName] = fragment;\n        };\n        return { generator, compileFromSource, addFragment };\n    }\n    describe('#generateSource()', function () {\n        test(`should generate simple query operations`, function () {\n            const { compileFromSource } = setup(starWarsSchema);\n            const context = compileFromSource(`\n        query HeroName {\n          hero {\n            name\n          }\n        }\n      `);\n            const source = angular_1.generateSource(context);\n            expect(source).toMatchSnapshot();\n        });\n        test(`should generate simple query operations including input variables`, function () {\n            const { compileFromSource } = setup(starWarsSchema);\n            const context = compileFromSource(`\n        query HeroName($episode: Episode) {\n          hero(episode: $episode) {\n            name\n          }\n        }\n      `);\n            const source = angular_1.generateSource(context);\n            expect(source).toMatchSnapshot();\n        });\n        test(`should generate simple nested query operations including input variables`, function () {\n            const { compileFromSource } = setup(starWarsSchema);\n            const context = compileFromSource(`\n        query HeroAndFriendsNames($episode: Episode) {\n          hero(episode: $episode) {\n            name\n            friends {\n              name\n            }\n          }\n        }\n      `);\n            const source = angular_1.generateSource(context);\n            expect(source).toMatchSnapshot();\n        });\n        test(`should generate simple nested with required elements in lists`, function () {\n            const { compileFromSource } = setup(starWarsSchema);\n            const context = compileFromSource(`\n        query StarshipCoords {\n          starship {\n            coordinates\n          }\n        }\n      `);\n            const source = angular_1.generateSource(context);\n            expect(source).toMatchSnapshot();\n        });\n        test(`should generate fragmented query operations`, function () {\n            const { compileFromSource } = setup(starWarsSchema);\n            const context = compileFromSource(`\n        query HeroAndFriendsNames {\n          hero {\n            name\n            ...heroFriends\n          }\n        }\n\n        fragment heroFriends on Character {\n          friends {\n            name\n          }\n        }\n      `);\n            const source = angular_1.generateSource(context);\n            expect(source).toMatchSnapshot();\n        });\n        test(`should generate query operations with inline fragments`, function () {\n            const { compileFromSource } = setup(starWarsSchema);\n            const context = compileFromSource(`\n        query HeroAndDetails {\n          hero {\n            name\n            ...HeroDetails\n          }\n        }\n\n        fragment HeroDetails on Character {\n          ... on Droid {\n            primaryFunction\n          }\n          ... on Human {\n            height\n          }\n        }\n      `);\n            const source = angular_1.generateSource(context);\n            expect(source).toMatchSnapshot();\n        });\n        test(`should generate mutation operations with complex input types`, function () {\n            const { compileFromSource } = setup(starWarsSchema);\n            const context = compileFromSource(`\n        mutation ReviewMovie($episode: Episode, $review: ReviewInput) {\n          createReview(episode: $episode, review: $review) {\n            stars\n            commentary\n          }\n        }\n      `);\n            const source = angular_1.generateSource(context);\n            expect(source).toMatchSnapshot();\n        });\n        test(`should generate correct list with custom fragment`, function () {\n            const { compileFromSource } = setup(starWarsSchema);\n            const context = compileFromSource(`\n        fragment Friend on Character {\n          name\n        }\n\n        query HeroAndFriendsNames($episode: Episode) {\n          hero(episode: $episode) {\n            name\n            friends {\n              ...Friend\n            }\n          }\n        }\n      `);\n            const source = angular_1.generateSource(context);\n            expect(source).toMatchSnapshot();\n        });\n        test('should handle single line comments', () => {\n            const { compileFromSource } = setup(miscSchema);\n            const context = compileFromSource(`\n        query CustomScalar {\n          commentTest {\n            singleLine\n          }\n        }\n      `);\n            const source = angular_1.generateSource(context);\n            expect(source).toMatchSnapshot();\n        });\n        test('should handle multi-line comments', () => {\n            const { compileFromSource } = setup(miscSchema);\n            const context = compileFromSource(`\n        query CustomScalar {\n          commentTest {\n            multiLine\n          }\n        }\n      `);\n            const source = angular_1.generateSource(context);\n            expect(source).toMatchSnapshot();\n        });\n        test('should handle comments in enums', () => {\n            const { compileFromSource } = setup(miscSchema);\n            const context = compileFromSource(`\n        query CustomScalar {\n          commentTest {\n            enumCommentTest\n          }\n        }\n      `);\n            const source = angular_1.generateSource(context);\n            expect(source).toMatchSnapshot();\n        });\n        test('should handle interfaces at root', () => {\n            const { compileFromSource } = setup(miscSchema);\n            const context = compileFromSource(`\n        query CustomScalar {\n          interfaceTest {\n            prop\n            ... on ImplA {\n              propA\n            }\n            ... on ImplB {\n              propB\n            }\n          }\n        }\n      `);\n            const source = angular_1.generateSource(context);\n            expect(source).toMatchSnapshot();\n        });\n        test('should handle unions at root', () => {\n            const { compileFromSource } = setup(miscSchema);\n            const context = compileFromSource(`\n        query CustomScalar {\n          unionTest {\n            ... on PartialA {\n              prop\n            }\n            ... on PartialB {\n              prop\n            }\n          }\n        }\n      `);\n            const source = angular_1.generateSource(context);\n            expect(source).toMatchSnapshot();\n        });\n        test('should have __typename value matching fragment type on generic type', () => {\n            const { compileFromSource } = setup(starWarsSchema);\n            const context = compileFromSource(`\n        query HeroName {\n          hero {\n            ...HeroWithName\n          }\n        }\n\n        fragment HeroWithName on Character {\n          __typename\n          name\n        }\n      `);\n            const source = angular_1.generateSource(context);\n            expect(source).toMatchSnapshot();\n        });\n        test('should have __typename value matching fragment type on specific type', () => {\n            const { compileFromSource } = setup(starWarsSchema);\n            const context = compileFromSource(`\n        query DroidName {\n          droid {\n            ...DroidWithName\n          }\n        }\n\n        fragment DroidWithName on Droid {\n          __typename\n          name\n        }\n      `);\n            const source = angular_1.generateSource(context);\n            expect(source).toMatchSnapshot();\n        });\n    });\n});\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBLHFDQVFpQjtBQUVqQiwrQ0FFMkI7QUFFM0IsK0NBQStDO0FBQy9DLE1BQU0sY0FBYyxHQUFHLG9CQUFVLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDLENBQUM7QUFDdkYsTUFBTSxVQUFVLEdBQUcsb0JBQVUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLDhCQUE4QixDQUFDLENBQUMsQ0FBQztBQUUvRSxxRUFBOEQ7QUFFOUQsMERBQWdFO0FBRWhFLFFBQVEsQ0FBQyx5QkFBeUIsRUFBRTtJQUNsQyxJQUFJLFNBQVMsQ0FBQztJQUNkLElBQUksaUJBQWlCLENBQUM7SUFDdEIsSUFBSSxXQUFXLENBQUM7SUFFaEIsZUFBZSxNQUFNO1FBQ25CLE1BQU0sT0FBTyxHQUFHO1lBQ2QsTUFBTSxFQUFFLE1BQU07WUFDZCxVQUFVLEVBQUUsRUFBRTtZQUNkLFNBQVMsRUFBRSxFQUFFO1lBQ2IsU0FBUyxFQUFFLEVBQUU7U0FDZCxDQUFBO1FBRUQsU0FBUyxHQUFHLElBQUksdUJBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUV2QyxpQkFBaUIsR0FBRyxDQUFDLE1BQU0sRUFBRSxFQUFFO1lBQzdCLE1BQU0sUUFBUSxHQUFHLGVBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUMvQixNQUFNLE9BQU8sR0FBRyw0QkFBaUIsQ0FBQyxNQUFNLEVBQUUsUUFBUSxFQUFFO2dCQUNsRCxnQ0FBZ0MsRUFBRSxJQUFJO2dCQUN0QyxXQUFXLEVBQUUsSUFBSTthQUNsQixDQUFDLENBQUM7WUFDSCxTQUFTLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztZQUM1QixPQUFPLE9BQU8sQ0FBQztRQUNqQixDQUFDLENBQUM7UUFFRixXQUFXLEdBQUcsQ0FBQyxRQUFRLEVBQUUsRUFBRTtZQUN6QixTQUFTLENBQUMsT0FBTyxD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QyxjQUFjLENBQUMsQ0FBQztZQUNwRCxNQUFNLE9BQU8sR0FBRyxpQkFBaUIsQ0FBQzs7Ozs7Ozs7Ozs7T0FXakMsQ0FBQyxDQUFDO1lBRUgsTUFBTSxNQUFNLEdBQUcsd0JBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUN2QyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDbkMsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsc0VBQXNFLEVBQUUsR0FBRyxFQUFFO1lBQ2hGLE1BQU0sRUFBRSxpQkFBaUIsRUFBRSxHQUFHLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUNwRCxNQUFNLE9BQU8sR0FBRyxpQkFBaUIsQ0FBQzs7Ozs7Ozs7Ozs7T0FXakMsQ0FBQyxDQUFDO1lBRUgsTUFBTSxNQUFNLEdBQUcsd0JBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUN2QyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDbkMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc3RyaXBJbmRlbnQgfSBmcm9tICdjb21tb24tdGFncyc7XG5cbmltcG9ydCB7XG4gIHBhcnNlLFxuICBpc1R5cGUsXG4gIEdyYXBoUUxJRCxcbiAgR3JhcGhRTFN0cmluZyxcbiAgR3JhcGhRTEludCxcbiAgR3JhcGhRTExpc3QsXG4gIEdyYXBoUUxOb25OdWxsXG59IGZyb20gJ2dyYXBocWwnO1xuXG5pbXBvcnQge1xuICBnZW5lcmF0ZVNvdXJjZVxufSBmcm9tICcuLi8uLi9zcmMvYW5ndWxhcic7XG5cbmltcG9ydCB7IGxvYWRTY2hlbWEgfSBmcm9tICcuLi8uLi9zcmMvbG9hZGluZyc7XG5jb25zdCBzdGFyV2Fyc1NjaGVtYSA9IGxvYWRTY2hlbWEocmVxdWlyZS5yZXNvbHZlKCcuLi9maXh0dXJlcy9zdGFyd2Fycy9zY2hlbWEuanNvbicpKTtcbmNvbnN0IG1pc2NTY2hlbWEgPSBsb2FkU2NoZW1hKHJlcXVpcmUucmVzb2x2ZSgnLi4vZml4dHVyZXMvbWlzYy9zY2hlbWEuanNvbicpKTtcblxuaW1wb3J0IENvZGVHZW5lcmF0b3IgZnJvbSAnLi4vLi4vc3JjL3V0aWxpdGllcy9Db2RlR2VuZXJhdG9yJztcblxuaW1wb3J0IHsgY29tcGlsZVRvTGVnYWN5SVIgfSBmcm9tICcuLi8uLi9zcmMvY29tcGlsZXIvbGVnYWN5SVInO1xuXG5kZXNjcmliZSgnQW5ndWxhciBjb2RlIGdlbmVyYXRpb24nLCBmdW5jdGlvbigpIHtcbiAgbGV0IGdlbmVyYXRvcjtcbiAgbGV0IGNvbXBpbGVGcm9tU291cmNlO1xuICBsZXQgYWRkRnJhZ21lbnQ7XG5cbiAgZnVuY3Rpb24gc2V0dXAoc2NoZW1hKSB7XG4gICAgY29uc3QgY29udGV4dCA9IHtcbiAgICAgIHNjaGVtYTogc2NoZW1hLFxuICAgICAgb3BlcmF0aW9uczoge30sXG4gICAgICBmcmFnbWVudHM6IHt9LFxuICAgICAgdHlwZXNVc2VkOiB7fVxuICAgIH1cblxuICAgIGdlbmVyYXRvciA9IG5ldyBDb2RlR2VuZXJhdG9yKGNvbnRleHQpO1xuXG4gICAgY29tcGlsZUZyb21Tb3VyY2UgPSAoc291cmNlKSA9PiB7XG4gICAgICBjb25zdCBkb2N1bWVudCA9IHBhcnNlKHNvdXJjZSk7XG4gICAgICBjb25zdCBjb250ZXh0ID0gY29tcGlsZVRvTGVnYWN5SVIoc2NoZW1hLCBkb2N1bWVudCwge1xuICAgICAgICBtZXJnZUluRmllbGRzRnJvbUZyYWdtZW50U3ByZWFkczogdHJ1ZSxcbiAgICAgICAgYWRkVHlwZW5hbWU6IHRydWVcbiAgICAgIH0pO1xuICAgICAgZ2VuZXJhdG9yLmNvbnRleHQgPSBjb250ZXh0O1xuICAgICAgcmV0dXJuIGNvbnRleHQ7XG4gICAgfTtcblxuICAgIGFkZEZyYWdtZW50ID0gKGZyYWdtZW50KSA9PiB7XG4gICAgICBnZW5lcmF0b3IuY29udGV4dC5mcmFnbWVudHNbZnJhZ21lbnQuZnJhZ21lbnROYW1lXSA9IGZyYWdtZW50O1xuICAgIH07XG5cbiAgICByZXR1cm4geyBnZW5lcmF0b3IsIGNvbXBpbGVGcm9tU291cmNlLCBhZGRGcmFnbWVudCB9O1xuICB9XG5cbiAgZGVzY3JpYmUoJyNnZW5lcmF0ZVNvdXJjZSgpJywgZnVuY3Rpb24oKSB7XG4gICAgdGVzdChgc2hvdWxkIGdlbmVyYXRlIHNpbXBsZSBxdWVyeSBvcGVyYXRpb25zYCwgZnVuY3Rpb24oKSB7XG4gICAgICBjb25zdCB7IGNvbXBpbGVGcm9tU291cmNlIH0gPSBzZXR1cChzdGFyV2Fyc1NjaGVtYSk7XG4gICAgICBjb25zdCBjb250ZXh0ID0gY29tcGlsZUZyb21Tb3VyY2UoYFxuICAgICAgICBxdWVyeSBIZXJvTmFtZSB7XG4gICAgICAgICAgaGVybyB7XG4gICAgICAgICAgICBuYW1lXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBgKTtcblxuICAgICAgY29uc3Qgc291cmNlID0gZ2VuZXJhdGVTb3VyY2UoY29udGV4dCk7XG4gICAgICBleHBlY3Qoc291cmNlKS50b01hdGNoU25hcHNob3QoKTtcbiAgICB9KTtcblxuICAgIHRlc3QoYHNob3VsZCBnZW5lcmF0ZSBzaW1wbGUgcXVlcnkgb3BlcmF0aW9ucyBpbmNsdWRpbmcgaW5wdXQgdmFyaWFibGVzYCwgZnVuY3Rpb24oKSB7XG4gICAgICBjb25zdCB7IGNvbXBpbGVGcm9tU291cmNlIH0gPSBzZXR1cChzdGFyV2Fyc1NjaGVtYSk7XG4gICAgICBjb25zdCBjb250ZXh0ID0gY29tcGlsZUZyb21Tb3VyY2UoYFxuICAgICAgICBxdWVyeSBIZXJvTmFtZSgkZXBpc29kZTogRXBpc29kZSkge1xuICAgICAgICAgIGhlcm8oZXBpc29kZTogJGVwaXNvZGUpIHtcbiAgICAgICAgICAgIG5hbWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIGApO1xuXG4gICAgICBjb25zdCBzb3VyY2UgPSBnZW5lcmF0ZVNvdXJjZShjb250ZXh0KTtcbiAgICAgIGV4cGVjdChzb3VyY2UpLnRvTWF0Y2hTbmFwc2hvdCgpO1xuICAgIH0pO1xuXG4gICAgdGVzdChgc2hvdWxkIGdlbmVyYXRlIHNpbXBsZSBuZXN0ZWQgcXVlcnkgb3BlcmF0aW9ucyBpbmNsdWRpbmcgaW5wdXQgdmFyaWFibGVzYCwgZnVuY3Rpb24oKSB7XG4gICAgICBjb25zdCB7IGNvbXBpbGVGcm9tU291cmNlIH0gPSBzZXR1cChzdGFyV2Fyc1NjaGVtYSk7XG4gICAgICBjb25zdCBjb250ZXh0ID0gY29tcGlsZUZyb21Tb3VyY2UoYFxuICAgICAgICBxdWVyeSBIZXJvQW5kRnJpZW5kc05hbWVzKCRlcGlzb2RlOiBFcGlzb2RlKSB7XG4gICAgICAgICAgaGVybyhlcGlzb2RlOiAkZXBpc29kZSkge1xuICAgICAgICAgICAgbmFtZVxuICAgICAgICAgICAgZnJpZW5kcyB7XG4gICAgICAgICAgICAgIG5hbWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIGApO1xuXG4gICAgICBjb25zdCBzb3VyY2UgPSBnZW5lcmF0ZVNvdXJjZShjb250ZXh0KTtcbiAgICAgIGV4cGVjdChzb3VyY2UpLnRvTWF0Y2hTbmFwc2hvdCgpO1xuICAgIH0pO1xuXG4gICAgdGVzdChgc2hvdWxkIGdlbmVyYXRlIHNpbXBsZSBuZXN0ZWQgd2l0aCByZXF1aXJlZCBlbGVtZW50cyBpbiBsaXN0c2AsIGZ1bmN0aW9uKCkge1xuICAgICAgY29uc3QgeyBjb21waWxlRnJvbVNvdXJjZSB9ID0gc2V0dXAoc3RhcldhcnNTY2hlbWEpO1xuICAgICAgY29uc3QgY29udGV4dCA9IGNvbXBpbGVGcm9tU291cmNlKGBcbiAgICAgICAgcXVlcnkgU3RhcnNoaXBDb29yZHMge1xuICAgICAgICAgIHN0YXJzaGlwIHtcbiAgICAgICAgICAgIGNvb3JkaW5hdGVzXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBgKTtcblxuICAgICAgY29uc3Qgc291cmNlID0gZ2VuZXJhdGVTb3VyY2UoY29udGV4dCk7XG4gICAgICBleHBlY3Qoc291cmNlKS50b01hdGNoU25hcHNob3QoKTtcbiAgICB9KTtcblxuICAgIHRlc3QoYHNob3VsZCBnZW5lcmF0ZSBmcmFnbWVudGVkIHF1ZXJ5IG9wZXJhdGlvbnNgLCBmdW5jdGlvbigpIHtcbiAgICAgIGNvbnN0IHsgY29tcGlsZUZyb21Tb3VyY2UgfSA9IHNldHVwKHN0YXJXYXJzU2NoZW1hKTtcbiAgICAgIGNvbnN0IGNvbnRleHQgPSBjb21waWxlRnJvbVNvdXJjZShgXG4gICAgICAgIHF1ZXJ5IEhlcm9BbmRGcmllbmRzTmFtZXMge1xuICAgICAgICAgIGhlcm8ge1xuICAgICAgICAgICAgbmFtZVxuICAgICAgICAgICAgLi4uaGVyb0ZyaWVuZHNcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmcmFnbWVudCBoZXJvRnJpZW5kcyBvbiBDaGFyYWN0ZXIge1xuICAgICAgICAgIGZyaWVuZHMge1xuICAgICAgICAgICAgbmFtZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgYCk7XG5cbiAgICAgIGNvbnN0IHNvdXJjZSA9IGdlbmVyYXRlU291cmNlKGNvbnRleHQpO1xuICAgICAgZXhwZWN0KHNvdXJjZSkudG9NYXRjaFNuYXBzaG90KCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KGBzaG91bGQgZ2VuZXJhdGUgcXVlcnkgb3BlcmF0aW9ucyB3aXRoIGlubGluZSBmcmFnbWVudHNgLCBmdW5jdGlvbigpIHtcbiAgICAgIGNvbnN0IHsgY29tcGlsZUZyb21Tb3VyY2UgfSA9IHNldHVwKHN0YXJXYXJzU2NoZW1hKTtcbiAgICAgIGNvbnN0IGNvbnRleHQgPSBjb21waWxlRnJvbVNvdXJjZShgXG4gICAgICAgIHF1ZXJ5IEhlcm9BbmREZXRhaWxzIHtcbiAgICAgICAgICBoZXJvIHtcbiAgICAgICAgICAgIG5hbWVcbiAgICAgICAgICAgIC4uLkhlcm9EZXRhaWxzXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnJhZ21lbnQgSGVyb0RldGFpbHMgb24gQ2hhcmFjdGVyIHtcbiAgICAgICAgICAuLi4gb24gRHJvaWQge1xuICAgICAgICAgICAgcHJpbWFyeUZ1bmN0aW9uXG4gICAgICAgICAgfVxuICAgICAgICAgIC4uLiBvbiBIdW1hbiB7XG4gICAgICAgICAgICBoZWlnaHRcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIGApO1xuXG4gICAgICBjb25zdCBzb3VyY2UgPSBnZW5lcmF0ZVNvdXJjZShjb250ZXh0KTtcbiAgICAgIGV4cGVjdChzb3VyY2UpLnRvTWF0Y2hTbmFwc2hvdCgpO1xuICAgIH0pO1xuXG4gICAgdGVzdChgc2hvdWxkIGdlbmVyYXRlIG11dGF0aW9uIG9wZXJhdGlvbnMgd2l0aCBjb21wbGV4IGlucHV0IHR5cGVzYCwgZnVuY3Rpb24oKSB7XG4gICAgICBjb25zdCB7IGNvbXBpbGVGcm9tU291cmNlIH0gPSBzZXR1cChzdGFyV2Fyc1NjaGVtYSk7XG4gICAgICBjb25zdCBjb250ZXh0ID0gY29tcGlsZUZyb21Tb3VyY2UoYFxuICAgICAgICBtdXRhdGlvbiBSZXZpZXdNb3ZpZSgkZXBpc29kZTogRXBpc29kZSwgJHJldmlldzogUmV2aWV3SW5wdXQpIHtcbiAgICAgICAgICBjcmVhdGVSZXZpZXcoZXBpc29kZTogJGVwaXNvZGUsIHJldmlldzogJHJldmlldykge1xuICAgICAgICAgICAgc3RhcnNcbiAgICAgICAgICAgIGNvbW1lbnRhcnlcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIGApO1xuXG4gICAgICBjb25zdCBzb3VyY2UgPSBnZW5lcmF0ZVNvdXJjZShjb250ZXh0KTtcbiAgICAgIGV4cGVjdChzb3VyY2UpLnRvTWF0Y2hTbmFwc2hvdCgpO1xuICAgIH0pO1xuXG4gICAgdGVzdChgc2hvdWxkIGdlbmVyYXRlIGNvcnJlY3QgbGlzdCB3aXRoIGN1c3RvbSBmcmFnbWVudGAsIGZ1bmN0aW9uKCkge1xuICAgICAgY29uc3QgeyBjb21waWxlRnJvbVNvdXJjZSB9ID0gc2V0dXAoc3RhcldhcnNTY2hlbWEpO1xuICAgICAgY29uc3QgY29udGV4dCA9IGNvbXBpbGVGcm9tU291cmNlKGBcbiAgICAgICAgZnJhZ21lbnQgRnJpZW5kIG9uIENoYXJhY3RlciB7XG4gICAgICAgICAgbmFtZVxuICAgICAgICB9XG5cbiAgICAgICAgcXVlcnkgSGVyb0FuZEZyaWVuZHNOYW1lcygkZXBpc29kZTogRXBpc29kZSkge1xuICAgICAgICAgIGhlcm8oZXBpc29kZTogJGVwaXNvZGUpIHtcbiAgICAgICAgICAgIG5hbWVcbiAgICAgICAgICAgIGZyaWVuZHMge1xuICAgICAgICAgICAgICAuLi5GcmllbmRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIGApO1xuXG4gICAgICBjb25zdCBzb3VyY2UgPSBnZW5lcmF0ZVNvdXJjZShjb250ZXh0KTtcbiAgICAgIGV4cGVjdChzb3VyY2UpLnRvTWF0Y2hTbmFwc2hvdCgpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBzaW5nbGUgbGluZSBjb21tZW50cycsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgY29tcGlsZUZyb21Tb3VyY2UgfSA9IHNldHVwKG1pc2NTY2hlbWEpO1xuICAgICAgY29uc3QgY29udGV4dCA9IGNvbXBpbGVGcm9tU291cmNlKGBcbiAgICAgICAgcXVlcnkgQ3VzdG9tU2NhbGFyIHtcbiAgICAgICAgICBjb21tZW50VGVzdCB7XG4gICAgICAgICAgICBzaW5nbGVMaW5lXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBgKTtcblxuICAgICAgY29uc3Qgc291cmNlID0gZ2VuZXJhdGVTb3VyY2UoY29udGV4dCk7XG4gICAgICBleHBlY3Qoc291cmNlKS50b01hdGNoU25hcHNob3QoKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgbXVsdGktbGluZSBjb21tZW50cycsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgY29tcGlsZUZyb21Tb3VyY2UgfSA9IHNldHVwKG1pc2NTY2hlbWEpO1xuICAgICAgY29uc3QgY29udGV4dCA9IGNvbXBpbGVGcm9tU291cmNlKGBcbiAgICAgICAgcXVlcnkgQ3VzdG9tU2NhbGFyIHtcbiAgICAgICAgICBjb21tZW50VGVzdCB7XG4gICAgICAgICAgICBtdWx0aUxpbmVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIGApO1xuXG4gICAgICBjb25zdCBzb3VyY2UgPSBnZW5lcmF0ZVNvdXJjZShjb250ZXh0KTtcbiAgICAgIGV4cGVjdChzb3VyY2UpLnRvTWF0Y2hTbmFwc2hvdCgpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBjb21tZW50cyBpbiBlbnVtcycsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgY29tcGlsZUZyb21Tb3VyY2UgfSA9IHNldHVwKG1pc2NTY2hlbWEpO1xuICAgICAgY29uc3QgY29udGV4dCA9IGNvbXBpbGVGcm9tU291cmNlKGBcbiAgICAgICAgcXVlcnkgQ3VzdG9tU2NhbGFyIHtcbiAgICAgICAgICBjb21tZW50VGVzdCB7XG4gICAgICAgICAgICBlbnVtQ29tbWVudFRlc3RcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIGApO1xuXG4gICAgICBjb25zdCBzb3VyY2UgPSBnZW5lcmF0ZVNvdXJjZShjb250ZXh0KTtcbiAgICAgIGV4cGVjdChzb3VyY2UpLnRvTWF0Y2hTbmFwc2hvdCgpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBpbnRlcmZhY2VzIGF0IHJvb3QnLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IGNvbXBpbGVGcm9tU291cmNlIH0gPSBzZXR1cChtaXNjU2NoZW1hKTtcbiAgICAgIGNvbnN0IGNvbnRleHQgPSBjb21waWxlRnJvbVNvdXJjZShgXG4gICAgICAgIHF1ZXJ5IEN1c3RvbVNjYWxhciB7XG4gICAgICAgICAgaW50ZXJmYWNlVGVzdCB7XG4gICAgICAgICAgICBwcm9wXG4gICAgICAgICAgICAuLi4gb24gSW1wbEEge1xuICAgICAgICAgICAgICBwcm9wQVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLi4uIG9uIEltcGxCIHtcbiAgICAgICAgICAgICAgcHJvcEJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIGApO1xuXG4gICAgICBjb25zdCBzb3VyY2UgPSBnZW5lcmF0ZVNvdXJjZShjb250ZXh0KTtcbiAgICAgIGV4cGVjdChzb3VyY2UpLnRvTWF0Y2hTbmFwc2hvdCgpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSB1bmlvbnMgYXQgcm9vdCcsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgY29tcGlsZUZyb21Tb3VyY2UgfSA9IHNldHVwKG1pc2NTY2hlbWEpO1xuICAgICAgY29uc3QgY29udGV4dCA9IGNvbXBpbGVGcm9tU291cmNlKGBcbiAgICAgICAgcXVlcnkgQ3VzdG9tU2NhbGFyIHtcbiAgICAgICAgICB1bmlvblRlc3Qge1xuICAgICAgICAgICAgLi4uIG9uIFBhcnRpYWxBIHtcbiAgICAgICAgICAgICAgcHJvcFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLi4uIG9uIFBhcnRpYWxCIHtcbiAgICAgICAgICAgICAgcHJvcFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgYCk7XG5cbiAgICAgIGNvbnN0IHNvdXJjZSA9IGdlbmVyYXRlU291cmNlKGNvbnRleHQpO1xuICAgICAgZXhwZWN0KHNvdXJjZSkudG9NYXRjaFNuYXBzaG90KCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgaGF2ZSBfX3R5cGVuYW1lIHZhbHVlIG1hdGNoaW5nIGZyYWdtZW50IHR5cGUgb24gZ2VuZXJpYyB0eXBlJywgKCkgPT4ge1xuICAgICAgY29uc3QgeyBjb21waWxlRnJvbVNvdXJjZSB9ID0gc2V0dXAoc3RhcldhcnNTY2hlbWEpO1xuICAgICAgY29uc3QgY29udGV4dCA9IGNvbXBpbGVGcm9tU291cmNlKGBcbiAgICAgICAgcXVlcnkgSGVyb05hbWUge1xuICAgICAgICAgIGhlcm8ge1xuICAgICAgICAgICAgLi4uSGVyb1dpdGhOYW1lXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnJhZ21lbnQgSGVyb1dpdGhOYW1lIG9uIENoYXJhY3RlciB7XG4gICAgICAgICAgX190eXBlbmFtZVxuICAgICAgICAgIG5hbWVcbiAgICAgICAgfVxuICAgICAgYCk7XG5cbiAgICAgIGNvbnN0IHNvdXJjZSA9IGdlbmVyYXRlU291cmNlKGNvbnRleHQpO1xuICAgICAgZXhwZWN0KHNvdXJjZSkudG9NYXRjaFNuYXBzaG90KCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgaGF2ZSBfX3R5cGVuYW1lIHZhbHVlIG1hdGNoaW5nIGZyYWdtZW50IHR5cGUgb24gc3BlY2lmaWMgdHlwZScsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgY29tcGlsZUZyb21Tb3VyY2UgfSA9IHNldHVwKHN0YXJXYXJzU2NoZW1hKTtcbiAgICAgIGNvbnN0IGNvbnRleHQgPSBjb21waWxlRnJvbVNvdXJjZShgXG4gICAgICAgIHF1ZXJ5IERyb2lkTmFtZSB7XG4gICAgICAgICAgZHJvaWQge1xuICAgICAgICAgICAgLi4uRHJvaWRXaXRoTmFtZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZyYWdtZW50IERyb2lkV2l0aE5hbWUgb24gRHJvaWQge1xuICAgICAgICAgIF9fdHlwZW5hbWVcbiAgICAgICAgICBuYW1lXG4gICAgICAgIH1cbiAgICAgIGApO1xuXG4gICAgICBjb25zdCBzb3VyY2UgPSBnZW5lcmF0ZVNvdXJjZShjb250ZXh0KTtcbiAgICAgIGV4cGVjdChzb3VyY2UpLnRvTWF0Y2hTbmFwc2hvdCgpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl19");"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = require("graphql");
const angular_1 = require("../../src/angular");
const loading_1 = require("../../src/loading");
const starWarsSchema = loading_1.loadSchema(require.resolve('../fixtures/starwars/schema.json'));
const miscSchema = loading_1.loadSchema(require.resolve('../fixtures/misc/schema.json'));
const CodeGenerator_1 = require("../../src/utilities/CodeGenerator");
const legacyIR_1 = require("../../src/compiler/legacyIR");
describe('Angular code generation', function () {
  let generator;
  let compileFromSource;
  let addFragment;
  function setup(schema) {
    const context = {
      schema: schema,
      operations: {},
      fragments: {},
      typesUsed: {} };

    generator = new CodeGenerator_1.default(context);
    compileFromSource = source => {
      const document = graphql_1.parse(source);
      const context = legacyIR_1.compileToLegacyIR(schema, document, {
        mergeInFieldsFromFragmentSpreads: true,
        addTypename: true });

      generator.context = context;
      return context;
    };
    addFragment = fragment => {
      generator.context.fragments[fragment.fragmentName] = fragment;
    };
    return { generator, compileFromSource, addFragment };
  }
  describe('#generateSource()', function () {
    test(`should generate simple query operations`, function () {
      const { compileFromSource } = setup(starWarsSchema);
      const context = compileFromSource(`
        query HeroName {
          hero {
            name
          }
        }
      `);
      const source = angular_1.generateSource(context);
      expect(source).toMatchSnapshot();
    });
    test(`should generate simple query operations including input variables`, function () {
      const { compileFromSource } = setup(starWarsSchema);
      const context = compileFromSource(`
        query HeroName($episode: Episode) {
          hero(episode: $episode) {
            name
          }
        }
      `);
      const source = angular_1.generateSource(context);
      expect(source).toMatchSnapshot();
    });
    test(`should generate simple nested query operations including input variables`, function () {
      const { compileFromSource } = setup(starWarsSchema);
      const context = compileFromSource(`
        query HeroAndFriendsNames($episode: Episode) {
          hero(episode: $episode) {
            name
            friends {
              name
            }
          }
        }
      `);
      const source = angular_1.generateSource(context);
      expect(source).toMatchSnapshot();
    });
    test(`should generate simple nested with required elements in lists`, function () {
      const { compileFromSource } = setup(starWarsSchema);
      const context = compileFromSource(`
        query StarshipCoords {
          starship {
            coordinates
          }
        }
      `);
      const source = angular_1.generateSource(context);
      expect(source).toMatchSnapshot();
    });
    test(`should generate fragmented query operations`, function () {
      const { compileFromSource } = setup(starWarsSchema);
      const context = compileFromSource(`
        query HeroAndFriendsNames {
          hero {
            name
            ...heroFriends
          }
        }

        fragment heroFriends on Character {
          friends {
            name
          }
        }
      `);
      const source = angular_1.generateSource(context);
      expect(source).toMatchSnapshot();
    });
    test(`should generate query operations with inline fragments`, function () {
      const { compileFromSource } = setup(starWarsSchema);
      const context = compileFromSource(`
        query HeroAndDetails {
          hero {
            name
            ...HeroDetails
          }
        }

        fragment HeroDetails on Character {
          ... on Droid {
            primaryFunction
          }
          ... on Human {
            height
          }
        }
      `);
      const source = angular_1.generateSource(context);
      expect(source).toMatchSnapshot();
    });
    test(`should generate mutation operations with complex input types`, function () {
      const { compileFromSource } = setup(starWarsSchema);
      const context = compileFromSource(`
        mutation ReviewMovie($episode: Episode, $review: ReviewInput) {
          createReview(episode: $episode, review: $review) {
            stars
            commentary
          }
        }
      `);
      const source = angular_1.generateSource(context);
      expect(source).toMatchSnapshot();
    });
    test(`should generate correct list with custom fragment`, function () {
      const { compileFromSource } = setup(starWarsSchema);
      const context = compileFromSource(`
        fragment Friend on Character {
          name
        }

        query HeroAndFriendsNames($episode: Episode) {
          hero(episode: $episode) {
            name
            friends {
              ...Friend
            }
          }
        }
      `);
      const source = angular_1.generateSource(context);
      expect(source).toMatchSnapshot();
    });
    test('should handle single line comments', () => {
      const { compileFromSource } = setup(miscSchema);
      const context = compileFromSource(`
        query CustomScalar {
          commentTest {
            singleLine
          }
        }
      `);
      const source = angular_1.generateSource(context);
      expect(source).toMatchSnapshot();
    });
    test('should handle multi-line comments', () => {
      const { compileFromSource } = setup(miscSchema);
      const context = compileFromSource(`
        query CustomScalar {
          commentTest {
            multiLine
          }
        }
      `);
      const source = angular_1.generateSource(context);
      expect(source).toMatchSnapshot();
    });
    test('should handle comments in enums', () => {
      const { compileFromSource } = setup(miscSchema);
      const context = compileFromSource(`
        query CustomScalar {
          commentTest {
            enumCommentTest
          }
        }
      `);
      const source = angular_1.generateSource(context);
      expect(source).toMatchSnapshot();
    });
    test('should handle interfaces at root', () => {
      const { compileFromSource } = setup(miscSchema);
      const context = compileFromSource(`
        query CustomScalar {
          interfaceTest {
            prop
            ... on ImplA {
              propA
            }
            ... on ImplB {
              propB
            }
          }
        }
      `);
      const source = angular_1.generateSource(context);
      expect(source).toMatchSnapshot();
    });
    test('should handle unions at root', () => {
      const { compileFromSource } = setup(miscSchema);
      const context = compileFromSource(`
        query CustomScalar {
          unionTest {
            ... on PartialA {
              prop
            }
            ... on PartialB {
              prop
            }
          }
        }
      `);
      const source = angular_1.generateSource(context);
      expect(source).toMatchSnapshot();
    });
    test('should have __typename value matching fragment type on generic type', () => {
      const { compileFromSource } = setup(starWarsSchema);
      const context = compileFromSource(`
        query HeroName {
          hero {
            ...HeroWithName
          }
        }

        fragment HeroWithName on Character {
          __typename
          name
        }
      `);
      const source = angular_1.generateSource(context);
      expect(source).toMatchSnapshot();
    });
    test('should have __typename value matching fragment type on specific type', () => {
      const { compileFromSource } = setup(starWarsSchema);
      const context = compileFromSource(`
        query DroidName {
          droid {
            ...DroidWithName
          }
        }

        fragment DroidWithName on Droid {
          __typename
          name
        }
      `);
      const source = angular_1.generateSource(context);
      expect(source).toMatchSnapshot();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RUFBZSxlQUFmO0FBQ0QsS0FqQkQ7QUFtQkEsU0FBSyxzRUFBTCxFQUE2RSxNQUFLO0FBQ2hGLFlBQU0sRUFBRSxpQkFBRixLQUF3QixNQUFNLGNBQU4sQ0FBOUI7QUFDQSxZQUFNLFVBQVUsa0JBQWtCOzs7Ozs7Ozs7OztPQUFsQixDQUFoQjtBQWFBLFlBQU0sU0FBUyxVQUFBLGNBQUEsQ0FBZSxPQUFmLENBQWY7QUFDQSxhQUFPLE1BQVAsRUFBZSxlQUFmO0FBQ0QsS0FqQkQ7QUFrQkQsR0FuUUQ7QUFvUUQsQ0FwU0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzdHJpcEluZGVudCB9IGZyb20gJ2NvbW1vbi10YWdzJztcblxuaW1wb3J0IHtcbiAgcGFyc2UsXG4gIGlzVHlwZSxcbiAgR3JhcGhRTElELFxuICBHcmFwaFFMU3RyaW5nLFxuICBHcmFwaFFMSW50LFxuICBHcmFwaFFMTGlzdCxcbiAgR3JhcGhRTE5vbk51bGxcbn0gZnJvbSAnZ3JhcGhxbCc7XG5cbmltcG9ydCB7XG4gIGdlbmVyYXRlU291cmNlXG59IGZyb20gJy4uLy4uL3NyYy9hbmd1bGFyJztcblxuaW1wb3J0IHsgbG9hZFNjaGVtYSB9IGZyb20gJy4uLy4uL3NyYy9sb2FkaW5nJztcbmNvbnN0IHN0YXJXYXJzU2NoZW1hID0gbG9hZFNjaGVtYShyZXF1aXJlLnJlc29sdmUoJy4uL2ZpeHR1cmVzL3N0YXJ3YXJzL3NjaGVtYS5qc29uJykpO1xuY29uc3QgbWlzY1NjaGVtYSA9IGxvYWRTY2hlbWEocmVxdWlyZS5yZXNvbHZlKCcuLi9maXh0dXJlcy9taXNjL3NjaGVtYS5qc29uJykpO1xuXG5pbXBvcnQgQ29kZUdlbmVyYXRvciBmcm9tICcuLi8uLi9zcmMvdXRpbGl0aWVzL0NvZGVHZW5lcmF0b3InO1xuXG5pbXBvcnQgeyBjb21waWxlVG9MZWdhY3lJUiB9IGZyb20gJy4uLy4uL3NyYy9jb21waWxlci9sZWdhY3lJUic7XG5cbmRlc2NyaWJlKCdBbmd1bGFyIGNvZGUgZ2VuZXJhdGlvbicsIGZ1bmN0aW9uKCkge1xuICBsZXQgZ2VuZXJhdG9yO1xuICBsZXQgY29tcGlsZUZyb21Tb3VyY2U7XG4gIGxldCBhZGRGcmFnbWVudDtcblxuICBmdW5jdGlvbiBzZXR1cChzY2hlbWEpIHtcbiAgICBjb25zdCBjb250ZXh0ID0ge1xuICAgICAgc2NoZW1hOiBzY2hlbWEsXG4gICAgICBvcGVyYXRpb25zOiB7fSxcbiAgICAgIGZyYWdtZW50czoge30sXG4gICAgICB0eXBlc1VzZWQ6IHt9XG4gICAgfVxuXG4gICAgZ2VuZXJhdG9yID0gbmV3IENvZGVHZW5lcmF0b3IoY29udGV4dCk7XG5cbiAgICBjb21waWxlRnJvbVNvdXJjZSA9IChzb3VyY2UpID0+IHtcbiAgICAgIGNvbnN0IGRvY3VtZW50ID0gcGFyc2Uoc291cmNlKTtcbiAgICAgIGNvbnN0IGNvbnRleHQgPSBjb21waWxlVG9MZWdhY3lJUihzY2hlbWEsIGRvY3VtZW50LCB7XG4gICAgICAgIG1lcmdlSW5GaWVsZHNGcm9tRnJhZ21lbnRTcHJlYWRzOiB0cnVlLFxuICAgICAgICBhZGRUeXBlbmFtZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgICBnZW5lcmF0b3IuY29udGV4dCA9IGNvbnRleHQ7XG4gICAgICByZXR1cm4gY29udGV4dDtcbiAgICB9O1xuXG4gICAgYWRkRnJhZ21lbnQgPSAoZnJhZ21lbnQpID0+IHtcbiAgICAgIGdlbmVyYXRvci5jb250ZXh0LmZyYWdtZW50c1tmcmFnbWVudC5mcmFnbWVudE5hbWVdID0gZnJhZ21lbnQ7XG4gICAgfTtcblxuICAgIHJldHVybiB7IGdlbmVyYXRvciwgY29tcGlsZUZyb21Tb3VyY2UsIGFkZEZyYWdtZW50IH07XG4gIH1cblxuICBkZXNjcmliZSgnI2dlbmVyYXRlU291cmNlKCknLCBmdW5jdGlvbigpIHtcbiAgICB0ZXN0KGBzaG91bGQgZ2VuZXJhdGUgc2ltcGxlIHF1ZXJ5IG9wZXJhdGlvbnNgLCBmdW5jdGlvbigpIHtcbiAgICAgIGNvbnN0IHsgY29tcGlsZUZyb21Tb3VyY2UgfSA9IHNldHVwKHN0YXJXYXJzU2NoZW1hKTtcbiAgICAgIGNvbnN0IGNvbnRleHQgPSBjb21waWxlRnJvbVNvdXJjZShgXG4gICAgICAgIHF1ZXJ5IEhlcm9OYW1lIHtcbiAgICAgICAgICBoZXJvIHtcbiAgICAgICAgICAgIG5hbWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIGApO1xuXG4gICAgICBjb25zdCBzb3VyY2UgPSBnZW5lcmF0ZVNvdXJjZShjb250ZXh0KTtcbiAgICAgIGV4cGVjdChzb3VyY2UpLnRvTWF0Y2hTbmFwc2hvdCgpO1xuICAgIH0pO1xuXG4gICAgdGVzdChgc2hvdWxkIGdlbmVyYXRlIHNpbXBsZSBxdWVyeSBvcGVyYXRpb25zIGluY2x1ZGluZyBpbnB1dCB2YXJpYWJsZXNgLCBmdW5jdGlvbigpIHtcbiAgICAgIGNvbnN0IHsgY29tcGlsZUZyb21Tb3VyY2UgfSA9IHNldHVwKHN0YXJXYXJzU2NoZW1hKTtcbiAgICAgIGNvbnN0IGNvbnRleHQgPSBjb21waWxlRnJvbVNvdXJjZShgXG4gICAgICAgIHF1ZXJ5IEhlcm9OYW1lKCRlcGlzb2RlOiBFcGlzb2RlKSB7XG4gICAgICAgICAgaGVybyhlcGlzb2RlOiAkZXBpc29kZSkge1xuICAgICAgICAgICAgbmFtZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgYCk7XG5cbiAgICAgIGNvbnN0IHNvdXJjZSA9IGdlbmVyYXRlU291cmNlKGNvbnRleHQpO1xuICAgICAgZXhwZWN0KHNvdXJjZSkudG9NYXRjaFNuYXBzaG90KCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KGBzaG91bGQgZ2VuZXJhdGUgc2ltcGxlIG5lc3RlZCBxdWVyeSBvcGVyYXRpb25zIGluY2x1ZGluZyBpbnB1dCB2YXJpYWJsZXNgLCBmdW5jdGlvbigpIHtcbiAgICAgIGNvbnN0IHsgY29tcGlsZUZyb21Tb3VyY2UgfSA9IHNldHVwKHN0YXJXYXJzU2NoZW1hKTtcbiAgICAgIGNvbnN0IGNvbnRleHQgPSBjb21waWxlRnJvbVNvdXJjZShgXG4gICAgICAgIHF1ZXJ5IEhlcm9BbmRGcmllbmRzTmFtZXMoJGVwaXNvZGU6IEVwaXNvZGUpIHtcbiAgICAgICAgICBoZXJvKGVwaXNvZGU6ICRlcGlzb2RlKSB7XG4gICAgICAgICAgICBuYW1lXG4gICAgICAgICAgICBmcmllbmRzIHtcbiAgICAgICAgICAgICAgbmFtZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgYCk7XG5cbiAgICAgIGNvbnN0IHNvdXJjZSA9IGdlbmVyYXRlU291cmNlKGNvbnRleHQpO1xuICAgICAgZXhwZWN0KHNvdXJjZSkudG9NYXRjaFNuYXBzaG90KCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KGBzaG91bGQgZ2VuZXJhdGUgc2ltcGxlIG5lc3RlZCB3aXRoIHJlcXVpcmVkIGVsZW1lbnRzIGluIGxpc3RzYCwgZnVuY3Rpb24oKSB7XG4gICAgICBjb25zdCB7IGNvbXBpbGVGcm9tU291cmNlIH0gPSBzZXR1cChzdGFyV2Fyc1NjaGVtYSk7XG4gICAgICBjb25zdCBjb250ZXh0ID0gY29tcGlsZUZyb21Tb3VyY2UoYFxuICAgICAgICBxdWVyeSBTdGFyc2hpcENvb3JkcyB7XG4gICAgICAgICAgc3RhcnNoaXAge1xuICAgICAgICAgICAgY29vcmRpbmF0ZXNcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIGApO1xuXG4gICAgICBjb25zdCBzb3VyY2UgPSBnZW5lcmF0ZVNvdXJjZShjb250ZXh0KTtcbiAgICAgIGV4cGVjdChzb3VyY2UpLnRvTWF0Y2hTbmFwc2hvdCgpO1xuICAgIH0pO1xuXG4gICAgdGVzdChgc2hvdWxkIGdlbmVyYXRlIGZyYWdtZW50ZWQgcXVlcnkgb3BlcmF0aW9uc2AsIGZ1bmN0aW9uKCkge1xuICAgICAgY29uc3QgeyBjb21waWxlRnJvbVNvdXJjZSB9ID0gc2V0dXAoc3RhcldhcnNTY2hlbWEpO1xuICAgICAgY29uc3QgY29udGV4dCA9IGNvbXBpbGVGcm9tU291cmNlKGBcbiAgICAgICAgcXVlcnkgSGVyb0FuZEZyaWVuZHNOYW1lcyB7XG4gICAgICAgICAgaGVybyB7XG4gICAgICAgICAgICBuYW1lXG4gICAgICAgICAgICAuLi5oZXJvRnJpZW5kc1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZyYWdtZW50IGhlcm9GcmllbmRzIG9uIENoYXJhY3RlciB7XG4gICAgICAgICAgZnJpZW5kcyB7XG4gICAgICAgICAgICBuYW1lXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBgKTtcblxuICAgICAgY29uc3Qgc291cmNlID0gZ2VuZXJhdGVTb3VyY2UoY29udGV4dCk7XG4gICAgICBleHBlY3Qoc291cmNlKS50b01hdGNoU25hcHNob3QoKTtcbiAgICB9KTtcblxuICAgIHRlc3QoYHNob3VsZCBnZW5lcmF0ZSBxdWVyeSBvcGVyYXRpb25zIHdpdGggaW5saW5lIGZyYWdtZW50c2AsIGZ1bmN0aW9uKCkge1xuICAgICAgY29uc3QgeyBjb21waWxlRnJvbVNvdXJjZSB9ID0gc2V0dXAoc3RhcldhcnNTY2hlbWEpO1xuICAgICAgY29uc3QgY29udGV4dCA9IGNvbXBpbGVGcm9tU291cmNlKGBcbiAgICAgICAgcXVlcnkgSGVyb0FuZERldGFpbHMge1xuICAgICAgICAgIGhlcm8ge1xuICAgICAgICAgICAgbmFtZVxuICAgICAgICAgICAgLi4uSGVyb0RldGFpbHNcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmcmFnbWVudCBIZXJvRGV0YWlscyBvbiBDaGFyYWN0ZXIge1xuICAgICAgICAgIC4uLiBvbiBEcm9pZCB7XG4gICAgICAgICAgICBwcmltYXJ5RnVuY3Rpb25cbiAgICAgICAgICB9XG4gICAgICAgICAgLi4uIG9uIEh1bWFuIHtcbiAgICAgICAgICAgIGhlaWdodFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgYCk7XG5cbiAgICAgIGNvbnN0IHNvdXJjZSA9IGdlbmVyYXRlU291cmNlKGNvbnRleHQpO1xuICAgICAgZXhwZWN0KHNvdXJjZSkudG9NYXRjaFNuYXBzaG90KCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KGBzaG91bGQgZ2VuZXJhdGUgbXV0YXRpb24gb3BlcmF0aW9ucyB3aXRoIGNvbXBsZXggaW5wdXQgdHlwZXNgLCBmdW5jdGlvbigpIHtcbiAgICAgIGNvbnN0IHsgY29tcGlsZUZyb21Tb3VyY2UgfSA9IHNldHVwKHN0YXJXYXJzU2NoZW1hKTtcbiAgICAgIGNvbnN0IGNvbnRleHQgPSBjb21waWxlRnJvbVNvdXJjZShgXG4gICAgICAgIG11dGF0aW9uIFJldmlld01vdmllKCRlcGlzb2RlOiBFcGlzb2RlLCAkcmV2aWV3OiBSZXZpZXdJbnB1dCkge1xuICAgICAgICAgIGNyZWF0ZVJldmlldyhlcGlzb2RlOiAkZXBpc29kZSwgcmV2aWV3OiAkcmV2aWV3KSB7XG4gICAgICAgICAgICBzdGFyc1xuICAgICAgICAgICAgY29tbWVudGFyeVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgYCk7XG5cbiAgICAgIGNvbnN0IHNvdXJjZSA9IGdlbmVyYXRlU291cmNlKGNvbnRleHQpO1xuICAgICAgZXhwZWN0KHNvdXJjZSkudG9NYXRjaFNuYXBzaG90KCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KGBzaG91bGQgZ2VuZXJhdGUgY29ycmVjdCBsaXN0IHdpdGggY3VzdG9tIGZyYWdtZW50YCwgZnVuY3Rpb24oKSB7XG4gICAgICBjb25zdCB7IGNvbXBpbGVGcm9tU291cmNlIH0gPSBzZXR1cChzdGFyV2Fyc1NjaGVtYSk7XG4gICAgICBjb25zdCBjb250ZXh0ID0gY29tcGlsZUZyb21Tb3VyY2UoYFxuICAgICAgICBmcmFnbWVudCBGcmllbmQgb24gQ2hhcmFjdGVyIHtcbiAgICAgICAgICBuYW1lXG4gICAgICAgIH1cblxuICAgICAgICBxdWVyeSBIZXJvQW5kRnJpZW5kc05hbWVzKCRlcGlzb2RlOiBFcGlzb2RlKSB7XG4gICAgICAgICAgaGVybyhlcGlzb2RlOiAkZXBpc29kZSkge1xuICAgICAgICAgICAgbmFtZVxuICAgICAgICAgICAgZnJpZW5kcyB7XG4gICAgICAgICAgICAgIC4uLkZyaWVuZFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgYCk7XG5cbiAgICAgIGNvbnN0IHNvdXJjZSA9IGdlbmVyYXRlU291cmNlKGNvbnRleHQpO1xuICAgICAgZXhwZWN0KHNvdXJjZSkudG9NYXRjaFNuYXBzaG90KCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIHNpbmdsZSBsaW5lIGNvbW1lbnRzJywgKCkgPT4ge1xuICAgICAgY29uc3QgeyBjb21waWxlRnJvbVNvdXJjZSB9ID0gc2V0dXAobWlzY1NjaGVtYSk7XG4gICAgICBjb25zdCBjb250ZXh0ID0gY29tcGlsZUZyb21Tb3VyY2UoYFxuICAgICAgICBxdWVyeSBDdXN0b21TY2FsYXIge1xuICAgICAgICAgIGNvbW1lbnRUZXN0IHtcbiAgICAgICAgICAgIHNpbmdsZUxpbmVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIGApO1xuXG4gICAgICBjb25zdCBzb3VyY2UgPSBnZW5lcmF0ZVNvdXJjZShjb250ZXh0KTtcbiAgICAgIGV4cGVjdChzb3VyY2UpLnRvTWF0Y2hTbmFwc2hvdCgpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBtdWx0aS1saW5lIGNvbW1lbnRzJywgKCkgPT4ge1xuICAgICAgY29uc3QgeyBjb21waWxlRnJvbVNvdXJjZSB9ID0gc2V0dXAobWlzY1NjaGVtYSk7XG4gICAgICBjb25zdCBjb250ZXh0ID0gY29tcGlsZUZyb21Tb3VyY2UoYFxuICAgICAgICBxdWVyeSBDdXN0b21TY2FsYXIge1xuICAgICAgICAgIGNvbW1lbnRUZXN0IHtcbiAgICAgICAgICAgIG11bHRpTGluZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgYCk7XG5cbiAgICAgIGNvbnN0IHNvdXJjZSA9IGdlbmVyYXRlU291cmNlKGNvbnRleHQpO1xuICAgICAgZXhwZWN0KHNvdXJjZSkudG9NYXRjaFNuYXBzaG90KCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIGNvbW1lbnRzIGluIGVudW1zJywgKCkgPT4ge1xuICAgICAgY29uc3QgeyBjb21waWxlRnJvbVNvdXJjZSB9ID0gc2V0dXAobWlzY1NjaGVtYSk7XG4gICAgICBjb25zdCBjb250ZXh0ID0gY29tcGlsZUZyb21Tb3VyY2UoYFxuICAgICAgICBxdWVyeSBDdXN0b21TY2FsYXIge1xuICAgICAgICAgIGNvbW1lbnRUZXN0IHtcbiAgICAgICAgICAgIGVudW1Db21tZW50VGVzdFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgYCk7XG5cbiAgICAgIGNvbnN0IHNvdXJjZSA9IGdlbmVyYXRlU291cmNlKGNvbnRleHQpO1xuICAgICAgZXhwZWN0KHNvdXJjZSkudG9NYXRjaFNuYXBzaG90KCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIGludGVyZmFjZXMgYXQgcm9vdCcsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgY29tcGlsZUZyb21Tb3VyY2UgfSA9IHNldHVwKG1pc2NTY2hlbWEpO1xuICAgICAgY29uc3QgY29udGV4dCA9IGNvbXBpbGVGcm9tU291cmNlKGBcbiAgICAgICAgcXVlcnkgQ3VzdG9tU2NhbGFyIHtcbiAgICAgICAgICBpbnRlcmZhY2VUZXN0IHtcbiAgICAgICAgICAgIHByb3BcbiAgICAgICAgICAgIC4uLiBvbiBJbXBsQSB7XG4gICAgICAgICAgICAgIHByb3BBXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAuLi4gb24gSW1wbEIge1xuICAgICAgICAgICAgICBwcm9wQlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgYCk7XG5cbiAgICAgIGNvbnN0IHNvdXJjZSA9IGdlbmVyYXRlU291cmNlKGNvbnRleHQpO1xuICAgICAgZXhwZWN0KHNvdXJjZSkudG9NYXRjaFNuYXBzaG90KCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIHVuaW9ucyBhdCByb290JywgKCkgPT4ge1xuICAgICAgY29uc3QgeyBjb21waWxlRnJvbVNvdXJjZSB9ID0gc2V0dXAobWlzY1NjaGVtYSk7XG4gICAgICBjb25zdCBjb250ZXh0ID0gY29tcGlsZUZyb21Tb3VyY2UoYFxuICAgICAgICBxdWVyeSBDdXN0b21TY2FsYXIge1xuICAgICAgICAgIHVuaW9uVGVzdCB7XG4gICAgICAgICAgICAuLi4gb24gUGFydGlhbEEge1xuICAgICAgICAgICAgICBwcm9wXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAuLi4gb24gUGFydGlhbEIge1xuICAgICAgICAgICAgICBwcm9wXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBgKTtcblxuICAgICAgY29uc3Qgc291cmNlID0gZ2VuZXJhdGVTb3VyY2UoY29udGV4dCk7XG4gICAgICBleHBlY3Qoc291cmNlKS50b01hdGNoU25hcHNob3QoKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBoYXZlIF9fdHlwZW5hbWUgdmFsdWUgbWF0Y2hpbmcgZnJhZ21lbnQgdHlwZSBvbiBnZW5lcmljIHR5cGUnLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IGNvbXBpbGVGcm9tU291cmNlIH0gPSBzZXR1cChzdGFyV2Fyc1NjaGVtYSk7XG4gICAgICBjb25zdCBjb250ZXh0ID0gY29tcGlsZUZyb21Tb3VyY2UoYFxuICAgICAgICBxdWVyeSBIZXJvTmFtZSB7XG4gICAgICAgICAgaGVybyB7XG4gICAgICAgICAgICAuLi5IZXJvV2l0aE5hbWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmcmFnbWVudCBIZXJvV2l0aE5hbWUgb24gQ2hhcmFjdGVyIHtcbiAgICAgICAgICBfX3R5cGVuYW1lXG4gICAgICAgICAgbmFtZVxuICAgICAgICB9XG4gICAgICBgKTtcblxuICAgICAgY29uc3Qgc291cmNlID0gZ2VuZXJhdGVTb3VyY2UoY29udGV4dCk7XG4gICAgICBleHBlY3Qoc291cmNlKS50b01hdGNoU25hcHNob3QoKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBoYXZlIF9fdHlwZW5hbWUgdmFsdWUgbWF0Y2hpbmcgZnJhZ21lbnQgdHlwZSBvbiBzcGVjaWZpYyB0eXBlJywgKCkgPT4ge1xuICAgICAgY29uc3QgeyBjb21waWxlRnJvbVNvdXJjZSB9ID0gc2V0dXAoc3RhcldhcnNTY2hlbWEpO1xuICAgICAgY29uc3QgY29udGV4dCA9IGNvbXBpbGVGcm9tU291cmNlKGBcbiAgICAgICAgcXVlcnkgRHJvaWROYW1lIHtcbiAgICAgICAgICBkcm9pZCB7XG4gICAgICAgICAgICAuLi5Ecm9pZFdpdGhOYW1lXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnJhZ21lbnQgRHJvaWRXaXRoTmFtZSBvbiBEcm9pZCB7XG4gICAgICAgICAgX190eXBlbmFtZVxuICAgICAgICAgIG5hbWVcbiAgICAgICAgfVxuICAgICAgYCk7XG5cbiAgICAgIGNvbnN0IHNvdXJjZSA9IGdlbmVyYXRlU291cmNlKGNvbnRleHQpO1xuICAgICAgZXhwZWN0KHNvdXJjZSkudG9NYXRjaFNuYXBzaG90KCk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXSwic291cmNlUm9vdCI6IiJ9