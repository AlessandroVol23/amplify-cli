{"version":3,"sources":["types.ts"],"names":[],"mappings":";;AAEA,MAAA,YAAA,QAAA,SAAA,CAAA;AAYA,MAAM,mBAAmB;AACvB,KAAC,UAAA,aAAA,CAAc,IAAf,GAAsB,QADC;AAEvB,KAAC,UAAA,UAAA,CAAW,IAAZ,GAAmB,QAFI;AAGvB,KAAC,UAAA,YAAA,CAAa,IAAd,GAAqB,QAHE;AAIvB,KAAC,UAAA,cAAA,CAAe,IAAhB,GAAuB,SAJA;AAKvB,KAAC,UAAA,SAAA,CAAU,IAAX,GAAkB,QALK,EAAzB;;AAQA,SAAA,uBAAA,CAAwC,OAAxC,EAAwE,IAAxE,EAA2F,YAA3F,EAAyH,WAAW,IAApI,EAAwI;AACtI,QAAI,UAAA,aAAA,CAAc,IAAd,CAAJ,EAAyB;AACvB,eAAO,wBAAwB,OAAxB,EAAiC,KAAK,MAAtC,EAA8C,YAA9C,EAA4D,KAA5D,CAAP;AACD;AAED,QAAI,QAAJ;AACA,QAAI,UAAA,UAAA,CAAW,IAAX,CAAJ,EAAsB;AACpB,mBAAW,UAAU,wBAAwB,OAAxB,EAAiC,KAAK,MAAtC,EAA8C,YAA9C,EAA4D,IAA5D,CAAiE,IAAtF;AACD,KAFD;AAEO,QAAI,gBAAgB,UAAA,iBAApB,EAAuC;AAC5C,mBAAW,iBAAiB,KAAK,IAAtB,MAAgC,QAAQ,OAAR,CAAgB,wBAAhB,GAA2C,QAAQ,OAAR,CAAgB,mBAAhB,GAAsC,KAAK,IAAtF,GAA6F,iBAAiB,UAAA,aAAA,CAAc,IAA/B,CAA7H,CAAX;AACD,KAFM;AAEA;AACL,mBAAW,gBAAgB,KAAK,IAAhC;AACD;AAED,WAAO,WAAW,WAAW,SAAtB,GAAkC,QAAzC;AACD;AAfD,QAAA,uBAAA,GAAA,uBAAA","sourcesContent":["import { LegacyCompilerContext } from '../compiler/legacyIR';\n\nimport {\n  GraphQLString,\n  GraphQLInt,\n  GraphQLFloat,\n  GraphQLBoolean,\n  GraphQLID,\n  GraphQLScalarType,\n  GraphQLType,\n  isNonNullType,\n  isListType\n} from 'graphql';\n\nconst builtInScalarMap = {\n  [GraphQLString.name]: 'string',\n  [GraphQLInt.name]: 'number',\n  [GraphQLFloat.name]: 'number',\n  [GraphQLBoolean.name]: 'boolean',\n  [GraphQLID.name]: 'string',\n}\n\nexport function typeNameFromGraphQLType(context: LegacyCompilerContext, type: GraphQLType, bareTypeName?: string | null, nullable = true): string {\n  if (isNonNullType(type)) {\n    return typeNameFromGraphQLType(context, type.ofType, bareTypeName, false)\n  }\n\n  let typeName;\n  if (isListType(type)) {\n    typeName = `Array< ${typeNameFromGraphQLType(context, type.ofType, bareTypeName, true)} >`;\n  } else if (type instanceof GraphQLScalarType) {\n    typeName = builtInScalarMap[type.name] || (context.options.passthroughCustomScalars ? context.options.customScalarsPrefix + type.name : builtInScalarMap[GraphQLString.name]);\n  } else {\n    typeName = bareTypeName || type.name;\n  }\n\n  return nullable ? typeName + ' | null' : typeName;\n}\n"],"sourceRoot":""}