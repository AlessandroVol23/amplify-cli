1837d0c007e534dbdb2ba9301a7e236e
'use strict';require('ts-jest').install("/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-types-generator/src/typescript/types.ts", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst graphql_1 = require(\"graphql\");\nconst builtInScalarMap = {\n    [graphql_1.GraphQLString.name]: 'string',\n    [graphql_1.GraphQLInt.name]: 'number',\n    [graphql_1.GraphQLFloat.name]: 'number',\n    [graphql_1.GraphQLBoolean.name]: 'boolean',\n    [graphql_1.GraphQLID.name]: 'string',\n};\nfunction typeNameFromGraphQLType(context, type, bareTypeName, nullable = true) {\n    if (graphql_1.isNonNullType(type)) {\n        return typeNameFromGraphQLType(context, type.ofType, bareTypeName, false);\n    }\n    let typeName;\n    if (graphql_1.isListType(type)) {\n        typeName = `Array< ${typeNameFromGraphQLType(context, type.ofType, bareTypeName, true)} >`;\n    }\n    else if (type instanceof graphql_1.GraphQLScalarType) {\n        typeName = builtInScalarMap[type.name] || (context.options.passthroughCustomScalars ? context.options.customScalarsPrefix + type.name : builtInScalarMap[graphql_1.GraphQLString.name]);\n    }\n    else {\n        typeName = bareTypeName || type.name;\n    }\n    return nullable ? typeName + ' | null' : typeName;\n}\nexports.typeNameFromGraphQLType = typeNameFromGraphQLType;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0eXBlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBLHFDQVVpQjtBQUVqQixNQUFNLGdCQUFnQixHQUFHO0lBQ3ZCLENBQUMsdUJBQWEsQ0FBQyxJQUFJLENBQUMsRUFBRSxRQUFRO0lBQzlCLENBQUMsb0JBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxRQUFRO0lBQzNCLENBQUMsc0JBQVksQ0FBQyxJQUFJLENBQUMsRUFBRSxRQUFRO0lBQzdCLENBQUMsd0JBQWMsQ0FBQyxJQUFJLENBQUMsRUFBRSxTQUFTO0lBQ2hDLENBQUMsbUJBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRSxRQUFRO0NBQzNCLENBQUE7QUFFRCxpQ0FBd0MsT0FBOEIsRUFBRSxJQUFpQixFQUFFLFlBQTRCLEVBQUUsUUFBUSxHQUFHLElBQUk7SUFDdEksSUFBSSx1QkFBYSxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQ3ZCLE9BQU8sdUJBQXVCLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsWUFBWSxFQUFFLEtBQUssQ0FBQyxDQUFBO0tBQzFFO0lBRUQsSUFBSSxRQUFRLENBQUM7SUFDYixJQUFJLG9CQUFVLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDcEIsUUFBUSxHQUFHLFVBQVUsdUJBQXVCLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsWUFBWSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUM7S0FDNUY7U0FBTSxJQUFJLElBQUksWUFBWSwyQkFBaUIsRUFBRTtRQUM1QyxRQUFRLEdBQUcsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyx1QkFBYSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7S0FDL0s7U0FBTTtRQUNMLFFBQVEsR0FBRyxZQUFZLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQztLQUN0QztJQUVELE9BQU8sUUFBUSxDQUFDLENBQUMsQ0FBQyxRQUFRLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUM7QUFDcEQsQ0FBQztBQWZELDBEQWVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTGVnYWN5Q29tcGlsZXJDb250ZXh0IH0gZnJvbSAnLi4vY29tcGlsZXIvbGVnYWN5SVInO1xuXG5pbXBvcnQge1xuICBHcmFwaFFMU3RyaW5nLFxuICBHcmFwaFFMSW50LFxuICBHcmFwaFFMRmxvYXQsXG4gIEdyYXBoUUxCb29sZWFuLFxuICBHcmFwaFFMSUQsXG4gIEdyYXBoUUxTY2FsYXJUeXBlLFxuICBHcmFwaFFMVHlwZSxcbiAgaXNOb25OdWxsVHlwZSxcbiAgaXNMaXN0VHlwZVxufSBmcm9tICdncmFwaHFsJztcblxuY29uc3QgYnVpbHRJblNjYWxhck1hcCA9IHtcbiAgW0dyYXBoUUxTdHJpbmcubmFtZV06ICdzdHJpbmcnLFxuICBbR3JhcGhRTEludC5uYW1lXTogJ251bWJlcicsXG4gIFtHcmFwaFFMRmxvYXQubmFtZV06ICdudW1iZXInLFxuICBbR3JhcGhRTEJvb2xlYW4ubmFtZV06ICdib29sZWFuJyxcbiAgW0dyYXBoUUxJRC5uYW1lXTogJ3N0cmluZycsXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0eXBlTmFtZUZyb21HcmFwaFFMVHlwZShjb250ZXh0OiBMZWdhY3lDb21waWxlckNvbnRleHQsIHR5cGU6IEdyYXBoUUxUeXBlLCBiYXJlVHlwZU5hbWU/OiBzdHJpbmcgfCBudWxsLCBudWxsYWJsZSA9IHRydWUpOiBzdHJpbmcge1xuICBpZiAoaXNOb25OdWxsVHlwZSh0eXBlKSkge1xuICAgIHJldHVybiB0eXBlTmFtZUZyb21HcmFwaFFMVHlwZShjb250ZXh0LCB0eXBlLm9mVHlwZSwgYmFyZVR5cGVOYW1lLCBmYWxzZSlcbiAgfVxuXG4gIGxldCB0eXBlTmFtZTtcbiAgaWYgKGlzTGlzdFR5cGUodHlwZSkpIHtcbiAgICB0eXBlTmFtZSA9IGBBcnJheTwgJHt0eXBlTmFtZUZyb21HcmFwaFFMVHlwZShjb250ZXh0LCB0eXBlLm9mVHlwZSwgYmFyZVR5cGVOYW1lLCB0cnVlKX0gPmA7XG4gIH0gZWxzZSBpZiAodHlwZSBpbnN0YW5jZW9mIEdyYXBoUUxTY2FsYXJUeXBlKSB7XG4gICAgdHlwZU5hbWUgPSBidWlsdEluU2NhbGFyTWFwW3R5cGUubmFtZV0gfHwgKGNvbnRleHQub3B0aW9ucy5wYXNzdGhyb3VnaEN1c3RvbVNjYWxhcnMgPyBjb250ZXh0Lm9wdGlvbnMuY3VzdG9tU2NhbGFyc1ByZWZpeCArIHR5cGUubmFtZSA6IGJ1aWx0SW5TY2FsYXJNYXBbR3JhcGhRTFN0cmluZy5uYW1lXSk7XG4gIH0gZWxzZSB7XG4gICAgdHlwZU5hbWUgPSBiYXJlVHlwZU5hbWUgfHwgdHlwZS5uYW1lO1xuICB9XG5cbiAgcmV0dXJuIG51bGxhYmxlID8gdHlwZU5hbWUgKyAnIHwgbnVsbCcgOiB0eXBlTmFtZTtcbn1cbiJdfQ==");"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = require("graphql");
const builtInScalarMap = {
    [graphql_1.GraphQLString.name]: 'string',
    [graphql_1.GraphQLInt.name]: 'number',
    [graphql_1.GraphQLFloat.name]: 'number',
    [graphql_1.GraphQLBoolean.name]: 'boolean',
    [graphql_1.GraphQLID.name]: 'string' };

function typeNameFromGraphQLType(context, type, bareTypeName, nullable = true) {
    if (graphql_1.isNonNullType(type)) {
        return typeNameFromGraphQLType(context, type.ofType, bareTypeName, false);
    }
    let typeName;
    if (graphql_1.isListType(type)) {
        typeName = `Array< ${typeNameFromGraphQLType(context, type.ofType, bareTypeName, true)} >`;
    } else
    if (type instanceof graphql_1.GraphQLScalarType) {
        typeName = builtInScalarMap[type.name] || (context.options.passthroughCustomScalars ? context.options.customScalarsPrefix + type.name : builtInScalarMap[graphql_1.GraphQLString.name]);
    } else
    {
        typeName = bareTypeName || type.name;
    }
    return nullable ? typeName + ' | null' : typeName;
}
exports.typeNameFromGraphQLType = typeNameFromGraphQLType;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInR5cGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRUEsTUFBQSxZQUFBLFFBQUEsU0FBQSxDQUFBO0FBWUEsTUFBTSxtQkFBbUI7QUFDdkIsS0FBQyxVQUFBLGFBQUEsQ0FBYyxJQUFmLEdBQXNCLFFBREM7QUFFdkIsS0FBQyxVQUFBLFVBQUEsQ0FBVyxJQUFaLEdBQW1CLFFBRkk7QUFHdkIsS0FBQyxVQUFBLFlBQUEsQ0FBYSxJQUFkLEdBQXFCLFFBSEU7QUFJdkIsS0FBQyxVQUFBLGNBQUEsQ0FBZSxJQUFoQixHQUF1QixTQUpBO0FBS3ZCLEtBQUMsVUFBQSxTQUFBLENBQVUsSUFBWCxHQUFrQixRQUxLLEVBQXpCOztBQVFBLFNBQUEsdUJBQUEsQ0FBd0MsT0FBeEMsRUFBd0UsSUFBeEUsRUFBMkYsWUFBM0YsRUFBeUgsV0FBVyxJQUFwSSxFQUF3STtBQUN0SSxRQUFJLFVBQUEsYUFBQSxDQUFjLElBQWQsQ0FBSixFQUF5QjtBQUN2QixlQUFPLHdCQUF3QixPQUF4QixFQUFpQyxLQUFLLE1BQXRDLEVBQThDLFlBQTlDLEVBQTRELEtBQTVELENBQVA7QUFDRDtBQUVELFFBQUksUUFBSjtBQUNBLFFBQUksVUFBQSxVQUFBLENBQVcsSUFBWCxDQUFKLEVBQXNCO0FBQ3BCLG1CQUFXLFVBQVUsd0JBQXdCLE9BQXhCLEVBQWlDLEtBQUssTUFBdEMsRUFBOEMsWUFBOUMsRUFBNEQsSUFBNUQsQ0FBaUUsSUFBdEY7QUFDRCxLQUZEO0FBRU8sUUFBSSxnQkFBZ0IsVUFBQSxpQkFBcEIsRUFBdUM7QUFDNUMsbUJBQVcsaUJBQWlCLEtBQUssSUFBdEIsTUFBZ0MsUUFBUSxPQUFSLENBQWdCLHdCQUFoQixHQUEyQyxRQUFRLE9BQVIsQ0FBZ0IsbUJBQWhCLEdBQXNDLEtBQUssSUFBdEYsR0FBNkYsaUJBQWlCLFVBQUEsYUFBQSxDQUFjLElBQS9CLENBQTdILENBQVg7QUFDRCxLQUZNO0FBRUE7QUFDTCxtQkFBVyxnQkFBZ0IsS0FBSyxJQUFoQztBQUNEO0FBRUQsV0FBTyxXQUFXLFdBQVcsU0FBdEIsR0FBa0MsUUFBekM7QUFDRDtBQWZELFFBQUEsdUJBQUEsR0FBQSx1QkFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IExlZ2FjeUNvbXBpbGVyQ29udGV4dCB9IGZyb20gJy4uL2NvbXBpbGVyL2xlZ2FjeUlSJztcblxuaW1wb3J0IHtcbiAgR3JhcGhRTFN0cmluZyxcbiAgR3JhcGhRTEludCxcbiAgR3JhcGhRTEZsb2F0LFxuICBHcmFwaFFMQm9vbGVhbixcbiAgR3JhcGhRTElELFxuICBHcmFwaFFMU2NhbGFyVHlwZSxcbiAgR3JhcGhRTFR5cGUsXG4gIGlzTm9uTnVsbFR5cGUsXG4gIGlzTGlzdFR5cGVcbn0gZnJvbSAnZ3JhcGhxbCc7XG5cbmNvbnN0IGJ1aWx0SW5TY2FsYXJNYXAgPSB7XG4gIFtHcmFwaFFMU3RyaW5nLm5hbWVdOiAnc3RyaW5nJyxcbiAgW0dyYXBoUUxJbnQubmFtZV06ICdudW1iZXInLFxuICBbR3JhcGhRTEZsb2F0Lm5hbWVdOiAnbnVtYmVyJyxcbiAgW0dyYXBoUUxCb29sZWFuLm5hbWVdOiAnYm9vbGVhbicsXG4gIFtHcmFwaFFMSUQubmFtZV06ICdzdHJpbmcnLFxufVxuXG5leHBvcnQgZnVuY3Rpb24gdHlwZU5hbWVGcm9tR3JhcGhRTFR5cGUoY29udGV4dDogTGVnYWN5Q29tcGlsZXJDb250ZXh0LCB0eXBlOiBHcmFwaFFMVHlwZSwgYmFyZVR5cGVOYW1lPzogc3RyaW5nIHwgbnVsbCwgbnVsbGFibGUgPSB0cnVlKTogc3RyaW5nIHtcbiAgaWYgKGlzTm9uTnVsbFR5cGUodHlwZSkpIHtcbiAgICByZXR1cm4gdHlwZU5hbWVGcm9tR3JhcGhRTFR5cGUoY29udGV4dCwgdHlwZS5vZlR5cGUsIGJhcmVUeXBlTmFtZSwgZmFsc2UpXG4gIH1cblxuICBsZXQgdHlwZU5hbWU7XG4gIGlmIChpc0xpc3RUeXBlKHR5cGUpKSB7XG4gICAgdHlwZU5hbWUgPSBgQXJyYXk8ICR7dHlwZU5hbWVGcm9tR3JhcGhRTFR5cGUoY29udGV4dCwgdHlwZS5vZlR5cGUsIGJhcmVUeXBlTmFtZSwgdHJ1ZSl9ID5gO1xuICB9IGVsc2UgaWYgKHR5cGUgaW5zdGFuY2VvZiBHcmFwaFFMU2NhbGFyVHlwZSkge1xuICAgIHR5cGVOYW1lID0gYnVpbHRJblNjYWxhck1hcFt0eXBlLm5hbWVdIHx8IChjb250ZXh0Lm9wdGlvbnMucGFzc3Rocm91Z2hDdXN0b21TY2FsYXJzID8gY29udGV4dC5vcHRpb25zLmN1c3RvbVNjYWxhcnNQcmVmaXggKyB0eXBlLm5hbWUgOiBidWlsdEluU2NhbGFyTWFwW0dyYXBoUUxTdHJpbmcubmFtZV0pO1xuICB9IGVsc2Uge1xuICAgIHR5cGVOYW1lID0gYmFyZVR5cGVOYW1lIHx8IHR5cGUubmFtZTtcbiAgfVxuXG4gIHJldHVybiBudWxsYWJsZSA/IHR5cGVOYW1lICsgJyB8IG51bGwnIDogdHlwZU5hbWU7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9