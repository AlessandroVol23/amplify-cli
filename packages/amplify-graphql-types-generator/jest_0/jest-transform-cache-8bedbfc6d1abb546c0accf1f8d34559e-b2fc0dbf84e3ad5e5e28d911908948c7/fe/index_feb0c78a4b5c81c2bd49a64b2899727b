21d7e1d2828737e84ca3da0f19dbecb9
'use strict';require('ts-jest').install("/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-types-generator/src/compiler/index.ts", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst graphql_1 = require(\"graphql\");\nconst graphql_2 = require(\"../utilities/graphql\");\nfunction compileToIR(schema, document, options = {}) {\n    if (options.addTypename) {\n        document = graphql_2.withTypenameFieldAddedWhereNeeded(document);\n    }\n    const compiler = new Compiler(schema, options);\n    const operations = Object.create(null);\n    const fragments = Object.create(null);\n    for (const definition of document.definitions) {\n        switch (definition.kind) {\n            case graphql_1.Kind.OPERATION_DEFINITION:\n                const operation = compiler.compileOperation(definition);\n                operations[operation.operationName] = operation;\n                break;\n            case graphql_1.Kind.FRAGMENT_DEFINITION:\n                const fragment = compiler.compileFragment(definition);\n                fragments[fragment.fragmentName] = fragment;\n                break;\n        }\n    }\n    for (const fragmentSpread of compiler.unresolvedFragmentSpreads) {\n        const fragment = fragments[fragmentSpread.fragmentName];\n        if (!fragment) {\n            throw new Error(`Cannot find fragment \"${fragmentSpread.fragmentName}\"`);\n        }\n        const possibleTypes = fragment.selectionSet.possibleTypes.filter(type => fragmentSpread.selectionSet.possibleTypes.includes(type));\n        fragmentSpread.isConditional = fragment.selectionSet.possibleTypes.some(type => !fragmentSpread.selectionSet.possibleTypes.includes(type));\n        fragmentSpread.selectionSet = {\n            possibleTypes,\n            selections: fragment.selectionSet.selections\n        };\n    }\n    const typesUsed = compiler.typesUsed;\n    return { schema, typesUsed, operations, fragments, options };\n}\nexports.compileToIR = compileToIR;\nclass Compiler {\n    constructor(schema, options) {\n        this.unresolvedFragmentSpreads = [];\n        this.schema = schema;\n        this.options = options;\n        this.typesUsedSet = new Set();\n    }\n    addTypeUsed(type) {\n        if (this.typesUsedSet.has(type))\n            return;\n        if (type instanceof graphql_1.GraphQLEnumType ||\n            type instanceof graphql_1.GraphQLInputObjectType ||\n            (type instanceof graphql_1.GraphQLScalarType && !graphql_1.isSpecifiedScalarType(type))) {\n            this.typesUsedSet.add(type);\n        }\n        if (type instanceof graphql_1.GraphQLInputObjectType) {\n            for (const field of Object.values(type.getFields())) {\n                this.addTypeUsed(graphql_1.getNamedType(field.type));\n            }\n        }\n    }\n    get typesUsed() {\n        return Array.from(this.typesUsedSet);\n    }\n    compileOperation(operationDefinition) {\n        if (!operationDefinition.name) {\n            throw new Error(\"Operations should be named\");\n        }\n        const filePath = graphql_2.filePathForNode(operationDefinition);\n        const operationName = operationDefinition.name.value;\n        const operationType = operationDefinition.operation;\n        const variables = (operationDefinition.variableDefinitions || []).map(node => {\n            const name = node.variable.name.value;\n            const type = graphql_1.typeFromAST(this.schema, node.type);\n            this.addTypeUsed(graphql_1.getNamedType(type));\n            return { name, type: type };\n        });\n        const source = graphql_1.print(operationDefinition);\n        const rootType = graphql_2.getOperationRootType(this.schema, operationDefinition);\n        return {\n            filePath,\n            operationName,\n            operationType,\n            variables,\n            source,\n            rootType,\n            selectionSet: this.compileSelectionSet(operationDefinition.selectionSet, rootType)\n        };\n    }\n    compileFragment(fragmentDefinition) {\n        const fragmentName = fragmentDefinition.name.value;\n        const filePath = graphql_2.filePathForNode(fragmentDefinition);\n        const source = graphql_1.print(fragmentDefinition);\n        const type = graphql_1.typeFromAST(this.schema, fragmentDefinition.typeCondition);\n        return {\n            fragmentName,\n            filePath,\n            source,\n            type,\n            selectionSet: this.compileSelectionSet(fragmentDefinition.selectionSet, type)\n        };\n    }\n    compileSelectionSet(selectionSetNode, parentType, possibleTypes = this.possibleTypesForType(parentType), visitedFragments = new Set()) {\n        return {\n            possibleTypes,\n            selections: selectionSetNode.selections\n                .map(selectionNode => wrapInBooleanConditionsIfNeeded(this.compileSelection(selectionNode, parentType, possibleTypes, visitedFragments), selectionNode, possibleTypes))\n                .filter(x => x)\n        };\n    }\n    compileSelection(selectionNode, parentType, possibleTypes, visitedFragments) {\n        switch (selectionNode.kind) {\n            case graphql_1.Kind.FIELD: {\n                const name = selectionNode.name.value;\n                const alias = selectionNode.alias\n                    ? selectionNode.alias.value\n                    : undefined;\n                const fieldDef = graphql_2.getFieldDef(this.schema, parentType, selectionNode);\n                if (!fieldDef) {\n                    throw new graphql_1.GraphQLError(`Cannot query field \"${name}\" on type \"${String(parentType)}\"`, [selectionNode]);\n                }\n                const fieldType = fieldDef.type;\n                const unmodifiedFieldType = graphql_1.getNamedType(fieldType);\n                this.addTypeUsed(unmodifiedFieldType);\n                const { description, isDeprecated, deprecationReason } = fieldDef;\n                const responseKey = alias || name;\n                const args = selectionNode.arguments && selectionNode.arguments.length > 0\n                    ? selectionNode.arguments.map(arg => {\n                        const name = arg.name.value;\n                        const argDef = fieldDef.args.find(argDef => argDef.name === arg.name.value);\n                        return {\n                            name,\n                            value: graphql_2.valueFromValueNode(arg.value),\n                            type: (argDef && argDef.type) || undefined\n                        };\n                    })\n                    : undefined;\n                let field = {\n                    kind: \"Field\",\n                    responseKey,\n                    name,\n                    alias,\n                    args,\n                    type: fieldType,\n                    description: !graphql_2.isMetaFieldName(name) && description ? description : undefined,\n                    isDeprecated,\n                    deprecationReason: deprecationReason || undefined\n                };\n                if (graphql_1.isCompositeType(unmodifiedFieldType)) {\n                    const selectionSetNode = selectionNode.selectionSet;\n                    if (!selectionSetNode) {\n                        throw new graphql_1.GraphQLError(`Composite field \"${name}\" on type \"${String(parentType)}\" requires selection set`, [selectionNode]);\n                    }\n                    field.selectionSet = this.compileSelectionSet(selectionNode.selectionSet, unmodifiedFieldType);\n                }\n                return field;\n            }\n            case graphql_1.Kind.INLINE_FRAGMENT: {\n                const typeNode = selectionNode.typeCondition;\n                const type = typeNode\n                    ? graphql_1.typeFromAST(this.schema, typeNode)\n                    : parentType;\n                const possibleTypesForTypeCondition = this.possibleTypesForType(type).filter(type => possibleTypes.includes(type));\n                return {\n                    kind: \"TypeCondition\",\n                    type,\n                    selectionSet: this.compileSelectionSet(selectionNode.selectionSet, type, possibleTypesForTypeCondition)\n                };\n            }\n            case graphql_1.Kind.FRAGMENT_SPREAD: {\n                const fragmentName = selectionNode.name.value;\n                if (visitedFragments.has(fragmentName))\n                    return null;\n                visitedFragments.add(fragmentName);\n                const fragmentSpread = {\n                    kind: \"FragmentSpread\",\n                    fragmentName,\n                    selectionSet: {\n                        possibleTypes,\n                        selections: []\n                    }\n                };\n                this.unresolvedFragmentSpreads.push(fragmentSpread);\n                return fragmentSpread;\n            }\n        }\n    }\n    possibleTypesForType(type) {\n        if (graphql_1.isAbstractType(type)) {\n            return Array.from(this.schema.getPossibleTypes(type)) || [];\n        }\n        else {\n            return [type];\n        }\n    }\n}\nfunction wrapInBooleanConditionsIfNeeded(selection, selectionNode, possibleTypes) {\n    if (!selection)\n        return null;\n    if (!selectionNode.directives)\n        return selection;\n    for (const directive of selectionNode.directives) {\n        const directiveName = directive.name.value;\n        if (directiveName === \"skip\" || directiveName === \"include\") {\n            if (!directive.arguments)\n                continue;\n            const value = directive.arguments[0].value;\n            switch (value.kind) {\n                case \"BooleanValue\":\n                    if (directiveName === \"skip\") {\n                        return value.value ? null : selection;\n                    }\n                    else {\n                        return value.value ? selection : null;\n                    }\n                    break;\n                case \"Variable\":\n                    selection = {\n                        kind: \"BooleanCondition\",\n                        variableName: value.name.value,\n                        inverted: directiveName === \"skip\",\n                        selectionSet: {\n                            possibleTypes,\n                            selections: [selection]\n                        }\n                    };\n                    break;\n            }\n        }\n    }\n    return selection;\n}\n//# sourceMappingURL=data:application/json;base64,");"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = require("graphql");
const graphql_2 = require("../utilities/graphql");
function compileToIR(schema, document, options = {}) {
    if (options.addTypename) {
        document = graphql_2.withTypenameFieldAddedWhereNeeded(document);
    }
    const compiler = new Compiler(schema, options);
    const operations = Object.create(null);
    const fragments = Object.create(null);
    for (const definition of document.definitions) {
        switch (definition.kind) {
            case graphql_1.Kind.OPERATION_DEFINITION:
                const operation = compiler.compileOperation(definition);
                operations[operation.operationName] = operation;
                break;
            case graphql_1.Kind.FRAGMENT_DEFINITION:
                const fragment = compiler.compileFragment(definition);
                fragments[fragment.fragmentName] = fragment;
                break;}

    }
    for (const fragmentSpread of compiler.unresolvedFragmentSpreads) {
        const fragment = fragments[fragmentSpread.fragmentName];
        if (!fragment) {
            throw new Error(`Cannot find fragment "${fragmentSpread.fragmentName}"`);
        }
        const possibleTypes = fragment.selectionSet.possibleTypes.filter(type => fragmentSpread.selectionSet.possibleTypes.includes(type));
        fragmentSpread.isConditional = fragment.selectionSet.possibleTypes.some(type => !fragmentSpread.selectionSet.possibleTypes.includes(type));
        fragmentSpread.selectionSet = {
            possibleTypes,
            selections: fragment.selectionSet.selections };

    }
    const typesUsed = compiler.typesUsed;
    return { schema, typesUsed, operations, fragments, options };
}
exports.compileToIR = compileToIR;
class Compiler {
    constructor(schema, options) {
        this.unresolvedFragmentSpreads = [];
        this.schema = schema;
        this.options = options;
        this.typesUsedSet = new Set();
    }
    addTypeUsed(type) {
        if (this.typesUsedSet.has(type))
        return;
        if (type instanceof graphql_1.GraphQLEnumType ||
        type instanceof graphql_1.GraphQLInputObjectType ||
        type instanceof graphql_1.GraphQLScalarType && !graphql_1.isSpecifiedScalarType(type)) {
            this.typesUsedSet.add(type);
        }
        if (type instanceof graphql_1.GraphQLInputObjectType) {
            for (const field of Object.values(type.getFields())) {
                this.addTypeUsed(graphql_1.getNamedType(field.type));
            }
        }
    }
    get typesUsed() {
        return Array.from(this.typesUsedSet);
    }
    compileOperation(operationDefinition) {
        if (!operationDefinition.name) {
            throw new Error("Operations should be named");
        }
        const filePath = graphql_2.filePathForNode(operationDefinition);
        const operationName = operationDefinition.name.value;
        const operationType = operationDefinition.operation;
        const variables = (operationDefinition.variableDefinitions || []).map(node => {
            const name = node.variable.name.value;
            const type = graphql_1.typeFromAST(this.schema, node.type);
            this.addTypeUsed(graphql_1.getNamedType(type));
            return { name, type: type };
        });
        const source = graphql_1.print(operationDefinition);
        const rootType = graphql_2.getOperationRootType(this.schema, operationDefinition);
        return {
            filePath,
            operationName,
            operationType,
            variables,
            source,
            rootType,
            selectionSet: this.compileSelectionSet(operationDefinition.selectionSet, rootType) };

    }
    compileFragment(fragmentDefinition) {
        const fragmentName = fragmentDefinition.name.value;
        const filePath = graphql_2.filePathForNode(fragmentDefinition);
        const source = graphql_1.print(fragmentDefinition);
        const type = graphql_1.typeFromAST(this.schema, fragmentDefinition.typeCondition);
        return {
            fragmentName,
            filePath,
            source,
            type,
            selectionSet: this.compileSelectionSet(fragmentDefinition.selectionSet, type) };

    }
    compileSelectionSet(selectionSetNode, parentType, possibleTypes = this.possibleTypesForType(parentType), visitedFragments = new Set()) {
        return {
            possibleTypes,
            selections: selectionSetNode.selections.
            map(selectionNode => wrapInBooleanConditionsIfNeeded(this.compileSelection(selectionNode, parentType, possibleTypes, visitedFragments), selectionNode, possibleTypes)).
            filter(x => x) };

    }
    compileSelection(selectionNode, parentType, possibleTypes, visitedFragments) {
        switch (selectionNode.kind) {
            case graphql_1.Kind.FIELD:{
                    const name = selectionNode.name.value;
                    const alias = selectionNode.alias ?
                    selectionNode.alias.value :
                    undefined;
                    const fieldDef = graphql_2.getFieldDef(this.schema, parentType, selectionNode);
                    if (!fieldDef) {
                        throw new graphql_1.GraphQLError(`Cannot query field "${name}" on type "${String(parentType)}"`, [selectionNode]);
                    }
                    const fieldType = fieldDef.type;
                    const unmodifiedFieldType = graphql_1.getNamedType(fieldType);
                    this.addTypeUsed(unmodifiedFieldType);
                    const { description, isDeprecated, deprecationReason } = fieldDef;
                    const responseKey = alias || name;
                    const args = selectionNode.arguments && selectionNode.arguments.length > 0 ?
                    selectionNode.arguments.map(arg => {
                        const name = arg.name.value;
                        const argDef = fieldDef.args.find(argDef => argDef.name === arg.name.value);
                        return {
                            name,
                            value: graphql_2.valueFromValueNode(arg.value),
                            type: argDef && argDef.type || undefined };

                    }) :
                    undefined;
                    let field = {
                        kind: "Field",
                        responseKey,
                        name,
                        alias,
                        args,
                        type: fieldType,
                        description: !graphql_2.isMetaFieldName(name) && description ? description : undefined,
                        isDeprecated,
                        deprecationReason: deprecationReason || undefined };

                    if (graphql_1.isCompositeType(unmodifiedFieldType)) {
                        const selectionSetNode = selectionNode.selectionSet;
                        if (!selectionSetNode) {
                            throw new graphql_1.GraphQLError(`Composite field "${name}" on type "${String(parentType)}" requires selection set`, [selectionNode]);
                        }
                        field.selectionSet = this.compileSelectionSet(selectionNode.selectionSet, unmodifiedFieldType);
                    }
                    return field;
                }
            case graphql_1.Kind.INLINE_FRAGMENT:{
                    const typeNode = selectionNode.typeCondition;
                    const type = typeNode ?
                    graphql_1.typeFromAST(this.schema, typeNode) :
                    parentType;
                    const possibleTypesForTypeCondition = this.possibleTypesForType(type).filter(type => possibleTypes.includes(type));
                    return {
                        kind: "TypeCondition",
                        type,
                        selectionSet: this.compileSelectionSet(selectionNode.selectionSet, type, possibleTypesForTypeCondition) };

                }
            case graphql_1.Kind.FRAGMENT_SPREAD:{
                    const fragmentName = selectionNode.name.value;
                    if (visitedFragments.has(fragmentName))
                    return null;
                    visitedFragments.add(fragmentName);
                    const fragmentSpread = {
                        kind: "FragmentSpread",
                        fragmentName,
                        selectionSet: {
                            possibleTypes,
                            selections: [] } };


                    this.unresolvedFragmentSpreads.push(fragmentSpread);
                    return fragmentSpread;
                }}

    }
    possibleTypesForType(type) {
        if (graphql_1.isAbstractType(type)) {
            return Array.from(this.schema.getPossibleTypes(type)) || [];
        } else
        {
            return [type];
        }
    }}

function wrapInBooleanConditionsIfNeeded(selection, selectionNode, possibleTypes) {
    if (!selection)
    return null;
    if (!selectionNode.directives)
    return selection;
    for (const directive of selectionNode.directives) {
        const directiveName = directive.name.value;
        if (directiveName === "skip" || directiveName === "include") {
            if (!directive.arguments)
            continue;
            const value = directive.arguments[0].value;
            switch (value.kind) {
                case "BooleanValue":
                    if (directiveName === "skip") {
                        return value.value ? null : selection;
                    } else
                    {
                        return value.value ? selection : null;
                    }
                    break;
                case "Variable":
                    selection = {
                        kind: "BooleanCondition",
                        variableName: value.name.value,
                        inverted: directiveName === "skip",
                        selectionSet: {
                            possibleTypes,
                            selections: [selection] } };


                    break;}

        }
    }
    return selection;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,