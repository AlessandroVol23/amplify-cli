ef8d6e1cc3d72cca6bb038abcc63bac2
'use strict';require('ts-jest').install("/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-types-generator/src/loading.ts", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst fs = require(\"fs\");\nconst graphql_1 = require(\"graphql\");\nconst errors_1 = require(\"./errors\");\nfunction loadSchema(schemaPath) {\n    if (!fs.existsSync(schemaPath)) {\n        throw new errors_1.ToolError(`Cannot find GraphQL schema file: ${schemaPath}`);\n    }\n    const schemaData = require(schemaPath);\n    if (!schemaData.data && !schemaData.__schema) {\n        throw new errors_1.ToolError('GraphQL schema file should contain a valid GraphQL introspection query result');\n    }\n    return graphql_1.buildClientSchema((schemaData.data) ? schemaData.data : schemaData);\n}\nexports.loadSchema = loadSchema;\nfunction extractDocumentFromJavascript(content, tagName = 'gql') {\n    const re = new RegExp(tagName + '\\\\s*`([^`/]*)`', 'g');\n    let match;\n    const matches = [];\n    while (match = re.exec(content)) {\n        const doc = match[1]\n            .replace(/\\${[^}]*}/g, '');\n        matches.push(doc);\n    }\n    const doc = matches.join('\\n');\n    return doc.length ? doc : null;\n}\nfunction loadAndMergeQueryDocuments(inputPaths, tagName = 'gql') {\n    const sources = inputPaths.map(inputPath => {\n        const body = fs.readFileSync(inputPath, 'utf8');\n        if (!body) {\n            return null;\n        }\n        if (inputPath.endsWith('.jsx') || inputPath.endsWith('.js')\n            || inputPath.endsWith('.tsx') || inputPath.endsWith('.ts')) {\n            const doc = extractDocumentFromJavascript(body.toString(), tagName);\n            return doc ? new graphql_1.Source(doc, inputPath) : null;\n        }\n        return new graphql_1.Source(body, inputPath);\n    }).filter(source => source);\n    return graphql_1.concatAST(sources.map(source => graphql_1.parse(source)));\n}\nexports.loadAndMergeQueryDocuments = loadAndMergeQueryDocuments;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZGluZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImxvYWRpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx5QkFBd0I7QUFFeEIscUNBT2lCO0FBRWpCLHFDQUFvQztBQUVwQyxvQkFBMkIsVUFBa0I7SUFDM0MsSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLEVBQUU7UUFDOUIsTUFBTSxJQUFJLGtCQUFTLENBQUMsb0NBQW9DLFVBQVUsRUFBRSxDQUFDLENBQUM7S0FDdkU7SUFDRCxNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7SUFFdkMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFO1FBQzVDLE1BQU0sSUFBSSxrQkFBUyxDQUFDLCtFQUErRSxDQUFDLENBQUM7S0FDdEc7SUFDRCxPQUFPLDJCQUFpQixDQUFDLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUM3RSxDQUFDO0FBVkQsZ0NBVUM7QUFFRCx1Q0FBdUMsT0FBZSxFQUFFLFVBQWtCLEtBQUs7SUFDN0UsTUFBTSxFQUFFLEdBQUcsSUFBSSxNQUFNLENBQUMsT0FBTyxHQUFHLGdCQUFnQixFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBRXZELElBQUksS0FBSyxDQUFBO0lBQ1QsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFBO0lBRWxCLE9BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUU7UUFDOUIsTUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQzthQUNqQixPQUFPLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQyxDQUFBO1FBRTVCLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUE7S0FDbEI7SUFFRCxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQzlCLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7QUFDakMsQ0FBQztBQUVELG9DQUEyQyxVQUFvQixFQUFFLFVBQWtCLEtBQUs7SUFDdEYsTUFBTSxPQUFPLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsRUFBRTtRQUN6QyxNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNoRCxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ1QsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUVELElBQUksU0FBUyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxTQUFTLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQztlQUN0RCxTQUFTLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLFNBQVMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQzFEO1lBQ0EsTUFBTSxHQUFHLEdBQUcsNkJBQTZCLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQ3BFLE9BQU8sR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLGdCQUFNLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7U0FDaEQ7UUFFRCxPQUFPLElBQUksZ0JBQU0sQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDckMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFNUIsT0FBTyxtQkFBUyxDQUFFLE9BQW9CLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsZUFBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN2RSxDQUFDO0FBbEJELGdFQWtCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJ1xuXG5pbXBvcnQge1xuICBidWlsZENsaWVudFNjaGVtYSxcbiAgU291cmNlLFxuICBjb25jYXRBU1QsXG4gIHBhcnNlLFxuICBEb2N1bWVudE5vZGUsXG4gIEdyYXBoUUxTY2hlbWFcbn0gZnJvbSAnZ3JhcGhxbCc7XG5cbmltcG9ydCB7IFRvb2xFcnJvciB9IGZyb20gJy4vZXJyb3JzJ1xuXG5leHBvcnQgZnVuY3Rpb24gbG9hZFNjaGVtYShzY2hlbWFQYXRoOiBzdHJpbmcpOiBHcmFwaFFMU2NoZW1hIHtcbiAgaWYgKCFmcy5leGlzdHNTeW5jKHNjaGVtYVBhdGgpKSB7XG4gICAgdGhyb3cgbmV3IFRvb2xFcnJvcihgQ2Fubm90IGZpbmQgR3JhcGhRTCBzY2hlbWEgZmlsZTogJHtzY2hlbWFQYXRofWApO1xuICB9XG4gIGNvbnN0IHNjaGVtYURhdGEgPSByZXF1aXJlKHNjaGVtYVBhdGgpO1xuXG4gIGlmICghc2NoZW1hRGF0YS5kYXRhICYmICFzY2hlbWFEYXRhLl9fc2NoZW1hKSB7XG4gICAgdGhyb3cgbmV3IFRvb2xFcnJvcignR3JhcGhRTCBzY2hlbWEgZmlsZSBzaG91bGQgY29udGFpbiBhIHZhbGlkIEdyYXBoUUwgaW50cm9zcGVjdGlvbiBxdWVyeSByZXN1bHQnKTtcbiAgfVxuICByZXR1cm4gYnVpbGRDbGllbnRTY2hlbWEoKHNjaGVtYURhdGEuZGF0YSkgPyBzY2hlbWFEYXRhLmRhdGEgOiBzY2hlbWFEYXRhKTtcbn1cblxuZnVuY3Rpb24gZXh0cmFjdERvY3VtZW50RnJvbUphdmFzY3JpcHQoY29udGVudDogc3RyaW5nLCB0YWdOYW1lOiBzdHJpbmcgPSAnZ3FsJyk6IHN0cmluZyB8IG51bGwge1xuICBjb25zdCByZSA9IG5ldyBSZWdFeHAodGFnTmFtZSArICdcXFxccypgKFteYC9dKilgJywgJ2cnKTtcblxuICBsZXQgbWF0Y2hcbiAgY29uc3QgbWF0Y2hlcyA9IFtdXG5cbiAgd2hpbGUobWF0Y2ggPSByZS5leGVjKGNvbnRlbnQpKSB7XG4gICAgY29uc3QgZG9jID0gbWF0Y2hbMV1cbiAgICAgIC5yZXBsYWNlKC9cXCR7W159XSp9L2csICcnKVxuXG4gICAgbWF0Y2hlcy5wdXNoKGRvYylcbiAgfVxuXG4gIGNvbnN0IGRvYyA9IG1hdGNoZXMuam9pbignXFxuJylcbiAgcmV0dXJuIGRvYy5sZW5ndGggPyBkb2MgOiBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbG9hZEFuZE1lcmdlUXVlcnlEb2N1bWVudHMoaW5wdXRQYXRoczogc3RyaW5nW10sIHRhZ05hbWU6IHN0cmluZyA9ICdncWwnKTogRG9jdW1lbnROb2RlIHtcbiAgY29uc3Qgc291cmNlcyA9IGlucHV0UGF0aHMubWFwKGlucHV0UGF0aCA9PiB7XG4gICAgY29uc3QgYm9keSA9IGZzLnJlYWRGaWxlU3luYyhpbnB1dFBhdGgsICd1dGY4Jyk7XG4gICAgaWYgKCFib2R5KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoaW5wdXRQYXRoLmVuZHNXaXRoKCcuanN4JykgfHwgaW5wdXRQYXRoLmVuZHNXaXRoKCcuanMnKVxuICAgICAgfHwgaW5wdXRQYXRoLmVuZHNXaXRoKCcudHN4JykgfHwgaW5wdXRQYXRoLmVuZHNXaXRoKCcudHMnKVxuICAgICkge1xuICAgICAgY29uc3QgZG9jID0gZXh0cmFjdERvY3VtZW50RnJvbUphdmFzY3JpcHQoYm9keS50b1N0cmluZygpLCB0YWdOYW1lKTtcbiAgICAgIHJldHVybiBkb2MgPyBuZXcgU291cmNlKGRvYywgaW5wdXRQYXRoKSA6IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBTb3VyY2UoYm9keSwgaW5wdXRQYXRoKTtcbiAgfSkuZmlsdGVyKHNvdXJjZSA9PiBzb3VyY2UpO1xuXG4gIHJldHVybiBjb25jYXRBU1QoKHNvdXJjZXMgYXMgU291cmNlW10pLm1hcChzb3VyY2UgPT4gcGFyc2Uoc291cmNlKSkpO1xufVxuIl19");"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const graphql_1 = require("graphql");
const errors_1 = require("./errors");
function loadSchema(schemaPath) {
    if (!fs.existsSync(schemaPath)) {
        throw new errors_1.ToolError(`Cannot find GraphQL schema file: ${schemaPath}`);
    }
    const schemaData = require(schemaPath);
    if (!schemaData.data && !schemaData.__schema) {
        throw new errors_1.ToolError('GraphQL schema file should contain a valid GraphQL introspection query result');
    }
    return graphql_1.buildClientSchema(schemaData.data ? schemaData.data : schemaData);
}
exports.loadSchema = loadSchema;
function extractDocumentFromJavascript(content, tagName = 'gql') {
    const re = new RegExp(tagName + '\\s*`([^`/]*)`', 'g');
    let match;
    const matches = [];
    while (match = re.exec(content)) {
        const doc = match[1].
        replace(/\${[^}]*}/g, '');
        matches.push(doc);
    }
    const doc = matches.join('\n');
    return doc.length ? doc : null;
}
function loadAndMergeQueryDocuments(inputPaths, tagName = 'gql') {
    const sources = inputPaths.map(inputPath => {
        const body = fs.readFileSync(inputPath, 'utf8');
        if (!body) {
            return null;
        }
        if (inputPath.endsWith('.jsx') || inputPath.endsWith('.js') ||
        inputPath.endsWith('.tsx') || inputPath.endsWith('.ts')) {
            const doc = extractDocumentFromJavascript(body.toString(), tagName);
            return doc ? new graphql_1.Source(doc, inputPath) : null;
        }
        return new graphql_1.Source(body, inputPath);
    }).filter(source => source);
    return graphql_1.concatAST(sources.map(source => graphql_1.parse(source)));
}
exports.loadAndMergeQueryDocuments = loadAndMergeQueryDocuments;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxvYWRpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFBLEtBQUEsUUFBQSxJQUFBLENBQUE7QUFFQSxNQUFBLFlBQUEsUUFBQSxTQUFBLENBQUE7QUFTQSxNQUFBLFdBQUEsUUFBQSxVQUFBLENBQUE7QUFFQSxTQUFBLFVBQUEsQ0FBMkIsVUFBM0IsRUFBNkM7QUFDM0MsUUFBSSxDQUFDLEdBQUcsVUFBSCxDQUFjLFVBQWQsQ0FBTCxFQUFnQztBQUM5QixjQUFNLElBQUksU0FBQSxTQUFKLENBQWMsb0NBQW9DLFVBQVUsRUFBNUQsQ0FBTjtBQUNEO0FBQ0QsVUFBTSxhQUFhLFFBQVEsVUFBUixDQUFuQjtBQUVBLFFBQUksQ0FBQyxXQUFXLElBQVosSUFBb0IsQ0FBQyxXQUFXLFFBQXBDLEVBQThDO0FBQzVDLGNBQU0sSUFBSSxTQUFBLFNBQUosQ0FBYywrRUFBZCxDQUFOO0FBQ0Q7QUFDRCxXQUFPLFVBQUEsaUJBQUEsQ0FBbUIsV0FBVyxJQUFaLEdBQW9CLFdBQVcsSUFBL0IsR0FBc0MsVUFBeEQsQ0FBUDtBQUNEO0FBVkQsUUFBQSxVQUFBLEdBQUEsVUFBQTtBQVlBLFNBQUEsNkJBQUEsQ0FBdUMsT0FBdkMsRUFBd0QsVUFBa0IsS0FBMUUsRUFBK0U7QUFDN0UsVUFBTSxLQUFLLElBQUksTUFBSixDQUFXLFVBQVUsZ0JBQXJCLEVBQXVDLEdBQXZDLENBQVg7QUFFQSxRQUFJLEtBQUo7QUFDQSxVQUFNLFVBQVUsRUFBaEI7QUFFQSxXQUFNLFFBQVEsR0FBRyxJQUFILENBQVEsT0FBUixDQUFkLEVBQWdDO0FBQzlCLGNBQU0sTUFBTSxNQUFNLENBQU47QUFDVCxlQURTLENBQ0QsWUFEQyxFQUNhLEVBRGIsQ0FBWjtBQUdBLGdCQUFRLElBQVIsQ0FBYSxHQUFiO0FBQ0Q7QUFFRCxVQUFNLE1BQU0sUUFBUSxJQUFSLENBQWEsSUFBYixDQUFaO0FBQ0EsV0FBTyxJQUFJLE1BQUosR0FBYSxHQUFiLEdBQW1CLElBQTFCO0FBQ0Q7QUFFRCxTQUFBLDBCQUFBLENBQTJDLFVBQTNDLEVBQWlFLFVBQWtCLEtBQW5GLEVBQXdGO0FBQ3RGLFVBQU0sVUFBVSxXQUFXLEdBQVgsQ0FBZSxhQUFZO0FBQ3pDLGNBQU0sT0FBTyxHQUFHLFlBQUgsQ0FBZ0IsU0FBaEIsRUFBMkIsTUFBM0IsQ0FBYjtBQUNBLFlBQUksQ0FBQyxJQUFMLEVBQVc7QUFDVCxtQkFBTyxJQUFQO0FBQ0Q7QUFFRCxZQUFJLFVBQVUsUUFBVixDQUFtQixNQUFuQixLQUE4QixVQUFVLFFBQVYsQ0FBbUIsS0FBbkIsQ0FBOUI7QUFDQyxrQkFBVSxRQUFWLENBQW1CLE1BQW5CLENBREQsSUFDK0IsVUFBVSxRQUFWLENBQW1CLEtBQW5CLENBRG5DLEVBRUU7QUFDQSxrQkFBTSxNQUFNLDhCQUE4QixLQUFLLFFBQUwsRUFBOUIsRUFBK0MsT0FBL0MsQ0FBWjtBQUNBLG1CQUFPLE1BQU0sSUFBSSxVQUFBLE1BQUosQ0FBVyxHQUFYLEVBQWdCLFNBQWhCLENBQU4sR0FBbUMsSUFBMUM7QUFDRDtBQUVELGVBQU8sSUFBSSxVQUFBLE1BQUosQ0FBVyxJQUFYLEVBQWlCLFNBQWpCLENBQVA7QUFDRCxLQWRlLEVBY2IsTUFkYSxDQWNOLFVBQVUsTUFkSixDQUFoQjtBQWdCQSxXQUFPLFVBQUEsU0FBQSxDQUFXLFFBQXFCLEdBQXJCLENBQXlCLFVBQVUsVUFBQSxLQUFBLENBQU0sTUFBTixDQUFuQyxDQUFYLENBQVA7QUFDRDtBQWxCRCxRQUFBLDBCQUFBLEdBQUEsMEJBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBmcyBmcm9tICdmcydcblxuaW1wb3J0IHtcbiAgYnVpbGRDbGllbnRTY2hlbWEsXG4gIFNvdXJjZSxcbiAgY29uY2F0QVNULFxuICBwYXJzZSxcbiAgRG9jdW1lbnROb2RlLFxuICBHcmFwaFFMU2NoZW1hXG59IGZyb20gJ2dyYXBocWwnO1xuXG5pbXBvcnQgeyBUb29sRXJyb3IgfSBmcm9tICcuL2Vycm9ycydcblxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRTY2hlbWEoc2NoZW1hUGF0aDogc3RyaW5nKTogR3JhcGhRTFNjaGVtYSB7XG4gIGlmICghZnMuZXhpc3RzU3luYyhzY2hlbWFQYXRoKSkge1xuICAgIHRocm93IG5ldyBUb29sRXJyb3IoYENhbm5vdCBmaW5kIEdyYXBoUUwgc2NoZW1hIGZpbGU6ICR7c2NoZW1hUGF0aH1gKTtcbiAgfVxuICBjb25zdCBzY2hlbWFEYXRhID0gcmVxdWlyZShzY2hlbWFQYXRoKTtcblxuICBpZiAoIXNjaGVtYURhdGEuZGF0YSAmJiAhc2NoZW1hRGF0YS5fX3NjaGVtYSkge1xuICAgIHRocm93IG5ldyBUb29sRXJyb3IoJ0dyYXBoUUwgc2NoZW1hIGZpbGUgc2hvdWxkIGNvbnRhaW4gYSB2YWxpZCBHcmFwaFFMIGludHJvc3BlY3Rpb24gcXVlcnkgcmVzdWx0Jyk7XG4gIH1cbiAgcmV0dXJuIGJ1aWxkQ2xpZW50U2NoZW1hKChzY2hlbWFEYXRhLmRhdGEpID8gc2NoZW1hRGF0YS5kYXRhIDogc2NoZW1hRGF0YSk7XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3REb2N1bWVudEZyb21KYXZhc2NyaXB0KGNvbnRlbnQ6IHN0cmluZywgdGFnTmFtZTogc3RyaW5nID0gJ2dxbCcpOiBzdHJpbmcgfCBudWxsIHtcbiAgY29uc3QgcmUgPSBuZXcgUmVnRXhwKHRhZ05hbWUgKyAnXFxcXHMqYChbXmAvXSopYCcsICdnJyk7XG5cbiAgbGV0IG1hdGNoXG4gIGNvbnN0IG1hdGNoZXMgPSBbXVxuXG4gIHdoaWxlKG1hdGNoID0gcmUuZXhlYyhjb250ZW50KSkge1xuICAgIGNvbnN0IGRvYyA9IG1hdGNoWzFdXG4gICAgICAucmVwbGFjZSgvXFwke1tefV0qfS9nLCAnJylcblxuICAgIG1hdGNoZXMucHVzaChkb2MpXG4gIH1cblxuICBjb25zdCBkb2MgPSBtYXRjaGVzLmpvaW4oJ1xcbicpXG4gIHJldHVybiBkb2MubGVuZ3RoID8gZG9jIDogbnVsbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRBbmRNZXJnZVF1ZXJ5RG9jdW1lbnRzKGlucHV0UGF0aHM6IHN0cmluZ1tdLCB0YWdOYW1lOiBzdHJpbmcgPSAnZ3FsJyk6IERvY3VtZW50Tm9kZSB7XG4gIGNvbnN0IHNvdXJjZXMgPSBpbnB1dFBhdGhzLm1hcChpbnB1dFBhdGggPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBmcy5yZWFkRmlsZVN5bmMoaW5wdXRQYXRoLCAndXRmOCcpO1xuICAgIGlmICghYm9keSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgaWYgKGlucHV0UGF0aC5lbmRzV2l0aCgnLmpzeCcpIHx8IGlucHV0UGF0aC5lbmRzV2l0aCgnLmpzJylcbiAgICAgIHx8IGlucHV0UGF0aC5lbmRzV2l0aCgnLnRzeCcpIHx8IGlucHV0UGF0aC5lbmRzV2l0aCgnLnRzJylcbiAgICApIHtcbiAgICAgIGNvbnN0IGRvYyA9IGV4dHJhY3REb2N1bWVudEZyb21KYXZhc2NyaXB0KGJvZHkudG9TdHJpbmcoKSwgdGFnTmFtZSk7XG4gICAgICByZXR1cm4gZG9jID8gbmV3IFNvdXJjZShkb2MsIGlucHV0UGF0aCkgOiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgU291cmNlKGJvZHksIGlucHV0UGF0aCk7XG4gIH0pLmZpbHRlcihzb3VyY2UgPT4gc291cmNlKTtcblxuICByZXR1cm4gY29uY2F0QVNUKChzb3VyY2VzIGFzIFNvdXJjZVtdKS5tYXAoc291cmNlID0+IHBhcnNlKHNvdXJjZSkpKTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=