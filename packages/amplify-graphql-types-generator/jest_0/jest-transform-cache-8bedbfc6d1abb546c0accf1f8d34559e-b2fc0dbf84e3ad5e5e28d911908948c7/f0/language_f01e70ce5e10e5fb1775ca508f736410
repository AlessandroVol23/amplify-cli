34bdb7b15252e0a17370108362a03c15
'use strict';require('ts-jest').install("/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-types-generator/src/swift/language.ts", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst CodeGenerator_1 = require(\"../utilities/CodeGenerator\");\nconst printing_1 = require(\"../utilities/printing\");\nfunction escapedString(string) {\n    return string.replace(/\"/g, '\\\\\"').replace(/\\n/g, '\\\\n');\n}\nexports.escapedString = escapedString;\nconst reservedKeywords = new Set(['associatedtype', 'class', 'deinit', 'enum', 'extension',\n    'fileprivate', 'func', 'import', 'init', 'inout', 'internal', 'let', 'open',\n    'operator', 'private', 'protocol', 'public', 'static', 'struct', 'subscript',\n    'typealias', 'var', 'break', 'case', 'continue', 'default', 'defer', 'do',\n    'else', 'fallthrough', 'for', 'guard', 'if', 'in', 'repeat', 'return',\n    'switch', 'where', 'while', 'as', 'Any', 'catch', 'false', 'is', 'nil',\n    'rethrows', 'super', 'self', 'Self', 'throw', 'throws', 'true', 'try',\n    'associativity', 'convenience', 'dynamic', 'didSet', 'final', 'get', 'infix',\n    'indirect', 'lazy', 'left', 'mutating', 'none', 'nonmutating', 'optional',\n    'override', 'postfix', 'precedence', 'prefix', 'Protocol', 'required', 'right',\n    'set', 'Type', 'unowned', 'weak', 'willSet']);\nfunction escapeIdentifierIfNeeded(identifier) {\n    if (reservedKeywords.has(identifier)) {\n        return '`' + identifier + '`';\n    }\n    else {\n        return identifier;\n    }\n}\nexports.escapeIdentifierIfNeeded = escapeIdentifierIfNeeded;\nclass SwiftGenerator extends CodeGenerator_1.default {\n    constructor(context) {\n        super(context);\n    }\n    multilineString(string) {\n        this.printOnNewline(`\"${escapedString(string)}\"`);\n    }\n    comment(comment) {\n        comment &&\n            comment.split('\\n').forEach(line => {\n                this.printOnNewline(`/// ${line.trim()}`);\n            });\n    }\n    deprecationAttributes(isDeprecated, deprecationReason) {\n        if (isDeprecated !== undefined && isDeprecated) {\n            deprecationReason = (deprecationReason !== undefined && deprecationReason.length > 0) ? deprecationReason : \"\";\n            this.printOnNewline(`@available(*, deprecated, message: \"${escapedString(deprecationReason)}\")`);\n        }\n    }\n    namespaceDeclaration(namespace, closure) {\n        if (namespace) {\n            this.printNewlineIfNeeded();\n            this.printOnNewline(`/// ${namespace} namespace`);\n            this.printOnNewline(`public enum ${namespace}`);\n            this.pushScope({ typeName: namespace });\n            this.withinBlock(closure);\n            this.popScope();\n        }\n        else {\n            if (closure) {\n                closure();\n            }\n        }\n    }\n    namespaceExtensionDeclaration(namespace, closure) {\n        if (namespace) {\n            this.printNewlineIfNeeded();\n            this.printOnNewline(`/// ${namespace} namespace`);\n            this.printOnNewline(`public extension ${namespace}`);\n            this.pushScope({ typeName: namespace });\n            this.withinBlock(closure);\n            this.popScope();\n        }\n        else {\n            if (closure) {\n                closure();\n            }\n        }\n    }\n    classDeclaration({ className, modifiers, superClass, adoptedProtocols = [] }, closure) {\n        this.printNewlineIfNeeded();\n        this.printOnNewline(printing_1.wrap('', printing_1.join(modifiers, ' '), ' ') + `class ${className}`);\n        this.print(printing_1.wrap(': ', printing_1.join([superClass, ...adoptedProtocols], ', ')));\n        this.pushScope({ typeName: className });\n        this.withinBlock(closure);\n        this.popScope();\n    }\n    structDeclaration({ structName, description, adoptedProtocols = [] }, closure) {\n        this.printNewlineIfNeeded();\n        this.comment(description);\n        this.printOnNewline(`public struct ${escapeIdentifierIfNeeded(structName)}`);\n        this.print(printing_1.wrap(': ', printing_1.join(adoptedProtocols, ', ')));\n        this.pushScope({ typeName: structName });\n        this.withinBlock(closure);\n        this.popScope();\n    }\n    propertyDeclaration({ propertyName, typeName, description }) {\n        this.comment(description);\n        this.printOnNewline(`public var ${escapeIdentifierIfNeeded(propertyName)}: ${typeName}`);\n    }\n    propertyDeclarations(properties) {\n        if (!properties)\n            return;\n        properties.forEach(property => this.propertyDeclaration(property));\n    }\n    protocolDeclaration({ protocolName, adoptedProtocols }, closure) {\n        this.printNewlineIfNeeded();\n        this.printOnNewline(`public protocol ${protocolName}`);\n        this.print(printing_1.wrap(': ', printing_1.join(adoptedProtocols, ', ')));\n        this.pushScope({ typeName: protocolName });\n        this.withinBlock(closure);\n        this.popScope();\n    }\n    protocolPropertyDeclaration({ propertyName, typeName }) {\n        this.printOnNewline(`var ${propertyName}: ${typeName} { get }`);\n    }\n    protocolPropertyDeclarations(properties) {\n        if (!properties)\n            return;\n        properties.forEach(property => this.protocolPropertyDeclaration(property));\n    }\n}\nexports.SwiftGenerator = SwiftGenerator;\n//# sourceMappingURL=data:application/json;base64,");"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const CodeGenerator_1 = require("../utilities/CodeGenerator");
const printing_1 = require("../utilities/printing");
function escapedString(string) {
    return string.replace(/"/g, '\\"').replace(/\n/g, '\\n');
}
exports.escapedString = escapedString;
const reservedKeywords = new Set(['associatedtype', 'class', 'deinit', 'enum', 'extension',
'fileprivate', 'func', 'import', 'init', 'inout', 'internal', 'let', 'open',
'operator', 'private', 'protocol', 'public', 'static', 'struct', 'subscript',
'typealias', 'var', 'break', 'case', 'continue', 'default', 'defer', 'do',
'else', 'fallthrough', 'for', 'guard', 'if', 'in', 'repeat', 'return',
'switch', 'where', 'while', 'as', 'Any', 'catch', 'false', 'is', 'nil',
'rethrows', 'super', 'self', 'Self', 'throw', 'throws', 'true', 'try',
'associativity', 'convenience', 'dynamic', 'didSet', 'final', 'get', 'infix',
'indirect', 'lazy', 'left', 'mutating', 'none', 'nonmutating', 'optional',
'override', 'postfix', 'precedence', 'prefix', 'Protocol', 'required', 'right',
'set', 'Type', 'unowned', 'weak', 'willSet']);
function escapeIdentifierIfNeeded(identifier) {
    if (reservedKeywords.has(identifier)) {
        return '`' + identifier + '`';
    } else
    {
        return identifier;
    }
}
exports.escapeIdentifierIfNeeded = escapeIdentifierIfNeeded;
class SwiftGenerator extends CodeGenerator_1.default {
    constructor(context) {
        super(context);
    }
    multilineString(string) {
        this.printOnNewline(`"${escapedString(string)}"`);
    }
    comment(comment) {
        comment &&
        comment.split('\n').forEach(line => {
            this.printOnNewline(`/// ${line.trim()}`);
        });
    }
    deprecationAttributes(isDeprecated, deprecationReason) {
        if (isDeprecated !== undefined && isDeprecated) {
            deprecationReason = deprecationReason !== undefined && deprecationReason.length > 0 ? deprecationReason : "";
            this.printOnNewline(`@available(*, deprecated, message: "${escapedString(deprecationReason)}")`);
        }
    }
    namespaceDeclaration(namespace, closure) {
        if (namespace) {
            this.printNewlineIfNeeded();
            this.printOnNewline(`/// ${namespace} namespace`);
            this.printOnNewline(`public enum ${namespace}`);
            this.pushScope({ typeName: namespace });
            this.withinBlock(closure);
            this.popScope();
        } else
        {
            if (closure) {
                closure();
            }
        }
    }
    namespaceExtensionDeclaration(namespace, closure) {
        if (namespace) {
            this.printNewlineIfNeeded();
            this.printOnNewline(`/// ${namespace} namespace`);
            this.printOnNewline(`public extension ${namespace}`);
            this.pushScope({ typeName: namespace });
            this.withinBlock(closure);
            this.popScope();
        } else
        {
            if (closure) {
                closure();
            }
        }
    }
    classDeclaration({ className, modifiers, superClass, adoptedProtocols = [] }, closure) {
        this.printNewlineIfNeeded();
        this.printOnNewline(printing_1.wrap('', printing_1.join(modifiers, ' '), ' ') + `class ${className}`);
        this.print(printing_1.wrap(': ', printing_1.join([superClass, ...adoptedProtocols], ', ')));
        this.pushScope({ typeName: className });
        this.withinBlock(closure);
        this.popScope();
    }
    structDeclaration({ structName, description, adoptedProtocols = [] }, closure) {
        this.printNewlineIfNeeded();
        this.comment(description);
        this.printOnNewline(`public struct ${escapeIdentifierIfNeeded(structName)}`);
        this.print(printing_1.wrap(': ', printing_1.join(adoptedProtocols, ', ')));
        this.pushScope({ typeName: structName });
        this.withinBlock(closure);
        this.popScope();
    }
    propertyDeclaration({ propertyName, typeName, description }) {
        this.comment(description);
        this.printOnNewline(`public var ${escapeIdentifierIfNeeded(propertyName)}: ${typeName}`);
    }
    propertyDeclarations(properties) {
        if (!properties)
        return;
        properties.forEach(property => this.propertyDeclaration(property));
    }
    protocolDeclaration({ protocolName, adoptedProtocols }, closure) {
        this.printNewlineIfNeeded();
        this.printOnNewline(`public protocol ${protocolName}`);
        this.print(printing_1.wrap(': ', printing_1.join(adoptedProtocols, ', ')));
        this.pushScope({ typeName: protocolName });
        this.withinBlock(closure);
        this.popScope();
    }
    protocolPropertyDeclaration({ propertyName, typeName }) {
        this.printOnNewline(`var ${propertyName}: ${typeName} { get }`);
    }
    protocolPropertyDeclarations(properties) {
        if (!properties)
        return;
        properties.forEach(property => this.protocolPropertyDeclaration(property));
    }}

exports.SwiftGenerator = SwiftGenerator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,