{"version":3,"sources":["language.ts"],"names":[],"mappings":"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","sourcesContent":["import CodeGenerator from '../utilities/CodeGenerator';\n\nimport { join, wrap } from '../utilities/printing';\n\nexport interface Class {\n  className: string;\n  modifiers: string[];\n  superClass?: string;\n  adoptedProtocols?: string[];\n}\n\nexport interface Struct {\n  structName: string;\n  adoptedProtocols?: string[];\n  description?: string;\n}\n\nexport interface Protocol {\n  protocolName: string;\n  adoptedProtocols?: string[];\n}\n\nexport interface Property {\n  propertyName: string;\n  typeName: string;\n  isOptional?: boolean;\n  description?: string;\n}\n\nexport function escapedString(string: string) {\n  return string.replace(/\"/g, '\\\\\"').replace(/\\n/g, '\\\\n');\n}\n\n// prettier-ignore\nconst reservedKeywords = new Set(['associatedtype', 'class', 'deinit', 'enum', 'extension',\n  'fileprivate', 'func', 'import', 'init', 'inout', 'internal', 'let', 'open',\n  'operator', 'private', 'protocol', 'public', 'static', 'struct', 'subscript',\n  'typealias', 'var', 'break', 'case', 'continue', 'default', 'defer', 'do',\n  'else', 'fallthrough', 'for', 'guard', 'if', 'in', 'repeat', 'return',\n  'switch', 'where', 'while', 'as', 'Any', 'catch', 'false', 'is', 'nil',\n  'rethrows', 'super', 'self', 'Self', 'throw', 'throws', 'true', 'try',\n  'associativity', 'convenience', 'dynamic', 'didSet', 'final', 'get', 'infix',\n  'indirect', 'lazy', 'left', 'mutating', 'none', 'nonmutating', 'optional',\n  'override', 'postfix', 'precedence', 'prefix', 'Protocol', 'required', 'right',\n  'set', 'Type', 'unowned', 'weak', 'willSet']);\n\nexport function escapeIdentifierIfNeeded(identifier: string) {\n  if (reservedKeywords.has(identifier)) {\n    return '`' + identifier + '`';\n  } else {\n    return identifier;\n  }\n}\n\nexport class SwiftGenerator<Context> extends CodeGenerator<Context, { typeName: string }> {\n  constructor(context: Context) {\n    super(context);\n  }\n\n  multilineString(string: string) {\n    this.printOnNewline(`\"${escapedString(string)}\"`);\n  }\n\n  comment(comment?: string) {\n    comment &&\n      comment.split('\\n').forEach(line => {\n        this.printOnNewline(`/// ${line.trim()}`);\n      });\n  }\n\n  deprecationAttributes(isDeprecated: boolean | undefined, deprecationReason: string | undefined) {\n    if (isDeprecated !== undefined && isDeprecated) {\n      deprecationReason = (deprecationReason !== undefined && deprecationReason.length > 0) ? deprecationReason : \"\"\n      this.printOnNewline(`@available(*, deprecated, message: \"${escapedString(deprecationReason)}\")`)\n    }\n  }\n\n  namespaceDeclaration(namespace: string | undefined, closure: Function) {\n    if (namespace) {\n      this.printNewlineIfNeeded();\n      this.printOnNewline(`/// ${namespace} namespace`);\n      this.printOnNewline(`public enum ${namespace}`);\n      this.pushScope({ typeName: namespace });\n      this.withinBlock(closure);\n      this.popScope();\n    } else {\n      if (closure) {\n        closure();\n      }\n    }\n  }\n\n  namespaceExtensionDeclaration(namespace: string | undefined, closure: Function) {\n    if (namespace) {\n      this.printNewlineIfNeeded();\n      this.printOnNewline(`/// ${namespace} namespace`);\n      this.printOnNewline(`public extension ${namespace}`);\n      this.pushScope({ typeName: namespace });\n      this.withinBlock(closure);\n      this.popScope();\n    } else {\n      if (closure) {\n        closure();\n      }\n    }\n  }\n\n  classDeclaration({ className, modifiers, superClass, adoptedProtocols = [] }: Class, closure: Function) {\n    this.printNewlineIfNeeded();\n    this.printOnNewline(wrap('', join(modifiers, ' '), ' ') + `class ${className}`);\n    this.print(wrap(': ', join([superClass, ...adoptedProtocols], ', ')));\n    this.pushScope({ typeName: className });\n    this.withinBlock(closure);\n    this.popScope();\n  }\n\n  structDeclaration({ structName, description, adoptedProtocols = [] }: Struct, closure: Function) {\n    this.printNewlineIfNeeded();\n    this.comment(description);\n    this.printOnNewline(`public struct ${escapeIdentifierIfNeeded(structName)}`);\n    this.print(wrap(': ', join(adoptedProtocols, ', ')));\n    this.pushScope({ typeName: structName });\n    this.withinBlock(closure);\n    this.popScope();\n  }\n\n  propertyDeclaration({ propertyName, typeName, description }: Property) {\n    this.comment(description);\n    this.printOnNewline(`public var ${escapeIdentifierIfNeeded(propertyName)}: ${typeName}`);\n  }\n\n  propertyDeclarations(properties: Property[]) {\n    if (!properties) return;\n    properties.forEach(property => this.propertyDeclaration(property));\n  }\n\n  protocolDeclaration({ protocolName, adoptedProtocols }: Protocol, closure: Function) {\n    this.printNewlineIfNeeded();\n    this.printOnNewline(`public protocol ${protocolName}`);\n    this.print(wrap(': ', join(adoptedProtocols, ', ')));\n    this.pushScope({ typeName: protocolName });\n    this.withinBlock(closure);\n    this.popScope();\n  }\n\n  protocolPropertyDeclaration({ propertyName, typeName }: Property) {\n    this.printOnNewline(`var ${propertyName}: ${typeName} { get }`);\n  }\n\n  protocolPropertyDeclarations(properties: Property[]) {\n    if (!properties) return;\n    properties.forEach(property => this.protocolPropertyDeclaration(property));\n  }\n}\n"],"sourceRoot":""}