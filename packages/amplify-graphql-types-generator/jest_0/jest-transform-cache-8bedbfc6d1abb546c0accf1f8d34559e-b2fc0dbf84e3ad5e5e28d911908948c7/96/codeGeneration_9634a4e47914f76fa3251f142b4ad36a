cff204ea75b3bef51c72ee83f7b7c1d0
'use strict';require('ts-jest').install("/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-types-generator/src/flow/codeGeneration.js", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst graphql_1 = require(\"graphql\");\nconst printing_1 = require(\"../utilities/printing\");\nconst CodeGenerator_1 = require(\"../utilities/CodeGenerator\");\nconst language_1 = require(\"./language\");\nconst types_1 = require(\"./types\");\nfunction generateSource(context) {\n    const generator = new CodeGenerator_1.default(context);\n    generator.printOnNewline('/* @flow */');\n    generator.printOnNewline('/* eslint-disable */');\n    generator.printOnNewline('//  This file was automatically generated and should not be edited.');\n    typeDeclarationForGraphQLType(context.typesUsed.forEach(type => typeDeclarationForGraphQLType(generator, type)));\n    Object.values(context.operations).forEach(operation => {\n        interfaceVariablesDeclarationForOperation(generator, operation);\n        typeDeclarationForOperation(generator, operation);\n    });\n    Object.values(context.fragments).forEach(fragment => {\n        typeDeclarationForFragment(generator, fragment);\n    });\n    return generator.output;\n}\nexports.generateSource = generateSource;\nfunction typeDeclarationForGraphQLType(generator, type) {\n    if (type instanceof graphql_1.GraphQLEnumType) {\n        enumerationDeclaration(generator, type);\n    }\n    else if (type instanceof graphql_1.GraphQLInputObjectType) {\n        structDeclarationForInputObjectType(generator, type);\n    }\n}\nexports.typeDeclarationForGraphQLType = typeDeclarationForGraphQLType;\nfunction enumerationDeclaration(generator, type) {\n    const { name, description } = type;\n    const values = type.getValues();\n    generator.printNewlineIfNeeded();\n    if (description) {\n        description.split('\\n')\n            .forEach(line => {\n            generator.printOnNewline(`// ${line.trim()}`);\n        });\n    }\n    generator.printOnNewline(`export type ${name} =`);\n    const nValues = values.length;\n    values.forEach((value, i) => {\n        if (!value.description || value.description.indexOf('\\n') === -1) {\n            generator.printOnNewline(`  \"${value.value}\"${i === nValues - 1 ? ';' : ' |'}${printing_1.wrap(' // ', value.description)}`);\n        }\n        else {\n            if (value.description) {\n                value.description.split('\\n')\n                    .forEach(line => {\n                    generator.printOnNewline(`  // ${line.trim()}`);\n                });\n            }\n            generator.printOnNewline(`  \"${value.value}\"${i === nValues - 1 ? ';' : ' |'}`);\n        }\n    });\n    generator.printNewline();\n}\nfunction structDeclarationForInputObjectType(generator, type) {\n    const interfaceName = type.name;\n    language_1.typeDeclaration(generator, {\n        interfaceName,\n    }, () => {\n        const properties = propertiesFromFields(generator.context, Object.values(type.getFields()));\n        propertyDeclarations(generator, properties, true);\n    });\n}\nfunction interfaceNameFromOperation({ operationName, operationType }) {\n    switch (operationType) {\n        case 'query':\n            return `${operationName}Query`;\n            break;\n        case 'mutation':\n            return `${operationName}Mutation`;\n            break;\n        case 'subscription':\n            return `${operationName}Subscription`;\n            break;\n        default:\n            throw new graphql_1.GraphQLError(`Unsupported operation type \"${operationType}\"`);\n    }\n}\nfunction interfaceVariablesDeclarationForOperation(generator, { operationName, operationType, variables, fields, fragmentsReferenced, source, }) {\n    if (!variables || variables.length < 1) {\n        return null;\n    }\n    const interfaceName = `${interfaceNameFromOperation({ operationName, operationType })}Variables`;\n    language_1.typeDeclaration(generator, {\n        interfaceName,\n    }, () => {\n        const properties = propertiesFromFields(generator.context, variables);\n        propertyDeclarations(generator, properties, true);\n    });\n}\nexports.interfaceVariablesDeclarationForOperation = interfaceVariablesDeclarationForOperation;\nfunction getObjectTypeName(type) {\n    if (type instanceof graphql_1.GraphQLList) {\n        return getObjectTypeName(type.ofType);\n    }\n    if (type instanceof graphql_1.GraphQLNonNull) {\n        return getObjectTypeName(type.ofType);\n    }\n    if (type instanceof graphql_1.GraphQLObjectType) {\n        return `\"${type.name}\"`;\n    }\n    if (type instanceof graphql_1.GraphQLUnionType) {\n        return type.getTypes().map(type => getObjectTypeName(type)).join(\" | \");\n    }\n    return `\"${type.name}\"`;\n}\nfunction typeDeclarationForOperation(generator, { operationName, operationType, variables, fields, fragmentSpreads, fragmentsReferenced, source, }) {\n    const interfaceName = interfaceNameFromOperation({ operationName, operationType });\n    fields = fields.map(rootField => {\n        const fields = rootField.fields && rootField.fields.map(field => {\n            if (field.fieldName === '__typename') {\n                const objectTypeName = getObjectTypeName(rootField.type);\n                return Object.assign({}, field, { typeName: objectTypeName, type: { name: objectTypeName } });\n            }\n            return field;\n        });\n        return Object.assign({}, rootField, { fields });\n    });\n    const properties = propertiesFromFields(generator.context, fields);\n    language_1.typeDeclaration(generator, {\n        interfaceName,\n    }, () => {\n        propertyDeclarations(generator, properties);\n    });\n}\nexports.typeDeclarationForOperation = typeDeclarationForOperation;\nfunction typeDeclarationForFragment(generator, fragment) {\n    const { fragmentName, typeCondition, fields, inlineFragments, fragmentSpreads, source, } = fragment;\n    const interfaceName = `${fragmentName}Fragment`;\n    language_1.typeDeclaration(generator, {\n        interfaceName,\n        noBrackets: graphql_1.isAbstractType(typeCondition)\n    }, () => {\n        if (graphql_1.isAbstractType(typeCondition)) {\n            const propertySets = fragment.possibleTypes\n                .map(type => {\n                const inlineFragment = inlineFragments.find(inlineFragment => {\n                    return inlineFragment.typeCondition.toString() == type;\n                });\n                if (inlineFragment) {\n                    const fields = inlineFragment.fields.map(field => {\n                        if (field.fieldName === '__typename') {\n                            return Object.assign({}, field, { typeName: `\"${inlineFragment.typeCondition}\"`, type: { name: `\"${inlineFragment.typeCondition}\"` } });\n                        }\n                        else {\n                            return field;\n                        }\n                    });\n                    return propertiesFromFields(generator, fields);\n                }\n                else {\n                    const fragmentFields = fields.map(field => {\n                        if (field.fieldName === '__typename') {\n                            return Object.assign({}, field, { typeName: `\"${type}\"`, type: { name: `\"${type}\"` } });\n                        }\n                        else {\n                            return field;\n                        }\n                    });\n                    return propertiesFromFields(generator, fragmentFields);\n                }\n            });\n            language_1.propertySetsDeclaration(generator, fragment, propertySets, true);\n        }\n        else {\n            const fragmentFields = fields.map(field => {\n                if (field.fieldName === '__typename') {\n                    return Object.assign({}, field, { typeName: `\"${fragment.typeCondition}\"`, type: { name: `\"${fragment.typeCondition}\"` } });\n                }\n                else {\n                    return field;\n                }\n            });\n            const properties = propertiesFromFields(generator.context, fragmentFields);\n            propertyDeclarations(generator, properties);\n        }\n    });\n}\nexports.typeDeclarationForFragment = typeDeclarationForFragment;\nfunction propertiesFromFields(context, fields) {\n    return fields.map(field => propertyFromField(context, field));\n}\nexports.propertiesFromFields = propertiesFromFields;\nfunction propertyFromField(context, field) {\n    let { name: fieldName, type: fieldType, description, fragmentSpreads, inlineFragments } = field;\n    fieldName = fieldName || field.responseName;\n    const propertyName = fieldName;\n    let property = { fieldName, fieldType, propertyName, description };\n    let isNullable = true;\n    if (fieldType instanceof graphql_1.GraphQLNonNull) {\n        isNullable = false;\n    }\n    const namedType = graphql_1.getNamedType(fieldType);\n    if (graphql_1.isCompositeType(namedType)) {\n        const typeName = types_1.typeNameFromGraphQLType(context, fieldType);\n        let isArray = false;\n        let isArrayElementNullable = null;\n        if (fieldType instanceof graphql_1.GraphQLList) {\n            isArray = true;\n            isArrayElementNullable = !(fieldType.ofType instanceof graphql_1.GraphQLNonNull);\n        }\n        else if (fieldType instanceof graphql_1.GraphQLNonNull && fieldType.ofType instanceof graphql_1.GraphQLList) {\n            isArray = true;\n            isArrayElementNullable = !(fieldType.ofType.ofType instanceof graphql_1.GraphQLNonNull);\n        }\n        return Object.assign({}, property, { typeName, fields: field.fields, isComposite: true, fragmentSpreads, inlineFragments, fieldType,\n            isArray, isNullable, isArrayElementNullable });\n    }\n    else {\n        if (field.fieldName === '__typename') {\n            const typeName = types_1.typeNameFromGraphQLType(context, fieldType, null, false);\n            return Object.assign({}, property, { typeName, isComposite: false, fieldType, isNullable: false });\n        }\n        else {\n            const typeName = types_1.typeNameFromGraphQLType(context, fieldType, null, isNullable);\n            return Object.assign({}, property, { typeName, isComposite: false, fieldType, isNullable });\n        }\n    }\n}\nexports.propertyFromField = propertyFromField;\nfunction propertyDeclarations(generator, properties, isInput) {\n    if (!properties)\n        return;\n    properties.forEach(property => {\n        if (graphql_1.isAbstractType(graphql_1.getNamedType(property.type || property.fieldType))) {\n            const propertySets = getPossibleTypeNames(generator, property)\n                .map(type => {\n                const inlineFragment = property.inlineFragments.find(inlineFragment => {\n                    return inlineFragment.typeCondition.toString() == type;\n                });\n                if (inlineFragment) {\n                    const fields = inlineFragment.fields.map(field => {\n                        if (field.fieldName === '__typename') {\n                            return Object.assign({}, field, { typeName: `\"${inlineFragment.typeCondition}\"`, type: { name: `\"${inlineFragment.typeCondition}\"` } });\n                        }\n                        else {\n                            return field;\n                        }\n                    });\n                    return propertiesFromFields(generator, fields);\n                }\n                else {\n                    const fields = property.fields.map(field => {\n                        if (field.fieldName === '__typename') {\n                            return Object.assign({}, field, { typeName: `\"${type}\"`, type: { name: `\"${type}\"` } });\n                        }\n                        else {\n                            return field;\n                        }\n                    });\n                    return propertiesFromFields(generator, fields);\n                }\n            });\n            language_1.propertySetsDeclaration(generator, property, propertySets);\n        }\n        else {\n            if (property.fields && property.fields.length > 0\n                || property.inlineFragments && property.inlineFragments.length > 0\n                || property.fragmentSpreads && property.fragmentSpreads.length > 0) {\n                language_1.propertyDeclaration(generator, property, () => {\n                    const properties = propertiesFromFields(generator.context, property.fields);\n                    propertyDeclarations(generator, properties, isInput);\n                });\n            }\n            else {\n                language_1.propertyDeclaration(generator, Object.assign({}, property, { isInput }));\n            }\n        }\n    });\n}\nexports.propertyDeclarations = propertyDeclarations;\nfunction getPossibleTypeNames(generator, property) {\n    return generator.context.schema.getPossibleTypes(graphql_1.getNamedType(property.fieldType || property.type)).map(type => type.name);\n}\n//# sourceMappingURL=data:application/json;base64,");"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = require("graphql");
const printing_1 = require("../utilities/printing");
const CodeGenerator_1 = require("../utilities/CodeGenerator");
const language_1 = require("./language");
const types_1 = require("./types");
function generateSource(context) {
    const generator = new CodeGenerator_1.default(context);
    generator.printOnNewline('/* @flow */');
    generator.printOnNewline('/* eslint-disable */');
    generator.printOnNewline('//  This file was automatically generated and should not be edited.');
    typeDeclarationForGraphQLType(context.typesUsed.forEach(type => typeDeclarationForGraphQLType(generator, type)));
    Object.values(context.operations).forEach(operation => {
        interfaceVariablesDeclarationForOperation(generator, operation);
        typeDeclarationForOperation(generator, operation);
    });
    Object.values(context.fragments).forEach(fragment => {
        typeDeclarationForFragment(generator, fragment);
    });
    return generator.output;
}
exports.generateSource = generateSource;
function typeDeclarationForGraphQLType(generator, type) {
    if (type instanceof graphql_1.GraphQLEnumType) {
        enumerationDeclaration(generator, type);
    } else
    if (type instanceof graphql_1.GraphQLInputObjectType) {
        structDeclarationForInputObjectType(generator, type);
    }
}
exports.typeDeclarationForGraphQLType = typeDeclarationForGraphQLType;
function enumerationDeclaration(generator, type) {
    const { name, description } = type;
    const values = type.getValues();
    generator.printNewlineIfNeeded();
    if (description) {
        description.split('\n').
        forEach(line => {
            generator.printOnNewline(`// ${line.trim()}`);
        });
    }
    generator.printOnNewline(`export type ${name} =`);
    const nValues = values.length;
    values.forEach((value, i) => {
        if (!value.description || value.description.indexOf('\n') === -1) {
            generator.printOnNewline(`  "${value.value}"${i === nValues - 1 ? ';' : ' |'}${printing_1.wrap(' // ', value.description)}`);
        } else
        {
            if (value.description) {
                value.description.split('\n').
                forEach(line => {
                    generator.printOnNewline(`  // ${line.trim()}`);
                });
            }
            generator.printOnNewline(`  "${value.value}"${i === nValues - 1 ? ';' : ' |'}`);
        }
    });
    generator.printNewline();
}
function structDeclarationForInputObjectType(generator, type) {
    const interfaceName = type.name;
    language_1.typeDeclaration(generator, {
        interfaceName },
    () => {
        const properties = propertiesFromFields(generator.context, Object.values(type.getFields()));
        propertyDeclarations(generator, properties, true);
    });
}
function interfaceNameFromOperation({ operationName, operationType }) {
    switch (operationType) {
        case 'query':
            return `${operationName}Query`;
            break;
        case 'mutation':
            return `${operationName}Mutation`;
            break;
        case 'subscription':
            return `${operationName}Subscription`;
            break;
        default:
            throw new graphql_1.GraphQLError(`Unsupported operation type "${operationType}"`);}

}
function interfaceVariablesDeclarationForOperation(generator, { operationName, operationType, variables, fields, fragmentsReferenced, source }) {
    if (!variables || variables.length < 1) {
        return null;
    }
    const interfaceName = `${interfaceNameFromOperation({ operationName, operationType })}Variables`;
    language_1.typeDeclaration(generator, {
        interfaceName },
    () => {
        const properties = propertiesFromFields(generator.context, variables);
        propertyDeclarations(generator, properties, true);
    });
}
exports.interfaceVariablesDeclarationForOperation = interfaceVariablesDeclarationForOperation;
function getObjectTypeName(type) {
    if (type instanceof graphql_1.GraphQLList) {
        return getObjectTypeName(type.ofType);
    }
    if (type instanceof graphql_1.GraphQLNonNull) {
        return getObjectTypeName(type.ofType);
    }
    if (type instanceof graphql_1.GraphQLObjectType) {
        return `"${type.name}"`;
    }
    if (type instanceof graphql_1.GraphQLUnionType) {
        return type.getTypes().map(type => getObjectTypeName(type)).join(" | ");
    }
    return `"${type.name}"`;
}
function typeDeclarationForOperation(generator, { operationName, operationType, variables, fields, fragmentSpreads, fragmentsReferenced, source }) {
    const interfaceName = interfaceNameFromOperation({ operationName, operationType });
    fields = fields.map(rootField => {
        const fields = rootField.fields && rootField.fields.map(field => {
            if (field.fieldName === '__typename') {
                const objectTypeName = getObjectTypeName(rootField.type);
                return Object.assign({}, field, { typeName: objectTypeName, type: { name: objectTypeName } });
            }
            return field;
        });
        return Object.assign({}, rootField, { fields });
    });
    const properties = propertiesFromFields(generator.context, fields);
    language_1.typeDeclaration(generator, {
        interfaceName },
    () => {
        propertyDeclarations(generator, properties);
    });
}
exports.typeDeclarationForOperation = typeDeclarationForOperation;
function typeDeclarationForFragment(generator, fragment) {
    const { fragmentName, typeCondition, fields, inlineFragments, fragmentSpreads, source } = fragment;
    const interfaceName = `${fragmentName}Fragment`;
    language_1.typeDeclaration(generator, {
        interfaceName,
        noBrackets: graphql_1.isAbstractType(typeCondition) },
    () => {
        if (graphql_1.isAbstractType(typeCondition)) {
            const propertySets = fragment.possibleTypes.
            map(type => {
                const inlineFragment = inlineFragments.find(inlineFragment => {
                    return inlineFragment.typeCondition.toString() == type;
                });
                if (inlineFragment) {
                    const fields = inlineFragment.fields.map(field => {
                        if (field.fieldName === '__typename') {
                            return Object.assign({}, field, { typeName: `"${inlineFragment.typeCondition}"`, type: { name: `"${inlineFragment.typeCondition}"` } });
                        } else
                        {
                            return field;
                        }
                    });
                    return propertiesFromFields(generator, fields);
                } else
                {
                    const fragmentFields = fields.map(field => {
                        if (field.fieldName === '__typename') {
                            return Object.assign({}, field, { typeName: `"${type}"`, type: { name: `"${type}"` } });
                        } else
                        {
                            return field;
                        }
                    });
                    return propertiesFromFields(generator, fragmentFields);
                }
            });
            language_1.propertySetsDeclaration(generator, fragment, propertySets, true);
        } else
        {
            const fragmentFields = fields.map(field => {
                if (field.fieldName === '__typename') {
                    return Object.assign({}, field, { typeName: `"${fragment.typeCondition}"`, type: { name: `"${fragment.typeCondition}"` } });
                } else
                {
                    return field;
                }
            });
            const properties = propertiesFromFields(generator.context, fragmentFields);
            propertyDeclarations(generator, properties);
        }
    });
}
exports.typeDeclarationForFragment = typeDeclarationForFragment;
function propertiesFromFields(context, fields) {
    return fields.map(field => propertyFromField(context, field));
}
exports.propertiesFromFields = propertiesFromFields;
function propertyFromField(context, field) {
    let { name: fieldName, type: fieldType, description, fragmentSpreads, inlineFragments } = field;
    fieldName = fieldName || field.responseName;
    const propertyName = fieldName;
    let property = { fieldName, fieldType, propertyName, description };
    let isNullable = true;
    if (fieldType instanceof graphql_1.GraphQLNonNull) {
        isNullable = false;
    }
    const namedType = graphql_1.getNamedType(fieldType);
    if (graphql_1.isCompositeType(namedType)) {
        const typeName = types_1.typeNameFromGraphQLType(context, fieldType);
        let isArray = false;
        let isArrayElementNullable = null;
        if (fieldType instanceof graphql_1.GraphQLList) {
            isArray = true;
            isArrayElementNullable = !(fieldType.ofType instanceof graphql_1.GraphQLNonNull);
        } else
        if (fieldType instanceof graphql_1.GraphQLNonNull && fieldType.ofType instanceof graphql_1.GraphQLList) {
            isArray = true;
            isArrayElementNullable = !(fieldType.ofType.ofType instanceof graphql_1.GraphQLNonNull);
        }
        return Object.assign({}, property, { typeName, fields: field.fields, isComposite: true, fragmentSpreads, inlineFragments, fieldType,
            isArray, isNullable, isArrayElementNullable });
    } else
    {
        if (field.fieldName === '__typename') {
            const typeName = types_1.typeNameFromGraphQLType(context, fieldType, null, false);
            return Object.assign({}, property, { typeName, isComposite: false, fieldType, isNullable: false });
        } else
        {
            const typeName = types_1.typeNameFromGraphQLType(context, fieldType, null, isNullable);
            return Object.assign({}, property, { typeName, isComposite: false, fieldType, isNullable });
        }
    }
}
exports.propertyFromField = propertyFromField;
function propertyDeclarations(generator, properties, isInput) {
    if (!properties)
    return;
    properties.forEach(property => {
        if (graphql_1.isAbstractType(graphql_1.getNamedType(property.type || property.fieldType))) {
            const propertySets = getPossibleTypeNames(generator, property).
            map(type => {
                const inlineFragment = property.inlineFragments.find(inlineFragment => {
                    return inlineFragment.typeCondition.toString() == type;
                });
                if (inlineFragment) {
                    const fields = inlineFragment.fields.map(field => {
                        if (field.fieldName === '__typename') {
                            return Object.assign({}, field, { typeName: `"${inlineFragment.typeCondition}"`, type: { name: `"${inlineFragment.typeCondition}"` } });
                        } else
                        {
                            return field;
                        }
                    });
                    return propertiesFromFields(generator, fields);
                } else
                {
                    const fields = property.fields.map(field => {
                        if (field.fieldName === '__typename') {
                            return Object.assign({}, field, { typeName: `"${type}"`, type: { name: `"${type}"` } });
                        } else
                        {
                            return field;
                        }
                    });
                    return propertiesFromFields(generator, fields);
                }
            });
            language_1.propertySetsDeclaration(generator, property, propertySets);
        } else
        {
            if (property.fields && property.fields.length > 0 ||
            property.inlineFragments && property.inlineFragments.length > 0 ||
            property.fragmentSpreads && property.fragmentSpreads.length > 0) {
                language_1.propertyDeclaration(generator, property, () => {
                    const properties = propertiesFromFields(generator.context, property.fields);
                    propertyDeclarations(generator, properties, isInput);
                });
            } else
            {
                language_1.propertyDeclaration(generator, Object.assign({}, property, { isInput }));
            }
        }
    });
}
exports.propertyDeclarations = propertyDeclarations;
function getPossibleTypeNames(generator, property) {
    return generator.context.schema.getPossibleTypes(graphql_1.getNamedType(property.fieldType || property.type)).map(type => type.name);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,