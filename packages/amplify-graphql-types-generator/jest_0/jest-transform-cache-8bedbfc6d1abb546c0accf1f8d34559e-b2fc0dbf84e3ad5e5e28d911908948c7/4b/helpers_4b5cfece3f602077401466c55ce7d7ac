3a3b3174219a8985837720a02c10ade2
'use strict';require('ts-jest').install("/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-types-generator/src/flow-modern/__tests__/helpers.ts", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst graphql_1 = require(\"graphql\");\nconst t = require(\"babel-types\");\nconst helpers_1 = require(\"../helpers\");\nconst typeAnnotationFromGraphQLType = helpers_1.createTypeAnnotationFromGraphQLTypeFunction({\n    passthroughCustomScalars: false\n});\ndescribe('Flow typeAnnotationFromGraphQLType', () => {\n    test('String', () => {\n        expect(typeAnnotationFromGraphQLType(graphql_1.GraphQLString))\n            .toMatchObject(t.nullableTypeAnnotation(t.stringTypeAnnotation()));\n    });\n    test('Int', () => {\n        expect(typeAnnotationFromGraphQLType(graphql_1.GraphQLInt))\n            .toMatchObject(t.nullableTypeAnnotation(t.numberTypeAnnotation()));\n    });\n    test('Float', () => {\n        expect(typeAnnotationFromGraphQLType(graphql_1.GraphQLFloat))\n            .toMatchObject(t.nullableTypeAnnotation(t.numberTypeAnnotation()));\n    });\n    test('Boolean', () => {\n        expect(typeAnnotationFromGraphQLType(graphql_1.GraphQLBoolean))\n            .toMatchObject(t.nullableTypeAnnotation(t.booleanTypeAnnotation()));\n    });\n    test('ID', () => {\n        expect(typeAnnotationFromGraphQLType(graphql_1.GraphQLID))\n            .toMatchObject(t.nullableTypeAnnotation(t.stringTypeAnnotation()));\n    });\n    test('String!', () => {\n        expect(typeAnnotationFromGraphQLType(new graphql_1.GraphQLNonNull(graphql_1.GraphQLString))).toMatchObject(t.stringTypeAnnotation());\n    });\n    test('Int!', () => {\n        expect(typeAnnotationFromGraphQLType(new graphql_1.GraphQLNonNull(graphql_1.GraphQLInt))).toMatchObject(t.numberTypeAnnotation());\n    });\n    test('Float!', () => {\n        expect(typeAnnotationFromGraphQLType(new graphql_1.GraphQLNonNull(graphql_1.GraphQLFloat))).toMatchObject(t.numberTypeAnnotation());\n    });\n    test('Boolean!', () => {\n        expect(typeAnnotationFromGraphQLType(new graphql_1.GraphQLNonNull(graphql_1.GraphQLBoolean))).toMatchObject(t.booleanTypeAnnotation());\n    });\n    test('ID!', () => {\n        expect(typeAnnotationFromGraphQLType(new graphql_1.GraphQLNonNull(graphql_1.GraphQLID))).toMatchObject(t.stringTypeAnnotation());\n    });\n    test('[String]', () => {\n        expect(typeAnnotationFromGraphQLType(new graphql_1.GraphQLList(graphql_1.GraphQLString))).toMatchObject(t.nullableTypeAnnotation(t.arrayTypeAnnotation(t.nullableTypeAnnotation(t.stringTypeAnnotation()))));\n    });\n    test('[Int]', () => {\n        expect(typeAnnotationFromGraphQLType(new graphql_1.GraphQLList(graphql_1.GraphQLInt))).toMatchObject(t.nullableTypeAnnotation(t.arrayTypeAnnotation(t.nullableTypeAnnotation(t.numberTypeAnnotation()))));\n    });\n    test('[Float]', () => {\n        expect(typeAnnotationFromGraphQLType(new graphql_1.GraphQLList(graphql_1.GraphQLFloat))).toMatchObject(t.nullableTypeAnnotation(t.arrayTypeAnnotation(t.nullableTypeAnnotation(t.numberTypeAnnotation()))));\n    });\n    test('[Boolean]', () => {\n        expect(typeAnnotationFromGraphQLType(new graphql_1.GraphQLList(graphql_1.GraphQLBoolean))).toMatchObject(t.nullableTypeAnnotation(t.arrayTypeAnnotation(t.nullableTypeAnnotation(t.booleanTypeAnnotation()))));\n    });\n    test('[ID]', () => {\n        expect(typeAnnotationFromGraphQLType(new graphql_1.GraphQLList(graphql_1.GraphQLID))).toMatchObject(t.nullableTypeAnnotation(t.arrayTypeAnnotation(t.nullableTypeAnnotation(t.stringTypeAnnotation()))));\n    });\n    test('[String]!', () => {\n        expect(typeAnnotationFromGraphQLType(new graphql_1.GraphQLNonNull(new graphql_1.GraphQLList(graphql_1.GraphQLString)))).toMatchObject(t.arrayTypeAnnotation(t.nullableTypeAnnotation(t.stringTypeAnnotation())));\n    });\n    test('[Int]!', () => {\n        expect(typeAnnotationFromGraphQLType(new graphql_1.GraphQLNonNull(new graphql_1.GraphQLList(graphql_1.GraphQLInt)))).toMatchObject(t.arrayTypeAnnotation(t.nullableTypeAnnotation(t.numberTypeAnnotation())));\n    });\n    test('[Float]!', () => {\n        expect(typeAnnotationFromGraphQLType(new graphql_1.GraphQLNonNull(new graphql_1.GraphQLList(graphql_1.GraphQLFloat)))).toMatchObject(t.arrayTypeAnnotation(t.nullableTypeAnnotation(t.numberTypeAnnotation())));\n    });\n    test('[Boolean]!', () => {\n        expect(typeAnnotationFromGraphQLType(new graphql_1.GraphQLNonNull(new graphql_1.GraphQLList(graphql_1.GraphQLBoolean)))).toMatchObject(t.arrayTypeAnnotation(t.nullableTypeAnnotation(t.booleanTypeAnnotation())));\n    });\n    test('[ID]!', () => {\n        expect(typeAnnotationFromGraphQLType(new graphql_1.GraphQLNonNull(new graphql_1.GraphQLList(graphql_1.GraphQLID)))).toMatchObject(t.arrayTypeAnnotation(t.nullableTypeAnnotation(t.stringTypeAnnotation())));\n    });\n    test('[String!]', () => {\n        expect(typeAnnotationFromGraphQLType(new graphql_1.GraphQLList(new graphql_1.GraphQLNonNull(graphql_1.GraphQLString)))).toMatchObject(t.nullableTypeAnnotation(t.arrayTypeAnnotation(t.stringTypeAnnotation())));\n    });\n    test('[Int!]', () => {\n        expect(typeAnnotationFromGraphQLType(new graphql_1.GraphQLList(new graphql_1.GraphQLNonNull((graphql_1.GraphQLInt))))).toMatchObject(t.nullableTypeAnnotation(t.arrayTypeAnnotation(t.numberTypeAnnotation())));\n    });\n    test('[Float!]', () => {\n        expect(typeAnnotationFromGraphQLType(new graphql_1.GraphQLList(new graphql_1.GraphQLNonNull(graphql_1.GraphQLFloat)))).toMatchObject(t.nullableTypeAnnotation(t.arrayTypeAnnotation(t.numberTypeAnnotation())));\n    });\n    test('[Boolean!]', () => {\n        expect(typeAnnotationFromGraphQLType(new graphql_1.GraphQLList(new graphql_1.GraphQLNonNull(graphql_1.GraphQLBoolean)))).toMatchObject(t.nullableTypeAnnotation(t.arrayTypeAnnotation(t.booleanTypeAnnotation())));\n    });\n    test('[ID!]', () => {\n        expect(typeAnnotationFromGraphQLType(new graphql_1.GraphQLList(new graphql_1.GraphQLNonNull(graphql_1.GraphQLID)))).toMatchObject(t.nullableTypeAnnotation(t.arrayTypeAnnotation(t.stringTypeAnnotation())));\n    });\n    test('[String!]!', () => {\n        expect(typeAnnotationFromGraphQLType(new graphql_1.GraphQLNonNull(new graphql_1.GraphQLList(new graphql_1.GraphQLNonNull(graphql_1.GraphQLString))))).toMatchObject(t.arrayTypeAnnotation(t.stringTypeAnnotation()));\n    });\n    test('[Int!]!', () => {\n        expect(typeAnnotationFromGraphQLType(new graphql_1.GraphQLNonNull(new graphql_1.GraphQLList(new graphql_1.GraphQLNonNull(graphql_1.GraphQLInt))))).toMatchObject(t.arrayTypeAnnotation(t.numberTypeAnnotation()));\n    });\n    test('[Float!]!', () => {\n        expect(typeAnnotationFromGraphQLType(new graphql_1.GraphQLNonNull(new graphql_1.GraphQLList(new graphql_1.GraphQLNonNull(graphql_1.GraphQLFloat))))).toMatchObject(t.arrayTypeAnnotation(t.numberTypeAnnotation()));\n    });\n    test('[Boolean!]!', () => {\n        expect(typeAnnotationFromGraphQLType(new graphql_1.GraphQLNonNull(new graphql_1.GraphQLList(new graphql_1.GraphQLNonNull(graphql_1.GraphQLBoolean))))).toMatchObject(t.arrayTypeAnnotation(t.booleanTypeAnnotation()));\n    });\n    test('[ID!]!', () => {\n        expect(typeAnnotationFromGraphQLType(new graphql_1.GraphQLNonNull(new graphql_1.GraphQLList(new graphql_1.GraphQLNonNull(graphql_1.GraphQLID))))).toMatchObject(t.arrayTypeAnnotation(t.stringTypeAnnotation()));\n    });\n    test('[[String]]', () => {\n        expect(typeAnnotationFromGraphQLType(new graphql_1.GraphQLList(new graphql_1.GraphQLList(graphql_1.GraphQLString)))).toMatchObject(t.nullableTypeAnnotation(t.arrayTypeAnnotation(t.nullableTypeAnnotation(t.arrayTypeAnnotation(t.nullableTypeAnnotation(t.stringTypeAnnotation()))))));\n    });\n    test('[[String]]!', () => {\n        expect(typeAnnotationFromGraphQLType(new graphql_1.GraphQLNonNull(new graphql_1.GraphQLList(new graphql_1.GraphQLList(graphql_1.GraphQLString))))).toMatchObject(t.arrayTypeAnnotation(t.nullableTypeAnnotation(t.arrayTypeAnnotation(t.nullableTypeAnnotation(t.stringTypeAnnotation())))));\n    });\n    test('Custom Scalar', () => {\n        const OddType = new graphql_1.GraphQLScalarType({\n            name: 'Odd',\n            serialize(value) {\n                return value % 2 === 1 ? value : null;\n            }\n        });\n        expect(typeAnnotationFromGraphQLType(OddType)).toMatchObject(t.nullableTypeAnnotation(t.genericTypeAnnotation(t.identifier('Odd'))));\n    });\n});\ndescribe('passthrough custom scalars', () => {\n    let getTypeAnnotation;\n    beforeAll(() => {\n        getTypeAnnotation = helpers_1.createTypeAnnotationFromGraphQLTypeFunction({\n            passthroughCustomScalars: true\n        });\n    });\n    test('Custom Scalar', () => {\n        const OddType = new graphql_1.GraphQLScalarType({\n            name: 'Odd',\n            serialize(value) {\n                return value % 2 === 1 ? value : null;\n            }\n        });\n        expect(getTypeAnnotation(OddType)).toMatchObject(t.nullableTypeAnnotation(t.anyTypeAnnotation()));\n    });\n});\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImhlbHBlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxxQ0FTaUI7QUFFakIsaUNBQWlDO0FBRWpDLHdDQUF5RTtBQUV6RSxNQUFNLDZCQUE2QixHQUFHLHFEQUEyQyxDQUFDO0lBQ2hGLHdCQUF3QixFQUFFLEtBQUs7Q0FDaEMsQ0FBQyxDQUFDO0FBRUgsUUFBUSxDQUFDLG9DQUFvQyxFQUFFLEdBQUcsRUFBRTtJQUNsRCxJQUFJLENBQUMsUUFBUSxFQUFFLEdBQUcsRUFBRTtRQUNsQixNQUFNLENBQUMsNkJBQTZCLENBQUMsdUJBQWEsQ0FBQyxDQUFDO2FBQ2pELGFBQWEsQ0FDWixDQUFDLENBQUMsc0JBQXNCLENBQ3RCLENBQUMsQ0FBQyxvQkFBb0IsRUFBRSxDQUN6QixDQUNGLENBQUM7SUFDTixDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFO1FBQ2YsTUFBTSxDQUFDLDZCQUE2QixDQUFDLG9CQUFVLENBQUMsQ0FBQzthQUM5QyxhQUFhLENBQ1osQ0FBQyxDQUFDLHNCQUFzQixDQUN0QixDQUFDLENBQUMsb0JBQW9CLEVBQUUsQ0FDekIsQ0FDRixDQUFDO0lBQ04sQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRTtRQUNqQixNQUFNLENBQUMsNkJBQTZCLENBQUMsc0JBQVksQ0FBQyxDQUFDO2FBQ2hELGFBQWEsQ0FDWixDQUFDLENBQUMsc0JBQXNCLENBQ3RCLENBQUMsQ0FBQyxvQkFBb0IsRUFBRSxDQUN6QixDQUNGLENBQUM7SUFDTixDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxTQUFTLEVBQUUsR0FBRyxFQUFFO1FBQ25CLE1BQU0sQ0FBQyw2QkFBNkIsQ0FBQyx3QkFBYyxDQUFDLENBQUM7YUFDbEQsYUFBYSxDQUNaLENBQUMsQ0FBQyxzQkFBc0IsQ0FDdEIsQ0FBQyxD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RSxJQUFJO1NBQy9CLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLGVBQWUsRUFBRSxHQUFHLEVBQUU7UUFDekIsTUFBTSxPQUFPLEdBQUcsSUFBSSwyQkFBaUIsQ0FBQztZQUNwQyxJQUFJLEVBQUUsS0FBSztZQUNYLFNBQVMsQ0FBQyxLQUFLO2dCQUNiLE9BQU8sS0FBSyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFBO1lBQ3ZDLENBQUM7U0FDRixDQUFDLENBQUM7UUFFSCxNQUFNLENBQ0osaUJBQWlCLENBQUMsT0FBTyxDQUFDLENBQzNCLENBQUMsYUFBYSxDQUNiLENBQUMsQ0FBQyxzQkFBc0IsQ0FDdEIsQ0FBQyxDQUFDLGlCQUFpQixFQUFFLENBQ3RCLENBQ0YsQ0FBQTtJQUNILENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBHcmFwaFFMU3RyaW5nLFxuICBHcmFwaFFMSW50LFxuICBHcmFwaFFMRmxvYXQsXG4gIEdyYXBoUUxCb29sZWFuLFxuICBHcmFwaFFMSUQsXG4gIEdyYXBoUUxOb25OdWxsLFxuICBHcmFwaFFMTGlzdCxcbiAgR3JhcGhRTFNjYWxhclR5cGUsXG59IGZyb20gJ2dyYXBocWwnO1xuXG5pbXBvcnQgKiBhcyB0IGZyb20gJ2JhYmVsLXR5cGVzJztcblxuaW1wb3J0IHsgY3JlYXRlVHlwZUFubm90YXRpb25Gcm9tR3JhcGhRTFR5cGVGdW5jdGlvbiB9IGZyb20gJy4uL2hlbHBlcnMnO1xuXG5jb25zdCB0eXBlQW5ub3RhdGlvbkZyb21HcmFwaFFMVHlwZSA9IGNyZWF0ZVR5cGVBbm5vdGF0aW9uRnJvbUdyYXBoUUxUeXBlRnVuY3Rpb24oe1xuICBwYXNzdGhyb3VnaEN1c3RvbVNjYWxhcnM6IGZhbHNlXG59KTtcblxuZGVzY3JpYmUoJ0Zsb3cgdHlwZUFubm90YXRpb25Gcm9tR3JhcGhRTFR5cGUnLCAoKSA9PiB7XG4gIHRlc3QoJ1N0cmluZycsICgpID0+IHtcbiAgICBleHBlY3QodHlwZUFubm90YXRpb25Gcm9tR3JhcGhRTFR5cGUoR3JhcGhRTFN0cmluZykpXG4gICAgICAudG9NYXRjaE9iamVjdChcbiAgICAgICAgdC5udWxsYWJsZVR5cGVBbm5vdGF0aW9uKFxuICAgICAgICAgIHQuc3RyaW5nVHlwZUFubm90YXRpb24oKVxuICAgICAgICApXG4gICAgICApO1xuICB9KTtcblxuICB0ZXN0KCdJbnQnLCAoKSA9PiB7XG4gICAgZXhwZWN0KHR5cGVBbm5vdGF0aW9uRnJvbUdyYXBoUUxUeXBlKEdyYXBoUUxJbnQpKVxuICAgICAgLnRvTWF0Y2hPYmplY3QoXG4gICAgICAgIHQubnVsbGFibGVUeXBlQW5ub3RhdGlvbihcbiAgICAgICAgICB0Lm51bWJlclR5cGVBbm5vdGF0aW9uKClcbiAgICAgICAgKVxuICAgICAgKTtcbiAgfSk7XG5cbiAgdGVzdCgnRmxvYXQnLCAoKSA9PiB7XG4gICAgZXhwZWN0KHR5cGVBbm5vdGF0aW9uRnJvbUdyYXBoUUxUeXBlKEdyYXBoUUxGbG9hdCkpXG4gICAgICAudG9NYXRjaE9iamVjdChcbiAgICAgICAgdC5udWxsYWJsZVR5cGVBbm5vdGF0aW9uKFxuICAgICAgICAgIHQubnVtYmVyVHlwZUFubm90YXRpb24oKVxuICAgICAgICApXG4gICAgICApO1xuICB9KTtcblxuICB0ZXN0KCdCb29sZWFuJywgKCkgPT4ge1xuICAgIGV4cGVjdCh0eXBlQW5ub3RhdGlvbkZyb21HcmFwaFFMVHlwZShHcmFwaFFMQm9vbGVhbikpXG4gICAgICAudG9NYXRjaE9iamVjdChcbiAgICAgICAgdC5udWxsYWJsZVR5cGVBbm5vdGF0aW9uKFxuICAgICAgICAgIHQuYm9vbGVhblR5cGVBbm5vdGF0aW9uKClcbiAgICAgICAgKVxuICAgICAgKTtcbiAgfSk7XG5cbiAgdGVzdCgnSUQnLCAoKSA9PiB7XG4gICAgZXhwZWN0KHR5cGVBbm5vdGF0aW9uRnJvbUdyYXBoUUxUeXBlKEdyYXBoUUxJRCkpXG4gICAgICAudG9NYXRjaE9iamVjdChcbiAgICAgICAgdC5udWxsYWJsZVR5cGVBbm5vdGF0aW9uKFxuICAgICAgICAgIHQuc3RyaW5nVHlwZUFubm90YXRpb24oKVxuICAgICAgICApXG4gICAgICApO1xuICB9KTtcblxuICB0ZXN0KCdTdHJpbmchJywgKCkgPT4ge1xuICAgIGV4cGVjdChcbiAgICAgIHR5cGVBbm5vdGF0aW9uRnJvbUdyYXBoUUxUeXBlKG5ldyBHcmFwaFFMTm9uTnVsbChHcmFwaFFMU3RyaW5nKSlcbiAgICApLnRvTWF0Y2hPYmplY3QodC5zdHJpbmdUeXBlQW5ub3RhdGlvbigpKTtcbiAgfSk7XG5cbiAgdGVzdCgnSW50IScsICgpID0+IHtcbiAgICBleHBlY3QoXG4gICAgICB0eXBlQW5ub3RhdGlvbkZyb21HcmFwaFFMVHlwZShuZXcgR3JhcGhRTE5vbk51bGwoR3JhcGhRTEludCkpXG4gICAgKS50b01hdGNoT2JqZWN0KHQubnVtYmVyVHlwZUFubm90YXRpb24oKSk7XG4gIH0pO1xuXG4gIHRlc3QoJ0Zsb2F0IScsICgpID0+IHtcbiAgICBleHBlY3QoXG4gICAgICB0eXBlQW5ub3RhdGlvbkZyb21HcmFwaFFMVHlwZShuZXcgR3JhcGhRTE5vbk51bGwoR3JhcGhRTEZsb2F0KSlcbiAgICApLnRvTWF0Y2hPYmplY3QodC5udW1iZXJUeXBlQW5ub3RhdGlvbigpKTtcbiAgfSk7XG5cbiAgdGVzdCgnQm9vbGVhbiEnLCAoKSA9PiB7XG4gICAgZXhwZWN0KFxuICAgICAgdHlwZUFubm90YXRpb25Gcm9tR3JhcGhRTFR5cGUobmV3IEdyYXBoUUxOb25OdWxsKEdyYXBoUUxCb29sZWFuKSlcbiAgICApLnRvTWF0Y2hPYmplY3QodC5ib29sZWFuVHlwZUFubm90YXRpb24oKSk7XG4gIH0pO1xuXG4gIHRlc3QoJ0lEIScsICgpID0+IHtcbiAgICBleHBlY3QoXG4gICAgICB0eXBlQW5ub3RhdGlvbkZyb21HcmFwaFFMVHlwZShuZXcgR3JhcGhRTE5vbk51bGwoR3JhcGhRTElEKSlcbiAgICApLnRvTWF0Y2hPYmplY3QodC5zdHJpbmdUeXBlQW5ub3RhdGlvbigpKTtcbiAgfSk7XG5cbiAgLy8gVE9ETzogVGVzdCBHZW5lcmljVHlwZUFubm90YXRpb25cblxuICB0ZXN0KCdbU3RyaW5nXScsICgpID0+IHtcbiAgICBleHBlY3QoXG4gICAgICB0eXBlQW5ub3RhdGlvbkZyb21HcmFwaFFMVHlwZShuZXcgR3JhcGhRTExpc3QoR3JhcGhRTFN0cmluZykpXG4gICAgKS50b01hdGNoT2JqZWN0KFxuICAgICAgICB0Lm51bGxhYmxlVHlwZUFubm90YXRpb24oXG4gICAgICAgICAgdC5hcnJheVR5cGVBbm5vdGF0aW9uKFxuICAgICAgICAgICAgdC5udWxsYWJsZVR5cGVBbm5vdGF0aW9uKFxuICAgICAgICAgICAgICB0LnN0cmluZ1R5cGVBbm5vdGF0aW9uKClcbiAgICAgICAgICAgIClcbiAgICAgICAgICApXG4gICAgICAgIClcbiAgICAgIClcbiAgfSk7XG5cbiAgdGVzdCgnW0ludF0nLCAoKSA9PiB7XG4gICAgZXhwZWN0KFxuICAgICAgdHlwZUFubm90YXRpb25Gcm9tR3JhcGhRTFR5cGUobmV3IEdyYXBoUUxMaXN0KEdyYXBoUUxJbnQpKVxuICAgICkudG9NYXRjaE9iamVjdChcbiAgICAgICAgdC5udWxsYWJsZVR5cGVBbm5vdGF0aW9uKFxuICAgICAgICAgIHQuYXJyYXlUeXBlQW5ub3RhdGlvbihcbiAgICAgICAgICAgIHQubnVsbGFibGVUeXBlQW5ub3RhdGlvbihcbiAgICAgICAgICAgICAgdC5udW1iZXJUeXBlQW5ub3RhdGlvbigpXG4gICAgICAgICAgICApXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICApXG4gIH0pO1xuXG4gIHRlc3QoJ1tGbG9hdF0nLCAoKSA9PiB7XG4gICAgZXhwZWN0KFxuICAgICAgdHlwZUFubm90YXRpb25Gcm9tR3JhcGhRTFR5cGUobmV3IEdyYXBoUUxMaXN0KEdyYXBoUUxGbG9hdCkpXG4gICAgKS50b01hdGNoT2JqZWN0KFxuICAgICAgICB0Lm51bGxhYmxlVHlwZUFubm90YXRpb24oXG4gICAgICAgICAgdC5hcnJheVR5cGVBbm5vdGF0aW9uKFxuICAgICAgICAgICAgdC5udWxsYWJsZVR5cGVBbm5vdGF0aW9uKFxuICAgICAgICAgICAgICB0Lm51bWJlclR5cGVBbm5vdGF0aW9uKClcbiAgICAgICAgICAgIClcbiAgICAgICAgICApXG4gICAgICAgIClcbiAgICAgIClcbiAgfSk7XG5cbiAgdGVzdCgnW0Jvb2xlYW5dJywgKCkgPT4ge1xuICAgIGV4cGVjdChcbiAgICAgIHR5cGVBbm5vdGF0aW9uRnJvbUdyYXBoUUxUeXBlKG5ldyBHcmFwaFFMTGlzdChHcmFwaFFMQm9vbGVhbikpXG4gICAgKS50b01hdGNoT2JqZWN0KFxuICAgICAgICB0Lm51bGxhYmxlVHlwZUFubm90YXRpb24oXG4gICAgICAgICAgdC5hcnJheVR5cGVBbm5vdGF0aW9uKFxuICAgICAgICAgICAgdC5udWxsYWJsZVR5cGVBbm5vdGF0aW9uKFxuICAgICAgICAgICAgICB0LmJvb2xlYW5UeXBlQW5ub3RhdGlvbigpXG4gICAgICAgICAgICApXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICApXG4gIH0pO1xuXG4gIHRlc3QoJ1tJRF0nLCAoKSA9PiB7XG4gICAgZXhwZWN0KFxuICAgICAgdHlwZUFubm90YXRpb25Gcm9tR3JhcGhRTFR5cGUobmV3IEdyYXBoUUxMaXN0KEdyYXBoUUxJRCkpXG4gICAgKS50b01hdGNoT2JqZWN0KFxuICAgICAgICB0Lm51bGxhYmxlVHlwZUFubm90YXRpb24oXG4gICAgICAgICAgdC5hcnJheVR5cGVBbm5vdGF0aW9uKFxuICAgICAgICAgICAgdC5udWxsYWJsZVR5cGVBbm5vdGF0aW9uKFxuICAgICAgICAgICAgICB0LnN0cmluZ1R5cGVBbm5vdGF0aW9uKClcbiAgICAgICAgICAgIClcbiAgICAgICAgICApXG4gICAgICAgIClcbiAgICAgIClcbiAgfSlcblxuICB0ZXN0KCdbU3RyaW5nXSEnLCAoKSA9PiB7XG4gICAgZXhwZWN0KFxuICAgICAgdHlwZUFubm90YXRpb25Gcm9tR3JhcGhRTFR5cGUobmV3IEdyYXBoUUxOb25OdWxsKG5ldyBHcmFwaFFMTGlzdChHcmFwaFFMU3RyaW5nKSkpXG4gICAgKS50b01hdGNoT2JqZWN0KFxuICAgICAgICB0LmFycmF5VHlwZUFubm90YXRpb24oXG4gICAgICAgICAgdC5udWxsYWJsZVR5cGVBbm5vdGF0aW9uKFxuICAgICAgICAgICAgdC5zdHJpbmdUeXBlQW5ub3RhdGlvbigpXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICApXG4gIH0pO1xuXG4gIHRlc3QoJ1tJbnRdIScsICgpID0+IHtcbiAgICBleHBlY3QoXG4gICAgICB0eXBlQW5ub3RhdGlvbkZyb21HcmFwaFFMVHlwZShuZXcgR3JhcGhRTE5vbk51bGwobmV3IEdyYXBoUUxMaXN0KEdyYXBoUUxJbnQpKSlcbiAgICApLnRvTWF0Y2hPYmplY3QoXG4gICAgICAgIHQuYXJyYXlUeXBlQW5ub3RhdGlvbihcbiAgICAgICAgICB0Lm51bGxhYmxlVHlwZUFubm90YXRpb24oXG4gICAgICAgICAgICB0Lm51bWJlclR5cGVBbm5vdGF0aW9uKClcbiAgICAgICAgICApXG4gICAgICAgIClcbiAgICAgIClcbiAgfSk7XG4gIHRlc3QoJ1tGbG9hdF0hJywgKCkgPT4ge1xuICAgIGV4cGVjdChcbiAgICAgIHR5cGVBbm5vdGF0aW9uRnJvbUdyYXBoUUxUeXBlKG5ldyBHcmFwaFFMTm9uTnVsbChuZXcgR3JhcGhRTExpc3QoR3JhcGhRTEZsb2F0KSkpXG4gICAgKS50b01hdGNoT2JqZWN0KFxuICAgICAgICB0LmFycmF5VHlwZUFubm90YXRpb24oXG4gICAgICAgICAgdC5udWxsYWJsZVR5cGVBbm5vdGF0aW9uKFxuICAgICAgICAgICAgdC5udW1iZXJUeXBlQW5ub3RhdGlvbigpXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICApXG4gIH0pO1xuXG4gIHRlc3QoJ1tCb29sZWFuXSEnLCAoKSA9PiB7XG4gICAgZXhwZWN0KFxuICAgICAgdHlwZUFubm90YXRpb25Gcm9tR3JhcGhRTFR5cGUobmV3IEdyYXBoUUxOb25OdWxsKG5ldyBHcmFwaFFMTGlzdChHcmFwaFFMQm9vbGVhbikpKVxuICAgICkudG9NYXRjaE9iamVjdChcbiAgICAgICAgdC5hcnJheVR5cGVBbm5vdGF0aW9uKFxuICAgICAgICAgIHQubnVsbGFibGVUeXBlQW5ub3RhdGlvbihcbiAgICAgICAgICAgIHQuYm9vbGVhblR5cGVBbm5vdGF0aW9uKClcbiAgICAgICAgICApXG4gICAgICAgIClcbiAgICAgIClcbiAgfSk7XG5cbiAgdGVzdCgnW0lEXSEnLCAoKSA9PiB7XG4gICAgZXhwZWN0KFxuICAgICAgdHlwZUFubm90YXRpb25Gcm9tR3JhcGhRTFR5cGUobmV3IEdyYXBoUUxOb25OdWxsKG5ldyBHcmFwaFFMTGlzdChHcmFwaFFMSUQpKSlcbiAgICApLnRvTWF0Y2hPYmplY3QoXG4gICAgICAgIHQuYXJyYXlUeXBlQW5ub3RhdGlvbihcbiAgICAgICAgICB0Lm51bGxhYmxlVHlwZUFubm90YXRpb24oXG4gICAgICAgICAgICB0LnN0cmluZ1R5cGVBbm5vdGF0aW9uKClcbiAgICAgICAgICApXG4gICAgICAgIClcbiAgICAgIClcbiAgfSk7XG5cbiAgdGVzdCgnW1N0cmluZyFdJywgKCkgPT4ge1xuICAgIGV4cGVjdChcbiAgICAgIHR5cGVBbm5vdGF0aW9uRnJvbUdyYXBoUUxUeXBlKG5ldyBHcmFwaFFMTGlzdChuZXcgR3JhcGhRTE5vbk51bGwoR3JhcGhRTFN0cmluZykpKVxuICAgICkudG9NYXRjaE9iamVjdChcbiAgICAgIHQubnVsbGFibGVUeXBlQW5ub3RhdGlvbihcbiAgICAgICAgICB0LmFycmF5VHlwZUFubm90YXRpb24oXG4gICAgICAgICAgICB0LnN0cmluZ1R5cGVBbm5vdGF0aW9uKClcbiAgICAgICAgICApXG4gICAgICAgIClcbiAgICAgIClcbiAgfSk7XG5cbiAgdGVzdCgnW0ludCFdJywgKCkgPT4ge1xuICAgIGV4cGVjdChcbiAgICAgIHR5cGVBbm5vdGF0aW9uRnJvbUdyYXBoUUxUeXBlKG5ldyBHcmFwaFFMTGlzdChuZXcgR3JhcGhRTE5vbk51bGwoKEdyYXBoUUxJbnQpKSkpXG4gICAgKS50b01hdGNoT2JqZWN0KFxuICAgICAgdC5udWxsYWJsZVR5cGVBbm5vdGF0aW9uKFxuICAgICAgICAgIHQuYXJyYXlUeXBlQW5ub3RhdGlvbihcbiAgICAgICAgICAgIHQubnVtYmVyVHlwZUFubm90YXRpb24oKVxuICAgICAgICAgIClcbiAgICAgICAgKVxuICAgICAgKVxuICB9KVxuXG4gIHRlc3QoJ1tGbG9hdCFdJywgKCkgPT4ge1xuICAgIGV4cGVjdChcbiAgICAgIHR5cGVBbm5vdGF0aW9uRnJvbUdyYXBoUUxUeXBlKG5ldyBHcmFwaFFMTGlzdChuZXcgR3JhcGhRTE5vbk51bGwoR3JhcGhRTEZsb2F0KSkpXG4gICAgKS50b01hdGNoT2JqZWN0KFxuICAgICAgICB0Lm51bGxhYmxlVHlwZUFubm90YXRpb24oXG4gICAgICAgICAgdC5hcnJheVR5cGVBbm5vdGF0aW9uKFxuICAgICAgICAgICAgdC5udW1iZXJUeXBlQW5ub3RhdGlvbigpXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICApXG4gIH0pO1xuXG4gIHRlc3QoJ1tCb29sZWFuIV0nLCAoKSA9PiB7XG4gICAgZXhwZWN0KFxuICAgICAgdHlwZUFubm90YXRpb25Gcm9tR3JhcGhRTFR5cGUobmV3IEdyYXBoUUxMaXN0KG5ldyBHcmFwaFFMTm9uTnVsbChHcmFwaFFMQm9vbGVhbikpKVxuICAgICkudG9NYXRjaE9iamVjdChcbiAgICAgICAgdC5udWxsYWJsZVR5cGVBbm5vdGF0aW9uKFxuICAgICAgICAgIHQuYXJyYXlUeXBlQW5ub3RhdGlvbihcbiAgICAgICAgICAgIHQuYm9vbGVhblR5cGVBbm5vdGF0aW9uKClcbiAgICAgICAgICApXG4gICAgICAgIClcbiAgICAgIClcbiAgfSk7XG5cbiAgdGVzdCgnW0lEIV0nLCAoKSA9PiB7XG4gICAgZXhwZWN0KFxuICAgICAgdHlwZUFubm90YXRpb25Gcm9tR3JhcGhRTFR5cGUobmV3IEdyYXBoUUxMaXN0KG5ldyBHcmFwaFFMTm9uTnVsbChHcmFwaFFMSUQpKSlcbiAgICApLnRvTWF0Y2hPYmplY3QoXG4gICAgICAgIHQubnVsbGFibGVUeXBlQW5ub3RhdGlvbihcbiAgICAgICAgICB0LmFycmF5VHlwZUFubm90YXRpb24oXG4gICAgICAgICAgICB0LnN0cmluZ1R5cGVBbm5vdGF0aW9uKClcbiAgICAgICAgICApXG4gICAgICAgIClcbiAgICAgIClcbiAgfSk7XG5cbiAgdGVzdCgnW1N0cmluZyFdIScsICgpID0+IHtcbiAgICBleHBlY3QoXG4gICAgICB0eXBlQW5ub3RhdGlvbkZyb21HcmFwaFFMVHlwZShuZXcgR3JhcGhRTE5vbk51bGwobmV3IEdyYXBoUUxMaXN0KG5ldyBHcmFwaFFMTm9uTnVsbChHcmFwaFFMU3RyaW5nKSkpKVxuICAgICkudG9NYXRjaE9iamVjdChcbiAgICAgICAgdC5hcnJheVR5cGVBbm5vdGF0aW9uKFxuICAgICAgICAgIHQuc3RyaW5nVHlwZUFubm90YXRpb24oKVxuICAgICAgICApXG4gICAgICApXG4gIH0pO1xuXG4gIHRlc3QoJ1tJbnQhXSEnLCAoKSA9PiB7XG4gICAgZXhwZWN0KFxuICAgICAgdHlwZUFubm90YXRpb25Gcm9tR3JhcGhRTFR5cGUobmV3IEdyYXBoUUxOb25OdWxsKG5ldyBHcmFwaFFMTGlzdChuZXcgR3JhcGhRTE5vbk51bGwoR3JhcGhRTEludCkpKSlcbiAgICApLnRvTWF0Y2hPYmplY3QoXG4gICAgICAgIHQuYXJyYXlUeXBlQW5ub3RhdGlvbihcbiAgICAgICAgICB0Lm51bWJlclR5cGVBbm5vdGF0aW9uKClcbiAgICAgICAgKVxuICAgICAgKVxuICB9KTtcblxuICB0ZXN0KCdbRmxvYXQhXSEnLCAoKSA9PiB7XG4gICAgZXhwZWN0KFxuICAgICAgdHlwZUFubm90YXRpb25Gcm9tR3JhcGhRTFR5cGUobmV3IEdyYXBoUUxOb25OdWxsKG5ldyBHcmFwaFFMTGlzdChuZXcgR3JhcGhRTE5vbk51bGwoR3JhcGhRTEZsb2F0KSkpKVxuICAgICkudG9NYXRjaE9iamVjdChcbiAgICAgICAgdC5hcnJheVR5cGVBbm5vdGF0aW9uKFxuICAgICAgICAgIHQubnVtYmVyVHlwZUFubm90YXRpb24oKVxuICAgICAgICApXG4gICAgICApXG4gIH0pO1xuXG4gIHRlc3QoJ1tCb29sZWFuIV0hJywgKCkgPT4ge1xuICAgIGV4cGVjdChcbiAgICAgIHR5cGVBbm5vdGF0aW9uRnJvbUdyYXBoUUxUeXBlKG5ldyBHcmFwaFFMTm9uTnVsbChuZXcgR3JhcGhRTExpc3QobmV3IEdyYXBoUUxOb25OdWxsKEdyYXBoUUxCb29sZWFuKSkpKVxuICAgICkudG9NYXRjaE9iamVjdChcbiAgICAgICAgdC5hcnJheVR5cGVBbm5vdGF0aW9uKFxuICAgICAgICAgIHQuYm9vbGVhblR5cGVBbm5vdGF0aW9uKClcbiAgICAgICAgKVxuICAgICAgKVxuICB9KTtcblxuICB0ZXN0KCdbSUQhXSEnLCAoKSA9PiB7XG4gICAgZXhwZWN0KFxuICAgICAgdHlwZUFubm90YXRpb25Gcm9tR3JhcGhRTFR5cGUobmV3IEdyYXBoUUxOb25OdWxsKG5ldyBHcmFwaFFMTGlzdChuZXcgR3JhcGhRTE5vbk51bGwoR3JhcGhRTElEKSkpKVxuICAgICkudG9NYXRjaE9iamVjdChcbiAgICAgICAgdC5hcnJheVR5cGVBbm5vdGF0aW9uKFxuICAgICAgICAgIHQuc3RyaW5nVHlwZUFubm90YXRpb24oKVxuICAgICAgICApXG4gICAgICApXG4gIH0pO1xuXG4gIHRlc3QoJ1tbU3RyaW5nXV0nLCAoKSA9PiB7XG4gICAgZXhwZWN0KFxuICAgICAgdHlwZUFubm90YXRpb25Gcm9tR3JhcGhRTFR5cGUobmV3IEdyYXBoUUxMaXN0KG5ldyBHcmFwaFFMTGlzdChHcmFwaFFMU3RyaW5nKSkpXG4gICAgKS50b01hdGNoT2JqZWN0KFxuICAgICAgICB0Lm51bGxhYmxlVHlwZUFubm90YXRpb24oXG4gICAgICAgICAgdC5hcnJheVR5cGVBbm5vdGF0aW9uKFxuICAgICAgICAgICAgdC5udWxsYWJsZVR5cGVBbm5vdGF0aW9uKFxuICAgICAgICAgICAgICB0LmFycmF5VHlwZUFubm90YXRpb24oXG4gICAgICAgICAgICAgICAgdC5udWxsYWJsZVR5cGVBbm5vdGF0aW9uKFxuICAgICAgICAgICAgICAgICAgdC5zdHJpbmdUeXBlQW5ub3RhdGlvbigpXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICApXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICApXG4gIH0pO1xuXG4gIHRlc3QoJ1tbU3RyaW5nXV0hJywgKCkgPT4ge1xuICAgIGV4cGVjdChcbiAgICAgIHR5cGVBbm5vdGF0aW9uRnJvbUdyYXBoUUxUeXBlKG5ldyBHcmFwaFFMTm9uTnVsbChuZXcgR3JhcGhRTExpc3QobmV3IEdyYXBoUUxMaXN0KEdyYXBoUUxTdHJpbmcpKSkpXG4gICAgKS50b01hdGNoT2JqZWN0KFxuICAgICAgICB0LmFycmF5VHlwZUFubm90YXRpb24oXG4gICAgICAgICAgdC5udWxsYWJsZVR5cGVBbm5vdGF0aW9uKFxuICAgICAgICAgICAgdC5hcnJheVR5cGVBbm5vdGF0aW9uKFxuICAgICAgICAgICAgICB0Lm51bGxhYmxlVHlwZUFubm90YXRpb24oXG4gICAgICAgICAgICAgICAgdC5zdHJpbmdUeXBlQW5ub3RhdGlvbigpXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIClcbiAgICAgICAgICApXG4gICAgICAgIClcbiAgICAgIClcbiAgfSk7XG5cbiAgdGVzdCgnQ3VzdG9tIFNjYWxhcicsICgpID0+IHtcbiAgICBjb25zdCBPZGRUeXBlID0gbmV3IEdyYXBoUUxTY2FsYXJUeXBlKHtcbiAgICAgIG5hbWU6ICdPZGQnLFxuICAgICAgc2VyaWFsaXplKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSAlIDIgPT09IDEgPyB2YWx1ZSA6IG51bGxcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGV4cGVjdChcbiAgICAgIHR5cGVBbm5vdGF0aW9uRnJvbUdyYXBoUUxUeXBlKE9kZFR5cGUpXG4gICAgKS50b01hdGNoT2JqZWN0KFxuICAgICAgdC5udWxsYWJsZVR5cGVBbm5vdGF0aW9uKFxuICAgICAgICB0LmdlbmVyaWNUeXBlQW5ub3RhdGlvbih0LmlkZW50aWZpZXIoJ09kZCcpKVxuICAgICAgKVxuICAgIClcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ3Bhc3N0aHJvdWdoIGN1c3RvbSBzY2FsYXJzJywgKCkgPT4ge1xuICBsZXQgZ2V0VHlwZUFubm90YXRpb246IEZ1bmN0aW9uO1xuXG4gIGJlZm9yZUFsbCgoKSA9PiB7XG4gICAgZ2V0VHlwZUFubm90YXRpb24gPSBjcmVhdGVUeXBlQW5ub3RhdGlvbkZyb21HcmFwaFFMVHlwZUZ1bmN0aW9uKHtcbiAgICAgIHBhc3N0aHJvdWdoQ3VzdG9tU2NhbGFyczogdHJ1ZVxuICAgIH0pO1xuICB9KTtcblxuICB0ZXN0KCdDdXN0b20gU2NhbGFyJywgKCkgPT4ge1xuICAgIGNvbnN0IE9kZFR5cGUgPSBuZXcgR3JhcGhRTFNjYWxhclR5cGUoe1xuICAgICAgbmFtZTogJ09kZCcsXG4gICAgICBzZXJpYWxpemUodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlICUgMiA9PT0gMSA/IHZhbHVlIDogbnVsbFxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgZXhwZWN0KFxuICAgICAgZ2V0VHlwZUFubm90YXRpb24oT2RkVHlwZSlcbiAgICApLnRvTWF0Y2hPYmplY3QoXG4gICAgICB0Lm51bGxhYmxlVHlwZUFubm90YXRpb24oXG4gICAgICAgIHQuYW55VHlwZUFubm90YXRpb24oKVxuICAgICAgKVxuICAgIClcbiAgfSk7XG59KTtcbiJdfQ==");"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = require("graphql");
const t = require("babel-types");
const helpers_1 = require("../helpers");
const typeAnnotationFromGraphQLType = helpers_1.createTypeAnnotationFromGraphQLTypeFunction({
    passthroughCustomScalars: false });

describe('Flow typeAnnotationFromGraphQLType', () => {
    test('String', () => {
        expect(typeAnnotationFromGraphQLType(graphql_1.GraphQLString)).
        toMatchObject(t.nullableTypeAnnotation(t.stringTypeAnnotation()));
    });
    test('Int', () => {
        expect(typeAnnotationFromGraphQLType(graphql_1.GraphQLInt)).
        toMatchObject(t.nullableTypeAnnotation(t.numberTypeAnnotation()));
    });
    test('Float', () => {
        expect(typeAnnotationFromGraphQLType(graphql_1.GraphQLFloat)).
        toMatchObject(t.nullableTypeAnnotation(t.numberTypeAnnotation()));
    });
    test('Boolean', () => {
        expect(typeAnnotationFromGraphQLType(graphql_1.GraphQLBoolean)).
        toMatchObject(t.nullableTypeAnnotation(t.booleanTypeAnnotation()));
    });
    test('ID', () => {
        expect(typeAnnotationFromGraphQLType(graphql_1.GraphQLID)).
        toMatchObject(t.nullableTypeAnnotation(t.stringTypeAnnotation()));
    });
    test('String!', () => {
        expect(typeAnnotationFromGraphQLType(new graphql_1.GraphQLNonNull(graphql_1.GraphQLString))).toMatchObject(t.stringTypeAnnotation());
    });
    test('Int!', () => {
        expect(typeAnnotationFromGraphQLType(new graphql_1.GraphQLNonNull(graphql_1.GraphQLInt))).toMatchObject(t.numberTypeAnnotation());
    });
    test('Float!', () => {
        expect(typeAnnotationFromGraphQLType(new graphql_1.GraphQLNonNull(graphql_1.GraphQLFloat))).toMatchObject(t.numberTypeAnnotation());
    });
    test('Boolean!', () => {
        expect(typeAnnotationFromGraphQLType(new graphql_1.GraphQLNonNull(graphql_1.GraphQLBoolean))).toMatchObject(t.booleanTypeAnnotation());
    });
    test('ID!', () => {
        expect(typeAnnotationFromGraphQLType(new graphql_1.GraphQLNonNull(graphql_1.GraphQLID))).toMatchObject(t.stringTypeAnnotation());
    });
    test('[String]', () => {
        expect(typeAnnotationFromGraphQLType(new graphql_1.GraphQLList(graphql_1.GraphQLString))).toMatchObject(t.nullableTypeAnnotation(t.arrayTypeAnnotation(t.nullableTypeAnnotation(t.stringTypeAnnotation()))));
    });
    test('[Int]', () => {
        expect(typeAnnotationFromGraphQLType(new graphql_1.GraphQLList(graphql_1.GraphQLInt))).toMatchObject(t.nullableTypeAnnotation(t.arrayTypeAnnotation(t.nullableTypeAnnotation(t.numberTypeAnnotation()))));
    });
    test('[Float]', () => {
        expect(typeAnnotationFromGraphQLType(new graphql_1.GraphQLList(graphql_1.GraphQLFloat))).toMatchObject(t.nullableTypeAnnotation(t.arrayTypeAnnotation(t.nullableTypeAnnotation(t.numberTypeAnnotation()))));
    });
    test('[Boolean]', () => {
        expect(typeAnnotationFromGraphQLType(new graphql_1.GraphQLList(graphql_1.GraphQLBoolean))).toMatchObject(t.nullableTypeAnnotation(t.arrayTypeAnnotation(t.nullableTypeAnnotation(t.booleanTypeAnnotation()))));
    });
    test('[ID]', () => {
        expect(typeAnnotationFromGraphQLType(new graphql_1.GraphQLList(graphql_1.GraphQLID))).toMatchObject(t.nullableTypeAnnotation(t.arrayTypeAnnotation(t.nullableTypeAnnotation(t.stringTypeAnnotation()))));
    });
    test('[String]!', () => {
        expect(typeAnnotationFromGraphQLType(new graphql_1.GraphQLNonNull(new graphql_1.GraphQLList(graphql_1.GraphQLString)))).toMatchObject(t.arrayTypeAnnotation(t.nullableTypeAnnotation(t.stringTypeAnnotation())));
    });
    test('[Int]!', () => {
        expect(typeAnnotationFromGraphQLType(new graphql_1.GraphQLNonNull(new graphql_1.GraphQLList(graphql_1.GraphQLInt)))).toMatchObject(t.arrayTypeAnnotation(t.nullableTypeAnnotation(t.numberTypeAnnotation())));
    });
    test('[Float]!', () => {
        expect(typeAnnotationFromGraphQLType(new graphql_1.GraphQLNonNull(new graphql_1.GraphQLList(graphql_1.GraphQLFloat)))).toMatchObject(t.arrayTypeAnnotation(t.nullableTypeAnnotation(t.numberTypeAnnotation())));
    });
    test('[Boolean]!', () => {
        expect(typeAnnotationFromGraphQLType(new graphql_1.GraphQLNonNull(new graphql_1.GraphQLList(graphql_1.GraphQLBoolean)))).toMatchObject(t.arrayTypeAnnotation(t.nullableTypeAnnotation(t.booleanTypeAnnotation())));
    });
    test('[ID]!', () => {
        expect(typeAnnotationFromGraphQLType(new graphql_1.GraphQLNonNull(new graphql_1.GraphQLList(graphql_1.GraphQLID)))).toMatchObject(t.arrayTypeAnnotation(t.nullableTypeAnnotation(t.stringTypeAnnotation())));
    });
    test('[String!]', () => {
        expect(typeAnnotationFromGraphQLType(new graphql_1.GraphQLList(new graphql_1.GraphQLNonNull(graphql_1.GraphQLString)))).toMatchObject(t.nullableTypeAnnotation(t.arrayTypeAnnotation(t.stringTypeAnnotation())));
    });
    test('[Int!]', () => {
        expect(typeAnnotationFromGraphQLType(new graphql_1.GraphQLList(new graphql_1.GraphQLNonNull(graphql_1.GraphQLInt)))).toMatchObject(t.nullableTypeAnnotation(t.arrayTypeAnnotation(t.numberTypeAnnotation())));
    });
    test('[Float!]', () => {
        expect(typeAnnotationFromGraphQLType(new graphql_1.GraphQLList(new graphql_1.GraphQLNonNull(graphql_1.GraphQLFloat)))).toMatchObject(t.nullableTypeAnnotation(t.arrayTypeAnnotation(t.numberTypeAnnotation())));
    });
    test('[Boolean!]', () => {
        expect(typeAnnotationFromGraphQLType(new graphql_1.GraphQLList(new graphql_1.GraphQLNonNull(graphql_1.GraphQLBoolean)))).toMatchObject(t.nullableTypeAnnotation(t.arrayTypeAnnotation(t.booleanTypeAnnotation())));
    });
    test('[ID!]', () => {
        expect(typeAnnotationFromGraphQLType(new graphql_1.GraphQLList(new graphql_1.GraphQLNonNull(graphql_1.GraphQLID)))).toMatchObject(t.nullableTypeAnnotation(t.arrayTypeAnnotation(t.stringTypeAnnotation())));
    });
    test('[String!]!', () => {
        expect(typeAnnotationFromGraphQLType(new graphql_1.GraphQLNonNull(new graphql_1.GraphQLList(new graphql_1.GraphQLNonNull(graphql_1.GraphQLString))))).toMatchObject(t.arrayTypeAnnotation(t.stringTypeAnnotation()));
    });
    test('[Int!]!', () => {
        expect(typeAnnotationFromGraphQLType(new graphql_1.GraphQLNonNull(new graphql_1.GraphQLList(new graphql_1.GraphQLNonNull(graphql_1.GraphQLInt))))).toMatchObject(t.arrayTypeAnnotation(t.numberTypeAnnotation()));
    });
    test('[Float!]!', () => {
        expect(typeAnnotationFromGraphQLType(new graphql_1.GraphQLNonNull(new graphql_1.GraphQLList(new graphql_1.GraphQLNonNull(graphql_1.GraphQLFloat))))).toMatchObject(t.arrayTypeAnnotation(t.numberTypeAnnotation()));
    });
    test('[Boolean!]!', () => {
        expect(typeAnnotationFromGraphQLType(new graphql_1.GraphQLNonNull(new graphql_1.GraphQLList(new graphql_1.GraphQLNonNull(graphql_1.GraphQLBoolean))))).toMatchObject(t.arrayTypeAnnotation(t.booleanTypeAnnotation()));
    });
    test('[ID!]!', () => {
        expect(typeAnnotationFromGraphQLType(new graphql_1.GraphQLNonNull(new graphql_1.GraphQLList(new graphql_1.GraphQLNonNull(graphql_1.GraphQLID))))).toMatchObject(t.arrayTypeAnnotation(t.stringTypeAnnotation()));
    });
    test('[[String]]', () => {
        expect(typeAnnotationFromGraphQLType(new graphql_1.GraphQLList(new graphql_1.GraphQLList(graphql_1.GraphQLString)))).toMatchObject(t.nullableTypeAnnotation(t.arrayTypeAnnotation(t.nullableTypeAnnotation(t.arrayTypeAnnotation(t.nullableTypeAnnotation(t.stringTypeAnnotation()))))));
    });
    test('[[String]]!', () => {
        expect(typeAnnotationFromGraphQLType(new graphql_1.GraphQLNonNull(new graphql_1.GraphQLList(new graphql_1.GraphQLList(graphql_1.GraphQLString))))).toMatchObject(t.arrayTypeAnnotation(t.nullableTypeAnnotation(t.arrayTypeAnnotation(t.nullableTypeAnnotation(t.stringTypeAnnotation())))));
    });
    test('Custom Scalar', () => {
        const OddType = new graphql_1.GraphQLScalarType({
            name: 'Odd',
            serialize(value) {
                return value % 2 === 1 ? value : null;
            } });

        expect(typeAnnotationFromGraphQLType(OddType)).toMatchObject(t.nullableTypeAnnotation(t.genericTypeAnnotation(t.identifier('Odd'))));
    });
});
describe('passthrough custom scalars', () => {
    let getTypeAnnotation;
    beforeAll(() => {
        getTypeAnnotation = helpers_1.createTypeAnnotationFromGraphQLTypeFunction({
            passthroughCustomScalars: true });

    });
    test('Custom Scalar', () => {
        const OddType = new graphql_1.GraphQLScalarType({
            name: 'Odd',
            serialize(value) {
                return value % 2 === 1 ? value : null;
            } });

        expect(getTypeAnnotation(OddType)).toMatchObject(t.nullableTypeAnnotation(t.anyTypeAnnotation()));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,