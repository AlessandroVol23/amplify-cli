{"version":3,"sources":["helpers.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  GraphQLString,\n  GraphQLInt,\n  GraphQLFloat,\n  GraphQLBoolean,\n  GraphQLID,\n  GraphQLNonNull,\n  GraphQLList,\n  GraphQLScalarType,\n} from 'graphql';\n\nimport * as t from 'babel-types';\n\nimport { createTypeAnnotationFromGraphQLTypeFunction } from '../helpers';\n\nconst typeAnnotationFromGraphQLType = createTypeAnnotationFromGraphQLTypeFunction({\n  passthroughCustomScalars: false\n});\n\ndescribe('Flow typeAnnotationFromGraphQLType', () => {\n  test('String', () => {\n    expect(typeAnnotationFromGraphQLType(GraphQLString))\n      .toMatchObject(\n        t.nullableTypeAnnotation(\n          t.stringTypeAnnotation()\n        )\n      );\n  });\n\n  test('Int', () => {\n    expect(typeAnnotationFromGraphQLType(GraphQLInt))\n      .toMatchObject(\n        t.nullableTypeAnnotation(\n          t.numberTypeAnnotation()\n        )\n      );\n  });\n\n  test('Float', () => {\n    expect(typeAnnotationFromGraphQLType(GraphQLFloat))\n      .toMatchObject(\n        t.nullableTypeAnnotation(\n          t.numberTypeAnnotation()\n        )\n      );\n  });\n\n  test('Boolean', () => {\n    expect(typeAnnotationFromGraphQLType(GraphQLBoolean))\n      .toMatchObject(\n        t.nullableTypeAnnotation(\n          t.booleanTypeAnnotation()\n        )\n      );\n  });\n\n  test('ID', () => {\n    expect(typeAnnotationFromGraphQLType(GraphQLID))\n      .toMatchObject(\n        t.nullableTypeAnnotation(\n          t.stringTypeAnnotation()\n        )\n      );\n  });\n\n  test('String!', () => {\n    expect(\n      typeAnnotationFromGraphQLType(new GraphQLNonNull(GraphQLString))\n    ).toMatchObject(t.stringTypeAnnotation());\n  });\n\n  test('Int!', () => {\n    expect(\n      typeAnnotationFromGraphQLType(new GraphQLNonNull(GraphQLInt))\n    ).toMatchObject(t.numberTypeAnnotation());\n  });\n\n  test('Float!', () => {\n    expect(\n      typeAnnotationFromGraphQLType(new GraphQLNonNull(GraphQLFloat))\n    ).toMatchObject(t.numberTypeAnnotation());\n  });\n\n  test('Boolean!', () => {\n    expect(\n      typeAnnotationFromGraphQLType(new GraphQLNonNull(GraphQLBoolean))\n    ).toMatchObject(t.booleanTypeAnnotation());\n  });\n\n  test('ID!', () => {\n    expect(\n      typeAnnotationFromGraphQLType(new GraphQLNonNull(GraphQLID))\n    ).toMatchObject(t.stringTypeAnnotation());\n  });\n\n  // TODO: Test GenericTypeAnnotation\n\n  test('[String]', () => {\n    expect(\n      typeAnnotationFromGraphQLType(new GraphQLList(GraphQLString))\n    ).toMatchObject(\n        t.nullableTypeAnnotation(\n          t.arrayTypeAnnotation(\n            t.nullableTypeAnnotation(\n              t.stringTypeAnnotation()\n            )\n          )\n        )\n      )\n  });\n\n  test('[Int]', () => {\n    expect(\n      typeAnnotationFromGraphQLType(new GraphQLList(GraphQLInt))\n    ).toMatchObject(\n        t.nullableTypeAnnotation(\n          t.arrayTypeAnnotation(\n            t.nullableTypeAnnotation(\n              t.numberTypeAnnotation()\n            )\n          )\n        )\n      )\n  });\n\n  test('[Float]', () => {\n    expect(\n      typeAnnotationFromGraphQLType(new GraphQLList(GraphQLFloat))\n    ).toMatchObject(\n        t.nullableTypeAnnotation(\n          t.arrayTypeAnnotation(\n            t.nullableTypeAnnotation(\n              t.numberTypeAnnotation()\n            )\n          )\n        )\n      )\n  });\n\n  test('[Boolean]', () => {\n    expect(\n      typeAnnotationFromGraphQLType(new GraphQLList(GraphQLBoolean))\n    ).toMatchObject(\n        t.nullableTypeAnnotation(\n          t.arrayTypeAnnotation(\n            t.nullableTypeAnnotation(\n              t.booleanTypeAnnotation()\n            )\n          )\n        )\n      )\n  });\n\n  test('[ID]', () => {\n    expect(\n      typeAnnotationFromGraphQLType(new GraphQLList(GraphQLID))\n    ).toMatchObject(\n        t.nullableTypeAnnotation(\n          t.arrayTypeAnnotation(\n            t.nullableTypeAnnotation(\n              t.stringTypeAnnotation()\n            )\n          )\n        )\n      )\n  })\n\n  test('[String]!', () => {\n    expect(\n      typeAnnotationFromGraphQLType(new GraphQLNonNull(new GraphQLList(GraphQLString)))\n    ).toMatchObject(\n        t.arrayTypeAnnotation(\n          t.nullableTypeAnnotation(\n            t.stringTypeAnnotation()\n          )\n        )\n      )\n  });\n\n  test('[Int]!', () => {\n    expect(\n      typeAnnotationFromGraphQLType(new GraphQLNonNull(new GraphQLList(GraphQLInt)))\n    ).toMatchObject(\n        t.arrayTypeAnnotation(\n          t.nullableTypeAnnotation(\n            t.numberTypeAnnotation()\n          )\n        )\n      )\n  });\n  test('[Float]!', () => {\n    expect(\n      typeAnnotationFromGraphQLType(new GraphQLNonNull(new GraphQLList(GraphQLFloat)))\n    ).toMatchObject(\n        t.arrayTypeAnnotation(\n          t.nullableTypeAnnotation(\n            t.numberTypeAnnotation()\n          )\n        )\n      )\n  });\n\n  test('[Boolean]!', () => {\n    expect(\n      typeAnnotationFromGraphQLType(new GraphQLNonNull(new GraphQLList(GraphQLBoolean)))\n    ).toMatchObject(\n        t.arrayTypeAnnotation(\n          t.nullableTypeAnnotation(\n            t.booleanTypeAnnotation()\n          )\n        )\n      )\n  });\n\n  test('[ID]!', () => {\n    expect(\n      typeAnnotationFromGraphQLType(new GraphQLNonNull(new GraphQLList(GraphQLID)))\n    ).toMatchObject(\n        t.arrayTypeAnnotation(\n          t.nullableTypeAnnotation(\n            t.stringTypeAnnotation()\n          )\n        )\n      )\n  });\n\n  test('[String!]', () => {\n    expect(\n      typeAnnotationFromGraphQLType(new GraphQLList(new GraphQLNonNull(GraphQLString)))\n    ).toMatchObject(\n      t.nullableTypeAnnotation(\n          t.arrayTypeAnnotation(\n            t.stringTypeAnnotation()\n          )\n        )\n      )\n  });\n\n  test('[Int!]', () => {\n    expect(\n      typeAnnotationFromGraphQLType(new GraphQLList(new GraphQLNonNull((GraphQLInt))))\n    ).toMatchObject(\n      t.nullableTypeAnnotation(\n          t.arrayTypeAnnotation(\n            t.numberTypeAnnotation()\n          )\n        )\n      )\n  })\n\n  test('[Float!]', () => {\n    expect(\n      typeAnnotationFromGraphQLType(new GraphQLList(new GraphQLNonNull(GraphQLFloat)))\n    ).toMatchObject(\n        t.nullableTypeAnnotation(\n          t.arrayTypeAnnotation(\n            t.numberTypeAnnotation()\n          )\n        )\n      )\n  });\n\n  test('[Boolean!]', () => {\n    expect(\n      typeAnnotationFromGraphQLType(new GraphQLList(new GraphQLNonNull(GraphQLBoolean)))\n    ).toMatchObject(\n        t.nullableTypeAnnotation(\n          t.arrayTypeAnnotation(\n            t.booleanTypeAnnotation()\n          )\n        )\n      )\n  });\n\n  test('[ID!]', () => {\n    expect(\n      typeAnnotationFromGraphQLType(new GraphQLList(new GraphQLNonNull(GraphQLID)))\n    ).toMatchObject(\n        t.nullableTypeAnnotation(\n          t.arrayTypeAnnotation(\n            t.stringTypeAnnotation()\n          )\n        )\n      )\n  });\n\n  test('[String!]!', () => {\n    expect(\n      typeAnnotationFromGraphQLType(new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(GraphQLString))))\n    ).toMatchObject(\n        t.arrayTypeAnnotation(\n          t.stringTypeAnnotation()\n        )\n      )\n  });\n\n  test('[Int!]!', () => {\n    expect(\n      typeAnnotationFromGraphQLType(new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(GraphQLInt))))\n    ).toMatchObject(\n        t.arrayTypeAnnotation(\n          t.numberTypeAnnotation()\n        )\n      )\n  });\n\n  test('[Float!]!', () => {\n    expect(\n      typeAnnotationFromGraphQLType(new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(GraphQLFloat))))\n    ).toMatchObject(\n        t.arrayTypeAnnotation(\n          t.numberTypeAnnotation()\n        )\n      )\n  });\n\n  test('[Boolean!]!', () => {\n    expect(\n      typeAnnotationFromGraphQLType(new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(GraphQLBoolean))))\n    ).toMatchObject(\n        t.arrayTypeAnnotation(\n          t.booleanTypeAnnotation()\n        )\n      )\n  });\n\n  test('[ID!]!', () => {\n    expect(\n      typeAnnotationFromGraphQLType(new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(GraphQLID))))\n    ).toMatchObject(\n        t.arrayTypeAnnotation(\n          t.stringTypeAnnotation()\n        )\n      )\n  });\n\n  test('[[String]]', () => {\n    expect(\n      typeAnnotationFromGraphQLType(new GraphQLList(new GraphQLList(GraphQLString)))\n    ).toMatchObject(\n        t.nullableTypeAnnotation(\n          t.arrayTypeAnnotation(\n            t.nullableTypeAnnotation(\n              t.arrayTypeAnnotation(\n                t.nullableTypeAnnotation(\n                  t.stringTypeAnnotation()\n                )\n              )\n            )\n          )\n        )\n      )\n  });\n\n  test('[[String]]!', () => {\n    expect(\n      typeAnnotationFromGraphQLType(new GraphQLNonNull(new GraphQLList(new GraphQLList(GraphQLString))))\n    ).toMatchObject(\n        t.arrayTypeAnnotation(\n          t.nullableTypeAnnotation(\n            t.arrayTypeAnnotation(\n              t.nullableTypeAnnotation(\n                t.stringTypeAnnotation()\n              )\n            )\n          )\n        )\n      )\n  });\n\n  test('Custom Scalar', () => {\n    const OddType = new GraphQLScalarType({\n      name: 'Odd',\n      serialize(value) {\n        return value % 2 === 1 ? value : null\n      }\n    });\n\n    expect(\n      typeAnnotationFromGraphQLType(OddType)\n    ).toMatchObject(\n      t.nullableTypeAnnotation(\n        t.genericTypeAnnotation(t.identifier('Odd'))\n      )\n    )\n  });\n});\n\ndescribe('passthrough custom scalars', () => {\n  let getTypeAnnotation: Function;\n\n  beforeAll(() => {\n    getTypeAnnotation = createTypeAnnotationFromGraphQLTypeFunction({\n      passthroughCustomScalars: true\n    });\n  });\n\n  test('Custom Scalar', () => {\n    const OddType = new GraphQLScalarType({\n      name: 'Odd',\n      serialize(value) {\n        return value % 2 === 1 ? value : null\n      }\n    });\n\n    expect(\n      getTypeAnnotation(OddType)\n    ).toMatchObject(\n      t.nullableTypeAnnotation(\n        t.anyTypeAnnotation()\n      )\n    )\n  });\n});\n"],"sourceRoot":""}