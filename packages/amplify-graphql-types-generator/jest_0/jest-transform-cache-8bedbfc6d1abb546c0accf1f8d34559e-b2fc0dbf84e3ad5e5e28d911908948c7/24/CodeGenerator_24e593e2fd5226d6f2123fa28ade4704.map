{"version":3,"sources":["CodeGenerator.ts"],"names":[],"mappings":"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","sourcesContent":["export interface BasicGeneratedFile {\n  output: string\n}\n\n\nexport class GeneratedFile<Scope = any> implements BasicGeneratedFile {\n  scopeStack: Scope[] = [];\n  indentWidth = 2;\n  indentLevel = 0;\n  startOfIndentLevel = false;\n\n  public output = '';\n\n  pushScope(scope: Scope) {\n    this.scopeStack.push(scope);\n  }\n\n  popScope() {\n    return this.scopeStack.pop();\n  }\n\n  get scope(): Scope {\n    if (this.scopeStack.length < 1) throw new Error('No active scope');\n\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  print(string?: string) {\n    if (string) {\n      this.output += string;\n    }\n  }\n\n  printNewline() {\n    if (this.output) {\n      this.print('\\n');\n      this.startOfIndentLevel = false;\n    }\n  }\n\n  printNewlineIfNeeded() {\n    if (!this.startOfIndentLevel) {\n      this.printNewline();\n    }\n  }\n\n  printOnNewline(string?: string) {\n    if (string) {\n      this.printNewline();\n      this.printIndent();\n      this.print(string);\n    }\n  }\n\n  printIndent() {\n    const indentation = ' '.repeat(this.indentLevel * this.indentWidth);\n    this.output += indentation;\n  }\n\n  withIndent(closure: Function) {\n    if (!closure) return;\n\n    this.indentLevel++;\n    this.startOfIndentLevel = true;\n    closure();\n    this.indentLevel--;\n  }\n\n  withinBlock(closure: Function, open = ' {', close = '}') {\n    this.print(open);\n    this.withIndent(closure);\n    this.printOnNewline(close);\n  }\n}\n\nexport default class CodeGenerator<Context = any, Scope = any> {\n  generatedFiles: { [fileName: string]: GeneratedFile<Scope> } = {};\n  currentFile: GeneratedFile<Scope>;\n\n  constructor(public context: Context) {\n    this.currentFile = new GeneratedFile();\n  }\n\n  withinFile(fileName: string, closure: Function) {\n    let file = this.generatedFiles[fileName];\n    if (!file) {\n      file = new GeneratedFile();\n      this.generatedFiles[fileName] = file;\n    }\n    const oldCurrentFile = this.currentFile;\n    this.currentFile = file;\n    closure();\n    this.currentFile = oldCurrentFile;\n  }\n\n  get output(): string {\n    return this.currentFile.output;\n  }\n\n  pushScope(scope: Scope) {\n    this.currentFile.pushScope(scope);\n  }\n\n  popScope() {\n    this.currentFile.popScope();\n  }\n\n  get scope(): Scope {\n    return this.currentFile.scope;\n  }\n\n  print(string?: string) {\n    this.currentFile.print(string);\n  }\n\n  printNewline() {\n    this.currentFile.printNewline();\n  }\n\n  printNewlineIfNeeded() {\n    this.currentFile.printNewlineIfNeeded();\n  }\n\n  printOnNewline(string?: string) {\n    this.currentFile.printOnNewline(string);\n  }\n\n  printIndent() {\n    this.currentFile.printIndent();\n  }\n\n  withIndent(closure: Function) {\n    this.currentFile.withIndent(closure);\n  }\n\n  withinBlock(closure: Function, open = ' {', close = '}') {\n    this.currentFile.withinBlock(closure, open, close);\n  }\n}\n"],"sourceRoot":""}