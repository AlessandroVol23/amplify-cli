{"version":3,"sources":["validation.ts"],"names":[],"mappings":";;AAAA,MAAA,OAAA,QAAA,MAAA,CAAA;AAEA,MAAA,YAAA,QAAA,gBAAA,CAAA;AAEA,MAAA,eAAA,QAAA,mBAAA,CAAA;AAEA,MAAM,SAAS,UAAA,UAAA,CAAW,QAAQ,OAAR,CAAgB,iCAAhB,CAAX,CAAf;AAEA,SAAS,YAAT,EAAuB,MAAK;AAC1B,aAAA,iBAAA,CAA2B,QAA3B,EAA2C;AACzC,eAAO,UAAA,0BAAA,CAA2B;AAChC,aAAK,IAAL,CAAU,SAAV,EAAqB,qBAArB,EAA4C,QAA5C,CADgC,CAA3B,CAAP;;AAGD;AAED,SAAK,kDAAL,EAAyD,MAAK;AAC5D,cAAM,WAAW,kBAAkB,wBAAlB,CAAjB;AAEA,eACE,MAAM,aAAA,qBAAA,CAAsB,MAAtB,EAA8B,QAA9B,CADR,EAEE,OAFF,CAGE,6CAHF;AAKD,KARD;AAUA,SAAK,iDAAL,EAAwD,MAAK;AAC3D,cAAM,WAAW,kBAAkB,uBAAlB,CAAjB;AAEA,eACE,MAAM,aAAA,qBAAA,CAAsB,MAAtB,EAA8B,QAA9B,CADR,EAEE,OAFF,CAGE,6CAHF;AAKD,KARD;AASD,CA1BD","sourcesContent":["import * as path from 'path';\n\nimport { loadSchema, loadAndMergeQueryDocuments } from '../src/loading';\n\nimport { validateQueryDocument } from '../src/validation';\n\nconst schema = loadSchema(require.resolve('./fixtures/starwars/schema.json'));\n\ndescribe('Validation', () => {\n  function loadQueryDocument(filename: string) {\n    return loadAndMergeQueryDocuments([\n      path.join(__dirname, './fixtures/starwars', filename),\n    ]);\n  }\n\n  test(`should throw an error for AnonymousQuery.graphql`, () => {\n    const document = loadQueryDocument('AnonymousQuery.graphql');\n\n    expect(\n      () => validateQueryDocument(schema, document)\n    ).toThrow(\n      'Validation of GraphQL query document failed'\n    );\n  });\n\n  test(`should throw an error for TypenameAlias.graphql`, () => {\n    const document = loadQueryDocument('TypenameAlias.graphql');\n\n    expect(\n      () => validateQueryDocument(schema, document)\n    ).toThrow(\n      'Validation of GraphQL query document failed'\n    );\n  });\n});\n"],"sourceRoot":""}