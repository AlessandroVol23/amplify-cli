d9902f80499747f0f385c0dae2bd9899
'use strict';require('ts-jest').install("/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-types-generator/src/scala/naming.js", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst change_case_1 = require(\"change-case\");\nconst Inflector = require(\"inflected\");\nconst printing_1 = require(\"../utilities/printing\");\nconst language_1 = require(\"./language\");\nconst types_1 = require(\"./types\");\nconst graphql_1 = require(\"graphql\");\nfunction enumCaseName(name) {\n    return change_case_1.camelCase(name);\n}\nexports.enumCaseName = enumCaseName;\nfunction operationClassName(name) {\n    return change_case_1.pascalCase(name);\n}\nexports.operationClassName = operationClassName;\nfunction caseClassNameForPropertyName(propertyName) {\n    return change_case_1.pascalCase(Inflector.singularize(propertyName));\n}\nexports.caseClassNameForPropertyName = caseClassNameForPropertyName;\nfunction caseClassNameForFragmentName(fragmentName) {\n    return change_case_1.pascalCase(fragmentName);\n}\nexports.caseClassNameForFragmentName = caseClassNameForFragmentName;\nfunction caseClassNameForInlineFragment(inlineFragment) {\n    return 'As' + change_case_1.pascalCase(String(inlineFragment.typeCondition));\n}\nexports.caseClassNameForInlineFragment = caseClassNameForInlineFragment;\nfunction propertyFromField(context, field, namespace) {\n    const name = field.name || field.responseName;\n    const unescapedPropertyName = isMetaFieldName(name) ? name : change_case_1.camelCase(name);\n    const propertyName = language_1.escapeIdentifierIfNeeded(unescapedPropertyName);\n    const type = field.type;\n    const isList = type instanceof graphql_1.GraphQLList || type.ofType instanceof graphql_1.GraphQLList;\n    const isOptional = field.isConditional || !(type instanceof graphql_1.GraphQLNonNull);\n    const bareType = graphql_1.getNamedType(type);\n    if (graphql_1.isCompositeType(bareType)) {\n        const bareTypeName = printing_1.join([\n            namespace,\n            language_1.escapeIdentifierIfNeeded(change_case_1.pascalCase(Inflector.singularize(name)))\n        ], '.');\n        const typeName = types_1.typeNameFromGraphQLType(context, type, bareTypeName, isOptional);\n        return Object.assign({}, field, { propertyName, typeName, bareTypeName, isOptional, isList, isComposite: true });\n    }\n    else {\n        const typeName = types_1.typeNameFromGraphQLType(context, type, undefined, isOptional);\n        return Object.assign({}, field, { propertyName, typeName, isOptional, isList, isComposite: false });\n    }\n}\nexports.propertyFromField = propertyFromField;\nfunction propertyFromInlineFragment(context, inlineFragment) {\n    const structName = caseClassNameForInlineFragment(inlineFragment);\n    const propertyName = change_case_1.camelCase(structName);\n    const typeName = structName + '?';\n    return Object.assign({ propertyName, typeName, structName, isComposite: true }, inlineFragment);\n}\nexports.propertyFromInlineFragment = propertyFromInlineFragment;\nfunction propertyFromFragmentSpread(context, fragmentSpread) {\n    const fragmentName = fragmentSpread;\n    const fragment = context.fragments[fragmentName];\n    if (!fragment) {\n        throw new graphql_1.GraphQLError(`Cannot find fragment \"${fragmentName}\"`);\n    }\n    const propertyName = change_case_1.camelCase(fragmentName);\n    const typeName = caseClassNameForFragmentName(fragmentName);\n    return { propertyName, typeName, fragment, isComposite: true };\n}\nexports.propertyFromFragmentSpread = propertyFromFragmentSpread;\nfunction isMetaFieldName(name) {\n    return name.startsWith(\"__\");\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmFtaW5nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibmFtaW5nLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNkNBQW9EO0FBQ3BELHVDQUF1QztBQUV2QyxvREFFK0I7QUFFL0IseUNBRW9CO0FBRXBCLG1DQUVpQjtBQUVqQixxQ0FNaUI7QUFFakIsc0JBQTZCLElBQUk7SUFDL0IsT0FBTyx1QkFBUyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3pCLENBQUM7QUFGRCxvQ0FFQztBQUVELDRCQUFtQyxJQUFJO0lBQ3JDLE9BQU8sd0JBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUMxQixDQUFDO0FBRkQsZ0RBRUM7QUFFRCxzQ0FBNkMsWUFBWTtJQUN2RCxPQUFPLHdCQUFVLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO0FBQ3pELENBQUM7QUFGRCxvRUFFQztBQUVELHNDQUE2QyxZQUFZO0lBQ3ZELE9BQU8sd0JBQVUsQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUNsQyxDQUFDO0FBRkQsb0VBRUM7QUFFRCx3Q0FBK0MsY0FBYztJQUMzRCxPQUFPLElBQUksR0FBRyx3QkFBVSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztBQUNqRSxDQUFDO0FBRkQsd0VBRUM7QUFFRCwyQkFBa0MsT0FBTyxFQUFFLEtBQUssRUFBRSxTQUFTO0lBQ3pELE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLElBQUksS0FBSyxDQUFDLFlBQVksQ0FBQztJQUM5QyxNQUFNLHFCQUFxQixHQUFHLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyx1QkFBUyxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQzVFLE1BQU0sWUFBWSxHQUFHLG1DQUF3QixDQUFDLHFCQUFxQixDQUFDLENBQUM7SUFFckUsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQztJQUN4QixNQUFNLE1BQU0sR0FBRyxJQUFJLFlBQVkscUJBQVcsSUFBSSxJQUFJLENBQUMsTUFBTSxZQUFZLHFCQUFXLENBQUE7SUFDaEYsTUFBTSxVQUFVLEdBQUcsS0FBSyxDQUFDLGFBQWEsSUFBSSxDQUFDLENBQUMsSUFBSSxZQUFZLHdCQUFjLENBQUMsQ0FBQztJQUM1RSxNQUFNLFFBQVEsR0FBRyxzQkFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRXBDLElBQUkseUJBQWUsQ0FBQyxRQUFRLENBQUMsRUFBRTtRQUM3QixNQUFNLFlBQVksR0FBRyxlQUFJLENBQUM7WUFDeEIsU0FBUztZQUNULG1DQUF3QixDQUFDLHdCQUFVLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1NBQ2xFLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDUixNQUFNLFFBQVEsR0FBRywrQkFBdUIsQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxVQUFVLENBQUMsQ0FBQztRQUNsRix5QkFBWSxLQUFLLElBQUUsWUFBWSxFQUFFLFFBQVEsRUFBRSxZQUFZLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsSUFBSSxJQUFHO0tBQ2xHO1NBQU07UUFDTCxNQUFNLFFBQVEsR0FBRywrQkFBdUIsQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUMvRSx5QkFBWSxLQUFLLElBQUUsWUFBWSxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxLQUFLLElBQUc7S0FDckY7QUFDSCxDQUFDO0FBckJELDhDQXFCQztBQUVELG9DQUEyQyxPQUFPLEVBQUUsY0FBYztJQUNoRSxNQUFNLFVBQVUsR0FBRyw4QkFBOEIsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUNsRSxNQUFNLFlBQVksR0FBRyx1QkFBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzNDLE1BQU0sUUFBUSxHQUFHLFVBQVUsR0FBRyxHQUFHLENBQUE7SUFDakMsdUJBQVMsWUFBWSxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLElBQUksSUFBSyxjQUFjLEVBQUc7QUFDdEYsQ0FBQztBQUxELGdFQUtDO0FBRUQsb0NBQTJDLE9BQU8sRUFBRSxjQUFjO0lBQ2hFLE1BQU0sWUFBWSxHQUFHLGNBQWMsQ0FBQztJQUNwQyxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ2pELElBQUksQ0FBQyxRQUFRLEVBQUU7UUFDYixNQUFNLElBQUksc0JBQVksQ0FBQyx5QkFBeUIsWUFBWSxHQUFHLENBQUMsQ0FBQztLQUNsRTtJQUNELE1BQU0sWUFBWSxHQUFHLHVCQUFTLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDN0MsTUFBTSxRQUFRLEdBQUcsNEJBQTRCLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDNUQsT0FBTyxFQUFFLFlBQVksRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsQ0FBQztBQUNqRSxDQUFDO0FBVEQsZ0VBU0M7QUFFRCx5QkFBeUIsSUFBSTtJQUMzQixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDL0IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNhbWVsQ2FzZSwgcGFzY2FsQ2FzZSB9IGZyb20gJ2NoYW5nZS1jYXNlJztcbmltcG9ydCAqIGFzIEluZmxlY3RvciBmcm9tICdpbmZsZWN0ZWQnO1xuXG5pbXBvcnQge1xuICBqb2luXG59IGZyb20gJy4uL3V0aWxpdGllcy9wcmludGluZyc7XG5cbmltcG9ydCB7XG4gIGVzY2FwZUlkZW50aWZpZXJJZk5lZWRlZFxufSBmcm9tICcuL2xhbmd1YWdlJztcblxuaW1wb3J0IHtcbiAgdHlwZU5hbWVGcm9tR3JhcGhRTFR5cGVcbn0gZnJvbSAnLi90eXBlcyc7XG5cbmltcG9ydCB7XG4gIEdyYXBoUUxFcnJvcixcbiAgR3JhcGhRTExpc3QsXG4gIEdyYXBoUUxOb25OdWxsLFxuICBnZXROYW1lZFR5cGUsXG4gIGlzQ29tcG9zaXRlVHlwZSxcbn0gZnJvbSAnZ3JhcGhxbCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBlbnVtQ2FzZU5hbWUobmFtZSkge1xuICByZXR1cm4gY2FtZWxDYXNlKG5hbWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gb3BlcmF0aW9uQ2xhc3NOYW1lKG5hbWUpIHtcbiAgcmV0dXJuIHBhc2NhbENhc2UobmFtZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYXNlQ2xhc3NOYW1lRm9yUHJvcGVydHlOYW1lKHByb3BlcnR5TmFtZSkge1xuICByZXR1cm4gcGFzY2FsQ2FzZShJbmZsZWN0b3Iuc2luZ3VsYXJpemUocHJvcGVydHlOYW1lKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYXNlQ2xhc3NOYW1lRm9yRnJhZ21lbnROYW1lKGZyYWdtZW50TmFtZSkge1xuICByZXR1cm4gcGFzY2FsQ2FzZShmcmFnbWVudE5hbWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2FzZUNsYXNzTmFtZUZvcklubGluZUZyYWdtZW50KGlubGluZUZyYWdtZW50KSB7XG4gIHJldHVybiAnQXMnICsgcGFzY2FsQ2FzZShTdHJpbmcoaW5saW5lRnJhZ21lbnQudHlwZUNvbmRpdGlvbikpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJvcGVydHlGcm9tRmllbGQoY29udGV4dCwgZmllbGQsIG5hbWVzcGFjZSkge1xuICBjb25zdCBuYW1lID0gZmllbGQubmFtZSB8fCBmaWVsZC5yZXNwb25zZU5hbWU7XG4gIGNvbnN0IHVuZXNjYXBlZFByb3BlcnR5TmFtZSA9IGlzTWV0YUZpZWxkTmFtZShuYW1lKSA/IG5hbWUgOiBjYW1lbENhc2UobmFtZSlcbiAgY29uc3QgcHJvcGVydHlOYW1lID0gZXNjYXBlSWRlbnRpZmllcklmTmVlZGVkKHVuZXNjYXBlZFByb3BlcnR5TmFtZSk7XG5cbiAgY29uc3QgdHlwZSA9IGZpZWxkLnR5cGU7XG4gIGNvbnN0IGlzTGlzdCA9IHR5cGUgaW5zdGFuY2VvZiBHcmFwaFFMTGlzdCB8fCB0eXBlLm9mVHlwZSBpbnN0YW5jZW9mIEdyYXBoUUxMaXN0XG4gIGNvbnN0IGlzT3B0aW9uYWwgPSBmaWVsZC5pc0NvbmRpdGlvbmFsIHx8ICEodHlwZSBpbnN0YW5jZW9mIEdyYXBoUUxOb25OdWxsKTtcbiAgY29uc3QgYmFyZVR5cGUgPSBnZXROYW1lZFR5cGUodHlwZSk7XG5cbiAgaWYgKGlzQ29tcG9zaXRlVHlwZShiYXJlVHlwZSkpIHtcbiAgICBjb25zdCBiYXJlVHlwZU5hbWUgPSBqb2luKFtcbiAgICAgIG5hbWVzcGFjZSxcbiAgICAgIGVzY2FwZUlkZW50aWZpZXJJZk5lZWRlZChwYXNjYWxDYXNlKEluZmxlY3Rvci5zaW5ndWxhcml6ZShuYW1lKSkpXG4gICAgXSwgJy4nKTtcbiAgICBjb25zdCB0eXBlTmFtZSA9IHR5cGVOYW1lRnJvbUdyYXBoUUxUeXBlKGNvbnRleHQsIHR5cGUsIGJhcmVUeXBlTmFtZSwgaXNPcHRpb25hbCk7XG4gICAgcmV0dXJuIHsgLi4uZmllbGQsIHByb3BlcnR5TmFtZSwgdHlwZU5hbWUsIGJhcmVUeXBlTmFtZSwgaXNPcHRpb25hbCwgaXNMaXN0LCBpc0NvbXBvc2l0ZTogdHJ1ZSB9O1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IHR5cGVOYW1lID0gdHlwZU5hbWVGcm9tR3JhcGhRTFR5cGUoY29udGV4dCwgdHlwZSwgdW5kZWZpbmVkLCBpc09wdGlvbmFsKTtcbiAgICByZXR1cm4geyAuLi5maWVsZCwgcHJvcGVydHlOYW1lLCB0eXBlTmFtZSwgaXNPcHRpb25hbCwgaXNMaXN0LCBpc0NvbXBvc2l0ZTogZmFsc2UgfTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJvcGVydHlGcm9tSW5saW5lRnJhZ21lbnQoY29udGV4dCwgaW5saW5lRnJhZ21lbnQpIHtcbiAgY29uc3Qgc3RydWN0TmFtZSA9IGNhc2VDbGFzc05hbWVGb3JJbmxpbmVGcmFnbWVudChpbmxpbmVGcmFnbWVudCk7XG4gIGNvbnN0IHByb3BlcnR5TmFtZSA9IGNhbWVsQ2FzZShzdHJ1Y3ROYW1lKTtcbiAgY29uc3QgdHlwZU5hbWUgPSBzdHJ1Y3ROYW1lICsgJz8nXG4gIHJldHVybiB7IHByb3BlcnR5TmFtZSwgdHlwZU5hbWUsIHN0cnVjdE5hbWUsIGlzQ29tcG9zaXRlOiB0cnVlLCAuLi5pbmxpbmVGcmFnbWVudCB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJvcGVydHlGcm9tRnJhZ21lbnRTcHJlYWQoY29udGV4dCwgZnJhZ21lbnRTcHJlYWQpIHtcbiAgY29uc3QgZnJhZ21lbnROYW1lID0gZnJhZ21lbnRTcHJlYWQ7XG4gIGNvbnN0IGZyYWdtZW50ID0gY29udGV4dC5mcmFnbWVudHNbZnJhZ21lbnROYW1lXTtcbiAgaWYgKCFmcmFnbWVudCkge1xuICAgIHRocm93IG5ldyBHcmFwaFFMRXJyb3IoYENhbm5vdCBmaW5kIGZyYWdtZW50IFwiJHtmcmFnbWVudE5hbWV9XCJgKTtcbiAgfVxuICBjb25zdCBwcm9wZXJ0eU5hbWUgPSBjYW1lbENhc2UoZnJhZ21lbnROYW1lKTtcbiAgY29uc3QgdHlwZU5hbWUgPSBjYXNlQ2xhc3NOYW1lRm9yRnJhZ21lbnROYW1lKGZyYWdtZW50TmFtZSk7XG4gIHJldHVybiB7IHByb3BlcnR5TmFtZSwgdHlwZU5hbWUsIGZyYWdtZW50LCBpc0NvbXBvc2l0ZTogdHJ1ZSB9O1xufVxuXG5mdW5jdGlvbiBpc01ldGFGaWVsZE5hbWUobmFtZSkge1xuICByZXR1cm4gbmFtZS5zdGFydHNXaXRoKFwiX19cIik7XG59Il19");"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const change_case_1 = require("change-case");
const Inflector = require("inflected");
const printing_1 = require("../utilities/printing");
const language_1 = require("./language");
const types_1 = require("./types");
const graphql_1 = require("graphql");
function enumCaseName(name) {
    return change_case_1.camelCase(name);
}
exports.enumCaseName = enumCaseName;
function operationClassName(name) {
    return change_case_1.pascalCase(name);
}
exports.operationClassName = operationClassName;
function caseClassNameForPropertyName(propertyName) {
    return change_case_1.pascalCase(Inflector.singularize(propertyName));
}
exports.caseClassNameForPropertyName = caseClassNameForPropertyName;
function caseClassNameForFragmentName(fragmentName) {
    return change_case_1.pascalCase(fragmentName);
}
exports.caseClassNameForFragmentName = caseClassNameForFragmentName;
function caseClassNameForInlineFragment(inlineFragment) {
    return 'As' + change_case_1.pascalCase(String(inlineFragment.typeCondition));
}
exports.caseClassNameForInlineFragment = caseClassNameForInlineFragment;
function propertyFromField(context, field, namespace) {
    const name = field.name || field.responseName;
    const unescapedPropertyName = isMetaFieldName(name) ? name : change_case_1.camelCase(name);
    const propertyName = language_1.escapeIdentifierIfNeeded(unescapedPropertyName);
    const type = field.type;
    const isList = type instanceof graphql_1.GraphQLList || type.ofType instanceof graphql_1.GraphQLList;
    const isOptional = field.isConditional || !(type instanceof graphql_1.GraphQLNonNull);
    const bareType = graphql_1.getNamedType(type);
    if (graphql_1.isCompositeType(bareType)) {
        const bareTypeName = printing_1.join([
        namespace,
        language_1.escapeIdentifierIfNeeded(change_case_1.pascalCase(Inflector.singularize(name)))],
        '.');
        const typeName = types_1.typeNameFromGraphQLType(context, type, bareTypeName, isOptional);
        return Object.assign({}, field, { propertyName, typeName, bareTypeName, isOptional, isList, isComposite: true });
    } else
    {
        const typeName = types_1.typeNameFromGraphQLType(context, type, undefined, isOptional);
        return Object.assign({}, field, { propertyName, typeName, isOptional, isList, isComposite: false });
    }
}
exports.propertyFromField = propertyFromField;
function propertyFromInlineFragment(context, inlineFragment) {
    const structName = caseClassNameForInlineFragment(inlineFragment);
    const propertyName = change_case_1.camelCase(structName);
    const typeName = structName + '?';
    return Object.assign({ propertyName, typeName, structName, isComposite: true }, inlineFragment);
}
exports.propertyFromInlineFragment = propertyFromInlineFragment;
function propertyFromFragmentSpread(context, fragmentSpread) {
    const fragmentName = fragmentSpread;
    const fragment = context.fragments[fragmentName];
    if (!fragment) {
        throw new graphql_1.GraphQLError(`Cannot find fragment "${fragmentName}"`);
    }
    const propertyName = change_case_1.camelCase(fragmentName);
    const typeName = caseClassNameForFragmentName(fragmentName);
    return { propertyName, typeName, fragment, isComposite: true };
}
exports.propertyFromFragmentSpread = propertyFromFragmentSpread;
function isMetaFieldName(name) {
    return name.startsWith("__");
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFhLEtBQTNELEVBQWpCLENBQUE7QUFDRDtBQUNGO0FBckJELFFBQUEsaUJBQUEsR0FBQSxpQkFBQTtBQXVCQSxTQUFBLDBCQUFBLENBQTJDLE9BQTNDLEVBQW9ELGNBQXBELEVBQWtFO0FBQ2hFLFVBQU0sYUFBYSwrQkFBK0IsY0FBL0IsQ0FBbkI7QUFDQSxVQUFNLGVBQWUsY0FBQSxTQUFBLENBQVUsVUFBVixDQUFyQjtBQUNBLFVBQU0sV0FBVyxhQUFhLEdBQTlCO0FBQ0EsV0FBQSxPQUFBLE1BQUEsQ0FBQSxFQUFTLFlBQVQsRUFBdUIsUUFBdkIsRUFBaUMsVUFBakMsRUFBNkMsYUFBYSxJQUExRCxFQUFBLEVBQW1FLGNBQW5FLENBQUE7QUFDRDtBQUxELFFBQUEsMEJBQUEsR0FBQSwwQkFBQTtBQU9BLFNBQUEsMEJBQUEsQ0FBMkMsT0FBM0MsRUFBb0QsY0FBcEQsRUFBa0U7QUFDaEUsVUFBTSxlQUFlLGNBQXJCO0FBQ0EsVUFBTSxXQUFXLFFBQVEsU0FBUixDQUFrQixZQUFsQixDQUFqQjtBQUNBLFFBQUksQ0FBQyxRQUFMLEVBQWU7QUFDYixjQUFNLElBQUksVUFBQSxZQUFKLENBQWlCLHlCQUF5QixZQUFZLEdBQXRELENBQU47QUFDRDtBQUNELFVBQU0sZUFBZSxjQUFBLFNBQUEsQ0FBVSxZQUFWLENBQXJCO0FBQ0EsVUFBTSxXQUFXLDZCQUE2QixZQUE3QixDQUFqQjtBQUNBLFdBQU8sRUFBRSxZQUFGLEVBQWdCLFFBQWhCLEVBQTBCLFFBQTFCLEVBQW9DLGFBQWEsSUFBakQsRUFBUDtBQUNEO0FBVEQsUUFBQSwwQkFBQSxHQUFBLDBCQUFBO0FBV0EsU0FBQSxlQUFBLENBQXlCLElBQXpCLEVBQTZCO0FBQzNCLFdBQU8sS0FBSyxVQUFMLENBQWdCLElBQWhCLENBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNhbWVsQ2FzZSwgcGFzY2FsQ2FzZSB9IGZyb20gJ2NoYW5nZS1jYXNlJztcbmltcG9ydCAqIGFzIEluZmxlY3RvciBmcm9tICdpbmZsZWN0ZWQnO1xuXG5pbXBvcnQge1xuICBqb2luXG59IGZyb20gJy4uL3V0aWxpdGllcy9wcmludGluZyc7XG5cbmltcG9ydCB7XG4gIGVzY2FwZUlkZW50aWZpZXJJZk5lZWRlZFxufSBmcm9tICcuL2xhbmd1YWdlJztcblxuaW1wb3J0IHtcbiAgdHlwZU5hbWVGcm9tR3JhcGhRTFR5cGVcbn0gZnJvbSAnLi90eXBlcyc7XG5cbmltcG9ydCB7XG4gIEdyYXBoUUxFcnJvcixcbiAgR3JhcGhRTExpc3QsXG4gIEdyYXBoUUxOb25OdWxsLFxuICBnZXROYW1lZFR5cGUsXG4gIGlzQ29tcG9zaXRlVHlwZSxcbn0gZnJvbSAnZ3JhcGhxbCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBlbnVtQ2FzZU5hbWUobmFtZSkge1xuICByZXR1cm4gY2FtZWxDYXNlKG5hbWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gb3BlcmF0aW9uQ2xhc3NOYW1lKG5hbWUpIHtcbiAgcmV0dXJuIHBhc2NhbENhc2UobmFtZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYXNlQ2xhc3NOYW1lRm9yUHJvcGVydHlOYW1lKHByb3BlcnR5TmFtZSkge1xuICByZXR1cm4gcGFzY2FsQ2FzZShJbmZsZWN0b3Iuc2luZ3VsYXJpemUocHJvcGVydHlOYW1lKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYXNlQ2xhc3NOYW1lRm9yRnJhZ21lbnROYW1lKGZyYWdtZW50TmFtZSkge1xuICByZXR1cm4gcGFzY2FsQ2FzZShmcmFnbWVudE5hbWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2FzZUNsYXNzTmFtZUZvcklubGluZUZyYWdtZW50KGlubGluZUZyYWdtZW50KSB7XG4gIHJldHVybiAnQXMnICsgcGFzY2FsQ2FzZShTdHJpbmcoaW5saW5lRnJhZ21lbnQudHlwZUNvbmRpdGlvbikpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJvcGVydHlGcm9tRmllbGQoY29udGV4dCwgZmllbGQsIG5hbWVzcGFjZSkge1xuICBjb25zdCBuYW1lID0gZmllbGQubmFtZSB8fCBmaWVsZC5yZXNwb25zZU5hbWU7XG4gIGNvbnN0IHVuZXNjYXBlZFByb3BlcnR5TmFtZSA9IGlzTWV0YUZpZWxkTmFtZShuYW1lKSA/IG5hbWUgOiBjYW1lbENhc2UobmFtZSlcbiAgY29uc3QgcHJvcGVydHlOYW1lID0gZXNjYXBlSWRlbnRpZmllcklmTmVlZGVkKHVuZXNjYXBlZFByb3BlcnR5TmFtZSk7XG5cbiAgY29uc3QgdHlwZSA9IGZpZWxkLnR5cGU7XG4gIGNvbnN0IGlzTGlzdCA9IHR5cGUgaW5zdGFuY2VvZiBHcmFwaFFMTGlzdCB8fCB0eXBlLm9mVHlwZSBpbnN0YW5jZW9mIEdyYXBoUUxMaXN0XG4gIGNvbnN0IGlzT3B0aW9uYWwgPSBmaWVsZC5pc0NvbmRpdGlvbmFsIHx8ICEodHlwZSBpbnN0YW5jZW9mIEdyYXBoUUxOb25OdWxsKTtcbiAgY29uc3QgYmFyZVR5cGUgPSBnZXROYW1lZFR5cGUodHlwZSk7XG5cbiAgaWYgKGlzQ29tcG9zaXRlVHlwZShiYXJlVHlwZSkpIHtcbiAgICBjb25zdCBiYXJlVHlwZU5hbWUgPSBqb2luKFtcbiAgICAgIG5hbWVzcGFjZSxcbiAgICAgIGVzY2FwZUlkZW50aWZpZXJJZk5lZWRlZChwYXNjYWxDYXNlKEluZmxlY3Rvci5zaW5ndWxhcml6ZShuYW1lKSkpXG4gICAgXSwgJy4nKTtcbiAgICBjb25zdCB0eXBlTmFtZSA9IHR5cGVOYW1lRnJvbUdyYXBoUUxUeXBlKGNvbnRleHQsIHR5cGUsIGJhcmVUeXBlTmFtZSwgaXNPcHRpb25hbCk7XG4gICAgcmV0dXJuIHsgLi4uZmllbGQsIHByb3BlcnR5TmFtZSwgdHlwZU5hbWUsIGJhcmVUeXBlTmFtZSwgaXNPcHRpb25hbCwgaXNMaXN0LCBpc0NvbXBvc2l0ZTogdHJ1ZSB9O1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IHR5cGVOYW1lID0gdHlwZU5hbWVGcm9tR3JhcGhRTFR5cGUoY29udGV4dCwgdHlwZSwgdW5kZWZpbmVkLCBpc09wdGlvbmFsKTtcbiAgICByZXR1cm4geyAuLi5maWVsZCwgcHJvcGVydHlOYW1lLCB0eXBlTmFtZSwgaXNPcHRpb25hbCwgaXNMaXN0LCBpc0NvbXBvc2l0ZTogZmFsc2UgfTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJvcGVydHlGcm9tSW5saW5lRnJhZ21lbnQoY29udGV4dCwgaW5saW5lRnJhZ21lbnQpIHtcbiAgY29uc3Qgc3RydWN0TmFtZSA9IGNhc2VDbGFzc05hbWVGb3JJbmxpbmVGcmFnbWVudChpbmxpbmVGcmFnbWVudCk7XG4gIGNvbnN0IHByb3BlcnR5TmFtZSA9IGNhbWVsQ2FzZShzdHJ1Y3ROYW1lKTtcbiAgY29uc3QgdHlwZU5hbWUgPSBzdHJ1Y3ROYW1lICsgJz8nXG4gIHJldHVybiB7IHByb3BlcnR5TmFtZSwgdHlwZU5hbWUsIHN0cnVjdE5hbWUsIGlzQ29tcG9zaXRlOiB0cnVlLCAuLi5pbmxpbmVGcmFnbWVudCB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJvcGVydHlGcm9tRnJhZ21lbnRTcHJlYWQoY29udGV4dCwgZnJhZ21lbnRTcHJlYWQpIHtcbiAgY29uc3QgZnJhZ21lbnROYW1lID0gZnJhZ21lbnRTcHJlYWQ7XG4gIGNvbnN0IGZyYWdtZW50ID0gY29udGV4dC5mcmFnbWVudHNbZnJhZ21lbnROYW1lXTtcbiAgaWYgKCFmcmFnbWVudCkge1xuICAgIHRocm93IG5ldyBHcmFwaFFMRXJyb3IoYENhbm5vdCBmaW5kIGZyYWdtZW50IFwiJHtmcmFnbWVudE5hbWV9XCJgKTtcbiAgfVxuICBjb25zdCBwcm9wZXJ0eU5hbWUgPSBjYW1lbENhc2UoZnJhZ21lbnROYW1lKTtcbiAgY29uc3QgdHlwZU5hbWUgPSBjYXNlQ2xhc3NOYW1lRm9yRnJhZ21lbnROYW1lKGZyYWdtZW50TmFtZSk7XG4gIHJldHVybiB7IHByb3BlcnR5TmFtZSwgdHlwZU5hbWUsIGZyYWdtZW50LCBpc0NvbXBvc2l0ZTogdHJ1ZSB9O1xufVxuXG5mdW5jdGlvbiBpc01ldGFGaWVsZE5hbWUobmFtZSkge1xuICByZXR1cm4gbmFtZS5zdGFydHNXaXRoKFwiX19cIik7XG59Il0sInNvdXJjZVJvb3QiOiIifQ==