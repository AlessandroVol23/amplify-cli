{"version":3,"sources":["naming.js"],"names":[],"mappings":"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","sourcesContent":["import { camelCase, pascalCase } from 'change-case';\nimport * as Inflector from 'inflected';\n\nimport {\n  join\n} from '../utilities/printing';\n\nimport {\n  escapeIdentifierIfNeeded\n} from './language';\n\nimport {\n  typeNameFromGraphQLType\n} from './types';\n\nimport {\n  GraphQLError,\n  GraphQLList,\n  GraphQLNonNull,\n  getNamedType,\n  isCompositeType,\n} from 'graphql';\n\nexport function enumCaseName(name) {\n  return camelCase(name);\n}\n\nexport function operationClassName(name) {\n  return pascalCase(name);\n}\n\nexport function caseClassNameForPropertyName(propertyName) {\n  return pascalCase(Inflector.singularize(propertyName));\n}\n\nexport function caseClassNameForFragmentName(fragmentName) {\n  return pascalCase(fragmentName);\n}\n\nexport function caseClassNameForInlineFragment(inlineFragment) {\n  return 'As' + pascalCase(String(inlineFragment.typeCondition));\n}\n\nexport function propertyFromField(context, field, namespace) {\n  const name = field.name || field.responseName;\n  const unescapedPropertyName = isMetaFieldName(name) ? name : camelCase(name)\n  const propertyName = escapeIdentifierIfNeeded(unescapedPropertyName);\n\n  const type = field.type;\n  const isList = type instanceof GraphQLList || type.ofType instanceof GraphQLList\n  const isOptional = field.isConditional || !(type instanceof GraphQLNonNull);\n  const bareType = getNamedType(type);\n\n  if (isCompositeType(bareType)) {\n    const bareTypeName = join([\n      namespace,\n      escapeIdentifierIfNeeded(pascalCase(Inflector.singularize(name)))\n    ], '.');\n    const typeName = typeNameFromGraphQLType(context, type, bareTypeName, isOptional);\n    return { ...field, propertyName, typeName, bareTypeName, isOptional, isList, isComposite: true };\n  } else {\n    const typeName = typeNameFromGraphQLType(context, type, undefined, isOptional);\n    return { ...field, propertyName, typeName, isOptional, isList, isComposite: false };\n  }\n}\n\nexport function propertyFromInlineFragment(context, inlineFragment) {\n  const structName = caseClassNameForInlineFragment(inlineFragment);\n  const propertyName = camelCase(structName);\n  const typeName = structName + '?'\n  return { propertyName, typeName, structName, isComposite: true, ...inlineFragment };\n}\n\nexport function propertyFromFragmentSpread(context, fragmentSpread) {\n  const fragmentName = fragmentSpread;\n  const fragment = context.fragments[fragmentName];\n  if (!fragment) {\n    throw new GraphQLError(`Cannot find fragment \"${fragmentName}\"`);\n  }\n  const propertyName = camelCase(fragmentName);\n  const typeName = caseClassNameForFragmentName(fragmentName);\n  return { propertyName, typeName, fragment, isComposite: true };\n}\n\nfunction isMetaFieldName(name) {\n  return name.startsWith(\"__\");\n}"],"sourceRoot":""}