{"version":3,"sources":["codeGeneration.js"],"names":[],"mappings":"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","sourcesContent":["import {\n  GraphQLError,\n  getNamedType,\n  isCompositeType,\n  isAbstractType,\n  isEqualType,\n  GraphQLScalarType,\n  GraphQLEnumType,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLID,\n  GraphQLInputObjectType\n} from 'graphql'\n\nimport  { isTypeProperSuperTypeOf } from '../utilities/graphql'\n\nimport {\n  join,\n  wrap,\n} from '../utilities/printing';\n\nimport {\n  packageDeclaration,\n  objectDeclaration,\n  caseClassDeclaration,\n  propertyDeclaration,\n  propertyDeclarations,\n  escapeIdentifierIfNeeded,\n  comment\n} from './language';\n\nimport {\n  caseClassNameForPropertyName,\n  caseClassNameForFragmentName,\n  caseClassNameForInlineFragment,\n  operationClassName,\n  enumCaseName,\n  propertiesFromSelectionSet,\n  propertyFromField,\n  propertyFromInlineFragment,\n  propertyFromFragmentSpread\n} from './naming';\n\nimport {\n  escapedString,\n  multilineString,\n  dictionaryLiteralForFieldArguments,\n} from './values';\n\nimport {\n  possibleTypesForType,\n  typeNameFromGraphQLType,\n} from './types';\n\nimport CodeGenerator from '../utilities/CodeGenerator';\n\nexport function generateSource(context, options) {\n  const generator = new CodeGenerator(context);\n\n  generator.printOnNewline('//  This file was automatically generated and should not be edited.');\n  generator.printNewline();\n\n  if (context.namespace) {\n    packageDeclaration(generator, context.namespace);\n  }\n\n  context.typesUsed.forEach(type => {\n    typeDeclarationForGraphQLType(generator, type);\n  });\n\n  Object.values(context.operations).forEach(operation => {\n    classDeclarationForOperation(generator, operation);\n  });\n\n  Object.values(context.fragments).forEach(fragment => {\n    caseClassDeclarationForFragment(generator, fragment);\n  });\n\n  return generator.output;\n}\n\nexport function classDeclarationForOperation(\n  generator,\n  {\n    operationName,\n    operationType,\n    rootType,\n    variables,\n    fields,\n    inlineFragments,\n    fragmentSpreads,\n    fragmentsReferenced,\n    source,\n    sourceWithFragments,\n    operationId\n  }\n) {\n  let objectName;\n  let protocol;\n\n  switch (operationType) {\n    case 'query':\n      objectName = `${operationClassName(operationName)}Query`;\n      protocol = 'com.apollographql.scalajs.GraphQLQuery';\n      break;\n    case 'mutation':\n      objectName = `${operationClassName(operationName)}Mutation`;\n      protocol = 'com.apollographql.scalajs.GraphQLMutation';\n      break;\n    default:\n      throw new GraphQLError(`Unsupported operation type \"${operationType}\"`);\n  }\n\n  objectDeclaration(generator, {\n    objectName,\n    modifiers: [],\n    superclass: protocol\n  }, () => {\n    if (source) {\n      generator.printOnNewline('val operationString =');\n      generator.withIndent(() => {\n        multilineString(generator, source);\n      });\n    }\n\n    operationIdentifier(generator, { operationName, sourceWithFragments, operationId });\n\n    if (fragmentsReferenced && fragmentsReferenced.length > 0) {\n      generator.printNewlineIfNeeded();\n      generator.printOnNewline('val requestString: String = { operationString');\n      fragmentsReferenced.forEach(fragment => {\n        generator.print(` + ${caseClassNameForFragmentName(fragment)}.fragmentString`)\n      });\n      generator.print(' }');\n\n      generator.printOnNewline('val operation = com.apollographql.scalajs.gql(requestString)');\n    } else {\n      generator.printOnNewline('val operation = com.apollographql.scalajs.gql(operationString)');\n    }\n\n    generator.printNewlineIfNeeded();\n\n    if (variables && variables.length > 0) {\n      const properties = variables.map(({ name, type }) => {\n        const propertyName = escapeIdentifierIfNeeded(name);\n        const typeName = typeNameFromGraphQLType(generator.context, type);\n        const isOptional = !(type instanceof GraphQLNonNull || type.ofType instanceof GraphQLNonNull);\n        return { name, propertyName, type, typeName, isOptional };\n      });\n\n      caseClassDeclaration(generator, { caseClassName: 'Variables', description: '', params: properties.map(p => {\n        return {\n          name: p.propertyName,\n          type: p.typeName\n        };\n      })}, () => {});\n    } else {\n      generator.printOnNewline('type Variables = Unit');\n    }\n\n    caseClassDeclarationForSelectionSet(\n      generator,\n      {\n        caseClassName: \"Data\",\n        parentType: rootType,\n        fields,\n        inlineFragments,\n        fragmentSpreads\n      }\n    );\n  });\n}\n\nexport function caseClassDeclarationForFragment(\n  generator,\n  {\n    fragmentName,\n    typeCondition,\n    fields,\n    inlineFragments,\n    fragmentSpreads,\n    source\n  }\n) {\n  const caseClassName = caseClassNameForFragmentName(fragmentName);\n\n  caseClassDeclarationForSelectionSet(generator, {\n    caseClassName,\n    parentType: typeCondition,\n    fields,\n    inlineFragments,\n    fragmentSpreads\n  }, () => {}, () => {\n    if (source) {\n      generator.printOnNewline('val fragmentString =');\n      generator.withIndent(() => {\n        multilineString(generator, source);\n      });\n    }\n  });\n}\n\nexport function caseClassDeclarationForSelectionSet(\n  generator,\n  {\n    caseClassName,\n    parentType,\n    fields,\n    inlineFragments,\n    fragmentSpreads,\n    viewableAs\n  },\n  beforeClosure,\n  objectClosure,\n) {\n  const possibleTypes = parentType ? possibleTypesForType(generator.context, parentType) : null;\n\n  let properties;\n\n  if (!possibleTypes || possibleTypes.length == 1) {\n    properties = fields\n      .map(field => propertyFromField(generator.context, field))\n      .filter(field => field.propertyName != \"__typename\");\n\n    caseClassDeclaration(generator, { caseClassName, params: properties.map(p => {\n      return {\n        name: p.responseName,\n        type: p.typeName,\n      };\n    }) }, () => {});\n  } else {\n    generator.printNewlineIfNeeded();\n    const properties = fields\n      .map(field => propertyFromField(generator.context, field))\n      .filter(field => field.propertyName != \"__typename\");\n\n    caseClassDeclaration(generator, { caseClassName, params: properties.map(p => {\n      return {\n        name: p.responseName,\n        type: p.typeName,\n      };\n    }), superclass: 'me.shadaj.slinky.core.WithRaw'}, () => {\n      if (inlineFragments && inlineFragments.length > 0) {\n        inlineFragments.forEach((inlineFragment) => {\n          const fragClass = caseClassNameForInlineFragment(inlineFragment);\n          generator.printOnNewline(`def as${inlineFragment.typeCondition}`);\n          generator.print(`: Option[${fragClass}] =`);\n          generator.withinBlock(() => {\n            generator.printOnNewline(`if (${fragClass}.possibleTypes.contains(this.raw.__typename.asInstanceOf[String])) Some(implicitly[me.shadaj.slinky.core.Reader[${fragClass}]].read(this.raw)) else None`);\n          });\n        });\n      }\n\n      if (fragmentSpreads) {\n        fragmentSpreads.forEach(s => {\n          const fragment = generator.context.fragments[s];\n          const alwaysDefined = isTypeProperSuperTypeOf(generator.context.schema, fragment.typeCondition, parentType);\n          if (!alwaysDefined) {\n            generator.printOnNewline(`def as${s}`);\n            generator.print(`: Option[${s}] =`);\n            generator.withinBlock(() => {\n              generator.printOnNewline(`if (${s}.possibleTypes.contains(this.raw.__typename.asInstanceOf[String])) Some(implicitly[me.shadaj.slinky.core.Reader[${s}]].read(this.raw)) else None`);\n            });\n          }\n        })\n      }\n    });\n\n    // add types and implicit conversions\n    if (inlineFragments && inlineFragments.length > 0) {\n      inlineFragments.forEach((inlineFragment) => {\n        caseClassDeclarationForSelectionSet(\n          generator,\n          {\n            caseClassName: caseClassNameForInlineFragment(inlineFragment),\n            parentType: inlineFragment.typeCondition,\n            fields: inlineFragment.fields,\n            inlineFragments: inlineFragment.inlineFragments,\n            fragmentSpreads: inlineFragment.fragmentSpreads,\n            viewableAs: {\n              caseClassName,\n              properties,\n            },\n          }\n        );\n      });\n    }\n  }\n\n  objectDeclaration(generator, { objectName: caseClassName }, () => {\n    if (possibleTypes) {\n      generator.printNewlineIfNeeded();\n      generator.printOnNewline('val possibleTypes = scala.collection.Set(');\n      generator.print(join(possibleTypes.map(type => `\"${String(type)}\"`), ', '));\n      generator.print(')');\n    }\n\n    if (viewableAs) {\n      generator.printOnNewline(`implicit def to${viewableAs.caseClassName}(a: ${caseClassName}): ${viewableAs.caseClassName} = ${viewableAs.caseClassName}(${viewableAs.properties.map(p => \"a.\" + p.responseName).join(', ')})`);\n    }\n\n    if (fragmentSpreads) {\n      fragmentSpreads.forEach(s => {\n        const fragment = generator.context.fragments[s];\n        const alwaysDefined = isTypeProperSuperTypeOf(generator.context.schema, fragment.typeCondition, parentType);\n        if (alwaysDefined) {\n          generator.printOnNewline(`implicit def to${s}(a: ${caseClassName}): ${s} = ${s}(${(fragment.fields || []).map(p => \"a.\" + p.responseName).join(', ')})`);\n        }\n      })\n    }\n\n    if (objectClosure) {\n      objectClosure();\n    }\n  });\n\n  fields.filter(field => isCompositeType(getNamedType(field.type))).forEach(field => {\n    caseClassDeclarationForSelectionSet(\n      generator,\n      {\n        caseClassName: caseClassNameForPropertyName(field.responseName),\n        parentType: getNamedType(field.type),\n        fields: field.fields,\n        inlineFragments: field.inlineFragments,\n        fragmentSpreads: field.fragmentSpreads\n      }\n    );\n  });\n}\n\nfunction operationIdentifier(generator,  { operationName, sourceWithFragments, operationId }) {\n  if (!generator.context.generateOperationIds) {\n    return\n  }\n\n  generator.printNewlineIfNeeded();\n  generator.printOnNewline(`val operationIdentifier: String = \"${operationId}\"`);\n}\n\nexport function typeDeclarationForGraphQLType(generator, type) {\n  if (type instanceof GraphQLEnumType) {\n    enumerationDeclaration(generator, type);\n  } else if (type instanceof GraphQLInputObjectType) {\n    caseClassDeclarationForInputObjectType(generator, type);\n  }\n}\n\nfunction enumerationDeclaration(generator, type) {\n  const { name, description } = type;\n  const values = type.getValues();\n\n  generator.printNewlineIfNeeded();\n  comment(generator, description);\n  generator.printOnNewline(`object ${name}`);\n  generator.withinBlock(() => {\n    values.forEach(value => {\n      comment(generator, value.description);\n      generator.printOnNewline(`val ${escapeIdentifierIfNeeded(enumCaseName(value.name))} = \"${value.value}\"`);\n    });\n  });\n  generator.printNewline();\n}\n\nfunction caseClassDeclarationForInputObjectType(generator, type) {\n  const { name: caseClassName, description } = type;\n  const fields = Object.values(type.getFields());\n  const properties = fields.map(field => propertyFromField(generator.context, field));\n\n  caseClassDeclaration(generator, { caseClassName, description, params: properties.map(p => {\n    return {\n      name: p.propertyName,\n      type: p.typeName\n    };\n  })}, () => {});\n}\n"],"sourceRoot":""}