{"version":3,"sources":["language.js"],"names":[],"mappings":";;AAAA,MAAA,gBAAA,QAAA,aAAA,CAAA;AAEA,MAAA,kBAAA,QAAA,mCAAA,CAAA;AAEA,MAAA,aAAA,QAAA,0BAAA,CAAA;AAMA,SAAS,kDAAT,EAA6D,YAAA;AAC3D,QAAI,SAAJ;AAEA,eAAW,YAAA;AACT,oBAAY,IAAI,gBAAA,OAAJ,EAAZ;AACD,KAFD;AAIA,SAAK,sCAAL,EAA6C,YAAA;AAC3C,mBAAA,iBAAA,CAAkB,SAAlB,EAA6B,EAAE,YAAY,MAAd,EAA7B,EAAqD,MAAK;AACxD,uBAAA,mBAAA,CAAoB,SAApB,EAA+B,EAAE,cAAc,MAAhB,EAAwB,UAAU,QAAlC,EAA/B,EAA6E,MAAK,CAAG,CAArF;AACA,uBAAA,mBAAA,CAAoB,SAApB,EAA+B,EAAE,cAAc,KAAhB,EAAuB,UAAU,KAAjC,EAA/B,EAAyE,MAAK,CAAG,CAAjF;AACD,SAHD;AAKA,eAAO,UAAU,MAAjB,EAAyB,IAAzB,CAA8B,cAAA,WAAW;;;;;;;KAAzC;AAQD,KAdD;AAgBA,SAAK,0CAAL,EAAiD,YAAA;AAC/C,mBAAA,oBAAA,CAAqB,SAArB,EAAgC,EAAE,eAAe,MAAjB,EAAyB,QAAQ,CAAC,EAAC,MAAM,MAAP,EAAe,MAAM,QAArB,EAAD,EAAiC,EAAC,MAAM,KAAP,EAAc,MAAM,KAApB,EAAjC,CAAjC,EAAhC,EAAiI,MAAK,CAAG,CAAzI;AAEA,eAAO,UAAU,MAAjB,EAAyB,IAAzB,CAA8B,cAAA,WAAW;;;KAAzC;AAID,KAPD;AASA,SAAK,gDAAL,EAAuD,YAAA;AACrD,mBAAA,oBAAA,CAAqB,SAArB,EAAgC,EAAE,eAAe,MAAjB,EAAyB,QAAQ,CAAC,EAAC,MAAM,MAAP,EAAe,MAAM,QAArB,EAAD,EAAiC,EAAC,MAAM,KAAP,EAAc,MAAM,KAApB,EAAjC,CAAjC,EAAhC,EAAiI,MAAK;AACpI,uBAAA,oBAAA,CAAqB,SAArB,EAAgC,EAAE,eAAe,QAAjB,EAA2B,QAAQ,CAAC,EAAC,MAAM,MAAP,EAAe,MAAM,QAArB,EAAD,CAAnC,EAAhC,EAAuG,MAAK,CAAG,CAA/G;AACD,SAFD;AAIA,eAAO,UAAU,MAAjB,EAAyB,IAAzB,CAA8B,cAAA,WAAW;;;;;KAAzC;AAMD,KAXD;AAaA,SAAK,uCAAL,EAA8C,MAAK;AACjD,mBAAA,oBAAA,CAAqB,SAArB,EAAgC,EAAE,eAAe,MAAjB,EAAyB,aAAa,QAAtC,EAAhC,EAAkF,MAAK;AACrF,uBAAA,mBAAA,CAAoB,SAApB,EAA+B,EAAE,cAAc,MAAhB,EAAwB,UAAU,QAAlC,EAA4C,aAAa,4CAAzD,EAA/B,EAAwI,MAAK,CAAG,CAAhJ;AACA,uBAAA,mBAAA,CAAoB,SAApB,EAA+B,EAAE,cAAc,KAAhB,EAAuB,UAAU,QAAjC,EAA2C,aAAa,2CAAxD,EAA/B,EAAsI,MAAK,CAAG,CAA9I;AACD,SAHD;AAKA,eAAO,UAAU,MAAjB,EAAyB,eAAzB;AACD,KAPD;AAQD,CArDD","sourcesContent":["import { stripIndent } from 'common-tags';\n\nimport CodeGenerator from '../../src/utilities/CodeGenerator';\n\nimport {\n  objectDeclaration,\n  caseClassDeclaration,\n  propertyDeclaration,\n} from '../../src/scala/language';\n\ndescribe('Scala code generation: Basic language constructs', function() {\n  let generator;\n\n  beforeEach(function() {\n    generator = new CodeGenerator();\n  });\n\n  test(`should generate a object declaration`, function() {\n    objectDeclaration(generator, { objectName: 'Hero' }, () => {\n      propertyDeclaration(generator, { propertyName: 'name', typeName: 'String' }, () => {});\n      propertyDeclaration(generator, { propertyName: 'age', typeName: 'Int' }, () => {});\n    });\n\n    expect(generator.output).toBe(stripIndent`\n      object Hero {\n        val name: String = {\n        }\n        val age: Int = {\n        }\n      }\n    `);\n  });\n\n  test(`should generate a case class declaration`, function() {\n    caseClassDeclaration(generator, { caseClassName: 'Hero', params: [{name: 'name', type: 'String'}, {name: 'age', type: 'Int'}] }, () => {});\n\n    expect(generator.output).toBe(stripIndent`\n      case class Hero(name: String, age: Int) {\n      }\n    `);\n  });\n\n  test(`should generate nested case class declarations`, function() {\n    caseClassDeclaration(generator, { caseClassName: 'Hero', params: [{name: 'name', type: 'String'}, {name: 'age', type: 'Int'}] }, () => {\n      caseClassDeclaration(generator, { caseClassName: 'Friend', params: [{name: 'name', type: 'String'}] }, () => {});\n    });\n\n    expect(generator.output).toBe(stripIndent`\n      case class Hero(name: String, age: Int) {\n        case class Friend(name: String) {\n        }\n      }\n    `);\n  });\n\n  test(`should handle multi-line descriptions`, () => {\n    caseClassDeclaration(generator, { caseClassName: 'Hero', description: 'A hero' }, () => {\n      propertyDeclaration(generator, { propertyName: 'name', typeName: 'String', description: `A multiline comment \\n on the hero's name.` }, () => {});\n      propertyDeclaration(generator, { propertyName: 'age', typeName: 'String', description: `A multiline comment \\n on the hero's age.` }, () => {});\n    });\n\n    expect(generator.output).toMatchSnapshot();\n  });\n});\n"],"sourceRoot":""}