ae70c8052839403e72329046d45eed64
'use strict';require('ts-jest').install("/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-types-generator/src/scala/codeGeneration.js", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst graphql_1 = require(\"graphql\");\nconst graphql_2 = require(\"../utilities/graphql\");\nconst printing_1 = require(\"../utilities/printing\");\nconst language_1 = require(\"./language\");\nconst naming_1 = require(\"./naming\");\nconst values_1 = require(\"./values\");\nconst types_1 = require(\"./types\");\nconst CodeGenerator_1 = require(\"../utilities/CodeGenerator\");\nfunction generateSource(context, options) {\n    const generator = new CodeGenerator_1.default(context);\n    generator.printOnNewline('//  This file was automatically generated and should not be edited.');\n    generator.printNewline();\n    if (context.namespace) {\n        language_1.packageDeclaration(generator, context.namespace);\n    }\n    context.typesUsed.forEach(type => {\n        typeDeclarationForGraphQLType(generator, type);\n    });\n    Object.values(context.operations).forEach(operation => {\n        classDeclarationForOperation(generator, operation);\n    });\n    Object.values(context.fragments).forEach(fragment => {\n        caseClassDeclarationForFragment(generator, fragment);\n    });\n    return generator.output;\n}\nexports.generateSource = generateSource;\nfunction classDeclarationForOperation(generator, { operationName, operationType, rootType, variables, fields, inlineFragments, fragmentSpreads, fragmentsReferenced, source, sourceWithFragments, operationId }) {\n    let objectName;\n    let protocol;\n    switch (operationType) {\n        case 'query':\n            objectName = `${naming_1.operationClassName(operationName)}Query`;\n            protocol = 'com.apollographql.scalajs.GraphQLQuery';\n            break;\n        case 'mutation':\n            objectName = `${naming_1.operationClassName(operationName)}Mutation`;\n            protocol = 'com.apollographql.scalajs.GraphQLMutation';\n            break;\n        default:\n            throw new graphql_1.GraphQLError(`Unsupported operation type \"${operationType}\"`);\n    }\n    language_1.objectDeclaration(generator, {\n        objectName,\n        modifiers: [],\n        superclass: protocol\n    }, () => {\n        if (source) {\n            generator.printOnNewline('val operationString =');\n            generator.withIndent(() => {\n                values_1.multilineString(generator, source);\n            });\n        }\n        operationIdentifier(generator, { operationName, sourceWithFragments, operationId });\n        if (fragmentsReferenced && fragmentsReferenced.length > 0) {\n            generator.printNewlineIfNeeded();\n            generator.printOnNewline('val requestString: String = { operationString');\n            fragmentsReferenced.forEach(fragment => {\n                generator.print(` + ${naming_1.caseClassNameForFragmentName(fragment)}.fragmentString`);\n            });\n            generator.print(' }');\n            generator.printOnNewline('val operation = com.apollographql.scalajs.gql(requestString)');\n        }\n        else {\n            generator.printOnNewline('val operation = com.apollographql.scalajs.gql(operationString)');\n        }\n        generator.printNewlineIfNeeded();\n        if (variables && variables.length > 0) {\n            const properties = variables.map(({ name, type }) => {\n                const propertyName = language_1.escapeIdentifierIfNeeded(name);\n                const typeName = types_1.typeNameFromGraphQLType(generator.context, type);\n                const isOptional = !(type instanceof graphql_1.GraphQLNonNull || type.ofType instanceof graphql_1.GraphQLNonNull);\n                return { name, propertyName, type, typeName, isOptional };\n            });\n            language_1.caseClassDeclaration(generator, { caseClassName: 'Variables', description: '', params: properties.map(p => {\n                    return {\n                        name: p.propertyName,\n                        type: p.typeName\n                    };\n                }) }, () => { });\n        }\n        else {\n            generator.printOnNewline('type Variables = Unit');\n        }\n        caseClassDeclarationForSelectionSet(generator, {\n            caseClassName: \"Data\",\n            parentType: rootType,\n            fields,\n            inlineFragments,\n            fragmentSpreads\n        });\n    });\n}\nexports.classDeclarationForOperation = classDeclarationForOperation;\nfunction caseClassDeclarationForFragment(generator, { fragmentName, typeCondition, fields, inlineFragments, fragmentSpreads, source }) {\n    const caseClassName = naming_1.caseClassNameForFragmentName(fragmentName);\n    caseClassDeclarationForSelectionSet(generator, {\n        caseClassName,\n        parentType: typeCondition,\n        fields,\n        inlineFragments,\n        fragmentSpreads\n    }, () => { }, () => {\n        if (source) {\n            generator.printOnNewline('val fragmentString =');\n            generator.withIndent(() => {\n                values_1.multilineString(generator, source);\n            });\n        }\n    });\n}\nexports.caseClassDeclarationForFragment = caseClassDeclarationForFragment;\nfunction caseClassDeclarationForSelectionSet(generator, { caseClassName, parentType, fields, inlineFragments, fragmentSpreads, viewableAs }, beforeClosure, objectClosure) {\n    const possibleTypes = parentType ? types_1.possibleTypesForType(generator.context, parentType) : null;\n    let properties;\n    if (!possibleTypes || possibleTypes.length == 1) {\n        properties = fields\n            .map(field => naming_1.propertyFromField(generator.context, field))\n            .filter(field => field.propertyName != \"__typename\");\n        language_1.caseClassDeclaration(generator, { caseClassName, params: properties.map(p => {\n                return {\n                    name: p.responseName,\n                    type: p.typeName,\n                };\n            }) }, () => { });\n    }\n    else {\n        generator.printNewlineIfNeeded();\n        const properties = fields\n            .map(field => naming_1.propertyFromField(generator.context, field))\n            .filter(field => field.propertyName != \"__typename\");\n        language_1.caseClassDeclaration(generator, { caseClassName, params: properties.map(p => {\n                return {\n                    name: p.responseName,\n                    type: p.typeName,\n                };\n            }), superclass: 'me.shadaj.slinky.core.WithRaw' }, () => {\n            if (inlineFragments && inlineFragments.length > 0) {\n                inlineFragments.forEach((inlineFragment) => {\n                    const fragClass = naming_1.caseClassNameForInlineFragment(inlineFragment);\n                    generator.printOnNewline(`def as${inlineFragment.typeCondition}`);\n                    generator.print(`: Option[${fragClass}] =`);\n                    generator.withinBlock(() => {\n                        generator.printOnNewline(`if (${fragClass}.possibleTypes.contains(this.raw.__typename.asInstanceOf[String])) Some(implicitly[me.shadaj.slinky.core.Reader[${fragClass}]].read(this.raw)) else None`);\n                    });\n                });\n            }\n            if (fragmentSpreads) {\n                fragmentSpreads.forEach(s => {\n                    const fragment = generator.context.fragments[s];\n                    const alwaysDefined = graphql_2.isTypeProperSuperTypeOf(generator.context.schema, fragment.typeCondition, parentType);\n                    if (!alwaysDefined) {\n                        generator.printOnNewline(`def as${s}`);\n                        generator.print(`: Option[${s}] =`);\n                        generator.withinBlock(() => {\n                            generator.printOnNewline(`if (${s}.possibleTypes.contains(this.raw.__typename.asInstanceOf[String])) Some(implicitly[me.shadaj.slinky.core.Reader[${s}]].read(this.raw)) else None`);\n                        });\n                    }\n                });\n            }\n        });\n        if (inlineFragments && inlineFragments.length > 0) {\n            inlineFragments.forEach((inlineFragment) => {\n                caseClassDeclarationForSelectionSet(generator, {\n                    caseClassName: naming_1.caseClassNameForInlineFragment(inlineFragment),\n                    parentType: inlineFragment.typeCondition,\n                    fields: inlineFragment.fields,\n                    inlineFragments: inlineFragment.inlineFragments,\n                    fragmentSpreads: inlineFragment.fragmentSpreads,\n                    viewableAs: {\n                        caseClassName,\n                        properties,\n                    },\n                });\n            });\n        }\n    }\n    language_1.objectDeclaration(generator, { objectName: caseClassName }, () => {\n        if (possibleTypes) {\n            generator.printNewlineIfNeeded();\n            generator.printOnNewline('val possibleTypes = scala.collection.Set(');\n            generator.print(printing_1.join(possibleTypes.map(type => `\"${String(type)}\"`), ', '));\n            generator.print(')');\n        }\n        if (viewableAs) {\n            generator.printOnNewline(`implicit def to${viewableAs.caseClassName}(a: ${caseClassName}): ${viewableAs.caseClassName} = ${viewableAs.caseClassName}(${viewableAs.properties.map(p => \"a.\" + p.responseName).join(', ')})`);\n        }\n        if (fragmentSpreads) {\n            fragmentSpreads.forEach(s => {\n                const fragment = generator.context.fragments[s];\n                const alwaysDefined = graphql_2.isTypeProperSuperTypeOf(generator.context.schema, fragment.typeCondition, parentType);\n                if (alwaysDefined) {\n                    generator.printOnNewline(`implicit def to${s}(a: ${caseClassName}): ${s} = ${s}(${(fragment.fields || []).map(p => \"a.\" + p.responseName).join(', ')})`);\n                }\n            });\n        }\n        if (objectClosure) {\n            objectClosure();\n        }\n    });\n    fields.filter(field => graphql_1.isCompositeType(graphql_1.getNamedType(field.type))).forEach(field => {\n        caseClassDeclarationForSelectionSet(generator, {\n            caseClassName: naming_1.caseClassNameForPropertyName(field.responseName),\n            parentType: graphql_1.getNamedType(field.type),\n            fields: field.fields,\n            inlineFragments: field.inlineFragments,\n            fragmentSpreads: field.fragmentSpreads\n        });\n    });\n}\nexports.caseClassDeclarationForSelectionSet = caseClassDeclarationForSelectionSet;\nfunction operationIdentifier(generator, { operationName, sourceWithFragments, operationId }) {\n    if (!generator.context.generateOperationIds) {\n        return;\n    }\n    generator.printNewlineIfNeeded();\n    generator.printOnNewline(`val operationIdentifier: String = \"${operationId}\"`);\n}\nfunction typeDeclarationForGraphQLType(generator, type) {\n    if (type instanceof graphql_1.GraphQLEnumType) {\n        enumerationDeclaration(generator, type);\n    }\n    else if (type instanceof graphql_1.GraphQLInputObjectType) {\n        caseClassDeclarationForInputObjectType(generator, type);\n    }\n}\nexports.typeDeclarationForGraphQLType = typeDeclarationForGraphQLType;\nfunction enumerationDeclaration(generator, type) {\n    const { name, description } = type;\n    const values = type.getValues();\n    generator.printNewlineIfNeeded();\n    language_1.comment(generator, description);\n    generator.printOnNewline(`object ${name}`);\n    generator.withinBlock(() => {\n        values.forEach(value => {\n            language_1.comment(generator, value.description);\n            generator.printOnNewline(`val ${language_1.escapeIdentifierIfNeeded(naming_1.enumCaseName(value.name))} = \"${value.value}\"`);\n        });\n    });\n    generator.printNewline();\n}\nfunction caseClassDeclarationForInputObjectType(generator, type) {\n    const { name: caseClassName, description } = type;\n    const fields = Object.values(type.getFields());\n    const properties = fields.map(field => naming_1.propertyFromField(generator.context, field));\n    language_1.caseClassDeclaration(generator, { caseClassName, description, params: properties.map(p => {\n            return {\n                name: p.propertyName,\n                type: p.typeName\n            };\n        }) }, () => { });\n}\n//# sourceMappingURL=data:application/json;base64,");"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = require("graphql");
const graphql_2 = require("../utilities/graphql");
const printing_1 = require("../utilities/printing");
const language_1 = require("./language");
const naming_1 = require("./naming");
const values_1 = require("./values");
const types_1 = require("./types");
const CodeGenerator_1 = require("../utilities/CodeGenerator");
function generateSource(context, options) {
    const generator = new CodeGenerator_1.default(context);
    generator.printOnNewline('//  This file was automatically generated and should not be edited.');
    generator.printNewline();
    if (context.namespace) {
        language_1.packageDeclaration(generator, context.namespace);
    }
    context.typesUsed.forEach(type => {
        typeDeclarationForGraphQLType(generator, type);
    });
    Object.values(context.operations).forEach(operation => {
        classDeclarationForOperation(generator, operation);
    });
    Object.values(context.fragments).forEach(fragment => {
        caseClassDeclarationForFragment(generator, fragment);
    });
    return generator.output;
}
exports.generateSource = generateSource;
function classDeclarationForOperation(generator, { operationName, operationType, rootType, variables, fields, inlineFragments, fragmentSpreads, fragmentsReferenced, source, sourceWithFragments, operationId }) {
    let objectName;
    let protocol;
    switch (operationType) {
        case 'query':
            objectName = `${naming_1.operationClassName(operationName)}Query`;
            protocol = 'com.apollographql.scalajs.GraphQLQuery';
            break;
        case 'mutation':
            objectName = `${naming_1.operationClassName(operationName)}Mutation`;
            protocol = 'com.apollographql.scalajs.GraphQLMutation';
            break;
        default:
            throw new graphql_1.GraphQLError(`Unsupported operation type "${operationType}"`);}

    language_1.objectDeclaration(generator, {
        objectName,
        modifiers: [],
        superclass: protocol },
    () => {
        if (source) {
            generator.printOnNewline('val operationString =');
            generator.withIndent(() => {
                values_1.multilineString(generator, source);
            });
        }
        operationIdentifier(generator, { operationName, sourceWithFragments, operationId });
        if (fragmentsReferenced && fragmentsReferenced.length > 0) {
            generator.printNewlineIfNeeded();
            generator.printOnNewline('val requestString: String = { operationString');
            fragmentsReferenced.forEach(fragment => {
                generator.print(` + ${naming_1.caseClassNameForFragmentName(fragment)}.fragmentString`);
            });
            generator.print(' }');
            generator.printOnNewline('val operation = com.apollographql.scalajs.gql(requestString)');
        } else
        {
            generator.printOnNewline('val operation = com.apollographql.scalajs.gql(operationString)');
        }
        generator.printNewlineIfNeeded();
        if (variables && variables.length > 0) {
            const properties = variables.map(({ name, type }) => {
                const propertyName = language_1.escapeIdentifierIfNeeded(name);
                const typeName = types_1.typeNameFromGraphQLType(generator.context, type);
                const isOptional = !(type instanceof graphql_1.GraphQLNonNull || type.ofType instanceof graphql_1.GraphQLNonNull);
                return { name, propertyName, type, typeName, isOptional };
            });
            language_1.caseClassDeclaration(generator, { caseClassName: 'Variables', description: '', params: properties.map(p => {
                    return {
                        name: p.propertyName,
                        type: p.typeName };

                }) }, () => {});
        } else
        {
            generator.printOnNewline('type Variables = Unit');
        }
        caseClassDeclarationForSelectionSet(generator, {
            caseClassName: "Data",
            parentType: rootType,
            fields,
            inlineFragments,
            fragmentSpreads });

    });
}
exports.classDeclarationForOperation = classDeclarationForOperation;
function caseClassDeclarationForFragment(generator, { fragmentName, typeCondition, fields, inlineFragments, fragmentSpreads, source }) {
    const caseClassName = naming_1.caseClassNameForFragmentName(fragmentName);
    caseClassDeclarationForSelectionSet(generator, {
        caseClassName,
        parentType: typeCondition,
        fields,
        inlineFragments,
        fragmentSpreads },
    () => {}, () => {
        if (source) {
            generator.printOnNewline('val fragmentString =');
            generator.withIndent(() => {
                values_1.multilineString(generator, source);
            });
        }
    });
}
exports.caseClassDeclarationForFragment = caseClassDeclarationForFragment;
function caseClassDeclarationForSelectionSet(generator, { caseClassName, parentType, fields, inlineFragments, fragmentSpreads, viewableAs }, beforeClosure, objectClosure) {
    const possibleTypes = parentType ? types_1.possibleTypesForType(generator.context, parentType) : null;
    let properties;
    if (!possibleTypes || possibleTypes.length == 1) {
        properties = fields.
        map(field => naming_1.propertyFromField(generator.context, field)).
        filter(field => field.propertyName != "__typename");
        language_1.caseClassDeclaration(generator, { caseClassName, params: properties.map(p => {
                return {
                    name: p.responseName,
                    type: p.typeName };

            }) }, () => {});
    } else
    {
        generator.printNewlineIfNeeded();
        const properties = fields.
        map(field => naming_1.propertyFromField(generator.context, field)).
        filter(field => field.propertyName != "__typename");
        language_1.caseClassDeclaration(generator, { caseClassName, params: properties.map(p => {
                return {
                    name: p.responseName,
                    type: p.typeName };

            }), superclass: 'me.shadaj.slinky.core.WithRaw' }, () => {
            if (inlineFragments && inlineFragments.length > 0) {
                inlineFragments.forEach(inlineFragment => {
                    const fragClass = naming_1.caseClassNameForInlineFragment(inlineFragment);
                    generator.printOnNewline(`def as${inlineFragment.typeCondition}`);
                    generator.print(`: Option[${fragClass}] =`);
                    generator.withinBlock(() => {
                        generator.printOnNewline(`if (${fragClass}.possibleTypes.contains(this.raw.__typename.asInstanceOf[String])) Some(implicitly[me.shadaj.slinky.core.Reader[${fragClass}]].read(this.raw)) else None`);
                    });
                });
            }
            if (fragmentSpreads) {
                fragmentSpreads.forEach(s => {
                    const fragment = generator.context.fragments[s];
                    const alwaysDefined = graphql_2.isTypeProperSuperTypeOf(generator.context.schema, fragment.typeCondition, parentType);
                    if (!alwaysDefined) {
                        generator.printOnNewline(`def as${s}`);
                        generator.print(`: Option[${s}] =`);
                        generator.withinBlock(() => {
                            generator.printOnNewline(`if (${s}.possibleTypes.contains(this.raw.__typename.asInstanceOf[String])) Some(implicitly[me.shadaj.slinky.core.Reader[${s}]].read(this.raw)) else None`);
                        });
                    }
                });
            }
        });
        if (inlineFragments && inlineFragments.length > 0) {
            inlineFragments.forEach(inlineFragment => {
                caseClassDeclarationForSelectionSet(generator, {
                    caseClassName: naming_1.caseClassNameForInlineFragment(inlineFragment),
                    parentType: inlineFragment.typeCondition,
                    fields: inlineFragment.fields,
                    inlineFragments: inlineFragment.inlineFragments,
                    fragmentSpreads: inlineFragment.fragmentSpreads,
                    viewableAs: {
                        caseClassName,
                        properties } });


            });
        }
    }
    language_1.objectDeclaration(generator, { objectName: caseClassName }, () => {
        if (possibleTypes) {
            generator.printNewlineIfNeeded();
            generator.printOnNewline('val possibleTypes = scala.collection.Set(');
            generator.print(printing_1.join(possibleTypes.map(type => `"${String(type)}"`), ', '));
            generator.print(')');
        }
        if (viewableAs) {
            generator.printOnNewline(`implicit def to${viewableAs.caseClassName}(a: ${caseClassName}): ${viewableAs.caseClassName} = ${viewableAs.caseClassName}(${viewableAs.properties.map(p => "a." + p.responseName).join(', ')})`);
        }
        if (fragmentSpreads) {
            fragmentSpreads.forEach(s => {
                const fragment = generator.context.fragments[s];
                const alwaysDefined = graphql_2.isTypeProperSuperTypeOf(generator.context.schema, fragment.typeCondition, parentType);
                if (alwaysDefined) {
                    generator.printOnNewline(`implicit def to${s}(a: ${caseClassName}): ${s} = ${s}(${(fragment.fields || []).map(p => "a." + p.responseName).join(', ')})`);
                }
            });
        }
        if (objectClosure) {
            objectClosure();
        }
    });
    fields.filter(field => graphql_1.isCompositeType(graphql_1.getNamedType(field.type))).forEach(field => {
        caseClassDeclarationForSelectionSet(generator, {
            caseClassName: naming_1.caseClassNameForPropertyName(field.responseName),
            parentType: graphql_1.getNamedType(field.type),
            fields: field.fields,
            inlineFragments: field.inlineFragments,
            fragmentSpreads: field.fragmentSpreads });

    });
}
exports.caseClassDeclarationForSelectionSet = caseClassDeclarationForSelectionSet;
function operationIdentifier(generator, { operationName, sourceWithFragments, operationId }) {
    if (!generator.context.generateOperationIds) {
        return;
    }
    generator.printNewlineIfNeeded();
    generator.printOnNewline(`val operationIdentifier: String = "${operationId}"`);
}
function typeDeclarationForGraphQLType(generator, type) {
    if (type instanceof graphql_1.GraphQLEnumType) {
        enumerationDeclaration(generator, type);
    } else
    if (type instanceof graphql_1.GraphQLInputObjectType) {
        caseClassDeclarationForInputObjectType(generator, type);
    }
}
exports.typeDeclarationForGraphQLType = typeDeclarationForGraphQLType;
function enumerationDeclaration(generator, type) {
    const { name, description } = type;
    const values = type.getValues();
    generator.printNewlineIfNeeded();
    language_1.comment(generator, description);
    generator.printOnNewline(`object ${name}`);
    generator.withinBlock(() => {
        values.forEach(value => {
            language_1.comment(generator, value.description);
            generator.printOnNewline(`val ${language_1.escapeIdentifierIfNeeded(naming_1.enumCaseName(value.name))} = "${value.value}"`);
        });
    });
    generator.printNewline();
}
function caseClassDeclarationForInputObjectType(generator, type) {
    const { name: caseClassName, description } = type;
    const fields = Object.values(type.getFields());
    const properties = fields.map(field => naming_1.propertyFromField(generator.context, field));
    language_1.caseClassDeclaration(generator, { caseClassName, description, params: properties.map(p => {
            return {
                name: p.propertyName,
                type: p.typeName };

        }) }, () => {});
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,