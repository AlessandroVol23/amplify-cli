e8a09c1b551e2c9e8293c8808e112bad
'use strict';require('ts-jest').install("/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-types-generator/test/scala/language.js", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst common_tags_1 = require(\"common-tags\");\nconst CodeGenerator_1 = require(\"../../src/utilities/CodeGenerator\");\nconst language_1 = require(\"../../src/scala/language\");\ndescribe('Scala code generation: Basic language constructs', function () {\n    let generator;\n    beforeEach(function () {\n        generator = new CodeGenerator_1.default();\n    });\n    test(`should generate a object declaration`, function () {\n        language_1.objectDeclaration(generator, { objectName: 'Hero' }, () => {\n            language_1.propertyDeclaration(generator, { propertyName: 'name', typeName: 'String' }, () => { });\n            language_1.propertyDeclaration(generator, { propertyName: 'age', typeName: 'Int' }, () => { });\n        });\n        expect(generator.output).toBe(common_tags_1.stripIndent `\n      object Hero {\n        val name: String = {\n        }\n        val age: Int = {\n        }\n      }\n    `);\n    });\n    test(`should generate a case class declaration`, function () {\n        language_1.caseClassDeclaration(generator, { caseClassName: 'Hero', params: [{ name: 'name', type: 'String' }, { name: 'age', type: 'Int' }] }, () => { });\n        expect(generator.output).toBe(common_tags_1.stripIndent `\n      case class Hero(name: String, age: Int) {\n      }\n    `);\n    });\n    test(`should generate nested case class declarations`, function () {\n        language_1.caseClassDeclaration(generator, { caseClassName: 'Hero', params: [{ name: 'name', type: 'String' }, { name: 'age', type: 'Int' }] }, () => {\n            language_1.caseClassDeclaration(generator, { caseClassName: 'Friend', params: [{ name: 'name', type: 'String' }] }, () => { });\n        });\n        expect(generator.output).toBe(common_tags_1.stripIndent `\n      case class Hero(name: String, age: Int) {\n        case class Friend(name: String) {\n        }\n      }\n    `);\n    });\n    test(`should handle multi-line descriptions`, () => {\n        language_1.caseClassDeclaration(generator, { caseClassName: 'Hero', description: 'A hero' }, () => {\n            language_1.propertyDeclaration(generator, { propertyName: 'name', typeName: 'String', description: `A multiline comment \\n on the hero's name.` }, () => { });\n            language_1.propertyDeclaration(generator, { propertyName: 'age', typeName: 'String', description: `A multiline comment \\n on the hero's age.` }, () => { });\n        });\n        expect(generator.output).toMatchSnapshot();\n    });\n});\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFuZ3VhZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJsYW5ndWFnZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZDQUEwQztBQUUxQyxxRUFBOEQ7QUFFOUQsdURBSWtDO0FBRWxDLFFBQVEsQ0FBQyxrREFBa0QsRUFBRTtJQUMzRCxJQUFJLFNBQVMsQ0FBQztJQUVkLFVBQVUsQ0FBQztRQUNULFNBQVMsR0FBRyxJQUFJLHVCQUFhLEVBQUUsQ0FBQztJQUNsQyxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxzQ0FBc0MsRUFBRTtRQUMzQyw0QkFBaUIsQ0FBQyxTQUFTLEVBQUUsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLEVBQUUsR0FBRyxFQUFFO1lBQ3hELDhCQUFtQixDQUFDLFNBQVMsRUFBRSxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ3ZGLDhCQUFtQixDQUFDLFNBQVMsRUFBRSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3JGLENBQUMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMseUJBQVcsQ0FBQTs7Ozs7OztLQU94QyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQywwQ0FBMEMsRUFBRTtRQUMvQywrQkFBb0IsQ0FBQyxTQUFTLEVBQUUsRUFBRSxhQUFhLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFDLEVBQUUsRUFBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUUsQ0FBQyxDQUFDLENBQUM7UUFFM0ksTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMseUJBQVcsQ0FBQTs7O0tBR3hDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLGdEQUFnRCxFQUFFO1FBQ3JELCtCQUFvQixDQUFDLFNBQVMsRUFBRSxFQUFFLGFBQWEsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUMsRUFBRSxFQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBQyxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUU7WUFDcEksK0JBQW9CLENBQUMsU0FBUyxFQUFFLEVBQUUsYUFBYSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBQyxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRSxDQUFDLENBQUMsQ0FBQztRQUNuSCxDQUFDLENBQUMsQ0FBQztRQUVILE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLHlCQUFXLENBQUE7Ozs7O0tBS3hDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLHVDQUF1QyxFQUFFLEdBQUcsRUFBRTtRQUNqRCwrQkFBb0IsQ0FBQyxTQUFTLEVBQUUsRUFBRSxhQUFhLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUUsRUFBRSxHQUFHLEVBQUU7WUFDckYsOEJBQW1CLENBQUMsU0FBUyxFQUFFLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSw0Q0FBNEMsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ2xKLDhCQUFtQixDQUFDLFNBQVMsRUFBRSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsMkNBQTJDLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRSxDQUFDLENBQUMsQ0FBQztRQUNsSixDQUFDLENBQUMsQ0FBQztRQUVILE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDN0MsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHN0cmlwSW5kZW50IH0gZnJvbSAnY29tbW9uLXRhZ3MnO1xuXG5pbXBvcnQgQ29kZUdlbmVyYXRvciBmcm9tICcuLi8uLi9zcmMvdXRpbGl0aWVzL0NvZGVHZW5lcmF0b3InO1xuXG5pbXBvcnQge1xuICBvYmplY3REZWNsYXJhdGlvbixcbiAgY2FzZUNsYXNzRGVjbGFyYXRpb24sXG4gIHByb3BlcnR5RGVjbGFyYXRpb24sXG59IGZyb20gJy4uLy4uL3NyYy9zY2FsYS9sYW5ndWFnZSc7XG5cbmRlc2NyaWJlKCdTY2FsYSBjb2RlIGdlbmVyYXRpb246IEJhc2ljIGxhbmd1YWdlIGNvbnN0cnVjdHMnLCBmdW5jdGlvbigpIHtcbiAgbGV0IGdlbmVyYXRvcjtcblxuICBiZWZvcmVFYWNoKGZ1bmN0aW9uKCkge1xuICAgIGdlbmVyYXRvciA9IG5ldyBDb2RlR2VuZXJhdG9yKCk7XG4gIH0pO1xuXG4gIHRlc3QoYHNob3VsZCBnZW5lcmF0ZSBhIG9iamVjdCBkZWNsYXJhdGlvbmAsIGZ1bmN0aW9uKCkge1xuICAgIG9iamVjdERlY2xhcmF0aW9uKGdlbmVyYXRvciwgeyBvYmplY3ROYW1lOiAnSGVybycgfSwgKCkgPT4ge1xuICAgICAgcHJvcGVydHlEZWNsYXJhdGlvbihnZW5lcmF0b3IsIHsgcHJvcGVydHlOYW1lOiAnbmFtZScsIHR5cGVOYW1lOiAnU3RyaW5nJyB9LCAoKSA9PiB7fSk7XG4gICAgICBwcm9wZXJ0eURlY2xhcmF0aW9uKGdlbmVyYXRvciwgeyBwcm9wZXJ0eU5hbWU6ICdhZ2UnLCB0eXBlTmFtZTogJ0ludCcgfSwgKCkgPT4ge30pO1xuICAgIH0pO1xuXG4gICAgZXhwZWN0KGdlbmVyYXRvci5vdXRwdXQpLnRvQmUoc3RyaXBJbmRlbnRgXG4gICAgICBvYmplY3QgSGVybyB7XG4gICAgICAgIHZhbCBuYW1lOiBTdHJpbmcgPSB7XG4gICAgICAgIH1cbiAgICAgICAgdmFsIGFnZTogSW50ID0ge1xuICAgICAgICB9XG4gICAgICB9XG4gICAgYCk7XG4gIH0pO1xuXG4gIHRlc3QoYHNob3VsZCBnZW5lcmF0ZSBhIGNhc2UgY2xhc3MgZGVjbGFyYXRpb25gLCBmdW5jdGlvbigpIHtcbiAgICBjYXNlQ2xhc3NEZWNsYXJhdGlvbihnZW5lcmF0b3IsIHsgY2FzZUNsYXNzTmFtZTogJ0hlcm8nLCBwYXJhbXM6IFt7bmFtZTogJ25hbWUnLCB0eXBlOiAnU3RyaW5nJ30sIHtuYW1lOiAnYWdlJywgdHlwZTogJ0ludCd9XSB9LCAoKSA9PiB7fSk7XG5cbiAgICBleHBlY3QoZ2VuZXJhdG9yLm91dHB1dCkudG9CZShzdHJpcEluZGVudGBcbiAgICAgIGNhc2UgY2xhc3MgSGVybyhuYW1lOiBTdHJpbmcsIGFnZTogSW50KSB7XG4gICAgICB9XG4gICAgYCk7XG4gIH0pO1xuXG4gIHRlc3QoYHNob3VsZCBnZW5lcmF0ZSBuZXN0ZWQgY2FzZSBjbGFzcyBkZWNsYXJhdGlvbnNgLCBmdW5jdGlvbigpIHtcbiAgICBjYXNlQ2xhc3NEZWNsYXJhdGlvbihnZW5lcmF0b3IsIHsgY2FzZUNsYXNzTmFtZTogJ0hlcm8nLCBwYXJhbXM6IFt7bmFtZTogJ25hbWUnLCB0eXBlOiAnU3RyaW5nJ30sIHtuYW1lOiAnYWdlJywgdHlwZTogJ0ludCd9XSB9LCAoKSA9PiB7XG4gICAgICBjYXNlQ2xhc3NEZWNsYXJhdGlvbihnZW5lcmF0b3IsIHsgY2FzZUNsYXNzTmFtZTogJ0ZyaWVuZCcsIHBhcmFtczogW3tuYW1lOiAnbmFtZScsIHR5cGU6ICdTdHJpbmcnfV0gfSwgKCkgPT4ge30pO1xuICAgIH0pO1xuXG4gICAgZXhwZWN0KGdlbmVyYXRvci5vdXRwdXQpLnRvQmUoc3RyaXBJbmRlbnRgXG4gICAgICBjYXNlIGNsYXNzIEhlcm8obmFtZTogU3RyaW5nLCBhZ2U6IEludCkge1xuICAgICAgICBjYXNlIGNsYXNzIEZyaWVuZChuYW1lOiBTdHJpbmcpIHtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIGApO1xuICB9KTtcblxuICB0ZXN0KGBzaG91bGQgaGFuZGxlIG11bHRpLWxpbmUgZGVzY3JpcHRpb25zYCwgKCkgPT4ge1xuICAgIGNhc2VDbGFzc0RlY2xhcmF0aW9uKGdlbmVyYXRvciwgeyBjYXNlQ2xhc3NOYW1lOiAnSGVybycsIGRlc2NyaXB0aW9uOiAnQSBoZXJvJyB9LCAoKSA9PiB7XG4gICAgICBwcm9wZXJ0eURlY2xhcmF0aW9uKGdlbmVyYXRvciwgeyBwcm9wZXJ0eU5hbWU6ICduYW1lJywgdHlwZU5hbWU6ICdTdHJpbmcnLCBkZXNjcmlwdGlvbjogYEEgbXVsdGlsaW5lIGNvbW1lbnQgXFxuIG9uIHRoZSBoZXJvJ3MgbmFtZS5gIH0sICgpID0+IHt9KTtcbiAgICAgIHByb3BlcnR5RGVjbGFyYXRpb24oZ2VuZXJhdG9yLCB7IHByb3BlcnR5TmFtZTogJ2FnZScsIHR5cGVOYW1lOiAnU3RyaW5nJywgZGVzY3JpcHRpb246IGBBIG11bHRpbGluZSBjb21tZW50IFxcbiBvbiB0aGUgaGVybydzIGFnZS5gIH0sICgpID0+IHt9KTtcbiAgICB9KTtcblxuICAgIGV4cGVjdChnZW5lcmF0b3Iub3V0cHV0KS50b01hdGNoU25hcHNob3QoKTtcbiAgfSk7XG59KTtcbiJdfQ==");"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const common_tags_1 = require("common-tags");
const CodeGenerator_1 = require("../../src/utilities/CodeGenerator");
const language_1 = require("../../src/scala/language");
describe('Scala code generation: Basic language constructs', function () {
    let generator;
    beforeEach(function () {
        generator = new CodeGenerator_1.default();
    });
    test(`should generate a object declaration`, function () {
        language_1.objectDeclaration(generator, { objectName: 'Hero' }, () => {
            language_1.propertyDeclaration(generator, { propertyName: 'name', typeName: 'String' }, () => {});
            language_1.propertyDeclaration(generator, { propertyName: 'age', typeName: 'Int' }, () => {});
        });
        expect(generator.output).toBe(common_tags_1.stripIndent`
      object Hero {
        val name: String = {
        }
        val age: Int = {
        }
      }
    `);
    });
    test(`should generate a case class declaration`, function () {
        language_1.caseClassDeclaration(generator, { caseClassName: 'Hero', params: [{ name: 'name', type: 'String' }, { name: 'age', type: 'Int' }] }, () => {});
        expect(generator.output).toBe(common_tags_1.stripIndent`
      case class Hero(name: String, age: Int) {
      }
    `);
    });
    test(`should generate nested case class declarations`, function () {
        language_1.caseClassDeclaration(generator, { caseClassName: 'Hero', params: [{ name: 'name', type: 'String' }, { name: 'age', type: 'Int' }] }, () => {
            language_1.caseClassDeclaration(generator, { caseClassName: 'Friend', params: [{ name: 'name', type: 'String' }] }, () => {});
        });
        expect(generator.output).toBe(common_tags_1.stripIndent`
      case class Hero(name: String, age: Int) {
        case class Friend(name: String) {
        }
      }
    `);
    });
    test(`should handle multi-line descriptions`, () => {
        language_1.caseClassDeclaration(generator, { caseClassName: 'Hero', description: 'A hero' }, () => {
            language_1.propertyDeclaration(generator, { propertyName: 'name', typeName: 'String', description: `A multiline comment \n on the hero's name.` }, () => {});
            language_1.propertyDeclaration(generator, { propertyName: 'age', typeName: 'String', description: `A multiline comment \n on the hero's age.` }, () => {});
        });
        expect(generator.output).toMatchSnapshot();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxhbmd1YWdlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBQSxnQkFBQSxRQUFBLGFBQUEsQ0FBQTtBQUVBLE1BQUEsa0JBQUEsUUFBQSxtQ0FBQSxDQUFBO0FBRUEsTUFBQSxhQUFBLFFBQUEsMEJBQUEsQ0FBQTtBQU1BLFNBQVMsa0RBQVQsRUFBNkQsWUFBQTtBQUMzRCxRQUFJLFNBQUo7QUFFQSxlQUFXLFlBQUE7QUFDVCxvQkFBWSxJQUFJLGdCQUFBLE9BQUosRUFBWjtBQUNELEtBRkQ7QUFJQSxTQUFLLHNDQUFMLEVBQTZDLFlBQUE7QUFDM0MsbUJBQUEsaUJBQUEsQ0FBa0IsU0FBbEIsRUFBNkIsRUFBRSxZQUFZLE1BQWQsRUFBN0IsRUFBcUQsTUFBSztBQUN4RCx1QkFBQSxtQkFBQSxDQUFvQixTQUFwQixFQUErQixFQUFFLGNBQWMsTUFBaEIsRUFBd0IsVUFBVSxRQUFsQyxFQUEvQixFQUE2RSxNQUFLLENBQUcsQ0FBckY7QUFDQSx1QkFBQSxtQkFBQSxDQUFvQixTQUFwQixFQUErQixFQUFFLGNBQWMsS0FBaEIsRUFBdUIsVUFBVSxLQUFqQyxFQUEvQixFQUF5RSxNQUFLLENBQUcsQ0FBakY7QUFDRCxTQUhEO0FBS0EsZUFBTyxVQUFVLE1BQWpCLEVBQXlCLElBQXpCLENBQThCLGNBQUEsV0FBVzs7Ozs7OztLQUF6QztBQVFELEtBZEQ7QUFnQkEsU0FBSywwQ0FBTCxFQUFpRCxZQUFBO0FBQy9DLG1CQUFBLG9CQUFBLENBQXFCLFNBQXJCLEVBQWdDLEVBQUUsZUFBZSxNQUFqQixFQUF5QixRQUFRLENBQUMsRUFBQyxNQUFNLE1BQVAsRUFBZSxNQUFNLFFBQXJCLEVBQUQsRUFBaUMsRUFBQyxNQUFNLEtBQVAsRUFBYyxNQUFNLEtBQXBCLEVBQWpDLENBQWpDLEVBQWhDLEVBQWlJLE1BQUssQ0FBRyxDQUF6STtBQUVBLGVBQU8sVUFBVSxNQUFqQixFQUF5QixJQUF6QixDQUE4QixjQUFBLFdBQVc7OztLQUF6QztBQUlELEtBUEQ7QUFTQSxTQUFLLGdEQUFMLEVBQXVELFlBQUE7QUFDckQsbUJBQUEsb0JBQUEsQ0FBcUIsU0FBckIsRUFBZ0MsRUFBRSxlQUFlLE1BQWpCLEVBQXlCLFFBQVEsQ0FBQyxFQUFDLE1BQU0sTUFBUCxFQUFlLE1BQU0sUUFBckIsRUFBRCxFQUFpQyxFQUFDLE1BQU0sS0FBUCxFQUFjLE1BQU0sS0FBcEIsRUFBakMsQ0FBakMsRUFBaEMsRUFBaUksTUFBSztBQUNwSSx1QkFBQSxvQkFBQSxDQUFxQixTQUFyQixFQUFnQyxFQUFFLGVBQWUsUUFBakIsRUFBMkIsUUFBUSxDQUFDLEVBQUMsTUFBTSxNQUFQLEVBQWUsTUFBTSxRQUFyQixFQUFELENBQW5DLEVBQWhDLEVBQXVHLE1BQUssQ0FBRyxDQUEvRztBQUNELFNBRkQ7QUFJQSxlQUFPLFVBQVUsTUFBakIsRUFBeUIsSUFBekIsQ0FBOEIsY0FBQSxXQUFXOzs7OztLQUF6QztBQU1ELEtBWEQ7QUFhQSxTQUFLLHVDQUFMLEVBQThDLE1BQUs7QUFDakQsbUJBQUEsb0JBQUEsQ0FBcUIsU0FBckIsRUFBZ0MsRUFBRSxlQUFlLE1BQWpCLEVBQXlCLGFBQWEsUUFBdEMsRUFBaEMsRUFBa0YsTUFBSztBQUNyRix1QkFBQSxtQkFBQSxDQUFvQixTQUFwQixFQUErQixFQUFFLGNBQWMsTUFBaEIsRUFBd0IsVUFBVSxRQUFsQyxFQUE0QyxhQUFhLDRDQUF6RCxFQUEvQixFQUF3SSxNQUFLLENBQUcsQ0FBaEo7QUFDQSx1QkFBQSxtQkFBQSxDQUFvQixTQUFwQixFQUErQixFQUFFLGNBQWMsS0FBaEIsRUFBdUIsVUFBVSxRQUFqQyxFQUEyQyxhQUFhLDJDQUF4RCxFQUEvQixFQUFzSSxNQUFLLENBQUcsQ0FBOUk7QUFDRCxTQUhEO0FBS0EsZUFBTyxVQUFVLE1BQWpCLEVBQXlCLGVBQXpCO0FBQ0QsS0FQRDtBQVFELENBckREIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc3RyaXBJbmRlbnQgfSBmcm9tICdjb21tb24tdGFncyc7XG5cbmltcG9ydCBDb2RlR2VuZXJhdG9yIGZyb20gJy4uLy4uL3NyYy91dGlsaXRpZXMvQ29kZUdlbmVyYXRvcic7XG5cbmltcG9ydCB7XG4gIG9iamVjdERlY2xhcmF0aW9uLFxuICBjYXNlQ2xhc3NEZWNsYXJhdGlvbixcbiAgcHJvcGVydHlEZWNsYXJhdGlvbixcbn0gZnJvbSAnLi4vLi4vc3JjL3NjYWxhL2xhbmd1YWdlJztcblxuZGVzY3JpYmUoJ1NjYWxhIGNvZGUgZ2VuZXJhdGlvbjogQmFzaWMgbGFuZ3VhZ2UgY29uc3RydWN0cycsIGZ1bmN0aW9uKCkge1xuICBsZXQgZ2VuZXJhdG9yO1xuXG4gIGJlZm9yZUVhY2goZnVuY3Rpb24oKSB7XG4gICAgZ2VuZXJhdG9yID0gbmV3IENvZGVHZW5lcmF0b3IoKTtcbiAgfSk7XG5cbiAgdGVzdChgc2hvdWxkIGdlbmVyYXRlIGEgb2JqZWN0IGRlY2xhcmF0aW9uYCwgZnVuY3Rpb24oKSB7XG4gICAgb2JqZWN0RGVjbGFyYXRpb24oZ2VuZXJhdG9yLCB7IG9iamVjdE5hbWU6ICdIZXJvJyB9LCAoKSA9PiB7XG4gICAgICBwcm9wZXJ0eURlY2xhcmF0aW9uKGdlbmVyYXRvciwgeyBwcm9wZXJ0eU5hbWU6ICduYW1lJywgdHlwZU5hbWU6ICdTdHJpbmcnIH0sICgpID0+IHt9KTtcbiAgICAgIHByb3BlcnR5RGVjbGFyYXRpb24oZ2VuZXJhdG9yLCB7IHByb3BlcnR5TmFtZTogJ2FnZScsIHR5cGVOYW1lOiAnSW50JyB9LCAoKSA9PiB7fSk7XG4gICAgfSk7XG5cbiAgICBleHBlY3QoZ2VuZXJhdG9yLm91dHB1dCkudG9CZShzdHJpcEluZGVudGBcbiAgICAgIG9iamVjdCBIZXJvIHtcbiAgICAgICAgdmFsIG5hbWU6IFN0cmluZyA9IHtcbiAgICAgICAgfVxuICAgICAgICB2YWwgYWdlOiBJbnQgPSB7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBgKTtcbiAgfSk7XG5cbiAgdGVzdChgc2hvdWxkIGdlbmVyYXRlIGEgY2FzZSBjbGFzcyBkZWNsYXJhdGlvbmAsIGZ1bmN0aW9uKCkge1xuICAgIGNhc2VDbGFzc0RlY2xhcmF0aW9uKGdlbmVyYXRvciwgeyBjYXNlQ2xhc3NOYW1lOiAnSGVybycsIHBhcmFtczogW3tuYW1lOiAnbmFtZScsIHR5cGU6ICdTdHJpbmcnfSwge25hbWU6ICdhZ2UnLCB0eXBlOiAnSW50J31dIH0sICgpID0+IHt9KTtcblxuICAgIGV4cGVjdChnZW5lcmF0b3Iub3V0cHV0KS50b0JlKHN0cmlwSW5kZW50YFxuICAgICAgY2FzZSBjbGFzcyBIZXJvKG5hbWU6IFN0cmluZywgYWdlOiBJbnQpIHtcbiAgICAgIH1cbiAgICBgKTtcbiAgfSk7XG5cbiAgdGVzdChgc2hvdWxkIGdlbmVyYXRlIG5lc3RlZCBjYXNlIGNsYXNzIGRlY2xhcmF0aW9uc2AsIGZ1bmN0aW9uKCkge1xuICAgIGNhc2VDbGFzc0RlY2xhcmF0aW9uKGdlbmVyYXRvciwgeyBjYXNlQ2xhc3NOYW1lOiAnSGVybycsIHBhcmFtczogW3tuYW1lOiAnbmFtZScsIHR5cGU6ICdTdHJpbmcnfSwge25hbWU6ICdhZ2UnLCB0eXBlOiAnSW50J31dIH0sICgpID0+IHtcbiAgICAgIGNhc2VDbGFzc0RlY2xhcmF0aW9uKGdlbmVyYXRvciwgeyBjYXNlQ2xhc3NOYW1lOiAnRnJpZW5kJywgcGFyYW1zOiBbe25hbWU6ICduYW1lJywgdHlwZTogJ1N0cmluZyd9XSB9LCAoKSA9PiB7fSk7XG4gICAgfSk7XG5cbiAgICBleHBlY3QoZ2VuZXJhdG9yLm91dHB1dCkudG9CZShzdHJpcEluZGVudGBcbiAgICAgIGNhc2UgY2xhc3MgSGVybyhuYW1lOiBTdHJpbmcsIGFnZTogSW50KSB7XG4gICAgICAgIGNhc2UgY2xhc3MgRnJpZW5kKG5hbWU6IFN0cmluZykge1xuICAgICAgICB9XG4gICAgICB9XG4gICAgYCk7XG4gIH0pO1xuXG4gIHRlc3QoYHNob3VsZCBoYW5kbGUgbXVsdGktbGluZSBkZXNjcmlwdGlvbnNgLCAoKSA9PiB7XG4gICAgY2FzZUNsYXNzRGVjbGFyYXRpb24oZ2VuZXJhdG9yLCB7IGNhc2VDbGFzc05hbWU6ICdIZXJvJywgZGVzY3JpcHRpb246ICdBIGhlcm8nIH0sICgpID0+IHtcbiAgICAgIHByb3BlcnR5RGVjbGFyYXRpb24oZ2VuZXJhdG9yLCB7IHByb3BlcnR5TmFtZTogJ25hbWUnLCB0eXBlTmFtZTogJ1N0cmluZycsIGRlc2NyaXB0aW9uOiBgQSBtdWx0aWxpbmUgY29tbWVudCBcXG4gb24gdGhlIGhlcm8ncyBuYW1lLmAgfSwgKCkgPT4ge30pO1xuICAgICAgcHJvcGVydHlEZWNsYXJhdGlvbihnZW5lcmF0b3IsIHsgcHJvcGVydHlOYW1lOiAnYWdlJywgdHlwZU5hbWU6ICdTdHJpbmcnLCBkZXNjcmlwdGlvbjogYEEgbXVsdGlsaW5lIGNvbW1lbnQgXFxuIG9uIHRoZSBoZXJvJ3MgYWdlLmAgfSwgKCkgPT4ge30pO1xuICAgIH0pO1xuXG4gICAgZXhwZWN0KGdlbmVyYXRvci5vdXRwdXQpLnRvTWF0Y2hTbmFwc2hvdCgpO1xuICB9KTtcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==