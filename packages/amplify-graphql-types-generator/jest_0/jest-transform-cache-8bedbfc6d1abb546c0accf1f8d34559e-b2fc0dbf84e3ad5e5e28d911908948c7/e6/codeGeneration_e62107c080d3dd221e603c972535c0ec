7f72d24f3887ac570c969199cc02c9ad
'use strict';require('ts-jest').install("/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-types-generator/test/flow/codeGeneration.js", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst graphql_1 = require(\"graphql\");\nconst codeGeneration_1 = require(\"../../src/flow/codeGeneration\");\nconst loading_1 = require(\"../../src/loading\");\nconst starWarsSchema = loading_1.loadSchema(require.resolve('../fixtures/starwars/schema.json'));\nconst miscSchema = loading_1.loadSchema(require.resolve('../fixtures/misc/schema.json'));\nconst CodeGenerator_1 = require(\"../../src/utilities/CodeGenerator\");\nconst legacyIR_1 = require(\"../../src/compiler/legacyIR\");\nfunction setup(schema) {\n    const context = {\n        schema: schema,\n        operations: {},\n        fragments: {},\n        typesUsed: {}\n    };\n    const generator = new CodeGenerator_1.default(context);\n    const compileFromSource = (source) => {\n        const document = graphql_1.parse(source);\n        const context = legacyIR_1.compileToLegacyIR(schema, document, { mergeInFieldsFromFragmentSpreads: true, addTypename: true });\n        generator.context = context;\n        return context;\n    };\n    const addFragment = (fragment) => {\n        generator.context.fragments[fragment.fragmentName] = fragment;\n    };\n    return { generator, compileFromSource, addFragment };\n}\ndescribe('Flow code generation', function () {\n    describe('#generateSource()', function () {\n        test(`should generate simple query operations`, function () {\n            const { compileFromSource } = setup(starWarsSchema);\n            const context = compileFromSource(`\n        query HeroName {\n          hero {\n            name\n          }\n        }\n      `);\n            const source = codeGeneration_1.generateSource(context);\n            expect(source).toMatchSnapshot();\n        });\n        test(`should generate simple query operations including input variables`, function () {\n            const { compileFromSource } = setup(starWarsSchema);\n            const context = compileFromSource(`\n        query HeroName($episode: Episode) {\n          hero(episode: $episode) {\n            name\n          }\n        }\n      `);\n            const source = codeGeneration_1.generateSource(context);\n            expect(source).toMatchSnapshot();\n        });\n        test(`should generate simple nested query operations including input variables`, function () {\n            const { compileFromSource } = setup(starWarsSchema);\n            const context = compileFromSource(`\n        query HeroAndFriendsNames($episode: Episode) {\n          hero(episode: $episode) {\n            name\n            friends {\n              name\n            }\n          }\n        }\n      `);\n            const source = codeGeneration_1.generateSource(context);\n            expect(source).toMatchSnapshot();\n        });\n        test(`should generate array query operations`, function () {\n            const { compileFromSource } = setup(starWarsSchema);\n            const context = compileFromSource(`\n        query ReviewsStars {\n          reviews {\n            stars\n          }\n        }\n      `);\n            const source = codeGeneration_1.generateSource(context);\n            expect(source).toMatchSnapshot();\n        });\n        test(`should generate simple nested with required elements in lists`, function () {\n            const { compileFromSource } = setup(starWarsSchema);\n            const context = compileFromSource(`\n        query StarshipCoords {\n          starship {\n            coordinates\n          }\n        }\n      `);\n            const source = codeGeneration_1.generateSource(context);\n            expect(source).toMatchSnapshot();\n        });\n        test(`should generate fragmented query operations`, function () {\n            const { compileFromSource } = setup(starWarsSchema);\n            const context = compileFromSource(`\n        query HeroAndFriendsNames {\n          hero {\n            name\n            ...heroFriends\n          }\n        }\n\n        fragment heroFriends on Character {\n          friends {\n            name\n          }\n        }\n      `);\n            const source = codeGeneration_1.generateSource(context);\n            expect(source).toMatchSnapshot();\n        });\n        test(`should generate query operations with inline fragments`, function () {\n            const { compileFromSource } = setup(starWarsSchema);\n            const context = compileFromSource(`\n        query HeroAndDetails {\n          hero {\n            name\n            ...HeroDetails\n          }\n        }\n\n        fragment HeroDetails on Character {\n          ... on Droid {\n            primaryFunction\n          }\n          ... on Human {\n            height\n          }\n        }\n      `);\n            const source = codeGeneration_1.generateSource(context);\n            expect(source).toMatchSnapshot();\n        });\n        test(`should generate mutation operations with complex input types`, function () {\n            const { compileFromSource } = setup(starWarsSchema);\n            const context = compileFromSource(`\n        mutation ReviewMovie($episode: Episode, $review: ReviewInput) {\n          createReview(episode: $episode, review: $review) {\n            stars\n            commentary\n          }\n        }\n      `);\n            const source = codeGeneration_1.generateSource(context);\n            expect(source).toMatchSnapshot();\n        });\n        test(`should generate correct typedefs with a single custom fragment`, function () {\n            const { compileFromSource } = setup(starWarsSchema);\n            const context = compileFromSource(`\n        fragment Friend on Character {\n          name\n        }\n\n        query HeroAndFriendsNames($episode: Episode) {\n          hero(episode: $episode) {\n            name\n            friends {\n              ...Friend\n            }\n          }\n        }\n      `);\n            const source = codeGeneration_1.generateSource(context);\n            expect(source).toMatchSnapshot();\n        });\n        test(`should generate correct typedefs with a multiple custom fragments`, function () {\n            const { compileFromSource } = setup(starWarsSchema);\n            const context = compileFromSource(`\n        fragment Friend on Character {\n          name\n        }\n\n        fragment Person on Character {\n          name\n        }\n\n        query HeroAndFriendsNames($episode: Episode) {\n          hero(episode: $episode) {\n            name\n            friends {\n              ...Friend\n              ...Person\n            }\n          }\n        }\n      `);\n            const source = codeGeneration_1.generateSource(context);\n            expect(source).toMatchSnapshot();\n        });\n        test(`should annotate custom scalars as string`, function () {\n            const { compileFromSource } = setup(miscSchema);\n            const context = compileFromSource(`\n        query CustomScalar {\n          misc {\n            date\n          }\n        }\n      `);\n            const source = codeGeneration_1.generateSource(context);\n            expect(source).toMatchSnapshot();\n        });\n        test('should handle single line comments', () => {\n            const { compileFromSource } = setup(miscSchema);\n            const context = compileFromSource(`\n        query CustomScalar {\n          commentTest {\n            singleLine\n          }\n        }\n      `);\n            const source = codeGeneration_1.generateSource(context);\n            expect(source).toMatchSnapshot();\n        });\n        test('should handle multi-line comments', () => {\n            const { compileFromSource } = setup(miscSchema);\n            const context = compileFromSource(`\n        query CustomScalar {\n          commentTest {\n            multiLine\n          }\n        }\n      `);\n            const source = codeGeneration_1.generateSource(context);\n            expect(source).toMatchSnapshot();\n        });\n        test('should handle comments in enums', () => {\n            const { compileFromSource } = setup(miscSchema);\n            const context = compileFromSource(`\n        query CustomScalar {\n          commentTest {\n            enumCommentTest\n          }\n        }\n      `);\n            const source = codeGeneration_1.generateSource(context);\n            expect(source).toMatchSnapshot();\n        });\n        test('should handle interfaces at root', () => {\n            const { compileFromSource } = setup(miscSchema);\n            const context = compileFromSource(`\n        query CustomScalar {\n          interfaceTest {\n            prop\n            ... on ImplA {\n              propA\n            }\n            ... on ImplB {\n              propB\n            }\n          }\n        }\n      `);\n            const source = codeGeneration_1.generateSource(context);\n            expect(source).toMatchSnapshot();\n        });\n        test('should handle unions at root', () => {\n            const { compileFromSource } = setup(miscSchema);\n            const context = compileFromSource(`\n        query CustomScalar {\n          unionTest {\n            ... on PartialA {\n              prop\n            }\n            ... on PartialB {\n              prop\n            }\n          }\n        }\n      `);\n            const source = codeGeneration_1.generateSource(context);\n            expect(source).toMatchSnapshot();\n        });\n        test('should handle scalars at root', () => {\n            const { compileFromSource } = setup(miscSchema);\n            const context = compileFromSource(`\n        query RootScalar {\n          scalarTest\n        }\n      `);\n            const source = codeGeneration_1.generateSource(context);\n            expect(source).toMatchSnapshot();\n        });\n        test('should have __typename value matching fragment type on generic type', () => {\n            const { compileFromSource } = setup(starWarsSchema);\n            const context = compileFromSource(`\n        query HeroName {\n          hero {\n            ...HeroWithName\n          }\n        }\n\n        fragment HeroWithName on Character {\n          __typename\n          name\n        }\n      `);\n            const source = codeGeneration_1.generateSource(context);\n            expect(source).toMatchSnapshot();\n        });\n        test('should have __typename value matching fragment type on specific type', () => {\n            const { compileFromSource } = setup(starWarsSchema);\n            const context = compileFromSource(`\n        query DroidName {\n          droid {\n            ...DroidWithName\n          }\n        }\n\n        fragment DroidWithName on Droid {\n          __typename\n          name\n        }\n      `);\n            const source = codeGeneration_1.generateSource(context);\n            expect(source).toMatchSnapshot();\n        });\n    });\n});\n//# sourceMappingURL=data:application/json;base64,");"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = require("graphql");
const codeGeneration_1 = require("../../src/flow/codeGeneration");
const loading_1 = require("../../src/loading");
const starWarsSchema = loading_1.loadSchema(require.resolve('../fixtures/starwars/schema.json'));
const miscSchema = loading_1.loadSchema(require.resolve('../fixtures/misc/schema.json'));
const CodeGenerator_1 = require("../../src/utilities/CodeGenerator");
const legacyIR_1 = require("../../src/compiler/legacyIR");
function setup(schema) {
  const context = {
    schema: schema,
    operations: {},
    fragments: {},
    typesUsed: {} };

  const generator = new CodeGenerator_1.default(context);
  const compileFromSource = source => {
    const document = graphql_1.parse(source);
    const context = legacyIR_1.compileToLegacyIR(schema, document, { mergeInFieldsFromFragmentSpreads: true, addTypename: true });
    generator.context = context;
    return context;
  };
  const addFragment = fragment => {
    generator.context.fragments[fragment.fragmentName] = fragment;
  };
  return { generator, compileFromSource, addFragment };
}
describe('Flow code generation', function () {
  describe('#generateSource()', function () {
    test(`should generate simple query operations`, function () {
      const { compileFromSource } = setup(starWarsSchema);
      const context = compileFromSource(`
        query HeroName {
          hero {
            name
          }
        }
      `);
      const source = codeGeneration_1.generateSource(context);
      expect(source).toMatchSnapshot();
    });
    test(`should generate simple query operations including input variables`, function () {
      const { compileFromSource } = setup(starWarsSchema);
      const context = compileFromSource(`
        query HeroName($episode: Episode) {
          hero(episode: $episode) {
            name
          }
        }
      `);
      const source = codeGeneration_1.generateSource(context);
      expect(source).toMatchSnapshot();
    });
    test(`should generate simple nested query operations including input variables`, function () {
      const { compileFromSource } = setup(starWarsSchema);
      const context = compileFromSource(`
        query HeroAndFriendsNames($episode: Episode) {
          hero(episode: $episode) {
            name
            friends {
              name
            }
          }
        }
      `);
      const source = codeGeneration_1.generateSource(context);
      expect(source).toMatchSnapshot();
    });
    test(`should generate array query operations`, function () {
      const { compileFromSource } = setup(starWarsSchema);
      const context = compileFromSource(`
        query ReviewsStars {
          reviews {
            stars
          }
        }
      `);
      const source = codeGeneration_1.generateSource(context);
      expect(source).toMatchSnapshot();
    });
    test(`should generate simple nested with required elements in lists`, function () {
      const { compileFromSource } = setup(starWarsSchema);
      const context = compileFromSource(`
        query StarshipCoords {
          starship {
            coordinates
          }
        }
      `);
      const source = codeGeneration_1.generateSource(context);
      expect(source).toMatchSnapshot();
    });
    test(`should generate fragmented query operations`, function () {
      const { compileFromSource } = setup(starWarsSchema);
      const context = compileFromSource(`
        query HeroAndFriendsNames {
          hero {
            name
            ...heroFriends
          }
        }

        fragment heroFriends on Character {
          friends {
            name
          }
        }
      `);
      const source = codeGeneration_1.generateSource(context);
      expect(source).toMatchSnapshot();
    });
    test(`should generate query operations with inline fragments`, function () {
      const { compileFromSource } = setup(starWarsSchema);
      const context = compileFromSource(`
        query HeroAndDetails {
          hero {
            name
            ...HeroDetails
          }
        }

        fragment HeroDetails on Character {
          ... on Droid {
            primaryFunction
          }
          ... on Human {
            height
          }
        }
      `);
      const source = codeGeneration_1.generateSource(context);
      expect(source).toMatchSnapshot();
    });
    test(`should generate mutation operations with complex input types`, function () {
      const { compileFromSource } = setup(starWarsSchema);
      const context = compileFromSource(`
        mutation ReviewMovie($episode: Episode, $review: ReviewInput) {
          createReview(episode: $episode, review: $review) {
            stars
            commentary
          }
        }
      `);
      const source = codeGeneration_1.generateSource(context);
      expect(source).toMatchSnapshot();
    });
    test(`should generate correct typedefs with a single custom fragment`, function () {
      const { compileFromSource } = setup(starWarsSchema);
      const context = compileFromSource(`
        fragment Friend on Character {
          name
        }

        query HeroAndFriendsNames($episode: Episode) {
          hero(episode: $episode) {
            name
            friends {
              ...Friend
            }
          }
        }
      `);
      const source = codeGeneration_1.generateSource(context);
      expect(source).toMatchSnapshot();
    });
    test(`should generate correct typedefs with a multiple custom fragments`, function () {
      const { compileFromSource } = setup(starWarsSchema);
      const context = compileFromSource(`
        fragment Friend on Character {
          name
        }

        fragment Person on Character {
          name
        }

        query HeroAndFriendsNames($episode: Episode) {
          hero(episode: $episode) {
            name
            friends {
              ...Friend
              ...Person
            }
          }
        }
      `);
      const source = codeGeneration_1.generateSource(context);
      expect(source).toMatchSnapshot();
    });
    test(`should annotate custom scalars as string`, function () {
      const { compileFromSource } = setup(miscSchema);
      const context = compileFromSource(`
        query CustomScalar {
          misc {
            date
          }
        }
      `);
      const source = codeGeneration_1.generateSource(context);
      expect(source).toMatchSnapshot();
    });
    test('should handle single line comments', () => {
      const { compileFromSource } = setup(miscSchema);
      const context = compileFromSource(`
        query CustomScalar {
          commentTest {
            singleLine
          }
        }
      `);
      const source = codeGeneration_1.generateSource(context);
      expect(source).toMatchSnapshot();
    });
    test('should handle multi-line comments', () => {
      const { compileFromSource } = setup(miscSchema);
      const context = compileFromSource(`
        query CustomScalar {
          commentTest {
            multiLine
          }
        }
      `);
      const source = codeGeneration_1.generateSource(context);
      expect(source).toMatchSnapshot();
    });
    test('should handle comments in enums', () => {
      const { compileFromSource } = setup(miscSchema);
      const context = compileFromSource(`
        query CustomScalar {
          commentTest {
            enumCommentTest
          }
        }
      `);
      const source = codeGeneration_1.generateSource(context);
      expect(source).toMatchSnapshot();
    });
    test('should handle interfaces at root', () => {
      const { compileFromSource } = setup(miscSchema);
      const context = compileFromSource(`
        query CustomScalar {
          interfaceTest {
            prop
            ... on ImplA {
              propA
            }
            ... on ImplB {
              propB
            }
          }
        }
      `);
      const source = codeGeneration_1.generateSource(context);
      expect(source).toMatchSnapshot();
    });
    test('should handle unions at root', () => {
      const { compileFromSource } = setup(miscSchema);
      const context = compileFromSource(`
        query CustomScalar {
          unionTest {
            ... on PartialA {
              prop
            }
            ... on PartialB {
              prop
            }
          }
        }
      `);
      const source = codeGeneration_1.generateSource(context);
      expect(source).toMatchSnapshot();
    });
    test('should handle scalars at root', () => {
      const { compileFromSource } = setup(miscSchema);
      const context = compileFromSource(`
        query RootScalar {
          scalarTest
        }
      `);
      const source = codeGeneration_1.generateSource(context);
      expect(source).toMatchSnapshot();
    });
    test('should have __typename value matching fragment type on generic type', () => {
      const { compileFromSource } = setup(starWarsSchema);
      const context = compileFromSource(`
        query HeroName {
          hero {
            ...HeroWithName
          }
        }

        fragment HeroWithName on Character {
          __typename
          name
        }
      `);
      const source = codeGeneration_1.generateSource(context);
      expect(source).toMatchSnapshot();
    });
    test('should have __typename value matching fragment type on specific type', () => {
      const { compileFromSource } = setup(starWarsSchema);
      const context = compileFromSource(`
        query DroidName {
          droid {
            ...DroidWithName
          }
        }

        fragment DroidWithName on Droid {
          __typename
          name
        }
      `);
      const source = codeGeneration_1.generateSource(context);
      expect(source).toMatchSnapshot();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,