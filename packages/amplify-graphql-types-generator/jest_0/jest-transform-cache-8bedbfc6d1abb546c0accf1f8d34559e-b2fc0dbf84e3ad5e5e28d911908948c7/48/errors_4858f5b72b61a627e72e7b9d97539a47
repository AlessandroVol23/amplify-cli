a3f840e7d85d9cdc6a0daf303b313777
'use strict';require('ts-jest').install("/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-types-generator/src/errors.ts", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst graphql_1 = require(\"graphql\");\nconst path = require(\"path\");\nclass ToolError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = 'ToolError';\n        this.message = message;\n    }\n}\nexports.ToolError = ToolError;\nconst isRunningFromXcodeScript = process.env.XCODE_VERSION_ACTUAL;\nfunction logError(error) {\n    if (error instanceof ToolError) {\n        logErrorMessage(error.message);\n    }\n    else if (error instanceof graphql_1.GraphQLError) {\n        const fileName = error.source && error.source.name;\n        if (error.locations) {\n            for (const location of error.locations) {\n                logErrorMessage(error.message, fileName, location.line);\n            }\n        }\n        else {\n            logErrorMessage(error.message, fileName);\n        }\n    }\n    else {\n        console.log(error.stack);\n    }\n}\nexports.logError = logError;\nfunction logErrorMessage(message, fileName, lineNumber) {\n    if (isRunningFromXcodeScript) {\n        if (fileName && lineNumber) {\n            console.log(`${fileName}:${lineNumber}: error: ${message}`);\n        }\n        else {\n            console.log(`error: ${message}`);\n        }\n    }\n    else {\n        if (fileName) {\n            const truncatedFileName = '/' + fileName.split(path.sep).slice(-4).join(path.sep);\n            console.log(`...${truncatedFileName}: ${message}`);\n        }\n        else {\n            console.log(`error: ${message}`);\n        }\n    }\n}\nexports.logErrorMessage = logErrorMessage;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3JzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZXJyb3JzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEscUNBQXVDO0FBQ3ZDLDZCQUE2QjtBQUs3QixlQUF1QixTQUFRLEtBQUs7SUFHbEMsWUFBWSxPQUFlO1FBQ3pCLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUhqQixTQUFJLEdBQVcsV0FBVyxDQUFDO1FBSXpCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQ3pCLENBQUM7Q0FDRjtBQVBELDhCQU9DO0FBRUQsTUFBTSx3QkFBd0IsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDO0FBRWxFLGtCQUF5QixLQUFZO0lBQ25DLElBQUksS0FBSyxZQUFZLFNBQVMsRUFBRTtRQUM5QixlQUFlLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQ2hDO1NBQU0sSUFBSSxLQUFLLFlBQVksc0JBQVksRUFBRTtRQUN4QyxNQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsTUFBTSxJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ25ELElBQUksS0FBSyxDQUFDLFNBQVMsRUFBRTtZQUNuQixLQUFLLE1BQU0sUUFBUSxJQUFJLEtBQUssQ0FBQyxTQUFTLEVBQUU7Z0JBQ3RDLGVBQWUsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDekQ7U0FDRjthQUFNO1lBQ0wsZUFBZSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUM7U0FDMUM7S0FDRjtTQUFNO1FBQ0wsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDMUI7QUFDSCxDQUFDO0FBZkQsNEJBZUM7QUFFRCx5QkFBZ0MsT0FBZSxFQUFFLFFBQWlCLEVBQUUsVUFBbUI7SUFDckYsSUFBSSx3QkFBd0IsRUFBRTtRQUM1QixJQUFJLFFBQVEsSUFBSSxVQUFVLEVBQUU7WUFHMUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLFFBQVEsSUFBSSxVQUFVLFlBQVksT0FBTyxFQUFFLENBQUMsQ0FBQztTQUM3RDthQUFNO1lBRUwsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLE9BQU8sRUFBRSxDQUFDLENBQUM7U0FDbEM7S0FDRjtTQUFNO1FBQ0wsSUFBSSxRQUFRLEVBQUU7WUFDWixNQUFNLGlCQUFpQixHQUFHLEdBQUcsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ2xGLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxpQkFBaUIsS0FBSyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1NBQ3BEO2FBQU07WUFDTCxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsT0FBTyxFQUFFLENBQUMsQ0FBQztTQUNsQztLQUNGO0FBQ0gsQ0FBQztBQWxCRCwwQ0FrQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHcmFwaFFMRXJyb3IgfSBmcm9tICdncmFwaHFsJztcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5cbi8vIFRvb2xFcnJvciBpcyB1c2VkIGZvciBlcnJvcnMgdGhhdCBhcmUgcGFydCBvZiB0aGUgZXhwZWN0ZWQgZmxvd1xuLy8gYW5kIGZvciB3aGljaCBhIHN0YWNrIHRyYWNlIHNob3VsZCBub3QgYmUgcHJpbnRlZFxuXG5leHBvcnQgY2xhc3MgVG9vbEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBuYW1lOiBzdHJpbmcgPSAnVG9vbEVycm9yJztcblxuICBjb25zdHJ1Y3RvcihtZXNzYWdlOiBzdHJpbmcpIHtcbiAgICBzdXBlcihtZXNzYWdlKTtcbiAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICB9XG59XG5cbmNvbnN0IGlzUnVubmluZ0Zyb21YY29kZVNjcmlwdCA9IHByb2Nlc3MuZW52LlhDT0RFX1ZFUlNJT05fQUNUVUFMO1xuXG5leHBvcnQgZnVuY3Rpb24gbG9nRXJyb3IoZXJyb3I6IEVycm9yKSB7XG4gIGlmIChlcnJvciBpbnN0YW5jZW9mIFRvb2xFcnJvcikge1xuICAgIGxvZ0Vycm9yTWVzc2FnZShlcnJvci5tZXNzYWdlKTtcbiAgfSBlbHNlIGlmIChlcnJvciBpbnN0YW5jZW9mIEdyYXBoUUxFcnJvcikge1xuICAgIGNvbnN0IGZpbGVOYW1lID0gZXJyb3Iuc291cmNlICYmIGVycm9yLnNvdXJjZS5uYW1lO1xuICAgIGlmIChlcnJvci5sb2NhdGlvbnMpIHtcbiAgICAgIGZvciAoY29uc3QgbG9jYXRpb24gb2YgZXJyb3IubG9jYXRpb25zKSB7XG4gICAgICAgIGxvZ0Vycm9yTWVzc2FnZShlcnJvci5tZXNzYWdlLCBmaWxlTmFtZSwgbG9jYXRpb24ubGluZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvZ0Vycm9yTWVzc2FnZShlcnJvci5tZXNzYWdlLCBmaWxlTmFtZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGNvbnNvbGUubG9nKGVycm9yLnN0YWNrKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbG9nRXJyb3JNZXNzYWdlKG1lc3NhZ2U6IHN0cmluZywgZmlsZU5hbWU/OiBzdHJpbmcsIGxpbmVOdW1iZXI/OiBudW1iZXIpIHtcbiAgaWYgKGlzUnVubmluZ0Zyb21YY29kZVNjcmlwdCkge1xuICAgIGlmIChmaWxlTmFtZSAmJiBsaW5lTnVtYmVyKSB7XG4gICAgICAvLyBQcmVmaXhpbmcgZXJyb3Igb3V0cHV0IHdpdGggZmlsZSBuYW1lLCBsaW5lIGFuZCAnZXJyb3I6ICcsXG4gICAgICAvLyBzbyBYY29kZSB3aWxsIGFzc29jaWF0ZSBpdCB3aXRoIHRoZSByaWdodCBmaWxlIGFuZCBkaXNwbGF5IHRoZSBlcnJvciBpbmxpbmVcbiAgICAgIGNvbnNvbGUubG9nKGAke2ZpbGVOYW1lfToke2xpbmVOdW1iZXJ9OiBlcnJvcjogJHttZXNzYWdlfWApO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBQcmVmaXhpbmcgZXJyb3Igb3V0cHV0IHdpdGggJ2Vycm9yOiAnLCBzbyBYY29kZSB3aWxsIGRpc3BsYXkgaXQgYXMgYW4gZXJyb3JcbiAgICAgIGNvbnNvbGUubG9nKGBlcnJvcjogJHttZXNzYWdlfWApO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoZmlsZU5hbWUpIHtcbiAgICAgIGNvbnN0IHRydW5jYXRlZEZpbGVOYW1lID0gJy8nICsgZmlsZU5hbWUuc3BsaXQocGF0aC5zZXApLnNsaWNlKC00KS5qb2luKHBhdGguc2VwKTtcbiAgICAgIGNvbnNvbGUubG9nKGAuLi4ke3RydW5jYXRlZEZpbGVOYW1lfTogJHttZXNzYWdlfWApO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmxvZyhgZXJyb3I6ICR7bWVzc2FnZX1gKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==");"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = require("graphql");
const path = require("path");
class ToolError extends Error {
    constructor(message) {
        super(message);
        this.name = 'ToolError';
        this.message = message;
    }}

exports.ToolError = ToolError;
const isRunningFromXcodeScript = process.env.XCODE_VERSION_ACTUAL;
function logError(error) {
    if (error instanceof ToolError) {
        logErrorMessage(error.message);
    } else
    if (error instanceof graphql_1.GraphQLError) {
        const fileName = error.source && error.source.name;
        if (error.locations) {
            for (const location of error.locations) {
                logErrorMessage(error.message, fileName, location.line);
            }
        } else
        {
            logErrorMessage(error.message, fileName);
        }
    } else
    {
        console.log(error.stack);
    }
}
exports.logError = logError;
function logErrorMessage(message, fileName, lineNumber) {
    if (isRunningFromXcodeScript) {
        if (fileName && lineNumber) {
            console.log(`${fileName}:${lineNumber}: error: ${message}`);
        } else
        {
            console.log(`error: ${message}`);
        }
    } else
    {
        if (fileName) {
            const truncatedFileName = '/' + fileName.split(path.sep).slice(-4).join(path.sep);
            console.log(`...${truncatedFileName}: ${message}`);
        } else
        {
            console.log(`error: ${message}`);
        }
    }
}
exports.logErrorMessage = logErrorMessage;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVycm9ycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE1BQUEsWUFBQSxRQUFBLFNBQUEsQ0FBQTtBQUNBLE1BQUEsT0FBQSxRQUFBLE1BQUEsQ0FBQTtBQUtBLE1BQUEsU0FBQSxTQUErQixLQUEvQixDQUFvQztBQUdsQyxnQkFBWSxPQUFaLEVBQTJCO0FBQ3pCLGNBQU0sT0FBTjtBQUhGLGFBQUEsSUFBQSxHQUFlLFdBQWY7QUFJRSxhQUFLLE9BQUwsR0FBZSxPQUFmO0FBQ0QsS0FOaUM7O0FBQXBDLFFBQUEsU0FBQSxHQUFBLFNBQUE7QUFTQSxNQUFNLDJCQUEyQixRQUFRLEdBQVIsQ0FBWSxvQkFBN0M7QUFFQSxTQUFBLFFBQUEsQ0FBeUIsS0FBekIsRUFBcUM7QUFDbkMsUUFBSSxpQkFBaUIsU0FBckIsRUFBZ0M7QUFDOUIsd0JBQWdCLE1BQU0sT0FBdEI7QUFDRCxLQUZEO0FBRU8sUUFBSSxpQkFBaUIsVUFBQSxZQUFyQixFQUFtQztBQUN4QyxjQUFNLFdBQVcsTUFBTSxNQUFOLElBQWdCLE1BQU0sTUFBTixDQUFhLElBQTlDO0FBQ0EsWUFBSSxNQUFNLFNBQVYsRUFBcUI7QUFDbkIsaUJBQUssTUFBTSxRQUFYLElBQXVCLE1BQU0sU0FBN0IsRUFBd0M7QUFDdEMsZ0NBQWdCLE1BQU0sT0FBdEIsRUFBK0IsUUFBL0IsRUFBeUMsU0FBUyxJQUFsRDtBQUNEO0FBQ0YsU0FKRDtBQUlPO0FBQ0wsNEJBQWdCLE1BQU0sT0FBdEIsRUFBK0IsUUFBL0I7QUFDRDtBQUNGLEtBVE07QUFTQTtBQUNMLGdCQUFRLEdBQVIsQ0FBWSxNQUFNLEtBQWxCO0FBQ0Q7QUFDRjtBQWZELFFBQUEsUUFBQSxHQUFBLFFBQUE7QUFpQkEsU0FBQSxlQUFBLENBQWdDLE9BQWhDLEVBQWlELFFBQWpELEVBQW9FLFVBQXBFLEVBQXVGO0FBQ3JGLFFBQUksd0JBQUosRUFBOEI7QUFDNUIsWUFBSSxZQUFZLFVBQWhCLEVBQTRCO0FBRzFCLG9CQUFRLEdBQVIsQ0FBWSxHQUFHLFFBQVEsSUFBSSxVQUFVLFlBQVksT0FBTyxFQUF4RDtBQUNELFNBSkQ7QUFJTztBQUVMLG9CQUFRLEdBQVIsQ0FBWSxVQUFVLE9BQU8sRUFBN0I7QUFDRDtBQUNGLEtBVEQ7QUFTTztBQUNMLFlBQUksUUFBSixFQUFjO0FBQ1osa0JBQU0sb0JBQW9CLE1BQU0sU0FBUyxLQUFULENBQWUsS0FBSyxHQUFwQixFQUF5QixLQUF6QixDQUErQixDQUFDLENBQWhDLEVBQW1DLElBQW5DLENBQXdDLEtBQUssR0FBN0MsQ0FBaEM7QUFDQSxvQkFBUSxHQUFSLENBQVksTUFBTSxpQkFBaUIsS0FBSyxPQUFPLEVBQS9DO0FBQ0QsU0FIRDtBQUdPO0FBQ0wsb0JBQVEsR0FBUixDQUFZLFVBQVUsT0FBTyxFQUE3QjtBQUNEO0FBQ0Y7QUFDRjtBQWxCRCxRQUFBLGVBQUEsR0FBQSxlQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR3JhcGhRTEVycm9yIH0gZnJvbSAnZ3JhcGhxbCc7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuXG4vLyBUb29sRXJyb3IgaXMgdXNlZCBmb3IgZXJyb3JzIHRoYXQgYXJlIHBhcnQgb2YgdGhlIGV4cGVjdGVkIGZsb3dcbi8vIGFuZCBmb3Igd2hpY2ggYSBzdGFjayB0cmFjZSBzaG91bGQgbm90IGJlIHByaW50ZWRcblxuZXhwb3J0IGNsYXNzIFRvb2xFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgbmFtZTogc3RyaW5nID0gJ1Rvb2xFcnJvcic7XG5cbiAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nKSB7XG4gICAgc3VwZXIobWVzc2FnZSk7XG4gICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgfVxufVxuXG5jb25zdCBpc1J1bm5pbmdGcm9tWGNvZGVTY3JpcHQgPSBwcm9jZXNzLmVudi5YQ09ERV9WRVJTSU9OX0FDVFVBTDtcblxuZXhwb3J0IGZ1bmN0aW9uIGxvZ0Vycm9yKGVycm9yOiBFcnJvcikge1xuICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBUb29sRXJyb3IpIHtcbiAgICBsb2dFcnJvck1lc3NhZ2UoZXJyb3IubWVzc2FnZSk7XG4gIH0gZWxzZSBpZiAoZXJyb3IgaW5zdGFuY2VvZiBHcmFwaFFMRXJyb3IpIHtcbiAgICBjb25zdCBmaWxlTmFtZSA9IGVycm9yLnNvdXJjZSAmJiBlcnJvci5zb3VyY2UubmFtZTtcbiAgICBpZiAoZXJyb3IubG9jYXRpb25zKSB7XG4gICAgICBmb3IgKGNvbnN0IGxvY2F0aW9uIG9mIGVycm9yLmxvY2F0aW9ucykge1xuICAgICAgICBsb2dFcnJvck1lc3NhZ2UoZXJyb3IubWVzc2FnZSwgZmlsZU5hbWUsIGxvY2F0aW9uLmxpbmUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsb2dFcnJvck1lc3NhZ2UoZXJyb3IubWVzc2FnZSwgZmlsZU5hbWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBjb25zb2xlLmxvZyhlcnJvci5zdGFjayk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxvZ0Vycm9yTWVzc2FnZShtZXNzYWdlOiBzdHJpbmcsIGZpbGVOYW1lPzogc3RyaW5nLCBsaW5lTnVtYmVyPzogbnVtYmVyKSB7XG4gIGlmIChpc1J1bm5pbmdGcm9tWGNvZGVTY3JpcHQpIHtcbiAgICBpZiAoZmlsZU5hbWUgJiYgbGluZU51bWJlcikge1xuICAgICAgLy8gUHJlZml4aW5nIGVycm9yIG91dHB1dCB3aXRoIGZpbGUgbmFtZSwgbGluZSBhbmQgJ2Vycm9yOiAnLFxuICAgICAgLy8gc28gWGNvZGUgd2lsbCBhc3NvY2lhdGUgaXQgd2l0aCB0aGUgcmlnaHQgZmlsZSBhbmQgZGlzcGxheSB0aGUgZXJyb3IgaW5saW5lXG4gICAgICBjb25zb2xlLmxvZyhgJHtmaWxlTmFtZX06JHtsaW5lTnVtYmVyfTogZXJyb3I6ICR7bWVzc2FnZX1gKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUHJlZml4aW5nIGVycm9yIG91dHB1dCB3aXRoICdlcnJvcjogJywgc28gWGNvZGUgd2lsbCBkaXNwbGF5IGl0IGFzIGFuIGVycm9yXG4gICAgICBjb25zb2xlLmxvZyhgZXJyb3I6ICR7bWVzc2FnZX1gKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGZpbGVOYW1lKSB7XG4gICAgICBjb25zdCB0cnVuY2F0ZWRGaWxlTmFtZSA9ICcvJyArIGZpbGVOYW1lLnNwbGl0KHBhdGguc2VwKS5zbGljZSgtNCkuam9pbihwYXRoLnNlcCk7XG4gICAgICBjb25zb2xlLmxvZyhgLi4uJHt0cnVuY2F0ZWRGaWxlTmFtZX06ICR7bWVzc2FnZX1gKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5sb2coYGVycm9yOiAke21lc3NhZ2V9YCk7XG4gICAgfVxuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9