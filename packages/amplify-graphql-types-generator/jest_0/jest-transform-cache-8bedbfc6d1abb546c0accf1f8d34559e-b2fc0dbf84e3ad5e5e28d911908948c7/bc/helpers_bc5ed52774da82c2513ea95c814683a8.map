{"version":3,"sources":["helpers.ts"],"names":[],"mappings":";;AAAA,MAAA,YAAA,QAAA,SAAA,CAAA;AAYA,MAAA,IAAA,QAAA,aAAA,CAAA;AAIA,MAAM,mBAAmB;AACvB,KAAC,UAAA,aAAA,CAAc,IAAf,GAAsB,EAAE,oBAAF,EADC;AAEvB,KAAC,UAAA,UAAA,CAAW,IAAZ,GAAmB,EAAE,oBAAF,EAFI;AAGvB,KAAC,UAAA,YAAA,CAAa,IAAd,GAAqB,EAAE,oBAAF,EAHE;AAIvB,KAAC,UAAA,cAAA,CAAe,IAAhB,GAAuB,EAAE,qBAAF,EAJA;AAKvB,KAAC,UAAA,SAAA,CAAU,IAAX,GAAkB,EAAE,oBAAF,EALK,EAAzB;;AAQA,SAAA,2CAAA,CACE,eADF,EACkC;AAEhC,WAAO,SAAA,6BAAA,CAAuC,IAAvC,EAA0D,EAC/D,QAD+D,KAE7D;AACF,kBAAU,IADR,EAFG;AAIN;AACC,YAAI,UAAA,aAAA,CAAc,IAAd,CAAJ,EAAyB;AACvB,mBAAO,8BACL,KAAK,MADA,EAEL,EAAE,UAAU,KAAZ,EAFK,CAAP;AAID;AAED,YAAI,UAAA,UAAA,CAAW,IAAX,CAAJ,EAAsB;AACpB,kBAAM,iBAAiB,EAAE,mBAAF,CACrB,8BAA8B,KAAK,MAAnC,CADqB,CAAvB;AAIA,gBAAI,QAAJ,EAAc;AACZ,uBAAO,EAAE,sBAAF,CAAyB,cAAzB,CAAP;AACD,aAFD;AAEO;AACL,uBAAO,cAAP;AACD;AACF;AAED,YAAI,cAAJ;AACA,YAAI,gBAAgB,UAAA,iBAApB,EAAuC;AACrC,kBAAM,UAAU,iBAAiB,KAAK,IAAtB,CAAhB;AACA,gBAAI,OAAJ,EAAa;AACX,iCAAiB,OAAjB;AACD,aAFD;AAEO;AACL,oBAAI,gBAAgB,wBAApB,EAA8C;AAC5C,qCAAiB,EAAE,iBAAF,EAAjB;AACD,iBAFD;AAEO;AACL,qCAAiB,EAAE,qBAAF,CACf,EAAE,UAAF,CAAa,KAAK,IAAlB,CADe,CAAjB;AAGD;AACF;AACF,SAbD;AAaO;AACL,6BAAiB,EAAE,qBAAF,CACf,EAAE,UAAF,CAAa,KAAK,IAAlB,CADe,CAAjB;AAGD;AAED,YAAI,QAAJ,EAAc;AACZ,mBAAO,EAAE,sBAAF,CAAyB,cAAzB,CAAP;AACD,SAFD;AAEO;AACL,mBAAO,cAAP;AACD;AACF,KAjDD;AAkDD;AArDD,QAAA,2CAAA,GAAA,2CAAA","sourcesContent":["import {\n  GraphQLBoolean,\n  GraphQLFloat,\n  GraphQLInt,\n  GraphQLID,\n  GraphQLScalarType,\n  GraphQLString,\n  GraphQLType,\n  isNonNullType,\n  isListType,\n} from 'graphql'\n\nimport * as t from 'babel-types';\n\nimport { CompilerOptions } from '../compiler';\n\nconst builtInScalarMap = {\n  [GraphQLString.name]: t.stringTypeAnnotation(),\n  [GraphQLInt.name]: t.numberTypeAnnotation(),\n  [GraphQLFloat.name]: t.numberTypeAnnotation(),\n  [GraphQLBoolean.name]: t.booleanTypeAnnotation(),\n  [GraphQLID.name]: t.stringTypeAnnotation(),\n}\n\nexport function createTypeAnnotationFromGraphQLTypeFunction(\n  compilerOptions: CompilerOptions\n): Function {\n  return function typeAnnotationFromGraphQLType(type: GraphQLType, {\n    nullable\n  } = {\n    nullable: true\n  }): t.FlowTypeAnnotation {\n    if (isNonNullType(type)) {\n      return typeAnnotationFromGraphQLType(\n        type.ofType,\n        { nullable: false }\n      );\n    }\n\n    if (isListType(type)) {\n      const typeAnnotation = t.arrayTypeAnnotation(\n        typeAnnotationFromGraphQLType(type.ofType)\n      );\n\n      if (nullable) {\n        return t.nullableTypeAnnotation(typeAnnotation);\n      } else {\n        return typeAnnotation;\n      }\n    }\n\n    let typeAnnotation;\n    if (type instanceof GraphQLScalarType) {\n      const builtIn = builtInScalarMap[type.name]\n      if (builtIn) {\n        typeAnnotation = builtIn;\n      } else {\n        if (compilerOptions.passthroughCustomScalars) {\n          typeAnnotation = t.anyTypeAnnotation();\n        } else {\n          typeAnnotation = t.genericTypeAnnotation(\n            t.identifier(type.name)\n          );\n        }\n      }\n    } else {\n      typeAnnotation = t.genericTypeAnnotation(\n        t.identifier(type.name)\n      );\n    }\n\n    if (nullable) {\n      return t.nullableTypeAnnotation(typeAnnotation);\n    } else {\n      return typeAnnotation;\n    }\n  }\n}\n"],"sourceRoot":""}