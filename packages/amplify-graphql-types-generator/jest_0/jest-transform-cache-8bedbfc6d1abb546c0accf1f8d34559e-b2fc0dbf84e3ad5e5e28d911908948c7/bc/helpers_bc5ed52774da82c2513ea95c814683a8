d7c2ece019452a807770710c6c50fce4
'use strict';require('ts-jest').install("/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-types-generator/src/flow-modern/helpers.ts", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst graphql_1 = require(\"graphql\");\nconst t = require(\"babel-types\");\nconst builtInScalarMap = {\n    [graphql_1.GraphQLString.name]: t.stringTypeAnnotation(),\n    [graphql_1.GraphQLInt.name]: t.numberTypeAnnotation(),\n    [graphql_1.GraphQLFloat.name]: t.numberTypeAnnotation(),\n    [graphql_1.GraphQLBoolean.name]: t.booleanTypeAnnotation(),\n    [graphql_1.GraphQLID.name]: t.stringTypeAnnotation(),\n};\nfunction createTypeAnnotationFromGraphQLTypeFunction(compilerOptions) {\n    return function typeAnnotationFromGraphQLType(type, { nullable } = {\n        nullable: true\n    }) {\n        if (graphql_1.isNonNullType(type)) {\n            return typeAnnotationFromGraphQLType(type.ofType, { nullable: false });\n        }\n        if (graphql_1.isListType(type)) {\n            const typeAnnotation = t.arrayTypeAnnotation(typeAnnotationFromGraphQLType(type.ofType));\n            if (nullable) {\n                return t.nullableTypeAnnotation(typeAnnotation);\n            }\n            else {\n                return typeAnnotation;\n            }\n        }\n        let typeAnnotation;\n        if (type instanceof graphql_1.GraphQLScalarType) {\n            const builtIn = builtInScalarMap[type.name];\n            if (builtIn) {\n                typeAnnotation = builtIn;\n            }\n            else {\n                if (compilerOptions.passthroughCustomScalars) {\n                    typeAnnotation = t.anyTypeAnnotation();\n                }\n                else {\n                    typeAnnotation = t.genericTypeAnnotation(t.identifier(type.name));\n                }\n            }\n        }\n        else {\n            typeAnnotation = t.genericTypeAnnotation(t.identifier(type.name));\n        }\n        if (nullable) {\n            return t.nullableTypeAnnotation(typeAnnotation);\n        }\n        else {\n            return typeAnnotation;\n        }\n    };\n}\nexports.createTypeAnnotationFromGraphQLTypeFunction = createTypeAnnotationFromGraphQLTypeFunction;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImhlbHBlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxxQ0FVZ0I7QUFFaEIsaUNBQWlDO0FBSWpDLE1BQU0sZ0JBQWdCLEdBQUc7SUFDdkIsQ0FBQyx1QkFBYSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxvQkFBb0IsRUFBRTtJQUM5QyxDQUFDLG9CQUFVLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLG9CQUFvQixFQUFFO0lBQzNDLENBQUMsc0JBQVksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsb0JBQW9CLEVBQUU7SUFDN0MsQ0FBQyx3QkFBYyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxxQkFBcUIsRUFBRTtJQUNoRCxDQUFDLG1CQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLG9CQUFvQixFQUFFO0NBQzNDLENBQUE7QUFFRCxxREFDRSxlQUFnQztJQUVoQyxPQUFPLHVDQUF1QyxJQUFpQixFQUFFLEVBQy9ELFFBQVEsRUFDVCxHQUFHO1FBQ0YsUUFBUSxFQUFFLElBQUk7S0FDZjtRQUNDLElBQUksdUJBQWEsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUN2QixPQUFPLDZCQUE2QixDQUNsQyxJQUFJLENBQUMsTUFBTSxFQUNYLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxDQUNwQixDQUFDO1NBQ0g7UUFFRCxJQUFJLG9CQUFVLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDcEIsTUFBTSxjQUFjLEdBQUcsQ0FBQyxDQUFDLG1CQUFtQixDQUMxQyw2QkFBNkIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQzNDLENBQUM7WUFFRixJQUFJLFFBQVEsRUFBRTtnQkFDWixPQUFPLENBQUMsQ0FBQyxzQkFBc0IsQ0FBQyxjQUFjLENBQUMsQ0FBQzthQUNqRDtpQkFBTTtnQkFDTCxPQUFPLGNBQWMsQ0FBQzthQUN2QjtTQUNGO1FBRUQsSUFBSSxjQUFjLENBQUM7UUFDbkIsSUFBSSxJQUFJLFlBQVksMkJBQWlCLEVBQUU7WUFDckMsTUFBTSxPQUFPLEdBQUcsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO1lBQzNDLElBQUksT0FBTyxFQUFFO2dCQUNYLGNBQWMsR0FBRyxPQUFPLENBQUM7YUFDMUI7aUJBQU07Z0JBQ0wsSUFBSSxlQUFlLENBQUMsd0JBQXdCLEVBQUU7b0JBQzVDLGNBQWMsR0FBRyxDQUFDLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztpQkFDeEM7cUJBQU07b0JBQ0wsY0FBYyxHQUFHLENBQUMsQ0FBQyxxQkFBcUIsQ0FDdEMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQ3hCLENBQUM7aUJBQ0g7YUFDRjtTQUNGO2FBQU07WUFDTCxjQUFjLEdBQUcsQ0FBQyxDQUFDLHFCQUFxQixDQUN0QyxDQUFDLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FDeEIsQ0FBQztTQUNIO1FBRUQsSUFBSSxRQUFRLEVBQUU7WUFDWixPQUFPLENBQUMsQ0FBQyxzQkFBc0IsQ0FBQyxjQUFjLENBQUMsQ0FBQztTQUNqRDthQUFNO1lBQ0wsT0FBTyxjQUFjLENBQUM7U0FDdkI7SUFDSCxDQUFDLENBQUE7QUFDSCxDQUFDO0FBckRELGtHQXFEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEdyYXBoUUxCb29sZWFuLFxuICBHcmFwaFFMRmxvYXQsXG4gIEdyYXBoUUxJbnQsXG4gIEdyYXBoUUxJRCxcbiAgR3JhcGhRTFNjYWxhclR5cGUsXG4gIEdyYXBoUUxTdHJpbmcsXG4gIEdyYXBoUUxUeXBlLFxuICBpc05vbk51bGxUeXBlLFxuICBpc0xpc3RUeXBlLFxufSBmcm9tICdncmFwaHFsJ1xuXG5pbXBvcnQgKiBhcyB0IGZyb20gJ2JhYmVsLXR5cGVzJztcblxuaW1wb3J0IHsgQ29tcGlsZXJPcHRpb25zIH0gZnJvbSAnLi4vY29tcGlsZXInO1xuXG5jb25zdCBidWlsdEluU2NhbGFyTWFwID0ge1xuICBbR3JhcGhRTFN0cmluZy5uYW1lXTogdC5zdHJpbmdUeXBlQW5ub3RhdGlvbigpLFxuICBbR3JhcGhRTEludC5uYW1lXTogdC5udW1iZXJUeXBlQW5ub3RhdGlvbigpLFxuICBbR3JhcGhRTEZsb2F0Lm5hbWVdOiB0Lm51bWJlclR5cGVBbm5vdGF0aW9uKCksXG4gIFtHcmFwaFFMQm9vbGVhbi5uYW1lXTogdC5ib29sZWFuVHlwZUFubm90YXRpb24oKSxcbiAgW0dyYXBoUUxJRC5uYW1lXTogdC5zdHJpbmdUeXBlQW5ub3RhdGlvbigpLFxufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVHlwZUFubm90YXRpb25Gcm9tR3JhcGhRTFR5cGVGdW5jdGlvbihcbiAgY29tcGlsZXJPcHRpb25zOiBDb21waWxlck9wdGlvbnNcbik6IEZ1bmN0aW9uIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHR5cGVBbm5vdGF0aW9uRnJvbUdyYXBoUUxUeXBlKHR5cGU6IEdyYXBoUUxUeXBlLCB7XG4gICAgbnVsbGFibGVcbiAgfSA9IHtcbiAgICBudWxsYWJsZTogdHJ1ZVxuICB9KTogdC5GbG93VHlwZUFubm90YXRpb24ge1xuICAgIGlmIChpc05vbk51bGxUeXBlKHR5cGUpKSB7XG4gICAgICByZXR1cm4gdHlwZUFubm90YXRpb25Gcm9tR3JhcGhRTFR5cGUoXG4gICAgICAgIHR5cGUub2ZUeXBlLFxuICAgICAgICB7IG51bGxhYmxlOiBmYWxzZSB9XG4gICAgICApO1xuICAgIH1cblxuICAgIGlmIChpc0xpc3RUeXBlKHR5cGUpKSB7XG4gICAgICBjb25zdCB0eXBlQW5ub3RhdGlvbiA9IHQuYXJyYXlUeXBlQW5ub3RhdGlvbihcbiAgICAgICAgdHlwZUFubm90YXRpb25Gcm9tR3JhcGhRTFR5cGUodHlwZS5vZlR5cGUpXG4gICAgICApO1xuXG4gICAgICBpZiAobnVsbGFibGUpIHtcbiAgICAgICAgcmV0dXJuIHQubnVsbGFibGVUeXBlQW5ub3RhdGlvbih0eXBlQW5ub3RhdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdHlwZUFubm90YXRpb247XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IHR5cGVBbm5vdGF0aW9uO1xuICAgIGlmICh0eXBlIGluc3RhbmNlb2YgR3JhcGhRTFNjYWxhclR5cGUpIHtcbiAgICAgIGNvbnN0IGJ1aWx0SW4gPSBidWlsdEluU2NhbGFyTWFwW3R5cGUubmFtZV1cbiAgICAgIGlmIChidWlsdEluKSB7XG4gICAgICAgIHR5cGVBbm5vdGF0aW9uID0gYnVpbHRJbjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChjb21waWxlck9wdGlvbnMucGFzc3Rocm91Z2hDdXN0b21TY2FsYXJzKSB7XG4gICAgICAgICAgdHlwZUFubm90YXRpb24gPSB0LmFueVR5cGVBbm5vdGF0aW9uKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdHlwZUFubm90YXRpb24gPSB0LmdlbmVyaWNUeXBlQW5ub3RhdGlvbihcbiAgICAgICAgICAgIHQuaWRlbnRpZmllcih0eXBlLm5hbWUpXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0eXBlQW5ub3RhdGlvbiA9IHQuZ2VuZXJpY1R5cGVBbm5vdGF0aW9uKFxuICAgICAgICB0LmlkZW50aWZpZXIodHlwZS5uYW1lKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAobnVsbGFibGUpIHtcbiAgICAgIHJldHVybiB0Lm51bGxhYmxlVHlwZUFubm90YXRpb24odHlwZUFubm90YXRpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdHlwZUFubm90YXRpb247XG4gICAgfVxuICB9XG59XG4iXX0=");"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = require("graphql");
const t = require("babel-types");
const builtInScalarMap = {
    [graphql_1.GraphQLString.name]: t.stringTypeAnnotation(),
    [graphql_1.GraphQLInt.name]: t.numberTypeAnnotation(),
    [graphql_1.GraphQLFloat.name]: t.numberTypeAnnotation(),
    [graphql_1.GraphQLBoolean.name]: t.booleanTypeAnnotation(),
    [graphql_1.GraphQLID.name]: t.stringTypeAnnotation() };

function createTypeAnnotationFromGraphQLTypeFunction(compilerOptions) {
    return function typeAnnotationFromGraphQLType(type, { nullable } = {
        nullable: true })
    {
        if (graphql_1.isNonNullType(type)) {
            return typeAnnotationFromGraphQLType(type.ofType, { nullable: false });
        }
        if (graphql_1.isListType(type)) {
            const typeAnnotation = t.arrayTypeAnnotation(typeAnnotationFromGraphQLType(type.ofType));
            if (nullable) {
                return t.nullableTypeAnnotation(typeAnnotation);
            } else
            {
                return typeAnnotation;
            }
        }
        let typeAnnotation;
        if (type instanceof graphql_1.GraphQLScalarType) {
            const builtIn = builtInScalarMap[type.name];
            if (builtIn) {
                typeAnnotation = builtIn;
            } else
            {
                if (compilerOptions.passthroughCustomScalars) {
                    typeAnnotation = t.anyTypeAnnotation();
                } else
                {
                    typeAnnotation = t.genericTypeAnnotation(t.identifier(type.name));
                }
            }
        } else
        {
            typeAnnotation = t.genericTypeAnnotation(t.identifier(type.name));
        }
        if (nullable) {
            return t.nullableTypeAnnotation(typeAnnotation);
        } else
        {
            return typeAnnotation;
        }
    };
}
exports.createTypeAnnotationFromGraphQLTypeFunction = createTypeAnnotationFromGraphQLTypeFunction;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhlbHBlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFBLFlBQUEsUUFBQSxTQUFBLENBQUE7QUFZQSxNQUFBLElBQUEsUUFBQSxhQUFBLENBQUE7QUFJQSxNQUFNLG1CQUFtQjtBQUN2QixLQUFDLFVBQUEsYUFBQSxDQUFjLElBQWYsR0FBc0IsRUFBRSxvQkFBRixFQURDO0FBRXZCLEtBQUMsVUFBQSxVQUFBLENBQVcsSUFBWixHQUFtQixFQUFFLG9CQUFGLEVBRkk7QUFHdkIsS0FBQyxVQUFBLFlBQUEsQ0FBYSxJQUFkLEdBQXFCLEVBQUUsb0JBQUYsRUFIRTtBQUl2QixLQUFDLFVBQUEsY0FBQSxDQUFlLElBQWhCLEdBQXVCLEVBQUUscUJBQUYsRUFKQTtBQUt2QixLQUFDLFVBQUEsU0FBQSxDQUFVLElBQVgsR0FBa0IsRUFBRSxvQkFBRixFQUxLLEVBQXpCOztBQVFBLFNBQUEsMkNBQUEsQ0FDRSxlQURGLEVBQ2tDO0FBRWhDLFdBQU8sU0FBQSw2QkFBQSxDQUF1QyxJQUF2QyxFQUEwRCxFQUMvRCxRQUQrRCxLQUU3RDtBQUNGLGtCQUFVLElBRFIsRUFGRztBQUlOO0FBQ0MsWUFBSSxVQUFBLGFBQUEsQ0FBYyxJQUFkLENBQUosRUFBeUI7QUFDdkIsbUJBQU8sOEJBQ0wsS0FBSyxNQURBLEVBRUwsRUFBRSxVQUFVLEtBQVosRUFGSyxDQUFQO0FBSUQ7QUFFRCxZQUFJLFVBQUEsVUFBQSxDQUFXLElBQVgsQ0FBSixFQUFzQjtBQUNwQixrQkFBTSxpQkFBaUIsRUFBRSxtQkFBRixDQUNyQiw4QkFBOEIsS0FBSyxNQUFuQyxDQURxQixDQUF2QjtBQUlBLGdCQUFJLFFBQUosRUFBYztBQUNaLHVCQUFPLEVBQUUsc0JBQUYsQ0FBeUIsY0FBekIsQ0FBUDtBQUNELGFBRkQ7QUFFTztBQUNMLHVCQUFPLGNBQVA7QUFDRDtBQUNGO0FBRUQsWUFBSSxjQUFKO0FBQ0EsWUFBSSxnQkFBZ0IsVUFBQSxpQkFBcEIsRUFBdUM7QUFDckMsa0JBQU0sVUFBVSxpQkFBaUIsS0FBSyxJQUF0QixDQUFoQjtBQUNBLGdCQUFJLE9BQUosRUFBYTtBQUNYLGlDQUFpQixPQUFqQjtBQUNELGFBRkQ7QUFFTztBQUNMLG9CQUFJLGdCQUFnQix3QkFBcEIsRUFBOEM7QUFDNUMscUNBQWlCLEVBQUUsaUJBQUYsRUFBakI7QUFDRCxpQkFGRDtBQUVPO0FBQ0wscUNBQWlCLEVBQUUscUJBQUYsQ0FDZixFQUFFLFVBQUYsQ0FBYSxLQUFLLElBQWxCLENBRGUsQ0FBakI7QUFHRDtBQUNGO0FBQ0YsU0FiRDtBQWFPO0FBQ0wsNkJBQWlCLEVBQUUscUJBQUYsQ0FDZixFQUFFLFVBQUYsQ0FBYSxLQUFLLElBQWxCLENBRGUsQ0FBakI7QUFHRDtBQUVELFlBQUksUUFBSixFQUFjO0FBQ1osbUJBQU8sRUFBRSxzQkFBRixDQUF5QixjQUF6QixDQUFQO0FBQ0QsU0FGRDtBQUVPO0FBQ0wsbUJBQU8sY0FBUDtBQUNEO0FBQ0YsS0FqREQ7QUFrREQ7QUFyREQsUUFBQSwyQ0FBQSxHQUFBLDJDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgR3JhcGhRTEJvb2xlYW4sXG4gIEdyYXBoUUxGbG9hdCxcbiAgR3JhcGhRTEludCxcbiAgR3JhcGhRTElELFxuICBHcmFwaFFMU2NhbGFyVHlwZSxcbiAgR3JhcGhRTFN0cmluZyxcbiAgR3JhcGhRTFR5cGUsXG4gIGlzTm9uTnVsbFR5cGUsXG4gIGlzTGlzdFR5cGUsXG59IGZyb20gJ2dyYXBocWwnXG5cbmltcG9ydCAqIGFzIHQgZnJvbSAnYmFiZWwtdHlwZXMnO1xuXG5pbXBvcnQgeyBDb21waWxlck9wdGlvbnMgfSBmcm9tICcuLi9jb21waWxlcic7XG5cbmNvbnN0IGJ1aWx0SW5TY2FsYXJNYXAgPSB7XG4gIFtHcmFwaFFMU3RyaW5nLm5hbWVdOiB0LnN0cmluZ1R5cGVBbm5vdGF0aW9uKCksXG4gIFtHcmFwaFFMSW50Lm5hbWVdOiB0Lm51bWJlclR5cGVBbm5vdGF0aW9uKCksXG4gIFtHcmFwaFFMRmxvYXQubmFtZV06IHQubnVtYmVyVHlwZUFubm90YXRpb24oKSxcbiAgW0dyYXBoUUxCb29sZWFuLm5hbWVdOiB0LmJvb2xlYW5UeXBlQW5ub3RhdGlvbigpLFxuICBbR3JhcGhRTElELm5hbWVdOiB0LnN0cmluZ1R5cGVBbm5vdGF0aW9uKCksXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVUeXBlQW5ub3RhdGlvbkZyb21HcmFwaFFMVHlwZUZ1bmN0aW9uKFxuICBjb21waWxlck9wdGlvbnM6IENvbXBpbGVyT3B0aW9uc1xuKTogRnVuY3Rpb24ge1xuICByZXR1cm4gZnVuY3Rpb24gdHlwZUFubm90YXRpb25Gcm9tR3JhcGhRTFR5cGUodHlwZTogR3JhcGhRTFR5cGUsIHtcbiAgICBudWxsYWJsZVxuICB9ID0ge1xuICAgIG51bGxhYmxlOiB0cnVlXG4gIH0pOiB0LkZsb3dUeXBlQW5ub3RhdGlvbiB7XG4gICAgaWYgKGlzTm9uTnVsbFR5cGUodHlwZSkpIHtcbiAgICAgIHJldHVybiB0eXBlQW5ub3RhdGlvbkZyb21HcmFwaFFMVHlwZShcbiAgICAgICAgdHlwZS5vZlR5cGUsXG4gICAgICAgIHsgbnVsbGFibGU6IGZhbHNlIH1cbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKGlzTGlzdFR5cGUodHlwZSkpIHtcbiAgICAgIGNvbnN0IHR5cGVBbm5vdGF0aW9uID0gdC5hcnJheVR5cGVBbm5vdGF0aW9uKFxuICAgICAgICB0eXBlQW5ub3RhdGlvbkZyb21HcmFwaFFMVHlwZSh0eXBlLm9mVHlwZSlcbiAgICAgICk7XG5cbiAgICAgIGlmIChudWxsYWJsZSkge1xuICAgICAgICByZXR1cm4gdC5udWxsYWJsZVR5cGVBbm5vdGF0aW9uKHR5cGVBbm5vdGF0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0eXBlQW5ub3RhdGlvbjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgdHlwZUFubm90YXRpb247XG4gICAgaWYgKHR5cGUgaW5zdGFuY2VvZiBHcmFwaFFMU2NhbGFyVHlwZSkge1xuICAgICAgY29uc3QgYnVpbHRJbiA9IGJ1aWx0SW5TY2FsYXJNYXBbdHlwZS5uYW1lXVxuICAgICAgaWYgKGJ1aWx0SW4pIHtcbiAgICAgICAgdHlwZUFubm90YXRpb24gPSBidWlsdEluO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGNvbXBpbGVyT3B0aW9ucy5wYXNzdGhyb3VnaEN1c3RvbVNjYWxhcnMpIHtcbiAgICAgICAgICB0eXBlQW5ub3RhdGlvbiA9IHQuYW55VHlwZUFubm90YXRpb24oKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0eXBlQW5ub3RhdGlvbiA9IHQuZ2VuZXJpY1R5cGVBbm5vdGF0aW9uKFxuICAgICAgICAgICAgdC5pZGVudGlmaWVyKHR5cGUubmFtZSlcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHR5cGVBbm5vdGF0aW9uID0gdC5nZW5lcmljVHlwZUFubm90YXRpb24oXG4gICAgICAgIHQuaWRlbnRpZmllcih0eXBlLm5hbWUpXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmIChudWxsYWJsZSkge1xuICAgICAgcmV0dXJuIHQubnVsbGFibGVUeXBlQW5ub3RhdGlvbih0eXBlQW5ub3RhdGlvbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0eXBlQW5ub3RhdGlvbjtcbiAgICB9XG4gIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=