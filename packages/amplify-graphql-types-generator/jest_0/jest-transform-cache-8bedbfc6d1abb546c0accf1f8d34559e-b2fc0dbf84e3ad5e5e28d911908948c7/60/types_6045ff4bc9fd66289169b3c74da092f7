a637b06b39671fc86f7f760365e37164
'use strict';require('ts-jest').install("/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-types-generator/test/scala/types.js", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst graphql_1 = require(\"graphql\");\nconst loading_1 = require(\"../../src/loading\");\nconst schema = loading_1.loadSchema(require.resolve('../fixtures/starwars/schema.json'));\nconst types_1 = require(\"../../src/scala/types\");\ndescribe('Scala code generation: Types', function () {\n    describe('#typeNameFromGraphQLType()', function () {\n        test('should return Option[String] for GraphQLString', function () {\n            expect(types_1.typeNameFromGraphQLType({}, graphql_1.GraphQLString)).toBe('Option[String]');\n        });\n        test('should return String for GraphQLNonNull(GraphQLString)', function () {\n            expect(types_1.typeNameFromGraphQLType({}, new graphql_1.GraphQLNonNull(graphql_1.GraphQLString))).toBe('String');\n        });\n        test('should return Option[Seq[Option[String]]] for GraphQLList(GraphQLString)', function () {\n            expect(types_1.typeNameFromGraphQLType({}, new graphql_1.GraphQLList(graphql_1.GraphQLString))).toBe('Option[Seq[Option[String]]]');\n        });\n        test('should return Seq[String] for GraphQLNonNull(GraphQLList(GraphQLString))', function () {\n            expect(types_1.typeNameFromGraphQLType({}, new graphql_1.GraphQLNonNull(new graphql_1.GraphQLList(graphql_1.GraphQLString)))).toBe('Seq[Option[String]]');\n        });\n        test('should return Option[Seq[String]] for GraphQLList(GraphQLNonNull(GraphQLString))', function () {\n            expect(types_1.typeNameFromGraphQLType({}, new graphql_1.GraphQLList(new graphql_1.GraphQLNonNull(graphql_1.GraphQLString)))).toBe('Option[Seq[String]]');\n        });\n        test('should return Seq[String] for GraphQLNonNull(GraphQLList(GraphQLNonNull(GraphQLString)))', function () {\n            expect(types_1.typeNameFromGraphQLType({}, new graphql_1.GraphQLNonNull(new graphql_1.GraphQLList(new graphql_1.GraphQLNonNull(graphql_1.GraphQLString))))).toBe('Seq[String]');\n        });\n        test('should return Option[Seq[Option[Seq[Option[String]]]]] for GraphQLList(GraphQLList(GraphQLString))', function () {\n            expect(types_1.typeNameFromGraphQLType({}, new graphql_1.GraphQLList(new graphql_1.GraphQLList(graphql_1.GraphQLString)))).toBe('Option[Seq[Option[Seq[Option[String]]]]]');\n        });\n        test('should return Option[Seq[Seq[Option[String]]]] for GraphQLList(GraphQLNonNull(GraphQLList(GraphQLString)))', function () {\n            expect(types_1.typeNameFromGraphQLType({}, new graphql_1.GraphQLList(new graphql_1.GraphQLNonNull(new graphql_1.GraphQLList(graphql_1.GraphQLString))))).toBe('Option[Seq[Seq[Option[String]]]]');\n        });\n        test('should return Option[Int] for GraphQLInt', function () {\n            expect(types_1.typeNameFromGraphQLType({}, graphql_1.GraphQLInt)).toBe('Option[Int]');\n        });\n        test('should return Option[Double] for GraphQLFloat', function () {\n            expect(types_1.typeNameFromGraphQLType({}, graphql_1.GraphQLFloat)).toBe('Option[Double]');\n        });\n        test('should return Option[Boolean] for GraphQLBoolean', function () {\n            expect(types_1.typeNameFromGraphQLType({}, graphql_1.GraphQLBoolean)).toBe('Option[Boolean]');\n        });\n        test('should return Option[String] for GraphQLID', function () {\n            expect(types_1.typeNameFromGraphQLType({}, graphql_1.GraphQLID)).toBe('Option[String]');\n        });\n        test('should return Option[String] for a custom scalar type', function () {\n            expect(types_1.typeNameFromGraphQLType({}, new graphql_1.GraphQLScalarType({ name: 'CustomScalarType', serialize: String }))).toBe('Option[String]');\n        });\n        test('should return a passed through custom scalar type with the passthroughCustomScalars option', function () {\n            expect(types_1.typeNameFromGraphQLType({ passthroughCustomScalars: true, customScalarsPrefix: '' }, new graphql_1.GraphQLScalarType({ name: 'CustomScalarType', serialize: String }))).toBe('Option[CustomScalarType]');\n        });\n        test('should return a passed through custom scalar type with a prefix with the customScalarsPrefix option', function () {\n            expect(types_1.typeNameFromGraphQLType({ passthroughCustomScalars: true, customScalarsPrefix: 'My' }, new graphql_1.GraphQLScalarType({ name: 'CustomScalarType', serialize: String }))).toBe('Option[MyCustomScalarType]');\n        });\n    });\n});\n//# sourceMappingURL=data:application/json;base64,");"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = require("graphql");
const loading_1 = require("../../src/loading");
const schema = loading_1.loadSchema(require.resolve('../fixtures/starwars/schema.json'));
const types_1 = require("../../src/scala/types");
describe('Scala code generation: Types', function () {
    describe('#typeNameFromGraphQLType()', function () {
        test('should return Option[String] for GraphQLString', function () {
            expect(types_1.typeNameFromGraphQLType({}, graphql_1.GraphQLString)).toBe('Option[String]');
        });
        test('should return String for GraphQLNonNull(GraphQLString)', function () {
            expect(types_1.typeNameFromGraphQLType({}, new graphql_1.GraphQLNonNull(graphql_1.GraphQLString))).toBe('String');
        });
        test('should return Option[Seq[Option[String]]] for GraphQLList(GraphQLString)', function () {
            expect(types_1.typeNameFromGraphQLType({}, new graphql_1.GraphQLList(graphql_1.GraphQLString))).toBe('Option[Seq[Option[String]]]');
        });
        test('should return Seq[String] for GraphQLNonNull(GraphQLList(GraphQLString))', function () {
            expect(types_1.typeNameFromGraphQLType({}, new graphql_1.GraphQLNonNull(new graphql_1.GraphQLList(graphql_1.GraphQLString)))).toBe('Seq[Option[String]]');
        });
        test('should return Option[Seq[String]] for GraphQLList(GraphQLNonNull(GraphQLString))', function () {
            expect(types_1.typeNameFromGraphQLType({}, new graphql_1.GraphQLList(new graphql_1.GraphQLNonNull(graphql_1.GraphQLString)))).toBe('Option[Seq[String]]');
        });
        test('should return Seq[String] for GraphQLNonNull(GraphQLList(GraphQLNonNull(GraphQLString)))', function () {
            expect(types_1.typeNameFromGraphQLType({}, new graphql_1.GraphQLNonNull(new graphql_1.GraphQLList(new graphql_1.GraphQLNonNull(graphql_1.GraphQLString))))).toBe('Seq[String]');
        });
        test('should return Option[Seq[Option[Seq[Option[String]]]]] for GraphQLList(GraphQLList(GraphQLString))', function () {
            expect(types_1.typeNameFromGraphQLType({}, new graphql_1.GraphQLList(new graphql_1.GraphQLList(graphql_1.GraphQLString)))).toBe('Option[Seq[Option[Seq[Option[String]]]]]');
        });
        test('should return Option[Seq[Seq[Option[String]]]] for GraphQLList(GraphQLNonNull(GraphQLList(GraphQLString)))', function () {
            expect(types_1.typeNameFromGraphQLType({}, new graphql_1.GraphQLList(new graphql_1.GraphQLNonNull(new graphql_1.GraphQLList(graphql_1.GraphQLString))))).toBe('Option[Seq[Seq[Option[String]]]]');
        });
        test('should return Option[Int] for GraphQLInt', function () {
            expect(types_1.typeNameFromGraphQLType({}, graphql_1.GraphQLInt)).toBe('Option[Int]');
        });
        test('should return Option[Double] for GraphQLFloat', function () {
            expect(types_1.typeNameFromGraphQLType({}, graphql_1.GraphQLFloat)).toBe('Option[Double]');
        });
        test('should return Option[Boolean] for GraphQLBoolean', function () {
            expect(types_1.typeNameFromGraphQLType({}, graphql_1.GraphQLBoolean)).toBe('Option[Boolean]');
        });
        test('should return Option[String] for GraphQLID', function () {
            expect(types_1.typeNameFromGraphQLType({}, graphql_1.GraphQLID)).toBe('Option[String]');
        });
        test('should return Option[String] for a custom scalar type', function () {
            expect(types_1.typeNameFromGraphQLType({}, new graphql_1.GraphQLScalarType({ name: 'CustomScalarType', serialize: String }))).toBe('Option[String]');
        });
        test('should return a passed through custom scalar type with the passthroughCustomScalars option', function () {
            expect(types_1.typeNameFromGraphQLType({ passthroughCustomScalars: true, customScalarsPrefix: '' }, new graphql_1.GraphQLScalarType({ name: 'CustomScalarType', serialize: String }))).toBe('Option[CustomScalarType]');
        });
        test('should return a passed through custom scalar type with a prefix with the customScalarsPrefix option', function () {
            expect(types_1.typeNameFromGraphQLType({ passthroughCustomScalars: true, customScalarsPrefix: 'My' }, new graphql_1.GraphQLScalarType({ name: 'CustomScalarType', serialize: String }))).toBe('Option[MyCustomScalarType]');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,