{"version":3,"sources":["types.js"],"names":[],"mappings":"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","sourcesContent":["import { stripIndent } from 'common-tags'\n\nimport {\n  GraphQLString,\n  GraphQLInt,\n  GraphQLFloat,\n  GraphQLBoolean,\n  GraphQLID,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLScalarType,\n} from 'graphql';\n\nimport { loadSchema } from '../../src/loading'\nconst schema = loadSchema(require.resolve('../fixtures/starwars/schema.json'));\n\nimport CodeGenerator from '../../src/utilities/CodeGenerator';\n\nimport { typeNameFromGraphQLType } from '../../src/scala/types'\n\ndescribe('Scala code generation: Types', function() {\n  describe('#typeNameFromGraphQLType()', function() {\n    test('should return Option[String] for GraphQLString', function() {\n      expect(typeNameFromGraphQLType({}, GraphQLString)).toBe('Option[String]');\n    });\n\n    test('should return String for GraphQLNonNull(GraphQLString)', function() {\n      expect(typeNameFromGraphQLType({}, new GraphQLNonNull(GraphQLString))).toBe('String');\n    });\n\n    test('should return Option[Seq[Option[String]]] for GraphQLList(GraphQLString)', function() {\n      expect(typeNameFromGraphQLType({}, new GraphQLList(GraphQLString))).toBe('Option[Seq[Option[String]]]');\n    });\n\n    test('should return Seq[String] for GraphQLNonNull(GraphQLList(GraphQLString))', function() {\n      expect(typeNameFromGraphQLType({}, new GraphQLNonNull(new GraphQLList(GraphQLString)))).toBe('Seq[Option[String]]');\n    });\n\n    test('should return Option[Seq[String]] for GraphQLList(GraphQLNonNull(GraphQLString))', function() {\n      expect(typeNameFromGraphQLType({}, new GraphQLList(new GraphQLNonNull(GraphQLString)))).toBe('Option[Seq[String]]');\n    });\n\n    test('should return Seq[String] for GraphQLNonNull(GraphQLList(GraphQLNonNull(GraphQLString)))', function() {\n      expect(typeNameFromGraphQLType({}, new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(GraphQLString))))).toBe('Seq[String]');\n    });\n\n    test('should return Option[Seq[Option[Seq[Option[String]]]]] for GraphQLList(GraphQLList(GraphQLString))', function() {\n      expect(typeNameFromGraphQLType({}, new GraphQLList(new GraphQLList(GraphQLString)))).toBe('Option[Seq[Option[Seq[Option[String]]]]]');\n    });\n\n    test('should return Option[Seq[Seq[Option[String]]]] for GraphQLList(GraphQLNonNull(GraphQLList(GraphQLString)))', function() {\n      expect(typeNameFromGraphQLType({}, new GraphQLList(new GraphQLNonNull(new GraphQLList(GraphQLString))))).toBe('Option[Seq[Seq[Option[String]]]]');\n    });\n\n    test('should return Option[Int] for GraphQLInt', function() {\n      expect(typeNameFromGraphQLType({}, GraphQLInt)).toBe('Option[Int]');\n    });\n\n    test('should return Option[Double] for GraphQLFloat', function() {\n      expect(typeNameFromGraphQLType({}, GraphQLFloat)).toBe('Option[Double]');\n    });\n\n    test('should return Option[Boolean] for GraphQLBoolean', function() {\n      expect(typeNameFromGraphQLType({}, GraphQLBoolean)).toBe('Option[Boolean]');\n    });\n\n    test('should return Option[String] for GraphQLID', function() {\n      expect(typeNameFromGraphQLType({}, GraphQLID)).toBe('Option[String]');\n    });\n\n    test('should return Option[String] for a custom scalar type', function() {\n      expect(typeNameFromGraphQLType({}, new GraphQLScalarType({ name: 'CustomScalarType', serialize: String }))).toBe('Option[String]');\n    });\n\n    test('should return a passed through custom scalar type with the passthroughCustomScalars option', function() {\n      expect(typeNameFromGraphQLType({ passthroughCustomScalars: true, customScalarsPrefix: '' }, new GraphQLScalarType({ name: 'CustomScalarType', serialize: String }))).toBe('Option[CustomScalarType]');\n    });\n\n    test('should return a passed through custom scalar type with a prefix with the customScalarsPrefix option', function() {\n      expect(typeNameFromGraphQLType({ passthroughCustomScalars: true, customScalarsPrefix: 'My' }, new GraphQLScalarType({ name: 'CustomScalarType', serialize: String }))).toBe('Option[MyCustomScalarType]');\n    });\n  });\n});\n"],"sourceRoot":""}