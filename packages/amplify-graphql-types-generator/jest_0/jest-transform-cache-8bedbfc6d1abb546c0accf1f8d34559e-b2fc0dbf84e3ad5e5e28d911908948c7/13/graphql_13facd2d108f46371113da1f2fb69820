3d2d9c27cd2ace5bf6318650eec3ecb5
'use strict';require('ts-jest').install("/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-types-generator/src/utilities/graphql.ts", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst graphql_1 = require(\"graphql\");\nfunction sortEnumValues(values) {\n    return values.sort((a, b) => (a.value < b.value ? -1 : a.value > b.value ? 1 : 0));\n}\nexports.sortEnumValues = sortEnumValues;\nfunction isList(type) {\n    return graphql_1.isListType(type) || (graphql_1.isNonNullType(type) && graphql_1.isListType(type.ofType));\n}\nexports.isList = isList;\nfunction isMetaFieldName(name) {\n    return name.startsWith('__');\n}\nexports.isMetaFieldName = isMetaFieldName;\nfunction removeConnectionDirectives(ast) {\n    return graphql_1.visit(ast, {\n        Directive(node) {\n            if (node.name.value === 'connection')\n                return null;\n            return node;\n        }\n    });\n}\nexports.removeConnectionDirectives = removeConnectionDirectives;\nfunction removeClientDirectives(ast) {\n    return graphql_1.visit(ast, {\n        Field(node) {\n            if (node.directives && node.directives.find(directive => directive.name.value === 'client'))\n                return null;\n            return node;\n        },\n        OperationDefinition: {\n            leave(node) {\n                if (!node.selectionSet.selections.length)\n                    return null;\n                return node;\n            }\n        }\n    });\n}\nexports.removeClientDirectives = removeClientDirectives;\nconst typenameField = {\n    kind: graphql_1.Kind.FIELD,\n    name: { kind: graphql_1.Kind.NAME, value: '__typename' }\n};\nfunction withTypenameFieldAddedWhereNeeded(ast) {\n    return graphql_1.visit(ast, {\n        enter: {\n            SelectionSet(node) {\n                return Object.assign({}, node, { selections: node.selections.filter(selection => !(selection.kind === 'Field' && selection.name.value === '__typename')) });\n            }\n        },\n        leave(node) {\n            if (!(node.kind === 'Field' || node.kind === 'FragmentDefinition'))\n                return undefined;\n            if (!node.selectionSet)\n                return undefined;\n            if (true) {\n                return Object.assign({}, node, { selectionSet: Object.assign({}, node.selectionSet, { selections: [typenameField, ...node.selectionSet.selections] }) });\n            }\n            else {\n                return undefined;\n            }\n        }\n    });\n}\nexports.withTypenameFieldAddedWhereNeeded = withTypenameFieldAddedWhereNeeded;\nfunction sourceAt(location) {\n    return location.source.body.slice(location.start, location.end);\n}\nexports.sourceAt = sourceAt;\nfunction filePathForNode(node) {\n    const name = node.loc && node.loc.source && node.loc.source.name;\n    if (!name || name === 'GraphQL') {\n        throw new Error('Node does not seem to have a file path');\n    }\n    return name;\n}\nexports.filePathForNode = filePathForNode;\nfunction valueFromValueNode(valueNode) {\n    switch (valueNode.kind) {\n        case 'IntValue':\n        case 'FloatValue':\n            return Number(valueNode.value);\n        case 'NullValue':\n            return null;\n        case 'ListValue':\n            return valueNode.values.map(valueFromValueNode);\n        case 'ObjectValue':\n            return valueNode.fields.reduce((object, field) => {\n                object[field.name.value] = valueFromValueNode(field.value);\n                return object;\n            }, {});\n        case 'Variable':\n            return { kind: 'Variable', variableName: valueNode.name.value };\n        default:\n            return valueNode.value;\n    }\n}\nexports.valueFromValueNode = valueFromValueNode;\nfunction isTypeProperSuperTypeOf(schema, maybeSuperType, subType) {\n    return (graphql_1.isEqualType(maybeSuperType, subType) ||\n        (subType instanceof graphql_1.GraphQLObjectType &&\n            (graphql_1.isAbstractType(maybeSuperType) && schema.isPossibleType(maybeSuperType, subType))));\n}\nexports.isTypeProperSuperTypeOf = isTypeProperSuperTypeOf;\nfunction getOperationRootType(schema, operation) {\n    switch (operation.operation) {\n        case 'query':\n            return schema.getQueryType();\n        case 'mutation':\n            const mutationType = schema.getMutationType();\n            if (!mutationType) {\n                throw new graphql_1.GraphQLError('Schema is not configured for mutations', [operation]);\n            }\n            return mutationType;\n        case 'subscription':\n            const subscriptionType = schema.getSubscriptionType();\n            if (!subscriptionType) {\n                throw new graphql_1.GraphQLError('Schema is not configured for subscriptions', [operation]);\n            }\n            return subscriptionType;\n        default:\n            throw new graphql_1.GraphQLError('Can only compile queries, mutations and subscriptions', [operation]);\n    }\n}\nexports.getOperationRootType = getOperationRootType;\nfunction getFieldDef(schema, parentType, fieldAST) {\n    const name = fieldAST.name.value;\n    if (name === graphql_1.SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {\n        return graphql_1.SchemaMetaFieldDef;\n    }\n    if (name === graphql_1.TypeMetaFieldDef.name && schema.getQueryType() === parentType) {\n        return graphql_1.TypeMetaFieldDef;\n    }\n    if (name === graphql_1.TypeNameMetaFieldDef.name &&\n        (parentType instanceof graphql_1.GraphQLObjectType ||\n            parentType instanceof graphql_1.GraphQLInterfaceType ||\n            parentType instanceof graphql_1.GraphQLUnionType)) {\n        return graphql_1.TypeNameMetaFieldDef;\n    }\n    if (parentType instanceof graphql_1.GraphQLObjectType || parentType instanceof graphql_1.GraphQLInterfaceType) {\n        return parentType.getFields()[name];\n    }\n    return undefined;\n}\nexports.getFieldDef = getFieldDef;\n//# sourceMappingURL=data:application/json;base64,");"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = require("graphql");
function sortEnumValues(values) {
    return values.sort((a, b) => a.value < b.value ? -1 : a.value > b.value ? 1 : 0);
}
exports.sortEnumValues = sortEnumValues;
function isList(type) {
    return graphql_1.isListType(type) || graphql_1.isNonNullType(type) && graphql_1.isListType(type.ofType);
}
exports.isList = isList;
function isMetaFieldName(name) {
    return name.startsWith('__');
}
exports.isMetaFieldName = isMetaFieldName;
function removeConnectionDirectives(ast) {
    return graphql_1.visit(ast, {
        Directive(node) {
            if (node.name.value === 'connection')
            return null;
            return node;
        } });

}
exports.removeConnectionDirectives = removeConnectionDirectives;
function removeClientDirectives(ast) {
    return graphql_1.visit(ast, {
        Field(node) {
            if (node.directives && node.directives.find(directive => directive.name.value === 'client'))
            return null;
            return node;
        },
        OperationDefinition: {
            leave(node) {
                if (!node.selectionSet.selections.length)
                return null;
                return node;
            } } });


}
exports.removeClientDirectives = removeClientDirectives;
const typenameField = {
    kind: graphql_1.Kind.FIELD,
    name: { kind: graphql_1.Kind.NAME, value: '__typename' } };

function withTypenameFieldAddedWhereNeeded(ast) {
    return graphql_1.visit(ast, {
        enter: {
            SelectionSet(node) {
                return Object.assign({}, node, { selections: node.selections.filter(selection => !(selection.kind === 'Field' && selection.name.value === '__typename')) });
            } },

        leave(node) {
            if (!(node.kind === 'Field' || node.kind === 'FragmentDefinition'))
            return undefined;
            if (!node.selectionSet)
            return undefined;
            if (true) {
                return Object.assign({}, node, { selectionSet: Object.assign({}, node.selectionSet, { selections: [typenameField, ...node.selectionSet.selections] }) });
            } else
            {
                return undefined;
            }
        } });

}
exports.withTypenameFieldAddedWhereNeeded = withTypenameFieldAddedWhereNeeded;
function sourceAt(location) {
    return location.source.body.slice(location.start, location.end);
}
exports.sourceAt = sourceAt;
function filePathForNode(node) {
    const name = node.loc && node.loc.source && node.loc.source.name;
    if (!name || name === 'GraphQL') {
        throw new Error('Node does not seem to have a file path');
    }
    return name;
}
exports.filePathForNode = filePathForNode;
function valueFromValueNode(valueNode) {
    switch (valueNode.kind) {
        case 'IntValue':
        case 'FloatValue':
            return Number(valueNode.value);
        case 'NullValue':
            return null;
        case 'ListValue':
            return valueNode.values.map(valueFromValueNode);
        case 'ObjectValue':
            return valueNode.fields.reduce((object, field) => {
                object[field.name.value] = valueFromValueNode(field.value);
                return object;
            }, {});
        case 'Variable':
            return { kind: 'Variable', variableName: valueNode.name.value };
        default:
            return valueNode.value;}

}
exports.valueFromValueNode = valueFromValueNode;
function isTypeProperSuperTypeOf(schema, maybeSuperType, subType) {
    return graphql_1.isEqualType(maybeSuperType, subType) ||
    subType instanceof graphql_1.GraphQLObjectType &&
    graphql_1.isAbstractType(maybeSuperType) && schema.isPossibleType(maybeSuperType, subType);
}
exports.isTypeProperSuperTypeOf = isTypeProperSuperTypeOf;
function getOperationRootType(schema, operation) {
    switch (operation.operation) {
        case 'query':
            return schema.getQueryType();
        case 'mutation':
            const mutationType = schema.getMutationType();
            if (!mutationType) {
                throw new graphql_1.GraphQLError('Schema is not configured for mutations', [operation]);
            }
            return mutationType;
        case 'subscription':
            const subscriptionType = schema.getSubscriptionType();
            if (!subscriptionType) {
                throw new graphql_1.GraphQLError('Schema is not configured for subscriptions', [operation]);
            }
            return subscriptionType;
        default:
            throw new graphql_1.GraphQLError('Can only compile queries, mutations and subscriptions', [operation]);}

}
exports.getOperationRootType = getOperationRootType;
function getFieldDef(schema, parentType, fieldAST) {
    const name = fieldAST.name.value;
    if (name === graphql_1.SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {
        return graphql_1.SchemaMetaFieldDef;
    }
    if (name === graphql_1.TypeMetaFieldDef.name && schema.getQueryType() === parentType) {
        return graphql_1.TypeMetaFieldDef;
    }
    if (name === graphql_1.TypeNameMetaFieldDef.name && (
    parentType instanceof graphql_1.GraphQLObjectType ||
    parentType instanceof graphql_1.GraphQLInterfaceType ||
    parentType instanceof graphql_1.GraphQLUnionType)) {
        return graphql_1.TypeNameMetaFieldDef;
    }
    if (parentType instanceof graphql_1.GraphQLObjectType || parentType instanceof graphql_1.GraphQLInterfaceType) {
        return parentType.getFields()[name];
    }
    return undefined;
}
exports.getFieldDef = getFieldDef;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,