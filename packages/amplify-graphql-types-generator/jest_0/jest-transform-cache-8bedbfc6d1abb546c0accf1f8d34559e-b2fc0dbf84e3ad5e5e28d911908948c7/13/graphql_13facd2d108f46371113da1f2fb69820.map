{"version":3,"sources":["graphql.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  visit,\n  Kind,\n  isEqualType,\n  isAbstractType,\n  SchemaMetaFieldDef,\n  TypeMetaFieldDef,\n  TypeNameMetaFieldDef,\n  GraphQLCompositeType,\n  GraphQLObjectType,\n  GraphQLInterfaceType,\n  GraphQLUnionType,\n  GraphQLEnumValue,\n  GraphQLError,\n  GraphQLSchema,\n  GraphQLType,\n  ASTNode,\n  Location,\n  ValueNode,\n  OperationDefinitionNode,\n  SelectionSetNode,\n  FieldNode,\n  GraphQLField,\n  DocumentNode,\n  DirectiveNode,\n  isListType,\n  isNonNullType\n} from 'graphql';\n\ndeclare module 'graphql/utilities/buildASTSchema' {\n  function buildASTSchema(\n    ast: DocumentNode,\n    options?: { assumeValid?: boolean; commentDescriptions?: boolean }\n  ): GraphQLSchema;\n}\n\nexport function sortEnumValues(values: GraphQLEnumValue[]): GraphQLEnumValue[] {\n  return values.sort((a, b) => (a.value < b.value ? -1 : a.value > b.value ? 1 : 0));\n}\n\nexport function isList(type: GraphQLType): boolean {\n  return isListType(type) || (isNonNullType(type) && isListType(type.ofType));\n}\n\nexport function isMetaFieldName(name: string) {\n  return name.startsWith('__');\n}\n\nexport function removeConnectionDirectives(ast: ASTNode) {\n  return visit(ast, {\n    Directive(node: DirectiveNode): DirectiveNode | null {\n      if (node.name.value === 'connection') return null;\n      return node;\n    }\n  });\n}\n\nexport function removeClientDirectives(ast: ASTNode) {\n  return visit(ast, {\n    Field(node: FieldNode): FieldNode | null {\n      if (node.directives && node.directives.find(directive => directive.name.value === 'client'))\n        return null;\n      return node;\n    },\n    OperationDefinition: {\n      leave(node: OperationDefinitionNode): OperationDefinitionNode | null {\n        if (!node.selectionSet.selections.length) return null;\n        return node;\n      }\n    }\n  });\n}\n\nconst typenameField = {\n  kind: Kind.FIELD,\n  name: { kind: Kind.NAME, value: '__typename' }\n};\n\nexport function withTypenameFieldAddedWhereNeeded(ast: ASTNode) {\n  return visit(ast, {\n    enter: {\n      SelectionSet(node: SelectionSetNode) {\n        return {\n          ...node,\n          selections: node.selections.filter(\n            selection =>\n              !(selection.kind === 'Field' && (selection as FieldNode).name.value === '__typename')\n          )\n        };\n      }\n    },\n    leave(node: ASTNode) {\n      if (!(node.kind === 'Field' || node.kind === 'FragmentDefinition')) return undefined;\n      if (!node.selectionSet) return undefined;\n\n      if (true) {\n        return {\n          ...node,\n          selectionSet: {\n            ...node.selectionSet,\n            selections: [typenameField, ...node.selectionSet.selections]\n          }\n        };\n      } else {\n        return undefined;\n      }\n    }\n  });\n}\n\nexport function sourceAt(location: Location) {\n  return location.source.body.slice(location.start, location.end);\n}\n\nexport function filePathForNode(node: ASTNode): string {\n  const name = node.loc && node.loc.source && node.loc.source.name;\n  if (!name || name === 'GraphQL') {\n    throw new Error('Node does not seem to have a file path');\n  }\n  return name;\n}\n\nexport function valueFromValueNode(\n  valueNode: ValueNode\n): any | { kind: 'Variable'; variableName: string } {\n  switch (valueNode.kind) {\n    case 'IntValue':\n    case 'FloatValue':\n      return Number(valueNode.value);\n    case 'NullValue':\n      return null;\n    case 'ListValue':\n      return valueNode.values.map(valueFromValueNode);\n    case 'ObjectValue':\n      return valueNode.fields.reduce(\n        (object, field) => {\n          object[field.name.value] = valueFromValueNode(field.value);\n          return object;\n        },\n        {} as any\n      );\n    case 'Variable':\n      return { kind: 'Variable', variableName: valueNode.name.value };\n    default:\n      return valueNode.value;\n  }\n}\n\nexport function isTypeProperSuperTypeOf(\n  schema: GraphQLSchema,\n  maybeSuperType: GraphQLCompositeType,\n  subType: GraphQLCompositeType\n) {\n  return (\n    isEqualType(maybeSuperType, subType) ||\n    (subType instanceof GraphQLObjectType &&\n      (isAbstractType(maybeSuperType) && schema.isPossibleType(maybeSuperType, subType)))\n  );\n}\n\n// Utility functions extracted from graphql-js\n\n/**\n * Extracts the root type of the operation from the schema.\n */\nexport function getOperationRootType(schema: GraphQLSchema, operation: OperationDefinitionNode) {\n  switch (operation.operation) {\n    case 'query':\n      return schema.getQueryType();\n    case 'mutation':\n      const mutationType = schema.getMutationType();\n      if (!mutationType) {\n        throw new GraphQLError('Schema is not configured for mutations', [operation]);\n      }\n      return mutationType;\n    case 'subscription':\n      const subscriptionType = schema.getSubscriptionType();\n      if (!subscriptionType) {\n        throw new GraphQLError('Schema is not configured for subscriptions', [operation]);\n      }\n      return subscriptionType;\n    default:\n      throw new GraphQLError('Can only compile queries, mutations and subscriptions', [operation]);\n  }\n}\n\n/**\n * Not exactly the same as the executor's definition of getFieldDef, in this\n * statically evaluated environment we do not always have an Object type,\n * and need to handle Interface and Union types.\n */\nexport function getFieldDef(\n  schema: GraphQLSchema,\n  parentType: GraphQLCompositeType,\n  fieldAST: FieldNode\n): GraphQLField<any, any> | undefined {\n  const name = fieldAST.name.value;\n  if (name === SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return SchemaMetaFieldDef;\n  }\n  if (name === TypeMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return TypeMetaFieldDef;\n  }\n  if (\n    name === TypeNameMetaFieldDef.name &&\n    (parentType instanceof GraphQLObjectType ||\n      parentType instanceof GraphQLInterfaceType ||\n      parentType instanceof GraphQLUnionType)\n  ) {\n    return TypeNameMetaFieldDef;\n  }\n  if (parentType instanceof GraphQLObjectType || parentType instanceof GraphQLInterfaceType) {\n    return parentType.getFields()[name];\n  }\n\n  return undefined;\n}\n"],"sourceRoot":""}