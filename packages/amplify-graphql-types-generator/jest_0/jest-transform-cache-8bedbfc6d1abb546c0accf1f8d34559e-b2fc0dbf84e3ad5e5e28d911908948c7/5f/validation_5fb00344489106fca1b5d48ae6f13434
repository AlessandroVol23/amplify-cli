8aea009b995331e8f23d364f393ea7af
'use strict';require('ts-jest').install("/c/Users/Sandro/repo/amplify-cli/packages/amplify-graphql-types-generator/src/validation.ts", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst graphql_1 = require(\"graphql\");\nconst errors_1 = require(\"./errors\");\nfunction validateQueryDocument(schema, document) {\n    const specifiedRulesToBeRemoved = [graphql_1.NoUnusedFragmentsRule];\n    const rules = [\n        NoAnonymousQueries,\n        NoTypenameAlias,\n        ...graphql_1.specifiedRules.filter(rule => !specifiedRulesToBeRemoved.includes(rule))\n    ];\n    const validationErrors = graphql_1.validate(schema, document, rules);\n    if (validationErrors && validationErrors.length > 0) {\n        for (const error of validationErrors) {\n            errors_1.logError(error);\n        }\n        throw new errors_1.ToolError('Validation of GraphQL query document failed');\n    }\n}\nexports.validateQueryDocument = validateQueryDocument;\nfunction NoAnonymousQueries(context) {\n    return {\n        OperationDefinition(node) {\n            if (!node.name) {\n                context.reportError(new graphql_1.GraphQLError('Apollo does not support anonymous operations', [node]));\n            }\n            return false;\n        }\n    };\n}\nexports.NoAnonymousQueries = NoAnonymousQueries;\nfunction NoTypenameAlias(context) {\n    return {\n        Field(node) {\n            const aliasName = node.alias && node.alias.value;\n            if (aliasName == '__typename') {\n                context.reportError(new graphql_1.GraphQLError('Apollo needs to be able to insert __typename when needed, please do not use it as an alias', [node]));\n            }\n        }\n    };\n}\nexports.NoTypenameAlias = NoTypenameAlias;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInZhbGlkYXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxxQ0FVaUI7QUFFakIscUNBQStDO0FBRS9DLCtCQUFzQyxNQUFxQixFQUFFLFFBQXNCO0lBQ2pGLE1BQU0seUJBQXlCLEdBQUcsQ0FBQywrQkFBcUIsQ0FBQyxDQUFDO0lBRTFELE1BQU0sS0FBSyxHQUFHO1FBQ1osa0JBQWtCO1FBQ2xCLGVBQWU7UUFDZixHQUFHLHdCQUFjLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyx5QkFBeUIsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDNUUsQ0FBQztJQUVGLE1BQU0sZ0JBQWdCLEdBQUcsa0JBQVEsQ0FBQyxNQUFNLEVBQUUsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzNELElBQUksZ0JBQWdCLElBQUksZ0JBQWdCLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtRQUNuRCxLQUFLLE1BQU0sS0FBSyxJQUFJLGdCQUFnQixFQUFFO1lBQ3BDLGlCQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDakI7UUFDRCxNQUFNLElBQUksa0JBQVMsQ0FBQyw2Q0FBNkMsQ0FBQyxDQUFDO0tBQ3BFO0FBQ0gsQ0FBQztBQWhCRCxzREFnQkM7QUFFRCw0QkFBbUMsT0FBMEI7SUFDM0QsT0FBTztRQUNMLG1CQUFtQixDQUFDLElBQTZCO1lBQy9DLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFO2dCQUNkLE9BQU8sQ0FBQyxXQUFXLENBQUMsSUFBSSxzQkFBWSxDQUFDLDhDQUE4QyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQy9GO1lBQ0QsT0FBTyxLQUFLLENBQUM7UUFDZixDQUFDO0tBQ0YsQ0FBQztBQUNKLENBQUM7QUFURCxnREFTQztBQUVELHlCQUFnQyxPQUEwQjtJQUN4RCxPQUFPO1FBQ0wsS0FBSyxDQUFDLElBQWU7WUFDbkIsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQztZQUNqRCxJQUFJLFNBQVMsSUFBSSxZQUFZLEVBQUU7Z0JBQzdCLE9BQU8sQ0FBQyxXQUFXLENBQ2pCLElBQUksc0JBQVksQ0FDZCw0RkFBNEYsRUFDNUYsQ0FBQyxJQUFJLENBQUMsQ0FDUCxDQUNGLENBQUM7YUFDSDtRQUNILENBQUM7S0FDRixDQUFDO0FBQ0osQ0FBQztBQWRELDBDQWNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgdmFsaWRhdGUsXG4gIHNwZWNpZmllZFJ1bGVzLFxuICBOb1VudXNlZEZyYWdtZW50c1J1bGUsXG4gIEdyYXBoUUxFcnJvcixcbiAgRmllbGROb2RlLFxuICBWYWxpZGF0aW9uQ29udGV4dCxcbiAgR3JhcGhRTFNjaGVtYSxcbiAgRG9jdW1lbnROb2RlLFxuICBPcGVyYXRpb25EZWZpbml0aW9uTm9kZVxufSBmcm9tICdncmFwaHFsJztcblxuaW1wb3J0IHsgVG9vbEVycm9yLCBsb2dFcnJvciB9IGZyb20gJy4vZXJyb3JzJztcblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlUXVlcnlEb2N1bWVudChzY2hlbWE6IEdyYXBoUUxTY2hlbWEsIGRvY3VtZW50OiBEb2N1bWVudE5vZGUpIHtcbiAgY29uc3Qgc3BlY2lmaWVkUnVsZXNUb0JlUmVtb3ZlZCA9IFtOb1VudXNlZEZyYWdtZW50c1J1bGVdO1xuXG4gIGNvbnN0IHJ1bGVzID0gW1xuICAgIE5vQW5vbnltb3VzUXVlcmllcyxcbiAgICBOb1R5cGVuYW1lQWxpYXMsXG4gICAgLi4uc3BlY2lmaWVkUnVsZXMuZmlsdGVyKHJ1bGUgPT4gIXNwZWNpZmllZFJ1bGVzVG9CZVJlbW92ZWQuaW5jbHVkZXMocnVsZSkpXG4gIF07XG5cbiAgY29uc3QgdmFsaWRhdGlvbkVycm9ycyA9IHZhbGlkYXRlKHNjaGVtYSwgZG9jdW1lbnQsIHJ1bGVzKTtcbiAgaWYgKHZhbGlkYXRpb25FcnJvcnMgJiYgdmFsaWRhdGlvbkVycm9ycy5sZW5ndGggPiAwKSB7XG4gICAgZm9yIChjb25zdCBlcnJvciBvZiB2YWxpZGF0aW9uRXJyb3JzKSB7XG4gICAgICBsb2dFcnJvcihlcnJvcik7XG4gICAgfVxuICAgIHRocm93IG5ldyBUb29sRXJyb3IoJ1ZhbGlkYXRpb24gb2YgR3JhcGhRTCBxdWVyeSBkb2N1bWVudCBmYWlsZWQnKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gTm9Bbm9ueW1vdXNRdWVyaWVzKGNvbnRleHQ6IFZhbGlkYXRpb25Db250ZXh0KSB7XG4gIHJldHVybiB7XG4gICAgT3BlcmF0aW9uRGVmaW5pdGlvbihub2RlOiBPcGVyYXRpb25EZWZpbml0aW9uTm9kZSkge1xuICAgICAgaWYgKCFub2RlLm5hbWUpIHtcbiAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihuZXcgR3JhcGhRTEVycm9yKCdBcG9sbG8gZG9lcyBub3Qgc3VwcG9ydCBhbm9ueW1vdXMgb3BlcmF0aW9ucycsIFtub2RlXSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIE5vVHlwZW5hbWVBbGlhcyhjb250ZXh0OiBWYWxpZGF0aW9uQ29udGV4dCkge1xuICByZXR1cm4ge1xuICAgIEZpZWxkKG5vZGU6IEZpZWxkTm9kZSkge1xuICAgICAgY29uc3QgYWxpYXNOYW1lID0gbm9kZS5hbGlhcyAmJiBub2RlLmFsaWFzLnZhbHVlO1xuICAgICAgaWYgKGFsaWFzTmFtZSA9PSAnX190eXBlbmFtZScpIHtcbiAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgICBuZXcgR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgJ0Fwb2xsbyBuZWVkcyB0byBiZSBhYmxlIHRvIGluc2VydCBfX3R5cGVuYW1lIHdoZW4gbmVlZGVkLCBwbGVhc2UgZG8gbm90IHVzZSBpdCBhcyBhbiBhbGlhcycsXG4gICAgICAgICAgICBbbm9kZV1cbiAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuIl19");"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = require("graphql");
const errors_1 = require("./errors");
function validateQueryDocument(schema, document) {
    const specifiedRulesToBeRemoved = [graphql_1.NoUnusedFragmentsRule];
    const rules = [
    NoAnonymousQueries,
    NoTypenameAlias,
    ...graphql_1.specifiedRules.filter(rule => !specifiedRulesToBeRemoved.includes(rule))];

    const validationErrors = graphql_1.validate(schema, document, rules);
    if (validationErrors && validationErrors.length > 0) {
        for (const error of validationErrors) {
            errors_1.logError(error);
        }
        throw new errors_1.ToolError('Validation of GraphQL query document failed');
    }
}
exports.validateQueryDocument = validateQueryDocument;
function NoAnonymousQueries(context) {
    return {
        OperationDefinition(node) {
            if (!node.name) {
                context.reportError(new graphql_1.GraphQLError('Apollo does not support anonymous operations', [node]));
            }
            return false;
        } };

}
exports.NoAnonymousQueries = NoAnonymousQueries;
function NoTypenameAlias(context) {
    return {
        Field(node) {
            const aliasName = node.alias && node.alias.value;
            if (aliasName == '__typename') {
                context.reportError(new graphql_1.GraphQLError('Apollo needs to be able to insert __typename when needed, please do not use it as an alias', [node]));
            }
        } };

}
exports.NoTypenameAlias = NoTypenameAlias;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZhbGlkYXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFBLFlBQUEsUUFBQSxTQUFBLENBQUE7QUFZQSxNQUFBLFdBQUEsUUFBQSxVQUFBLENBQUE7QUFFQSxTQUFBLHFCQUFBLENBQXNDLE1BQXRDLEVBQTZELFFBQTdELEVBQW1GO0FBQ2pGLFVBQU0sNEJBQTRCLENBQUMsVUFBQSxxQkFBRCxDQUFsQztBQUVBLFVBQU0sUUFBUTtBQUNaLHNCQURZO0FBRVosbUJBRlk7QUFHWixPQUFHLFVBQUEsY0FBQSxDQUFlLE1BQWYsQ0FBc0IsUUFBUSxDQUFDLDBCQUEwQixRQUExQixDQUFtQyxJQUFuQyxDQUEvQixDQUhTLENBQWQ7O0FBTUEsVUFBTSxtQkFBbUIsVUFBQSxRQUFBLENBQVMsTUFBVCxFQUFpQixRQUFqQixFQUEyQixLQUEzQixDQUF6QjtBQUNBLFFBQUksb0JBQW9CLGlCQUFpQixNQUFqQixHQUEwQixDQUFsRCxFQUFxRDtBQUNuRCxhQUFLLE1BQU0sS0FBWCxJQUFvQixnQkFBcEIsRUFBc0M7QUFDcEMscUJBQUEsUUFBQSxDQUFTLEtBQVQ7QUFDRDtBQUNELGNBQU0sSUFBSSxTQUFBLFNBQUosQ0FBYyw2Q0FBZCxDQUFOO0FBQ0Q7QUFDRjtBQWhCRCxRQUFBLHFCQUFBLEdBQUEscUJBQUE7QUFrQkEsU0FBQSxrQkFBQSxDQUFtQyxPQUFuQyxFQUE2RDtBQUMzRCxXQUFPO0FBQ0wsNEJBQW9CLElBQXBCLEVBQWlEO0FBQy9DLGdCQUFJLENBQUMsS0FBSyxJQUFWLEVBQWdCO0FBQ2Qsd0JBQVEsV0FBUixDQUFvQixJQUFJLFVBQUEsWUFBSixDQUFpQiw4Q0FBakIsRUFBaUUsQ0FBQyxJQUFELENBQWpFLENBQXBCO0FBQ0Q7QUFDRCxtQkFBTyxLQUFQO0FBQ0QsU0FOSSxFQUFQOztBQVFEO0FBVEQsUUFBQSxrQkFBQSxHQUFBLGtCQUFBO0FBV0EsU0FBQSxlQUFBLENBQWdDLE9BQWhDLEVBQTBEO0FBQ3hELFdBQU87QUFDTCxjQUFNLElBQU4sRUFBcUI7QUFDbkIsa0JBQU0sWUFBWSxLQUFLLEtBQUwsSUFBYyxLQUFLLEtBQUwsQ0FBVyxLQUEzQztBQUNBLGdCQUFJLGFBQWEsWUFBakIsRUFBK0I7QUFDN0Isd0JBQVEsV0FBUixDQUNFLElBQUksVUFBQSxZQUFKLENBQ0UsNEZBREYsRUFFRSxDQUFDLElBQUQsQ0FGRixDQURGO0FBTUQ7QUFDRixTQVhJLEVBQVA7O0FBYUQ7QUFkRCxRQUFBLGVBQUEsR0FBQSxlQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgdmFsaWRhdGUsXG4gIHNwZWNpZmllZFJ1bGVzLFxuICBOb1VudXNlZEZyYWdtZW50c1J1bGUsXG4gIEdyYXBoUUxFcnJvcixcbiAgRmllbGROb2RlLFxuICBWYWxpZGF0aW9uQ29udGV4dCxcbiAgR3JhcGhRTFNjaGVtYSxcbiAgRG9jdW1lbnROb2RlLFxuICBPcGVyYXRpb25EZWZpbml0aW9uTm9kZVxufSBmcm9tICdncmFwaHFsJztcblxuaW1wb3J0IHsgVG9vbEVycm9yLCBsb2dFcnJvciB9IGZyb20gJy4vZXJyb3JzJztcblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlUXVlcnlEb2N1bWVudChzY2hlbWE6IEdyYXBoUUxTY2hlbWEsIGRvY3VtZW50OiBEb2N1bWVudE5vZGUpIHtcbiAgY29uc3Qgc3BlY2lmaWVkUnVsZXNUb0JlUmVtb3ZlZCA9IFtOb1VudXNlZEZyYWdtZW50c1J1bGVdO1xuXG4gIGNvbnN0IHJ1bGVzID0gW1xuICAgIE5vQW5vbnltb3VzUXVlcmllcyxcbiAgICBOb1R5cGVuYW1lQWxpYXMsXG4gICAgLi4uc3BlY2lmaWVkUnVsZXMuZmlsdGVyKHJ1bGUgPT4gIXNwZWNpZmllZFJ1bGVzVG9CZVJlbW92ZWQuaW5jbHVkZXMocnVsZSkpXG4gIF07XG5cbiAgY29uc3QgdmFsaWRhdGlvbkVycm9ycyA9IHZhbGlkYXRlKHNjaGVtYSwgZG9jdW1lbnQsIHJ1bGVzKTtcbiAgaWYgKHZhbGlkYXRpb25FcnJvcnMgJiYgdmFsaWRhdGlvbkVycm9ycy5sZW5ndGggPiAwKSB7XG4gICAgZm9yIChjb25zdCBlcnJvciBvZiB2YWxpZGF0aW9uRXJyb3JzKSB7XG4gICAgICBsb2dFcnJvcihlcnJvcik7XG4gICAgfVxuICAgIHRocm93IG5ldyBUb29sRXJyb3IoJ1ZhbGlkYXRpb24gb2YgR3JhcGhRTCBxdWVyeSBkb2N1bWVudCBmYWlsZWQnKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gTm9Bbm9ueW1vdXNRdWVyaWVzKGNvbnRleHQ6IFZhbGlkYXRpb25Db250ZXh0KSB7XG4gIHJldHVybiB7XG4gICAgT3BlcmF0aW9uRGVmaW5pdGlvbihub2RlOiBPcGVyYXRpb25EZWZpbml0aW9uTm9kZSkge1xuICAgICAgaWYgKCFub2RlLm5hbWUpIHtcbiAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihuZXcgR3JhcGhRTEVycm9yKCdBcG9sbG8gZG9lcyBub3Qgc3VwcG9ydCBhbm9ueW1vdXMgb3BlcmF0aW9ucycsIFtub2RlXSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIE5vVHlwZW5hbWVBbGlhcyhjb250ZXh0OiBWYWxpZGF0aW9uQ29udGV4dCkge1xuICByZXR1cm4ge1xuICAgIEZpZWxkKG5vZGU6IEZpZWxkTm9kZSkge1xuICAgICAgY29uc3QgYWxpYXNOYW1lID0gbm9kZS5hbGlhcyAmJiBub2RlLmFsaWFzLnZhbHVlO1xuICAgICAgaWYgKGFsaWFzTmFtZSA9PSAnX190eXBlbmFtZScpIHtcbiAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgICBuZXcgR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgJ0Fwb2xsbyBuZWVkcyB0byBiZSBhYmxlIHRvIGluc2VydCBfX3R5cGVuYW1lIHdoZW4gbmVlZGVkLCBwbGVhc2UgZG8gbm90IHVzZSBpdCBhcyBhbiBhbGlhcycsXG4gICAgICAgICAgICBbbm9kZV1cbiAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==