{"version":3,"sources":["validation.ts"],"names":[],"mappings":";;AAAA,MAAA,YAAA,QAAA,SAAA,CAAA;AAYA,MAAA,WAAA,QAAA,UAAA,CAAA;AAEA,SAAA,qBAAA,CAAsC,MAAtC,EAA6D,QAA7D,EAAmF;AACjF,UAAM,4BAA4B,CAAC,UAAA,qBAAD,CAAlC;AAEA,UAAM,QAAQ;AACZ,sBADY;AAEZ,mBAFY;AAGZ,OAAG,UAAA,cAAA,CAAe,MAAf,CAAsB,QAAQ,CAAC,0BAA0B,QAA1B,CAAmC,IAAnC,CAA/B,CAHS,CAAd;;AAMA,UAAM,mBAAmB,UAAA,QAAA,CAAS,MAAT,EAAiB,QAAjB,EAA2B,KAA3B,CAAzB;AACA,QAAI,oBAAoB,iBAAiB,MAAjB,GAA0B,CAAlD,EAAqD;AACnD,aAAK,MAAM,KAAX,IAAoB,gBAApB,EAAsC;AACpC,qBAAA,QAAA,CAAS,KAAT;AACD;AACD,cAAM,IAAI,SAAA,SAAJ,CAAc,6CAAd,CAAN;AACD;AACF;AAhBD,QAAA,qBAAA,GAAA,qBAAA;AAkBA,SAAA,kBAAA,CAAmC,OAAnC,EAA6D;AAC3D,WAAO;AACL,4BAAoB,IAApB,EAAiD;AAC/C,gBAAI,CAAC,KAAK,IAAV,EAAgB;AACd,wBAAQ,WAAR,CAAoB,IAAI,UAAA,YAAJ,CAAiB,8CAAjB,EAAiE,CAAC,IAAD,CAAjE,CAApB;AACD;AACD,mBAAO,KAAP;AACD,SANI,EAAP;;AAQD;AATD,QAAA,kBAAA,GAAA,kBAAA;AAWA,SAAA,eAAA,CAAgC,OAAhC,EAA0D;AACxD,WAAO;AACL,cAAM,IAAN,EAAqB;AACnB,kBAAM,YAAY,KAAK,KAAL,IAAc,KAAK,KAAL,CAAW,KAA3C;AACA,gBAAI,aAAa,YAAjB,EAA+B;AAC7B,wBAAQ,WAAR,CACE,IAAI,UAAA,YAAJ,CACE,4FADF,EAEE,CAAC,IAAD,CAFF,CADF;AAMD;AACF,SAXI,EAAP;;AAaD;AAdD,QAAA,eAAA,GAAA,eAAA","sourcesContent":["import {\n  validate,\n  specifiedRules,\n  NoUnusedFragmentsRule,\n  GraphQLError,\n  FieldNode,\n  ValidationContext,\n  GraphQLSchema,\n  DocumentNode,\n  OperationDefinitionNode\n} from 'graphql';\n\nimport { ToolError, logError } from './errors';\n\nexport function validateQueryDocument(schema: GraphQLSchema, document: DocumentNode) {\n  const specifiedRulesToBeRemoved = [NoUnusedFragmentsRule];\n\n  const rules = [\n    NoAnonymousQueries,\n    NoTypenameAlias,\n    ...specifiedRules.filter(rule => !specifiedRulesToBeRemoved.includes(rule))\n  ];\n\n  const validationErrors = validate(schema, document, rules);\n  if (validationErrors && validationErrors.length > 0) {\n    for (const error of validationErrors) {\n      logError(error);\n    }\n    throw new ToolError('Validation of GraphQL query document failed');\n  }\n}\n\nexport function NoAnonymousQueries(context: ValidationContext) {\n  return {\n    OperationDefinition(node: OperationDefinitionNode) {\n      if (!node.name) {\n        context.reportError(new GraphQLError('Apollo does not support anonymous operations', [node]));\n      }\n      return false;\n    }\n  };\n}\n\nexport function NoTypenameAlias(context: ValidationContext) {\n  return {\n    Field(node: FieldNode) {\n      const aliasName = node.alias && node.alias.value;\n      if (aliasName == '__typename') {\n        context.reportError(\n          new GraphQLError(\n            'Apollo needs to be able to insert __typename when needed, please do not use it as an alias',\n            [node]\n          )\n        );\n      }\n    }\n  };\n}\n"],"sourceRoot":""}