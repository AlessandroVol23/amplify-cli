0f07bd2fb654564eb51d55e827b42298
'use strict';require('ts-jest').install("/c/Users/Sandro/repo/amplify-cli/packages/graphql-mapping-template/src/__tests__/ast.test.ts", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ast_1 = require(\"../ast\");\nvar dynamodb_1 = require(\"../dynamodb\");\nvar print_1 = require(\"../print\");\ntest('create a put item resolver with the ast', function () {\n    var resolver = dynamodb_1.DynamoDBMappingTemplate.putItem({\n        key: ast_1.obj({\n            type: ast_1.str('Post'),\n            id: ast_1.ref('util.autoId()')\n        }),\n        attributeValues: ast_1.obj({\n            value: ast_1.ref(\"util.dynamodb.toMapJson(${ctx.input})\")\n        })\n    });\n    var template = print_1.print(resolver);\n    expect(template).toBeDefined();\n});\ntest('create a query resolver with the ast', function () {\n    var resolver = dynamodb_1.DynamoDBMappingTemplate.query({\n        query: ast_1.obj({\n            'expression': ast_1.str('#typename = :typename'),\n            'expressionNames': ast_1.obj({\n                '#typename': ast_1.str('__typename')\n            }),\n            'expressionValues': ast_1.obj({\n                ':typename': ast_1.obj({\n                    'S': ast_1.str('test')\n                })\n            })\n        }),\n        scanIndexForward: ast_1.bool(true),\n        filter: ast_1.ifElse(ast_1.ref('context.args.filter'), ast_1.ref('util.transform.toDynamoDBFilterExpression($ctx.args.filter)'), ast_1.nul()),\n        limit: ast_1.ref('limit'),\n        nextToken: ast_1.ifElse(ast_1.ref('context.args.nextToken'), ast_1.str('$context.args.nextToken'), ast_1.nul())\n    });\n    var template = print_1.print(resolver);\n    expect(template).toBeDefined();\n});\ntest('create a response mapping template that merges a nested object', function () {\n    var setResult = ast_1.set(ast_1.ref('result'), ast_1.ref('util.map.copyAndRemoveAllKeys($context.result, [\"value\"])'));\n    var mergeLoop = ast_1.forEach(ast_1.ref('entry'), ast_1.ref('context.result.value.entrySet()'), [\n        ast_1.qref('$result.put($entry.key, $entry.value)')\n    ]);\n    var returnStatement = ast_1.ref('util.toJson($result)');\n    var template = print_1.print(ast_1.compoundExpression([setResult, mergeLoop, returnStatement]));\n    expect(template).toBeDefined();\n});\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXN0LnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJhc3QudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDhCQUFpRztBQUNqRyx3Q0FBcUQ7QUFDckQsa0NBQWdDO0FBRWhDLElBQUksQ0FBQyx5Q0FBeUMsRUFBRTtJQUM1QyxJQUFNLFFBQVEsR0FBRyxrQ0FBdUIsQ0FBQyxPQUFPLENBQUM7UUFDN0MsR0FBRyxFQUFFLFNBQUcsQ0FBQztZQUNMLElBQUksRUFBRSxTQUFHLENBQUMsTUFBTSxDQUFDO1lBQ2pCLEVBQUUsRUFBRSxTQUFHLENBQUMsZUFBZSxDQUFDO1NBQzNCLENBQUM7UUFDRixlQUFlLEVBQUUsU0FBRyxDQUFDO1lBQ2pCLEtBQUssRUFBRSxTQUFHLENBQUMsdUNBQXdDLENBQUM7U0FDdkQsQ0FBQztLQUNMLENBQUMsQ0FBQTtJQUNGLElBQU0sUUFBUSxHQUFHLGFBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQTtJQUNoQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUE7QUFDbEMsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsc0NBQXNDLEVBQUU7SUFDekMsSUFBTSxRQUFRLEdBQUcsa0NBQXVCLENBQUMsS0FBSyxDQUFDO1FBQzNDLEtBQUssRUFBRSxTQUFHLENBQUM7WUFDUCxZQUFZLEVBQUcsU0FBRyxDQUFDLHVCQUF1QixDQUFDO1lBQzNDLGlCQUFpQixFQUFHLFNBQUcsQ0FBQztnQkFDcEIsV0FBVyxFQUFHLFNBQUcsQ0FBQyxZQUFZLENBQUM7YUFDbEMsQ0FBQztZQUNGLGtCQUFrQixFQUFHLFNBQUcsQ0FBQztnQkFDckIsV0FBVyxFQUFHLFNBQUcsQ0FBQztvQkFDZCxHQUFHLEVBQUcsU0FBRyxDQUFDLE1BQU0sQ0FBQztpQkFDcEIsQ0FBQzthQUNMLENBQUM7U0FDTCxDQUFDO1FBQ0YsZ0JBQWdCLEVBQUUsVUFBSSxDQUFDLElBQUksQ0FBQztRQUM1QixNQUFNLEVBQUUsWUFBTSxDQUNWLFNBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxFQUMxQixTQUFHLENBQUMsNkRBQTZELENBQUMsRUFDbEUsU0FBRyxFQUFFLENBQ1I7UUFDRCxLQUFLLEVBQUUsU0FBRyxDQUFDLE9BQU8sQ0FBQztRQUNuQixTQUFTLEVBQUUsWUFBTSxDQUNiLFNBQUcsQ0FBQyx3QkFBd0IsQ0FBQyxFQUM3QixTQUFHLENBQUMseUJBQXlCLENBQUMsRUFDOUIsU0FBRyxFQUFFLENBQ1I7S0FDSixDQUFDLENBQUE7SUFDRixJQUFNLFFBQVEsR0FBRyxhQUFLLENBQUMsUUFBUSxDQUFDLENBQUE7SUFDaEMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFBO0FBQ2xDLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLGdFQUFnRSxFQUFFO0lBQ25FLElBQU0sU0FBUyxHQUFHLFNBQUcsQ0FBQyxTQUFHLENBQUMsUUFBUSxDQUFDLEVBQUUsU0FBRyxDQUFDLDJEQUEyRCxDQUFDLENBQUMsQ0FBQTtJQUN0RyxJQUFNLFNBQVMsR0FBRyxhQUFPLENBQUMsU0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLFNBQUcsQ0FBQyxpQ0FBaUMsQ0FBQyxFQUFFO1FBQzVFLFVBQUksQ0FBQyx1Q0FBdUMsQ0FBQztLQUNoRCxDQUFDLENBQUM7SUFDSCxJQUFNLGVBQWUsR0FBRyxTQUFHLENBQUMsc0JBQXNCLENBQUMsQ0FBQTtJQUNuRCxJQUFNLFFBQVEsR0FBRyxhQUFLLENBQUMsd0JBQWtCLENBQUMsQ0FBQyxTQUFTLEVBQUUsU0FBUyxFQUFFLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUNuRixNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUE7QUFDbEMsQ0FBQyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZWYsIG9iaiwgc3RyLCBmb3JFYWNoLCBxcmVmLCBzZXQsIGNvbXBvdW5kRXhwcmVzc2lvbiwgaWZFbHNlLCBudWwsIGJvb2wgfSBmcm9tICcuLi9hc3QnXG5pbXBvcnQgeyBEeW5hbW9EQk1hcHBpbmdUZW1wbGF0ZSB9IGZyb20gJy4uL2R5bmFtb2RiJ1xuaW1wb3J0IHsgcHJpbnQgfSBmcm9tICcuLi9wcmludCdcblxudGVzdCgnY3JlYXRlIGEgcHV0IGl0ZW0gcmVzb2x2ZXIgd2l0aCB0aGUgYXN0JywgKCkgPT4ge1xuICAgIGNvbnN0IHJlc29sdmVyID0gRHluYW1vREJNYXBwaW5nVGVtcGxhdGUucHV0SXRlbSh7XG4gICAgICAgIGtleTogb2JqKHtcbiAgICAgICAgICAgIHR5cGU6IHN0cignUG9zdCcpLFxuICAgICAgICAgICAgaWQ6IHJlZigndXRpbC5hdXRvSWQoKScpXG4gICAgICAgIH0pLFxuICAgICAgICBhdHRyaWJ1dGVWYWx1ZXM6IG9iaih7XG4gICAgICAgICAgICB2YWx1ZTogcmVmKGB1dGlsLmR5bmFtb2RiLnRvTWFwSnNvbihcXCR7Y3R4LmlucHV0fSlgKVxuICAgICAgICB9KVxuICAgIH0pXG4gICAgY29uc3QgdGVtcGxhdGUgPSBwcmludChyZXNvbHZlcilcbiAgICBleHBlY3QodGVtcGxhdGUpLnRvQmVEZWZpbmVkKClcbn0pO1xuXG50ZXN0KCdjcmVhdGUgYSBxdWVyeSByZXNvbHZlciB3aXRoIHRoZSBhc3QnLCAoKSA9PiB7XG4gICAgY29uc3QgcmVzb2x2ZXIgPSBEeW5hbW9EQk1hcHBpbmdUZW1wbGF0ZS5xdWVyeSh7XG4gICAgICAgIHF1ZXJ5OiBvYmooe1xuICAgICAgICAgICAgJ2V4cHJlc3Npb24nIDogc3RyKCcjdHlwZW5hbWUgPSA6dHlwZW5hbWUnKSxcbiAgICAgICAgICAgICdleHByZXNzaW9uTmFtZXMnIDogb2JqKHtcbiAgICAgICAgICAgICAgICAnI3R5cGVuYW1lJyA6IHN0cignX190eXBlbmFtZScpXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICdleHByZXNzaW9uVmFsdWVzJyA6IG9iaih7XG4gICAgICAgICAgICAgICAgJzp0eXBlbmFtZScgOiBvYmooe1xuICAgICAgICAgICAgICAgICAgICAnUycgOiBzdHIoJ3Rlc3QnKVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KSxcbiAgICAgICAgc2NhbkluZGV4Rm9yd2FyZDogYm9vbCh0cnVlKSxcbiAgICAgICAgZmlsdGVyOiBpZkVsc2UoXG4gICAgICAgICAgICByZWYoJ2NvbnRleHQuYXJncy5maWx0ZXInKSxcbiAgICAgICAgICAgIHJlZigndXRpbC50cmFuc2Zvcm0udG9EeW5hbW9EQkZpbHRlckV4cHJlc3Npb24oJGN0eC5hcmdzLmZpbHRlciknKSxcbiAgICAgICAgICAgIG51bCgpXG4gICAgICAgICksXG4gICAgICAgIGxpbWl0OiByZWYoJ2xpbWl0JyksXG4gICAgICAgIG5leHRUb2tlbjogaWZFbHNlKFxuICAgICAgICAgICAgcmVmKCdjb250ZXh0LmFyZ3MubmV4dFRva2VuJyksXG4gICAgICAgICAgICBzdHIoJyRjb250ZXh0LmFyZ3MubmV4dFRva2VuJyksXG4gICAgICAgICAgICBudWwoKVxuICAgICAgICApXG4gICAgfSlcbiAgICBjb25zdCB0ZW1wbGF0ZSA9IHByaW50KHJlc29sdmVyKVxuICAgIGV4cGVjdCh0ZW1wbGF0ZSkudG9CZURlZmluZWQoKVxufSk7XG5cbnRlc3QoJ2NyZWF0ZSBhIHJlc3BvbnNlIG1hcHBpbmcgdGVtcGxhdGUgdGhhdCBtZXJnZXMgYSBuZXN0ZWQgb2JqZWN0JywgKCkgPT4ge1xuICAgIGNvbnN0IHNldFJlc3VsdCA9IHNldChyZWYoJ3Jlc3VsdCcpLCByZWYoJ3V0aWwubWFwLmNvcHlBbmRSZW1vdmVBbGxLZXlzKCRjb250ZXh0LnJlc3VsdCwgW1widmFsdWVcIl0pJykpXG4gICAgY29uc3QgbWVyZ2VMb29wID0gZm9yRWFjaChyZWYoJ2VudHJ5JyksIHJlZignY29udGV4dC5yZXN1bHQudmFsdWUuZW50cnlTZXQoKScpLCBbXG4gICAgICAgIHFyZWYoJyRyZXN1bHQucHV0KCRlbnRyeS5rZXksICRlbnRyeS52YWx1ZSknKVxuICAgIF0pO1xuICAgIGNvbnN0IHJldHVyblN0YXRlbWVudCA9IHJlZigndXRpbC50b0pzb24oJHJlc3VsdCknKVxuICAgIGNvbnN0IHRlbXBsYXRlID0gcHJpbnQoY29tcG91bmRFeHByZXNzaW9uKFtzZXRSZXN1bHQsIG1lcmdlTG9vcCwgcmV0dXJuU3RhdGVtZW50XSkpXG4gICAgZXhwZWN0KHRlbXBsYXRlKS50b0JlRGVmaW5lZCgpXG59KSJdfQ==");"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ast_1 = require("../ast");
var dynamodb_1 = require("../dynamodb");
var print_1 = require("../print");
test('create a put item resolver with the ast', function () {
    var resolver = dynamodb_1.DynamoDBMappingTemplate.putItem({
        key: ast_1.obj({
            type: ast_1.str('Post'),
            id: ast_1.ref('util.autoId()') }),

        attributeValues: ast_1.obj({
            value: ast_1.ref("util.dynamodb.toMapJson(${ctx.input})") }) });


    var template = print_1.print(resolver);
    expect(template).toBeDefined();
});
test('create a query resolver with the ast', function () {
    var resolver = dynamodb_1.DynamoDBMappingTemplate.query({
        query: ast_1.obj({
            'expression': ast_1.str('#typename = :typename'),
            'expressionNames': ast_1.obj({
                '#typename': ast_1.str('__typename') }),

            'expressionValues': ast_1.obj({
                ':typename': ast_1.obj({
                    'S': ast_1.str('test') }) }) }),



        scanIndexForward: ast_1.bool(true),
        filter: ast_1.ifElse(ast_1.ref('context.args.filter'), ast_1.ref('util.transform.toDynamoDBFilterExpression($ctx.args.filter)'), ast_1.nul()),
        limit: ast_1.ref('limit'),
        nextToken: ast_1.ifElse(ast_1.ref('context.args.nextToken'), ast_1.str('$context.args.nextToken'), ast_1.nul()) });

    var template = print_1.print(resolver);
    expect(template).toBeDefined();
});
test('create a response mapping template that merges a nested object', function () {
    var setResult = ast_1.set(ast_1.ref('result'), ast_1.ref('util.map.copyAndRemoveAllKeys($context.result, ["value"])'));
    var mergeLoop = ast_1.forEach(ast_1.ref('entry'), ast_1.ref('context.result.value.entrySet()'), [
    ast_1.qref('$result.put($entry.key, $entry.value)')]);

    var returnStatement = ast_1.ref('util.toJson($result)');
    var template = print_1.print(ast_1.compoundExpression([setResult, mergeLoop, returnStatement]));
    expect(template).toBeDefined();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzdC50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBQSxRQUFBLFFBQUEsUUFBQSxDQUFBO0FBQ0EsSUFBQSxhQUFBLFFBQUEsYUFBQSxDQUFBO0FBQ0EsSUFBQSxVQUFBLFFBQUEsVUFBQSxDQUFBO0FBRUEsS0FBSyx5Q0FBTCxFQUFnRCxZQUFBO0FBQzVDLFFBQU0sV0FBVyxXQUFBLHVCQUFBLENBQXdCLE9BQXhCLENBQWdDO0FBQzdDLGFBQUssTUFBQSxHQUFBLENBQUk7QUFDTCxrQkFBTSxNQUFBLEdBQUEsQ0FBSSxNQUFKLENBREQ7QUFFTCxnQkFBSSxNQUFBLEdBQUEsQ0FBSSxlQUFKLENBRkMsRUFBSixDQUR3Qzs7QUFLN0MseUJBQWlCLE1BQUEsR0FBQSxDQUFJO0FBQ2pCLG1CQUFPLE1BQUEsR0FBQSxDQUFJLHVDQUFKLENBRFUsRUFBSixDQUw0QixFQUFoQyxDQUFqQjs7O0FBU0EsUUFBTSxXQUFXLFFBQUEsS0FBQSxDQUFNLFFBQU4sQ0FBakI7QUFDQSxXQUFPLFFBQVAsRUFBaUIsV0FBakI7QUFDSCxDQVpEO0FBY0EsS0FBSyxzQ0FBTCxFQUE2QyxZQUFBO0FBQ3pDLFFBQU0sV0FBVyxXQUFBLHVCQUFBLENBQXdCLEtBQXhCLENBQThCO0FBQzNDLGVBQU8sTUFBQSxHQUFBLENBQUk7QUFDUCwwQkFBZSxNQUFBLEdBQUEsQ0FBSSx1QkFBSixDQURSO0FBRVAsK0JBQW9CLE1BQUEsR0FBQSxDQUFJO0FBQ3BCLDZCQUFjLE1BQUEsR0FBQSxDQUFJLFlBQUosQ0FETSxFQUFKLENBRmI7O0FBS1AsZ0NBQXFCLE1BQUEsR0FBQSxDQUFJO0FBQ3JCLDZCQUFjLE1BQUEsR0FBQSxDQUFJO0FBQ2QseUJBQU0sTUFBQSxHQUFBLENBQUksTUFBSixDQURRLEVBQUosQ0FETyxFQUFKLENBTGQsRUFBSixDQURvQzs7OztBQVkzQywwQkFBa0IsTUFBQSxJQUFBLENBQUssSUFBTCxDQVp5QjtBQWEzQyxnQkFBUSxNQUFBLE1BQUEsQ0FDSixNQUFBLEdBQUEsQ0FBSSxxQkFBSixDQURJLEVBRUosTUFBQSxHQUFBLENBQUksNkRBQUosQ0FGSSxFQUdKLE1BQUEsR0FBQSxFQUhJLENBYm1DO0FBa0IzQyxlQUFPLE1BQUEsR0FBQSxDQUFJLE9BQUosQ0FsQm9DO0FBbUIzQyxtQkFBVyxNQUFBLE1BQUEsQ0FDUCxNQUFBLEdBQUEsQ0FBSSx3QkFBSixDQURPLEVBRVAsTUFBQSxHQUFBLENBQUkseUJBQUosQ0FGTyxFQUdQLE1BQUEsR0FBQSxFQUhPLENBbkJnQyxFQUE5QixDQUFqQjs7QUF5QkEsUUFBTSxXQUFXLFFBQUEsS0FBQSxDQUFNLFFBQU4sQ0FBakI7QUFDQSxXQUFPLFFBQVAsRUFBaUIsV0FBakI7QUFDSCxDQTVCRDtBQThCQSxLQUFLLGdFQUFMLEVBQXVFLFlBQUE7QUFDbkUsUUFBTSxZQUFZLE1BQUEsR0FBQSxDQUFJLE1BQUEsR0FBQSxDQUFJLFFBQUosQ0FBSixFQUFtQixNQUFBLEdBQUEsQ0FBSSwyREFBSixDQUFuQixDQUFsQjtBQUNBLFFBQU0sWUFBWSxNQUFBLE9BQUEsQ0FBUSxNQUFBLEdBQUEsQ0FBSSxPQUFKLENBQVIsRUFBc0IsTUFBQSxHQUFBLENBQUksaUNBQUosQ0FBdEIsRUFBOEQ7QUFDNUUsVUFBQSxJQUFBLENBQUssdUNBQUwsQ0FENEUsQ0FBOUQsQ0FBbEI7O0FBR0EsUUFBTSxrQkFBa0IsTUFBQSxHQUFBLENBQUksc0JBQUosQ0FBeEI7QUFDQSxRQUFNLFdBQVcsUUFBQSxLQUFBLENBQU0sTUFBQSxrQkFBQSxDQUFtQixDQUFDLFNBQUQsRUFBWSxTQUFaLEVBQXVCLGVBQXZCLENBQW5CLENBQU4sQ0FBakI7QUFDQSxXQUFPLFFBQVAsRUFBaUIsV0FBakI7QUFDSCxDQVJEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVmLCBvYmosIHN0ciwgZm9yRWFjaCwgcXJlZiwgc2V0LCBjb21wb3VuZEV4cHJlc3Npb24sIGlmRWxzZSwgbnVsLCBib29sIH0gZnJvbSAnLi4vYXN0J1xuaW1wb3J0IHsgRHluYW1vREJNYXBwaW5nVGVtcGxhdGUgfSBmcm9tICcuLi9keW5hbW9kYidcbmltcG9ydCB7IHByaW50IH0gZnJvbSAnLi4vcHJpbnQnXG5cbnRlc3QoJ2NyZWF0ZSBhIHB1dCBpdGVtIHJlc29sdmVyIHdpdGggdGhlIGFzdCcsICgpID0+IHtcbiAgICBjb25zdCByZXNvbHZlciA9IER5bmFtb0RCTWFwcGluZ1RlbXBsYXRlLnB1dEl0ZW0oe1xuICAgICAgICBrZXk6IG9iaih7XG4gICAgICAgICAgICB0eXBlOiBzdHIoJ1Bvc3QnKSxcbiAgICAgICAgICAgIGlkOiByZWYoJ3V0aWwuYXV0b0lkKCknKVxuICAgICAgICB9KSxcbiAgICAgICAgYXR0cmlidXRlVmFsdWVzOiBvYmooe1xuICAgICAgICAgICAgdmFsdWU6IHJlZihgdXRpbC5keW5hbW9kYi50b01hcEpzb24oXFwke2N0eC5pbnB1dH0pYClcbiAgICAgICAgfSlcbiAgICB9KVxuICAgIGNvbnN0IHRlbXBsYXRlID0gcHJpbnQocmVzb2x2ZXIpXG4gICAgZXhwZWN0KHRlbXBsYXRlKS50b0JlRGVmaW5lZCgpXG59KTtcblxudGVzdCgnY3JlYXRlIGEgcXVlcnkgcmVzb2x2ZXIgd2l0aCB0aGUgYXN0JywgKCkgPT4ge1xuICAgIGNvbnN0IHJlc29sdmVyID0gRHluYW1vREJNYXBwaW5nVGVtcGxhdGUucXVlcnkoe1xuICAgICAgICBxdWVyeTogb2JqKHtcbiAgICAgICAgICAgICdleHByZXNzaW9uJyA6IHN0cignI3R5cGVuYW1lID0gOnR5cGVuYW1lJyksXG4gICAgICAgICAgICAnZXhwcmVzc2lvbk5hbWVzJyA6IG9iaih7XG4gICAgICAgICAgICAgICAgJyN0eXBlbmFtZScgOiBzdHIoJ19fdHlwZW5hbWUnKVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAnZXhwcmVzc2lvblZhbHVlcycgOiBvYmooe1xuICAgICAgICAgICAgICAgICc6dHlwZW5hbWUnIDogb2JqKHtcbiAgICAgICAgICAgICAgICAgICAgJ1MnIDogc3RyKCd0ZXN0JylcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSksXG4gICAgICAgIHNjYW5JbmRleEZvcndhcmQ6IGJvb2wodHJ1ZSksXG4gICAgICAgIGZpbHRlcjogaWZFbHNlKFxuICAgICAgICAgICAgcmVmKCdjb250ZXh0LmFyZ3MuZmlsdGVyJyksXG4gICAgICAgICAgICByZWYoJ3V0aWwudHJhbnNmb3JtLnRvRHluYW1vREJGaWx0ZXJFeHByZXNzaW9uKCRjdHguYXJncy5maWx0ZXIpJyksXG4gICAgICAgICAgICBudWwoKVxuICAgICAgICApLFxuICAgICAgICBsaW1pdDogcmVmKCdsaW1pdCcpLFxuICAgICAgICBuZXh0VG9rZW46IGlmRWxzZShcbiAgICAgICAgICAgIHJlZignY29udGV4dC5hcmdzLm5leHRUb2tlbicpLFxuICAgICAgICAgICAgc3RyKCckY29udGV4dC5hcmdzLm5leHRUb2tlbicpLFxuICAgICAgICAgICAgbnVsKClcbiAgICAgICAgKVxuICAgIH0pXG4gICAgY29uc3QgdGVtcGxhdGUgPSBwcmludChyZXNvbHZlcilcbiAgICBleHBlY3QodGVtcGxhdGUpLnRvQmVEZWZpbmVkKClcbn0pO1xuXG50ZXN0KCdjcmVhdGUgYSByZXNwb25zZSBtYXBwaW5nIHRlbXBsYXRlIHRoYXQgbWVyZ2VzIGEgbmVzdGVkIG9iamVjdCcsICgpID0+IHtcbiAgICBjb25zdCBzZXRSZXN1bHQgPSBzZXQocmVmKCdyZXN1bHQnKSwgcmVmKCd1dGlsLm1hcC5jb3B5QW5kUmVtb3ZlQWxsS2V5cygkY29udGV4dC5yZXN1bHQsIFtcInZhbHVlXCJdKScpKVxuICAgIGNvbnN0IG1lcmdlTG9vcCA9IGZvckVhY2gocmVmKCdlbnRyeScpLCByZWYoJ2NvbnRleHQucmVzdWx0LnZhbHVlLmVudHJ5U2V0KCknKSwgW1xuICAgICAgICBxcmVmKCckcmVzdWx0LnB1dCgkZW50cnkua2V5LCAkZW50cnkudmFsdWUpJylcbiAgICBdKTtcbiAgICBjb25zdCByZXR1cm5TdGF0ZW1lbnQgPSByZWYoJ3V0aWwudG9Kc29uKCRyZXN1bHQpJylcbiAgICBjb25zdCB0ZW1wbGF0ZSA9IHByaW50KGNvbXBvdW5kRXhwcmVzc2lvbihbc2V0UmVzdWx0LCBtZXJnZUxvb3AsIHJldHVyblN0YXRlbWVudF0pKVxuICAgIGV4cGVjdCh0ZW1wbGF0ZSkudG9CZURlZmluZWQoKVxufSkiXSwic291cmNlUm9vdCI6IiJ9