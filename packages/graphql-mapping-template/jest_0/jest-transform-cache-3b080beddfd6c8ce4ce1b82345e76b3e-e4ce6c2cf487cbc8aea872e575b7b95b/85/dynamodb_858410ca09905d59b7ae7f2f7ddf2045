5e40cd242eab92f12943881b3366aab9
'use strict';require('ts-jest').install("/c/Users/Sandro/repo/amplify-cli/packages/graphql-mapping-template/src/dynamodb.ts", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ast_1 = require(\"./ast\");\nvar DynamoDBMappingTemplate = /** @class */ (function () {\n    function DynamoDBMappingTemplate() {\n    }\n    /**\n     * Create a put item resolver template.\n     * @param keys A list of strings pointing to the key value locations. E.G. ctx.args.x (note no $)\n     */\n    DynamoDBMappingTemplate.putItem = function (_a) {\n        var key = _a.key, attributeValues = _a.attributeValues, condition = _a.condition;\n        return ast_1.obj({\n            version: ast_1.str('2017-02-28'),\n            operation: ast_1.str('PutItem'),\n            key: key,\n            attributeValues: attributeValues,\n            condition: condition\n        });\n    };\n    /**\n     * Create a get item resolver template.\n     * @param key A list of strings pointing to the key value locations. E.G. ctx.args.x (note no $)\n     */\n    DynamoDBMappingTemplate.getItem = function (_a) {\n        var key = _a.key;\n        return ast_1.obj({\n            version: ast_1.str('2017-02-28'),\n            operation: ast_1.str('GetItem'),\n            key: key\n        });\n    };\n    /**\n     * Create a query resolver template.\n     * @param key A list of strings pointing to the key value locations. E.G. ctx.args.x (note no $)\n     */\n    DynamoDBMappingTemplate.query = function (_a) {\n        var query = _a.query, filter = _a.filter, scanIndexForward = _a.scanIndexForward, limit = _a.limit, nextToken = _a.nextToken, index = _a.index;\n        return ast_1.obj({\n            version: ast_1.str('2017-02-28'),\n            operation: ast_1.str('Query'),\n            query: query,\n            scanIndexForward: scanIndexForward,\n            filter: filter,\n            limit: limit,\n            nextToken: nextToken,\n            index: index\n        });\n    };\n    /**\n     * Create a list item resolver template.\n     * @param key A list of strings pointing to the key value locations. E.G. ctx.args.x (note no $)\n     */\n    DynamoDBMappingTemplate.listItem = function (_a) {\n        var filter = _a.filter, limit = _a.limit, nextToken = _a.nextToken;\n        return ast_1.obj({\n            version: ast_1.str('2017-02-28'),\n            operation: ast_1.str('Scan'),\n            filter: filter,\n            limit: limit,\n            nextToken: nextToken\n        });\n    };\n    /**\n     * Create a delete item resolver template.\n     * @param key A list of strings pointing to the key value locations. E.G. ctx.args.x (note no $)\n     */\n    DynamoDBMappingTemplate.deleteItem = function (_a) {\n        var key = _a.key, condition = _a.condition;\n        return ast_1.obj({\n            version: ast_1.str('2017-02-28'),\n            operation: ast_1.str('DeleteItem'),\n            key: key,\n            condition: condition,\n        });\n    };\n    /**\n     * Create an update item resolver template.\n     * @param key\n     */\n    DynamoDBMappingTemplate.updateItem = function (_a) {\n        var key = _a.key, condition = _a.condition;\n        var keyNames = key.attributes.map(function (attr) { return attr[0]; });\n        // Auto timestamp\n        // qref('$input.put(\"updatedAt\", \"$util.time.nowISO8601()\")'),\n        return ast_1.compoundExpression([\n            ast_1.set(ast_1.ref('expNames'), ast_1.obj({})),\n            ast_1.set(ast_1.ref('expValues'), ast_1.obj({})),\n            ast_1.set(ast_1.ref('expSet'), ast_1.obj({})),\n            ast_1.set(ast_1.ref('expAdd'), ast_1.obj({})),\n            ast_1.set(ast_1.ref('expRemove'), ast_1.list([])),\n            ast_1.forEach(ast_1.ref('entry'), ast_1.ref(\"util.map.copyAndRemoveAllKeys($context.args.input, [\" + keyNames.map(function (k) { return \"\\\"\" + k + \"\\\"\"; }).join(', ') + \"]).entrySet()\"), [\n                ast_1.ifElse(ast_1.ref('util.isNull($entry.value)'), ast_1.compoundExpression([\n                    ast_1.set(ast_1.ref('discard'), ast_1.ref('expRemove.add(\"#$entry.key\")')),\n                    ast_1.qref('$expNames.put(\"#$entry.key\", \"$entry.key\")')\n                ]), ast_1.compoundExpression([\n                    ast_1.qref('$expSet.put(\"#$entry.key\", \":$entry.key\")'),\n                    ast_1.qref('$expNames.put(\"#$entry.key\", \"$entry.key\")'),\n                    ast_1.qref('$expValues.put(\":$entry.key\", $util.dynamodb.toDynamoDB($entry.value))')\n                ]))\n            ]),\n            ast_1.set(ast_1.ref('expression'), ast_1.str('')),\n            ast_1.iff(ast_1.raw('!$expSet.isEmpty()'), ast_1.compoundExpression([\n                ast_1.set(ast_1.ref('expression'), ast_1.str('SET')),\n                ast_1.forEach(ast_1.ref('entry'), ast_1.ref('expSet.entrySet()'), [\n                    ast_1.set(ast_1.ref('expression'), ast_1.str('$expression $entry.key = $entry.value')),\n                    ast_1.iff(ast_1.ref('foreach.hasNext()'), ast_1.set(ast_1.ref('expression'), ast_1.str('$expression,')))\n                ])\n            ])),\n            ast_1.iff(ast_1.raw('!$expAdd.isEmpty()'), ast_1.compoundExpression([\n                ast_1.set(ast_1.ref('expression'), ast_1.str('$expression ADD')),\n                ast_1.forEach(ast_1.ref('entry'), ast_1.ref('expAdd.entrySet()'), [\n                    ast_1.set(ast_1.ref('expression'), ast_1.str('$expression $entry.key $entry.value')),\n                    ast_1.iff(ast_1.ref('foreach.hasNext()'), ast_1.set(ast_1.ref('expression'), ast_1.str('$expression,')))\n                ])\n            ])),\n            ast_1.iff(ast_1.raw('!$expRemove.isEmpty()'), ast_1.compoundExpression([\n                ast_1.set(ast_1.ref('expression'), ast_1.str('$expression REMOVE')),\n                ast_1.forEach(ast_1.ref('entry'), ast_1.ref('expRemove'), [\n                    ast_1.set(ast_1.ref('expression'), ast_1.str('$expression $entry')),\n                    ast_1.iff(ast_1.ref('foreach.hasNext()'), ast_1.set(ast_1.ref('expression'), ast_1.str('$expression,')))\n                ])\n            ])),\n            ast_1.set(ast_1.ref('update'), ast_1.obj({})),\n            ast_1.qref('$update.put(\"expression\", \"$expression\")'),\n            ast_1.iff(ast_1.raw('!$expNames.isEmpty()'), ast_1.qref('$update.put(\"expressionNames\", $expNames)')),\n            ast_1.iff(ast_1.raw('!$expValues.isEmpty()'), ast_1.qref('$update.put(\"expressionValues\", $expValues)')),\n            ast_1.obj({\n                version: ast_1.str('2017-02-28'),\n                operation: ast_1.str('UpdateItem'),\n                key: key,\n                update: ast_1.ref('util.toJson($update)'),\n                condition: condition\n            })\n        ]);\n    };\n    DynamoDBMappingTemplate.stringAttributeValue = function (value) {\n        return {\n            kind: 'Object', attributes: [\n                ['S', { kind: 'Quotes', expr: value }]\n            ]\n        };\n    };\n    DynamoDBMappingTemplate.numericAttributeValue = function (value) {\n        return {\n            kind: 'Object', attributes: [\n                ['N', { kind: 'Quotes', expr: value }]\n            ]\n        };\n    };\n    DynamoDBMappingTemplate.binaryAttributeValue = function (value) {\n        return {\n            kind: 'Object', attributes: [\n                ['B', { kind: 'Quotes', expr: value }]\n            ]\n        };\n    };\n    DynamoDBMappingTemplate.paginatedResponse = function () {\n        return ast_1.obj({\n            items: ast_1.ref('util.toJson($ctx.result.items)'),\n            nextToken: ast_1.ref('util.toJson($util.defaultIfNullOrBlank($context.result.nextToken, null))')\n        });\n    };\n    return DynamoDBMappingTemplate;\n}());\nexports.DynamoDBMappingTemplate = DynamoDBMappingTemplate;\n//# sourceMappingURL=data:application/json;base64,");"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ast_1 = require("./ast");
var DynamoDBMappingTemplate = /** @class */function () {
    function DynamoDBMappingTemplate() {
    }
    /**
       * Create a put item resolver template.
       * @param keys A list of strings pointing to the key value locations. E.G. ctx.args.x (note no $)
       */
    DynamoDBMappingTemplate.putItem = function (_a) {
        var key = _a.key,attributeValues = _a.attributeValues,condition = _a.condition;
        return ast_1.obj({
            version: ast_1.str('2017-02-28'),
            operation: ast_1.str('PutItem'),
            key: key,
            attributeValues: attributeValues,
            condition: condition });

    };
    /**
        * Create a get item resolver template.
        * @param key A list of strings pointing to the key value locations. E.G. ctx.args.x (note no $)
        */
    DynamoDBMappingTemplate.getItem = function (_a) {
        var key = _a.key;
        return ast_1.obj({
            version: ast_1.str('2017-02-28'),
            operation: ast_1.str('GetItem'),
            key: key });

    };
    /**
        * Create a query resolver template.
        * @param key A list of strings pointing to the key value locations. E.G. ctx.args.x (note no $)
        */
    DynamoDBMappingTemplate.query = function (_a) {
        var query = _a.query,filter = _a.filter,scanIndexForward = _a.scanIndexForward,limit = _a.limit,nextToken = _a.nextToken,index = _a.index;
        return ast_1.obj({
            version: ast_1.str('2017-02-28'),
            operation: ast_1.str('Query'),
            query: query,
            scanIndexForward: scanIndexForward,
            filter: filter,
            limit: limit,
            nextToken: nextToken,
            index: index });

    };
    /**
        * Create a list item resolver template.
        * @param key A list of strings pointing to the key value locations. E.G. ctx.args.x (note no $)
        */
    DynamoDBMappingTemplate.listItem = function (_a) {
        var filter = _a.filter,limit = _a.limit,nextToken = _a.nextToken;
        return ast_1.obj({
            version: ast_1.str('2017-02-28'),
            operation: ast_1.str('Scan'),
            filter: filter,
            limit: limit,
            nextToken: nextToken });

    };
    /**
        * Create a delete item resolver template.
        * @param key A list of strings pointing to the key value locations. E.G. ctx.args.x (note no $)
        */
    DynamoDBMappingTemplate.deleteItem = function (_a) {
        var key = _a.key,condition = _a.condition;
        return ast_1.obj({
            version: ast_1.str('2017-02-28'),
            operation: ast_1.str('DeleteItem'),
            key: key,
            condition: condition });

    };
    /**
        * Create an update item resolver template.
        * @param key
        */
    DynamoDBMappingTemplate.updateItem = function (_a) {
        var key = _a.key,condition = _a.condition;
        var keyNames = key.attributes.map(function (attr) {return attr[0];});
        // Auto timestamp
        // qref('$input.put("updatedAt", "$util.time.nowISO8601()")'),
        return ast_1.compoundExpression([
        ast_1.set(ast_1.ref('expNames'), ast_1.obj({})),
        ast_1.set(ast_1.ref('expValues'), ast_1.obj({})),
        ast_1.set(ast_1.ref('expSet'), ast_1.obj({})),
        ast_1.set(ast_1.ref('expAdd'), ast_1.obj({})),
        ast_1.set(ast_1.ref('expRemove'), ast_1.list([])),
        ast_1.forEach(ast_1.ref('entry'), ast_1.ref("util.map.copyAndRemoveAllKeys($context.args.input, [" + keyNames.map(function (k) {return "\"" + k + "\"";}).join(', ') + "]).entrySet()"), [
        ast_1.ifElse(ast_1.ref('util.isNull($entry.value)'), ast_1.compoundExpression([
        ast_1.set(ast_1.ref('discard'), ast_1.ref('expRemove.add("#$entry.key")')),
        ast_1.qref('$expNames.put("#$entry.key", "$entry.key")')]),
        ast_1.compoundExpression([
        ast_1.qref('$expSet.put("#$entry.key", ":$entry.key")'),
        ast_1.qref('$expNames.put("#$entry.key", "$entry.key")'),
        ast_1.qref('$expValues.put(":$entry.key", $util.dynamodb.toDynamoDB($entry.value))')]))]),


        ast_1.set(ast_1.ref('expression'), ast_1.str('')),
        ast_1.iff(ast_1.raw('!$expSet.isEmpty()'), ast_1.compoundExpression([
        ast_1.set(ast_1.ref('expression'), ast_1.str('SET')),
        ast_1.forEach(ast_1.ref('entry'), ast_1.ref('expSet.entrySet()'), [
        ast_1.set(ast_1.ref('expression'), ast_1.str('$expression $entry.key = $entry.value')),
        ast_1.iff(ast_1.ref('foreach.hasNext()'), ast_1.set(ast_1.ref('expression'), ast_1.str('$expression,')))])])),


        ast_1.iff(ast_1.raw('!$expAdd.isEmpty()'), ast_1.compoundExpression([
        ast_1.set(ast_1.ref('expression'), ast_1.str('$expression ADD')),
        ast_1.forEach(ast_1.ref('entry'), ast_1.ref('expAdd.entrySet()'), [
        ast_1.set(ast_1.ref('expression'), ast_1.str('$expression $entry.key $entry.value')),
        ast_1.iff(ast_1.ref('foreach.hasNext()'), ast_1.set(ast_1.ref('expression'), ast_1.str('$expression,')))])])),


        ast_1.iff(ast_1.raw('!$expRemove.isEmpty()'), ast_1.compoundExpression([
        ast_1.set(ast_1.ref('expression'), ast_1.str('$expression REMOVE')),
        ast_1.forEach(ast_1.ref('entry'), ast_1.ref('expRemove'), [
        ast_1.set(ast_1.ref('expression'), ast_1.str('$expression $entry')),
        ast_1.iff(ast_1.ref('foreach.hasNext()'), ast_1.set(ast_1.ref('expression'), ast_1.str('$expression,')))])])),


        ast_1.set(ast_1.ref('update'), ast_1.obj({})),
        ast_1.qref('$update.put("expression", "$expression")'),
        ast_1.iff(ast_1.raw('!$expNames.isEmpty()'), ast_1.qref('$update.put("expressionNames", $expNames)')),
        ast_1.iff(ast_1.raw('!$expValues.isEmpty()'), ast_1.qref('$update.put("expressionValues", $expValues)')),
        ast_1.obj({
            version: ast_1.str('2017-02-28'),
            operation: ast_1.str('UpdateItem'),
            key: key,
            update: ast_1.ref('util.toJson($update)'),
            condition: condition })]);


    };
    DynamoDBMappingTemplate.stringAttributeValue = function (value) {
        return {
            kind: 'Object', attributes: [
            ['S', { kind: 'Quotes', expr: value }]] };


    };
    DynamoDBMappingTemplate.numericAttributeValue = function (value) {
        return {
            kind: 'Object', attributes: [
            ['N', { kind: 'Quotes', expr: value }]] };


    };
    DynamoDBMappingTemplate.binaryAttributeValue = function (value) {
        return {
            kind: 'Object', attributes: [
            ['B', { kind: 'Quotes', expr: value }]] };


    };
    DynamoDBMappingTemplate.paginatedResponse = function () {
        return ast_1.obj({
            items: ast_1.ref('util.toJson($ctx.result.items)'),
            nextToken: ast_1.ref('util.toJson($util.defaultIfNullOrBlank($context.result.nextToken, null))') });

    };
    return DynamoDBMappingTemplate;
}();
exports.DynamoDBMappingTemplate = DynamoDBMappingTemplate;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,