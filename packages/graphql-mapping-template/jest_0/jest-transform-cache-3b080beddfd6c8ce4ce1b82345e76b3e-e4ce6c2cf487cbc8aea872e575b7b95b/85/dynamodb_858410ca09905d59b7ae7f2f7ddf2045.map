{"version":3,"sources":["dynamodb.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    obj, ref, Expression, ReferenceNode, StringNode,\n    IntNode, FloatNode, str, ObjectNode, compoundExpression,\n    set, list, forEach, ifElse, qref, iff, raw,\n    CompoundExpressionNode\n} from './ast';\n\nexport class DynamoDBMappingTemplate {\n    /**\n     * Create a put item resolver template.\n     * @param keys A list of strings pointing to the key value locations. E.G. ctx.args.x (note no $)\n     */\n    public static putItem({ key, attributeValues, condition }: {\n        key: ObjectNode,\n        attributeValues: Expression,\n        condition?: ObjectNode\n    }): ObjectNode {\n        return obj({\n            version: str('2017-02-28'),\n            operation: str('PutItem'),\n            key,\n            attributeValues,\n            condition\n        })\n    }\n\n    /**\n     * Create a get item resolver template.\n     * @param key A list of strings pointing to the key value locations. E.G. ctx.args.x (note no $)\n     */\n    public static getItem({ key }: {\n        key: ObjectNode\n    }): ObjectNode {\n        return obj({\n            version: str('2017-02-28'),\n            operation: str('GetItem'),\n            key\n        })\n    }\n\n    /**\n     * Create a query resolver template.\n     * @param key A list of strings pointing to the key value locations. E.G. ctx.args.x (note no $)\n     */\n    public static query({ query, filter, scanIndexForward, limit, nextToken, index }: {\n        query: ObjectNode;\n        scanIndexForward: Expression;\n        filter: ObjectNode | Expression;\n        limit: Expression;\n        nextToken?: Expression;\n        index?: StringNode;\n    }): ObjectNode {\n        return obj({\n            version: str('2017-02-28'),\n            operation: str('Query'),\n            query,\n            scanIndexForward,\n            filter,\n            limit,\n            nextToken,\n            index\n        })\n    }\n\n    /**\n     * Create a list item resolver template.\n     * @param key A list of strings pointing to the key value locations. E.G. ctx.args.x (note no $)\n     */\n    public static listItem({ filter, limit, nextToken }: {\n        filter: ObjectNode | Expression,\n        limit: Expression,\n        nextToken?: Expression\n    }): ObjectNode {\n        return obj({\n            version: str('2017-02-28'),\n            operation: str('Scan'),\n            filter,\n            limit,\n            nextToken\n        })\n    }\n\n    /**\n     * Create a delete item resolver template.\n     * @param key A list of strings pointing to the key value locations. E.G. ctx.args.x (note no $)\n     */\n    public static deleteItem({ key, condition }: {\n        key: ObjectNode,\n        condition: ObjectNode | ReferenceNode\n    }): ObjectNode {\n        return obj({\n            version: str('2017-02-28'),\n            operation: str('DeleteItem'),\n            key,\n            condition,\n        })\n    }\n\n    /**\n     * Create an update item resolver template.\n     * @param key\n     */\n    public static updateItem({ key, condition }: {\n        key: ObjectNode,\n        condition: ObjectNode | ReferenceNode\n    }): CompoundExpressionNode {\n        const keyNames = key.attributes.map((attr: [string, Expression]) => attr[0])\n        // Auto timestamp\n        // qref('$input.put(\"updatedAt\", \"$util.time.nowISO8601()\")'),\n        return compoundExpression([\n            set(ref('expNames'), obj({})),\n            set(ref('expValues'), obj({})),\n            set(ref('expSet'), obj({})),\n            set(ref('expAdd'), obj({})),\n            set(ref('expRemove'), list([])),\n            forEach(\n                ref('entry'),\n                ref(`util.map.copyAndRemoveAllKeys($context.args.input, [${keyNames.map(k => `\"${k}\"`).join(', ')}]).entrySet()`),\n                [\n                    ifElse(\n                        ref('util.isNull($entry.value)'),\n                        compoundExpression([\n                            set(ref('discard'), ref('expRemove.add(\"#$entry.key\")')),\n                            qref('$expNames.put(\"#$entry.key\", \"$entry.key\")')\n                        ]),\n                        compoundExpression([\n                            qref('$expSet.put(\"#$entry.key\", \":$entry.key\")'),\n                            qref('$expNames.put(\"#$entry.key\", \"$entry.key\")'),\n                            qref('$expValues.put(\":$entry.key\", $util.dynamodb.toDynamoDB($entry.value))')\n                        ])\n                    )\n                ]\n            ),\n            set(ref('expression'), str('')),\n            iff(raw('!$expSet.isEmpty()'), compoundExpression([\n                set(ref('expression'), str('SET')),\n                forEach(ref('entry'), ref('expSet.entrySet()'), [\n                    set(ref('expression'), str('$expression $entry.key = $entry.value')),\n                    iff(ref('foreach.hasNext()'), set(ref('expression'), str('$expression,')))\n                ])\n            ])),\n            iff(raw('!$expAdd.isEmpty()'), compoundExpression([\n                set(ref('expression'), str('$expression ADD')),\n                forEach(ref('entry'), ref('expAdd.entrySet()'), [\n                    set(ref('expression'), str('$expression $entry.key $entry.value')),\n                    iff(ref('foreach.hasNext()'), set(ref('expression'), str('$expression,')))\n                ])\n            ])),\n            iff(raw('!$expRemove.isEmpty()'), compoundExpression([\n                set(ref('expression'), str('$expression REMOVE')),\n                forEach(ref('entry'), ref('expRemove'), [\n                    set(ref('expression'), str('$expression $entry')),\n                    iff(ref('foreach.hasNext()'), set(ref('expression'), str('$expression,')))\n                ])\n            ])),\n            set(ref('update'), obj({})),\n            qref('$update.put(\"expression\", \"$expression\")'),\n            iff(\n                raw('!$expNames.isEmpty()'),\n                qref('$update.put(\"expressionNames\", $expNames)')\n            ),\n            iff(\n                raw('!$expValues.isEmpty()'),\n                qref('$update.put(\"expressionValues\", $expValues)')\n            ),\n            obj({\n                version: str('2017-02-28'),\n                operation: str('UpdateItem'),\n                key,\n                update: ref('util.toJson($update)'),\n                condition\n            })\n        ])\n    }\n\n    public static stringAttributeValue(value: Expression): ObjectNode {\n        return {\n            kind: 'Object', attributes: [\n                ['S', { kind: 'Quotes', expr: value }]\n            ]\n        };\n    }\n\n    public static numericAttributeValue(value: Expression): ObjectNode {\n        return {\n            kind: 'Object', attributes: [\n                ['N', { kind: 'Quotes', expr: value }]\n            ]\n        };\n    }\n\n    public static binaryAttributeValue(value: Expression): ObjectNode {\n        return {\n            kind: 'Object', attributes: [\n                ['B', { kind: 'Quotes', expr: value }]\n            ]\n        };\n    }\n\n    public static paginatedResponse(): ObjectNode {\n        return obj({\n            items: ref('util.toJson($ctx.result.items)'),\n            nextToken: ref('util.toJson($util.defaultIfNullOrBlank($context.result.nextToken, null))')\n        })\n    }\n}\n"],"sourceRoot":""}