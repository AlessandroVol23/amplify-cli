91fbeed72ce845d9f04dd53e46e493a3
'use strict';require('ts-jest').install("/c/Users/Sandro/repo/amplify-cli/packages/graphql-mapping-template/src/print.ts", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ast_1 = require(\"./ast\");\nvar TAB = '  ';\nfunction printIf(node, indent) {\n    if (indent === void 0) { indent = ''; }\n    if (node.inline) {\n        return \"#if( \" + printExpr(node.predicate, '') + \" ) \" + printExpr(node.expr, '') + \" #end\";\n    }\n    return indent + \"#if( \" + printExpr(node.predicate, '') + \" )\\n\" + printExpr(node.expr, indent + TAB) + \"\\n\" + indent + \"#end\";\n}\nfunction printIfElse(node, indent) {\n    if (indent === void 0) { indent = ''; }\n    if (node.inline) {\n        return \"#if( \" + printExpr(node.predicate) + \" ) \" +\n            (printExpr(node.ifExpr) + \" \") +\n            \"#else \" +\n            (printExpr(node.elseExpr) + \" \") +\n            \"#end\";\n    }\n    return indent + \"#if( \" + printExpr(node.predicate) + \" )\\n\" +\n        (printExpr(node.ifExpr, indent + TAB) + \"\\n\") +\n        (indent + \"#else\\n\") +\n        (printExpr(node.elseExpr, indent + TAB) + \"\\n\") +\n        (indent + \"#end\");\n}\nfunction printAnd(node, indent) {\n    if (indent === void 0) { indent = ''; }\n    return indent + node.expressions.map(function (e) { return printExpr(e); }).join(' && ');\n}\nfunction printOr(node, indent) {\n    if (indent === void 0) { indent = ''; }\n    return indent + node.expressions.map(function (e) { return printExpr(e); }).join(' || ');\n}\nfunction printParens(node, indent) {\n    if (indent === void 0) { indent = ''; }\n    return indent + \"(\" + printExpr(node.expr) + \")\";\n}\nfunction printEquals(node, indent) {\n    if (indent === void 0) { indent = ''; }\n    return \"\" + indent + printExpr(node.leftExpr) + \" == \" + printExpr(node.rightExpr);\n}\nfunction printNotEquals(node, indent) {\n    if (indent === void 0) { indent = ''; }\n    return \"\" + indent + printExpr(node.leftExpr) + \" != \" + printExpr(node.rightExpr);\n}\nfunction printForEach(node, indent) {\n    if (indent === void 0) { indent = ''; }\n    return indent + \"#foreach( \" + printExpr(node.key) + \" in \" + printExpr(node.collection) + \" )\\n\" +\n        node.expressions.map(function (e) { return printExpr(e, indent + TAB); }).join('\\n') +\n        (\"\\n\" + indent + \"#end\");\n}\nfunction printString(node) {\n    return \"\\\"\" + node.value + \"\\\"\";\n}\nfunction printBool(node) {\n    return \"\" + node.value;\n}\nfunction printRaw(node, indent) {\n    if (indent === void 0) { indent = ''; }\n    return \"\" + indent + node.value;\n}\nfunction printQuotes(node) {\n    return \"\\\"\" + printExpr(node.expr) + \"\\\"\";\n}\nfunction printInt(node) {\n    return \"\" + node.value;\n}\nfunction printFloat(node) {\n    return \"\" + node.value;\n}\nfunction printNull(node) {\n    return \"null\";\n}\nfunction printReference(node) {\n    return \"$\" + node.value;\n}\nfunction printQuietReference(node, indent) {\n    if (indent === void 0) { indent = ''; }\n    return indent + \"$util.qr(\" + node.value + \")\";\n}\nfunction printObject(node, indent) {\n    if (indent === void 0) { indent = ''; }\n    var attributes = node.attributes.map(function (attr, i) {\n        return \"\" + indent + TAB + \"\\\"\" + attr[0] + \"\\\": \" + printExpr(attr[1], indent + TAB) + (i < node.attributes.length - 1 ? ',' : '');\n    });\n    var divider = attributes.length > 0 ? \"\\n\" + indent : '';\n    return \"{\" + divider + attributes.join(divider) + divider + \"}\";\n}\nexports.printObject = printObject;\nfunction printList(node, indent) {\n    if (indent === void 0) { indent = ''; }\n    var values = node.expressions.map(function (e) { return printExpr(e, ''); }).join(', ');\n    return indent + \"[\" + values + \"]\";\n}\nfunction printSet(node, indent) {\n    if (indent === void 0) { indent = ''; }\n    return indent + \"#set( \" + printReference(node.key) + \" = \" + printExpr(node.value, '') + \" )\";\n}\nfunction printComment(node, indent) {\n    if (indent === void 0) { indent = ''; }\n    return indent + \"## \" + node.text + \" **\";\n}\nfunction printCompoundExpression(node, indent) {\n    if (indent === void 0) { indent = ''; }\n    return node.expressions.map(function (node) { return printExpr(node, indent); }).join(\"\\n\");\n}\nfunction printToJson(node, indent) {\n    if (indent === void 0) { indent = ''; }\n    return indent + \"$util.toJson(\" + printExpr(node.expr, '') + \")\";\n}\nfunction printNot(node, indent) {\n    if (indent === void 0) { indent = ''; }\n    return indent + \"!\" + printExpr(node.expr, '');\n}\nfunction printNewLine(node) {\n    return '\\n';\n}\nfunction printExpr(expr, indent) {\n    if (indent === void 0) { indent = ''; }\n    if (!expr) {\n        return '';\n    }\n    switch (expr.kind) {\n        case 'If':\n            return printIf(expr, indent);\n        case 'IfElse':\n            return printIfElse(expr, indent);\n        case 'And':\n            return printAnd(expr, indent);\n        case 'Or':\n            return printOr(expr, indent);\n        case 'Parens':\n            return printParens(expr, indent);\n        case 'Equals':\n            return printEquals(expr, indent);\n        case 'NotEquals':\n            return printNotEquals(expr, indent);\n        case 'ForEach':\n            return printForEach(expr, indent);\n        case 'String':\n            return printString(expr);\n        case 'Raw':\n            return printRaw(expr, indent);\n        case 'Quotes':\n            return printQuotes(expr);\n        case 'Float':\n            return printFloat(expr);\n        case 'Int':\n            return printInt(expr);\n        case 'Boolean':\n            return printBool(expr);\n        case 'Null':\n            return printNull(expr);\n        case 'Reference':\n            return printReference(expr);\n        case 'QuietReference':\n            return printQuietReference(expr, indent);\n        case 'Object':\n            return printObject(expr, indent);\n        case 'List':\n            return printList(expr, indent);\n        case 'Set':\n            return printSet(expr, indent);\n        case 'Comment':\n            return printComment(expr, indent);\n        case 'CompoundExpression':\n            return printCompoundExpression(expr, indent);\n        case 'Util.ToJson':\n            return printToJson(expr, indent);\n        case 'Not':\n            return printNot(expr, indent);\n        case 'NewLine':\n            return printNewLine(expr);\n        default:\n            return '';\n    }\n}\nfunction print(expr) {\n    return printExpr(expr);\n}\nexports.print = print;\nfunction printBlock(name) {\n    return function (expr) {\n        var wrappedExpr = ast_1.compoundExpression([\n            ast_1.comment(\"[Start] \" + name + \".\"),\n            expr,\n            ast_1.comment(\"[End] \" + name + \".\")\n        ]);\n        return printExpr(wrappedExpr);\n    };\n}\nexports.printBlock = printBlock;\n//# sourceMappingURL=data:application/json;base64,");"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ast_1 = require("./ast");
var TAB = '  ';
function printIf(node, indent) {
    if (indent === void 0) {indent = '';}
    if (node.inline) {
        return "#if( " + printExpr(node.predicate, '') + " ) " + printExpr(node.expr, '') + " #end";
    }
    return indent + "#if( " + printExpr(node.predicate, '') + " )\n" + printExpr(node.expr, indent + TAB) + "\n" + indent + "#end";
}
function printIfElse(node, indent) {
    if (indent === void 0) {indent = '';}
    if (node.inline) {
        return "#if( " + printExpr(node.predicate) + " ) " + (
        printExpr(node.ifExpr) + " ") +
        "#else " + (
        printExpr(node.elseExpr) + " ") +
        "#end";
    }
    return indent + "#if( " + printExpr(node.predicate) + " )\n" + (
    printExpr(node.ifExpr, indent + TAB) + "\n") + (
    indent + "#else\n") + (
    printExpr(node.elseExpr, indent + TAB) + "\n") + (
    indent + "#end");
}
function printAnd(node, indent) {
    if (indent === void 0) {indent = '';}
    return indent + node.expressions.map(function (e) {return printExpr(e);}).join(' && ');
}
function printOr(node, indent) {
    if (indent === void 0) {indent = '';}
    return indent + node.expressions.map(function (e) {return printExpr(e);}).join(' || ');
}
function printParens(node, indent) {
    if (indent === void 0) {indent = '';}
    return indent + "(" + printExpr(node.expr) + ")";
}
function printEquals(node, indent) {
    if (indent === void 0) {indent = '';}
    return "" + indent + printExpr(node.leftExpr) + " == " + printExpr(node.rightExpr);
}
function printNotEquals(node, indent) {
    if (indent === void 0) {indent = '';}
    return "" + indent + printExpr(node.leftExpr) + " != " + printExpr(node.rightExpr);
}
function printForEach(node, indent) {
    if (indent === void 0) {indent = '';}
    return indent + "#foreach( " + printExpr(node.key) + " in " + printExpr(node.collection) + " )\n" +
    node.expressions.map(function (e) {return printExpr(e, indent + TAB);}).join('\n') + (
    "\n" + indent + "#end");
}
function printString(node) {
    return "\"" + node.value + "\"";
}
function printBool(node) {
    return "" + node.value;
}
function printRaw(node, indent) {
    if (indent === void 0) {indent = '';}
    return "" + indent + node.value;
}
function printQuotes(node) {
    return "\"" + printExpr(node.expr) + "\"";
}
function printInt(node) {
    return "" + node.value;
}
function printFloat(node) {
    return "" + node.value;
}
function printNull(node) {
    return "null";
}
function printReference(node) {
    return "$" + node.value;
}
function printQuietReference(node, indent) {
    if (indent === void 0) {indent = '';}
    return indent + "$util.qr(" + node.value + ")";
}
function printObject(node, indent) {
    if (indent === void 0) {indent = '';}
    var attributes = node.attributes.map(function (attr, i) {
        return "" + indent + TAB + "\"" + attr[0] + "\": " + printExpr(attr[1], indent + TAB) + (i < node.attributes.length - 1 ? ',' : '');
    });
    var divider = attributes.length > 0 ? "\n" + indent : '';
    return "{" + divider + attributes.join(divider) + divider + "}";
}
exports.printObject = printObject;
function printList(node, indent) {
    if (indent === void 0) {indent = '';}
    var values = node.expressions.map(function (e) {return printExpr(e, '');}).join(', ');
    return indent + "[" + values + "]";
}
function printSet(node, indent) {
    if (indent === void 0) {indent = '';}
    return indent + "#set( " + printReference(node.key) + " = " + printExpr(node.value, '') + " )";
}
function printComment(node, indent) {
    if (indent === void 0) {indent = '';}
    return indent + "## " + node.text + " **";
}
function printCompoundExpression(node, indent) {
    if (indent === void 0) {indent = '';}
    return node.expressions.map(function (node) {return printExpr(node, indent);}).join("\n");
}
function printToJson(node, indent) {
    if (indent === void 0) {indent = '';}
    return indent + "$util.toJson(" + printExpr(node.expr, '') + ")";
}
function printNot(node, indent) {
    if (indent === void 0) {indent = '';}
    return indent + "!" + printExpr(node.expr, '');
}
function printNewLine(node) {
    return '\n';
}
function printExpr(expr, indent) {
    if (indent === void 0) {indent = '';}
    if (!expr) {
        return '';
    }
    switch (expr.kind) {
        case 'If':
            return printIf(expr, indent);
        case 'IfElse':
            return printIfElse(expr, indent);
        case 'And':
            return printAnd(expr, indent);
        case 'Or':
            return printOr(expr, indent);
        case 'Parens':
            return printParens(expr, indent);
        case 'Equals':
            return printEquals(expr, indent);
        case 'NotEquals':
            return printNotEquals(expr, indent);
        case 'ForEach':
            return printForEach(expr, indent);
        case 'String':
            return printString(expr);
        case 'Raw':
            return printRaw(expr, indent);
        case 'Quotes':
            return printQuotes(expr);
        case 'Float':
            return printFloat(expr);
        case 'Int':
            return printInt(expr);
        case 'Boolean':
            return printBool(expr);
        case 'Null':
            return printNull(expr);
        case 'Reference':
            return printReference(expr);
        case 'QuietReference':
            return printQuietReference(expr, indent);
        case 'Object':
            return printObject(expr, indent);
        case 'List':
            return printList(expr, indent);
        case 'Set':
            return printSet(expr, indent);
        case 'Comment':
            return printComment(expr, indent);
        case 'CompoundExpression':
            return printCompoundExpression(expr, indent);
        case 'Util.ToJson':
            return printToJson(expr, indent);
        case 'Not':
            return printNot(expr, indent);
        case 'NewLine':
            return printNewLine(expr);
        default:
            return '';}

}
function print(expr) {
    return printExpr(expr);
}
exports.print = print;
function printBlock(name) {
    return function (expr) {
        var wrappedExpr = ast_1.compoundExpression([
        ast_1.comment("[Start] " + name + "."),
        expr,
        ast_1.comment("[End] " + name + ".")]);

        return printExpr(wrappedExpr);
    };
}
exports.printBlock = printBlock;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,