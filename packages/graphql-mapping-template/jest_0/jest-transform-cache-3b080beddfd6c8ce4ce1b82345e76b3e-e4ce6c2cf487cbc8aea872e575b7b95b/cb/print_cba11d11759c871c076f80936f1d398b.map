{"version":3,"sources":["print.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    Expression, IfNode, IfElseNode, AndNode, OrNode,\n    ParensNode, EqualsNode, NotEqualsNode, ForEachNode,\n    StringNode, IntNode, NullNode, ReferenceNode, QuietReferenceNode,\n    ObjectNode, ListNode, FloatNode, QuotesNode, RawNode, SetNode, CompoundExpressionNode,\n    CommentNode, ToJsonNode, BooleanNode, compoundExpression, comment, NotNode, NewLineNode\n} from './ast';\n\nconst TAB = '  ';\n\nfunction printIf(node: IfNode, indent: string = '') {\n    if (node.inline) {\n        return `#if( ${printExpr(node.predicate, '')} ) ${printExpr(node.expr, '')} #end`;\n    }\n    return `${indent}#if( ${printExpr(node.predicate, '')} )\\n${printExpr(node.expr, indent + TAB)}\\n${indent}#end`;\n}\n\nfunction printIfElse(node: IfElseNode, indent: string = '') {\n    if (node.inline) {\n        return `#if( ${printExpr(node.predicate)} ) ` +\n            `${printExpr(node.ifExpr)} ` +\n            `#else ` +\n            `${printExpr(node.elseExpr)} ` +\n            `#end`;\n    }\n    return `${indent}#if( ${printExpr(node.predicate)} )\\n` +\n        `${printExpr(node.ifExpr, indent + TAB)}\\n` +\n        `${indent}#else\\n` +\n        `${printExpr(node.elseExpr, indent + TAB)}\\n` +\n        `${indent}#end`;\n}\n\nfunction printAnd(node: AndNode, indent: string = ''): string {\n    return indent + node.expressions.map((e: Expression) => printExpr(e)).join(' && ');\n}\n\nfunction printOr(node: OrNode, indent: string = ''): string {\n    return indent + node.expressions.map((e: Expression) => printExpr(e)).join(' || ');\n}\n\nfunction printParens(node: ParensNode, indent: string = ''): string {\n    return `${indent}(${printExpr(node.expr)})`;\n}\n\nfunction printEquals(node: EqualsNode, indent: string = ''): string {\n    return `${indent}${printExpr(node.leftExpr)} == ${printExpr(node.rightExpr)}`;\n}\n\nfunction printNotEquals(node: NotEqualsNode, indent: string = ''): string {\n    return `${indent}${printExpr(node.leftExpr)} != ${printExpr(node.rightExpr)}`;\n}\n\nfunction printForEach(node: ForEachNode, indent: string = ''): string {\n    return `${indent}#foreach( ${printExpr(node.key)} in ${printExpr(node.collection)} )\\n` +\n        node.expressions.map((e: Expression) => printExpr(e, indent + TAB)).join('\\n') +\n        `\\n${indent}#end`;\n}\n\nfunction printString(node: StringNode): string {\n    return `\"${node.value}\"`;\n}\n\nfunction printBool(node: BooleanNode): string {\n    return `${node.value}`;\n}\n\nfunction printRaw(node: RawNode, indent: string = ''): string {\n    return `${indent}${node.value}`;\n}\n\nfunction printQuotes(node: QuotesNode): string {\n    return `\"${printExpr(node.expr)}\"`;\n}\n\nfunction printInt(node: IntNode): string {\n    return `${node.value}`;\n}\n\nfunction printFloat(node: FloatNode): string {\n    return `${node.value}`;\n}\n\nfunction printNull(node: NullNode): string {\n    return `null`;\n}\n\nfunction printReference(node: ReferenceNode): string {\n    return `\\$${node.value}`;\n}\n\nfunction printQuietReference(node: QuietReferenceNode, indent: string = ''): string {\n    return `${indent}$util.qr(${node.value})`;\n}\n\nexport function printObject(node: ObjectNode, indent: string = ''): string {\n    const attributes = node.attributes.map((attr: [string, Expression], i: number) => {\n        return `${indent}${TAB}\"${attr[0]}\": ${printExpr(attr[1], indent + TAB)}${i < node.attributes.length - 1 ? ',' : ''}`;\n    });\n    const divider = attributes.length > 0 ? `\\n${indent}` : ''\n    return `{${divider}${attributes.join(divider)}${divider}}`;\n}\n\nfunction printList(node: ListNode, indent: string = ''): string {\n    const values = node.expressions.map((e: Expression) => printExpr(e, '')).join(', ');\n    return `${indent}[${values}]`;\n}\n\nfunction printSet(node: SetNode, indent: string = ''): string {\n    return `${indent}#set( ${printReference(node.key)} = ${printExpr(node.value, '')} )`\n}\n\nfunction printComment(node: CommentNode, indent: string = ''): string {\n    return `${indent}## ${node.text} **`\n}\n\nfunction printCompoundExpression(node: CompoundExpressionNode, indent: string = ''): string {\n    return node.expressions.map((node: Expression) => printExpr(node, indent)).join(`\\n`)\n}\n\nfunction printToJson(node: ToJsonNode, indent: string = ''): string {\n    return `${indent}$util.toJson(${printExpr(node.expr, '')})`\n}\n\nfunction printNot(node: NotNode, indent: string = ''): string {\n    return `${indent}!${printExpr(node.expr, '')}`\n}\n\nfunction printNewLine(node: NewLineNode): string {\n    return '\\n'\n}\n\nfunction printExpr(expr: Expression, indent: string = ''): string {\n    if (!expr) { return ''; }\n    switch (expr.kind) {\n        case 'If':\n            return printIf(expr, indent);\n        case 'IfElse':\n            return printIfElse(expr, indent);\n        case 'And':\n            return printAnd(expr, indent);\n        case 'Or':\n            return printOr(expr, indent);\n        case 'Parens':\n            return printParens(expr, indent);\n        case 'Equals':\n            return printEquals(expr, indent);\n        case 'NotEquals':\n            return printNotEquals(expr, indent);\n        case 'ForEach':\n            return printForEach(expr, indent);\n        case 'String':\n            return printString(expr);\n        case 'Raw':\n            return printRaw(expr, indent);\n        case 'Quotes':\n            return printQuotes(expr);\n        case 'Float':\n            return printFloat(expr);\n        case 'Int':\n            return printInt(expr);\n        case 'Boolean':\n            return printBool(expr);\n        case 'Null':\n            return printNull(expr);\n        case 'Reference':\n            return printReference(expr);\n        case 'QuietReference':\n            return printQuietReference(expr, indent);\n        case 'Object':\n            return printObject(expr, indent);\n        case 'List':\n            return printList(expr, indent);\n        case 'Set':\n            return printSet(expr, indent);\n        case 'Comment':\n            return printComment(expr, indent);\n        case 'CompoundExpression':\n            return printCompoundExpression(expr, indent)\n        case 'Util.ToJson':\n            return printToJson(expr, indent)\n        case 'Not':\n            return printNot(expr, indent)\n        case 'NewLine':\n            return printNewLine(expr)\n        default:\n            return '';\n    }\n}\n\nexport function print(expr: Expression): string {\n    return printExpr(expr);\n}\n\nexport function printBlock(name: string) {\n    return (expr: Expression): string => {\n        const wrappedExpr = compoundExpression([\n            comment(`[Start] ${name}.`),\n            expr,\n            comment(`[End] ${name}.`)\n        ])\n        return printExpr(wrappedExpr);\n    }\n}\n"],"sourceRoot":""}