44b4bd75f36e34d5b3900ea2423d6b4f
'use strict';require('ts-jest').install("/c/Users/Sandro/repo/amplify-cli/packages/graphql-mapping-template/src/ast.ts", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction iff(predicate, expr, inline) {\n    return {\n        kind: 'If',\n        predicate: predicate,\n        expr: expr,\n        inline: inline,\n    };\n}\nexports.iff = iff;\nfunction ifElse(predicate, ifExpr, elseExpr, inline) {\n    return {\n        kind: 'IfElse',\n        predicate: predicate,\n        ifExpr: ifExpr,\n        elseExpr: elseExpr,\n        inline: inline\n    };\n}\nexports.ifElse = ifElse;\nfunction and(expressions) {\n    return {\n        kind: 'And',\n        expressions: expressions\n    };\n}\nexports.and = and;\nfunction or(expressions) {\n    return {\n        kind: 'Or',\n        expressions: expressions\n    };\n}\nexports.or = or;\nfunction parens(expr) {\n    return {\n        kind: 'Parens',\n        expr: expr\n    };\n}\nexports.parens = parens;\nfunction equals(leftExpr, rightExpr) {\n    return {\n        kind: 'Equals',\n        leftExpr: leftExpr,\n        rightExpr: rightExpr\n    };\n}\nexports.equals = equals;\nfunction notEquals(leftExpr, rightExpr) {\n    return {\n        kind: 'NotEquals',\n        leftExpr: leftExpr,\n        rightExpr: rightExpr\n    };\n}\nexports.notEquals = notEquals;\nfunction not(expr) {\n    return {\n        kind: 'Not',\n        expr: expr,\n    };\n}\nexports.not = not;\nfunction forEach(key, collection, expressions) {\n    return {\n        kind: 'ForEach',\n        key: key,\n        collection: collection,\n        expressions: expressions\n    };\n}\nexports.forEach = forEach;\nfunction str(value) {\n    return {\n        kind: 'String',\n        value: value\n    };\n}\nexports.str = str;\nfunction raw(value) {\n    return {\n        kind: 'Raw',\n        value: value\n    };\n}\nexports.raw = raw;\nfunction quotes(expr) {\n    return {\n        kind: 'Quotes',\n        expr: expr\n    };\n}\nexports.quotes = quotes;\nfunction float(value) {\n    return {\n        kind: 'Float',\n        value: value\n    };\n}\nexports.float = float;\nfunction int(value) {\n    return {\n        kind: 'Int',\n        value: value\n    };\n}\nexports.int = int;\nfunction bool(value) {\n    return {\n        kind: 'Boolean',\n        value: value\n    };\n}\nexports.bool = bool;\nfunction nul() {\n    return {\n        kind: 'Null'\n    };\n}\nexports.nul = nul;\nfunction ref(value) {\n    return {\n        kind: 'Reference',\n        value: value\n    };\n}\nexports.ref = ref;\nfunction qref(value) {\n    return {\n        kind: 'QuietReference',\n        value: value\n    };\n}\nexports.qref = qref;\n// TODO: This can also take a plain object. What is easier in practice?\nfunction obj(o) {\n    var attributes = Object.keys(o).map(function (key) { return [key, o[key]]; });\n    return {\n        kind: 'Object',\n        attributes: attributes\n    };\n}\nexports.obj = obj;\nfunction list(expressions) {\n    return {\n        kind: 'List',\n        expressions: expressions\n    };\n}\nexports.list = list;\nfunction set(key, value) {\n    return {\n        kind: 'Set',\n        key: key,\n        value: value\n    };\n}\nexports.set = set;\nfunction comment(text) {\n    return {\n        kind: 'Comment',\n        text: text\n    };\n}\nexports.comment = comment;\nfunction compoundExpression(expressions) {\n    return {\n        kind: 'CompoundExpression',\n        expressions: expressions\n    };\n}\nexports.compoundExpression = compoundExpression;\nfunction toJson(expr) {\n    return {\n        kind: 'Util.ToJson',\n        expr: expr\n    };\n}\nexports.toJson = toJson;\nfunction newline() {\n    return {\n        kind: 'NewLine',\n    };\n}\nexports.newline = newline;\nfunction block(name, exprs) {\n    return compoundExpression([\n        comment(\"[Start] \" + name)\n    ].concat(exprs, [\n        comment(\"[End] \" + name)\n    ]));\n}\nexports.block = block;\n//# sourceMappingURL=data:application/json;base64,");"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function iff(predicate, expr, inline) {
    return {
        kind: 'If',
        predicate: predicate,
        expr: expr,
        inline: inline };

}
exports.iff = iff;
function ifElse(predicate, ifExpr, elseExpr, inline) {
    return {
        kind: 'IfElse',
        predicate: predicate,
        ifExpr: ifExpr,
        elseExpr: elseExpr,
        inline: inline };

}
exports.ifElse = ifElse;
function and(expressions) {
    return {
        kind: 'And',
        expressions: expressions };

}
exports.and = and;
function or(expressions) {
    return {
        kind: 'Or',
        expressions: expressions };

}
exports.or = or;
function parens(expr) {
    return {
        kind: 'Parens',
        expr: expr };

}
exports.parens = parens;
function equals(leftExpr, rightExpr) {
    return {
        kind: 'Equals',
        leftExpr: leftExpr,
        rightExpr: rightExpr };

}
exports.equals = equals;
function notEquals(leftExpr, rightExpr) {
    return {
        kind: 'NotEquals',
        leftExpr: leftExpr,
        rightExpr: rightExpr };

}
exports.notEquals = notEquals;
function not(expr) {
    return {
        kind: 'Not',
        expr: expr };

}
exports.not = not;
function forEach(key, collection, expressions) {
    return {
        kind: 'ForEach',
        key: key,
        collection: collection,
        expressions: expressions };

}
exports.forEach = forEach;
function str(value) {
    return {
        kind: 'String',
        value: value };

}
exports.str = str;
function raw(value) {
    return {
        kind: 'Raw',
        value: value };

}
exports.raw = raw;
function quotes(expr) {
    return {
        kind: 'Quotes',
        expr: expr };

}
exports.quotes = quotes;
function float(value) {
    return {
        kind: 'Float',
        value: value };

}
exports.float = float;
function int(value) {
    return {
        kind: 'Int',
        value: value };

}
exports.int = int;
function bool(value) {
    return {
        kind: 'Boolean',
        value: value };

}
exports.bool = bool;
function nul() {
    return {
        kind: 'Null' };

}
exports.nul = nul;
function ref(value) {
    return {
        kind: 'Reference',
        value: value };

}
exports.ref = ref;
function qref(value) {
    return {
        kind: 'QuietReference',
        value: value };

}
exports.qref = qref;
// TODO: This can also take a plain object. What is easier in practice?
function obj(o) {
    var attributes = Object.keys(o).map(function (key) {return [key, o[key]];});
    return {
        kind: 'Object',
        attributes: attributes };

}
exports.obj = obj;
function list(expressions) {
    return {
        kind: 'List',
        expressions: expressions };

}
exports.list = list;
function set(key, value) {
    return {
        kind: 'Set',
        key: key,
        value: value };

}
exports.set = set;
function comment(text) {
    return {
        kind: 'Comment',
        text: text };

}
exports.comment = comment;
function compoundExpression(expressions) {
    return {
        kind: 'CompoundExpression',
        expressions: expressions };

}
exports.compoundExpression = compoundExpression;
function toJson(expr) {
    return {
        kind: 'Util.ToJson',
        expr: expr };

}
exports.toJson = toJson;
function newline() {
    return {
        kind: 'NewLine' };

}
exports.newline = newline;
function block(name, exprs) {
    return compoundExpression([
    comment("[Start] " + name)].
    concat(exprs, [
    comment("[End] " + name)]));

}
exports.block = block;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,