b09e7f66b9cff67228588195e61e6dfe





jest.mock('../../src/commands/add');
jest.mock('../../src/codegen-config');
jest.mock('../../src/walkthrough/configure');const configure = require('../../src/commands/configure');const add = require('../../src/commands/add');const loadConfig = require('../../src/codegen-config');const configureProjectWalkThrough = require('../../src/walkthrough/configure');

const MOCK_CONFIG_METHOD = {
  getProjects: jest.fn(),
  addProject: jest.fn(),
  save: jest.fn() };


const MOCK_CONFIG_WALK_THROUGH = 'MOCK_CONFIG_WALK_THROUGH';
const MOCK_APPSYNC_APIS = ['API1'];
const MOCK_CONTEXT = { amplify: {} };
describe('command - configure', () => {
  beforeEach(() => {
    jest.resetAllMocks();
    loadConfig.mockReturnValue(MOCK_CONFIG_METHOD);
    MOCK_CONFIG_METHOD.getProjects.mockReturnValue(MOCK_APPSYNC_APIS);
    configureProjectWalkThrough.mockReturnValue(MOCK_CONFIG_WALK_THROUGH);
  });

  it('should update the configuration of project', async () => {
    await configure(MOCK_CONTEXT);
    expect(loadConfig).toHaveBeenCalledWith(MOCK_CONTEXT);
    expect(configureProjectWalkThrough).toHaveBeenCalledWith(MOCK_CONTEXT, MOCK_APPSYNC_APIS);
    expect(MOCK_CONFIG_METHOD.addProject).toHaveBeenCalledWith(MOCK_CONFIG_WALK_THROUGH);
    expect(MOCK_CONFIG_METHOD.save).toHaveBeenCalledWith();

    expect(add).not.toHaveBeenCalled();
  });

  it('should call add project when there are no App Sync API configured for codegen', async () => {
    MOCK_CONFIG_METHOD.getProjects.mockReturnValue([]);
    await configure(MOCK_CONTEXT);

    expect(configureProjectWalkThrough).not.toHaveBeenCalled();
    expect(MOCK_CONFIG_METHOD.addProject).not.toHaveBeenCalled();
    expect(MOCK_CONFIG_METHOD.save).not.toHaveBeenCalled();
    expect(add).toHaveBeenCalledWith(MOCK_CONTEXT);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZ3VyZS50ZXN0LmpzIl0sIm5hbWVzIjpbImplc3QiLCJtb2NrIiwiY29uZmlndXJlIiwicmVxdWlyZSIsImFkZCIsImxvYWRDb25maWciLCJjb25maWd1cmVQcm9qZWN0V2Fsa1Rocm91Z2giLCJNT0NLX0NPTkZJR19NRVRIT0QiLCJnZXRQcm9qZWN0cyIsImZuIiwiYWRkUHJvamVjdCIsInNhdmUiLCJNT0NLX0NPTkZJR19XQUxLX1RIUk9VR0giLCJNT0NLX0FQUFNZTkNfQVBJUyIsIk1PQ0tfQ09OVEVYVCIsImFtcGxpZnkiLCJkZXNjcmliZSIsImJlZm9yZUVhY2giLCJyZXNldEFsbE1vY2tzIiwibW9ja1JldHVyblZhbHVlIiwiaXQiLCJleHBlY3QiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsIm5vdCIsInRvSGF2ZUJlZW5DYWxsZWQiXSwibWFwcGluZ3MiOiI7Ozs7O0FBS0FBLEtBQUtDLElBQUwsQ0FBVSx3QkFBVjtBQUNBRCxLQUFLQyxJQUFMLENBQVUsMEJBQVY7QUFDQUQsS0FBS0MsSUFBTCxDQUFVLGlDQUFWLEVBUEEsTUFBTUMsWUFBWUMsUUFBUSw4QkFBUixDQUFsQixDQUNBLE1BQU1DLE1BQU1ELFFBQVEsd0JBQVIsQ0FBWixDQUNBLE1BQU1FLGFBQWFGLFFBQVEsMEJBQVIsQ0FBbkIsQ0FDQSxNQUFNRyw4QkFBOEJILFFBQVEsaUNBQVIsQ0FBcEM7O0FBTUEsTUFBTUkscUJBQXFCO0FBQ3pCQyxlQUFhUixLQUFLUyxFQUFMLEVBRFk7QUFFekJDLGNBQVlWLEtBQUtTLEVBQUwsRUFGYTtBQUd6QkUsUUFBTVgsS0FBS1MsRUFBTCxFQUhtQixFQUEzQjs7O0FBTUEsTUFBTUcsMkJBQTJCLDBCQUFqQztBQUNBLE1BQU1DLG9CQUFvQixDQUFDLE1BQUQsQ0FBMUI7QUFDQSxNQUFNQyxlQUFlLEVBQUVDLFNBQVMsRUFBWCxFQUFyQjtBQUNBQyxTQUFTLHFCQUFULEVBQWdDLE1BQU07QUFDcENDLGFBQVcsTUFBTTtBQUNmakIsU0FBS2tCLGFBQUw7QUFDQWIsZUFBV2MsZUFBWCxDQUEyQlosa0JBQTNCO0FBQ0FBLHVCQUFtQkMsV0FBbkIsQ0FBK0JXLGVBQS9CLENBQStDTixpQkFBL0M7QUFDQVAsZ0NBQTRCYSxlQUE1QixDQUE0Q1Asd0JBQTVDO0FBQ0QsR0FMRDs7QUFPQVEsS0FBRyw0Q0FBSCxFQUFpRCxZQUFZO0FBQzNELFVBQU1sQixVQUFVWSxZQUFWLENBQU47QUFDQU8sV0FBT2hCLFVBQVAsRUFBbUJpQixvQkFBbkIsQ0FBd0NSLFlBQXhDO0FBQ0FPLFdBQU9mLDJCQUFQLEVBQW9DZ0Isb0JBQXBDLENBQXlEUixZQUF6RCxFQUF1RUQsaUJBQXZFO0FBQ0FRLFdBQU9kLG1CQUFtQkcsVUFBMUIsRUFBc0NZLG9CQUF0QyxDQUEyRFYsd0JBQTNEO0FBQ0FTLFdBQU9kLG1CQUFtQkksSUFBMUIsRUFBZ0NXLG9CQUFoQzs7QUFFQUQsV0FBT2pCLEdBQVAsRUFBWW1CLEdBQVosQ0FBZ0JDLGdCQUFoQjtBQUNELEdBUkQ7O0FBVUFKLEtBQUcsK0VBQUgsRUFBb0YsWUFBWTtBQUM5RmIsdUJBQW1CQyxXQUFuQixDQUErQlcsZUFBL0IsQ0FBK0MsRUFBL0M7QUFDQSxVQUFNakIsVUFBVVksWUFBVixDQUFOOztBQUVBTyxXQUFPZiwyQkFBUCxFQUFvQ2lCLEdBQXBDLENBQXdDQyxnQkFBeEM7QUFDQUgsV0FBT2QsbUJBQW1CRyxVQUExQixFQUFzQ2EsR0FBdEMsQ0FBMENDLGdCQUExQztBQUNBSCxXQUFPZCxtQkFBbUJJLElBQTFCLEVBQWdDWSxHQUFoQyxDQUFvQ0MsZ0JBQXBDO0FBQ0FILFdBQU9qQixHQUFQLEVBQVlrQixvQkFBWixDQUFpQ1IsWUFBakM7QUFDRCxHQVJEO0FBU0QsQ0EzQkQiLCJmaWxlIjoiY29uZmlndXJlLnRlc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBjb25maWd1cmUgPSByZXF1aXJlKCcuLi8uLi9zcmMvY29tbWFuZHMvY29uZmlndXJlJyk7XG5jb25zdCBhZGQgPSByZXF1aXJlKCcuLi8uLi9zcmMvY29tbWFuZHMvYWRkJyk7XG5jb25zdCBsb2FkQ29uZmlnID0gcmVxdWlyZSgnLi4vLi4vc3JjL2NvZGVnZW4tY29uZmlnJyk7XG5jb25zdCBjb25maWd1cmVQcm9qZWN0V2Fsa1Rocm91Z2ggPSByZXF1aXJlKCcuLi8uLi9zcmMvd2Fsa3Rocm91Z2gvY29uZmlndXJlJyk7XG5cbmplc3QubW9jaygnLi4vLi4vc3JjL2NvbW1hbmRzL2FkZCcpO1xuamVzdC5tb2NrKCcuLi8uLi9zcmMvY29kZWdlbi1jb25maWcnKTtcbmplc3QubW9jaygnLi4vLi4vc3JjL3dhbGt0aHJvdWdoL2NvbmZpZ3VyZScpO1xuXG5jb25zdCBNT0NLX0NPTkZJR19NRVRIT0QgPSB7XG4gIGdldFByb2plY3RzOiBqZXN0LmZuKCksXG4gIGFkZFByb2plY3Q6IGplc3QuZm4oKSxcbiAgc2F2ZTogamVzdC5mbigpLFxufTtcblxuY29uc3QgTU9DS19DT05GSUdfV0FMS19USFJPVUdIID0gJ01PQ0tfQ09ORklHX1dBTEtfVEhST1VHSCc7XG5jb25zdCBNT0NLX0FQUFNZTkNfQVBJUyA9IFsnQVBJMSddO1xuY29uc3QgTU9DS19DT05URVhUID0geyBhbXBsaWZ5OiB7fSB9O1xuZGVzY3JpYmUoJ2NvbW1hbmQgLSBjb25maWd1cmUnLCAoKSA9PiB7XG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGplc3QucmVzZXRBbGxNb2NrcygpO1xuICAgIGxvYWRDb25maWcubW9ja1JldHVyblZhbHVlKE1PQ0tfQ09ORklHX01FVEhPRCk7XG4gICAgTU9DS19DT05GSUdfTUVUSE9ELmdldFByb2plY3RzLm1vY2tSZXR1cm5WYWx1ZShNT0NLX0FQUFNZTkNfQVBJUyk7XG4gICAgY29uZmlndXJlUHJvamVjdFdhbGtUaHJvdWdoLm1vY2tSZXR1cm5WYWx1ZShNT0NLX0NPTkZJR19XQUxLX1RIUk9VR0gpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHVwZGF0ZSB0aGUgY29uZmlndXJhdGlvbiBvZiBwcm9qZWN0JywgYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IGNvbmZpZ3VyZShNT0NLX0NPTlRFWFQpO1xuICAgIGV4cGVjdChsb2FkQ29uZmlnKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChNT0NLX0NPTlRFWFQpO1xuICAgIGV4cGVjdChjb25maWd1cmVQcm9qZWN0V2Fsa1Rocm91Z2gpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKE1PQ0tfQ09OVEVYVCwgTU9DS19BUFBTWU5DX0FQSVMpO1xuICAgIGV4cGVjdChNT0NLX0NPTkZJR19NRVRIT0QuYWRkUHJvamVjdCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoTU9DS19DT05GSUdfV0FMS19USFJPVUdIKTtcbiAgICBleHBlY3QoTU9DS19DT05GSUdfTUVUSE9ELnNhdmUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCk7XG5cbiAgICBleHBlY3QoYWRkKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGNhbGwgYWRkIHByb2plY3Qgd2hlbiB0aGVyZSBhcmUgbm8gQXBwIFN5bmMgQVBJIGNvbmZpZ3VyZWQgZm9yIGNvZGVnZW4nLCBhc3luYyAoKSA9PiB7XG4gICAgTU9DS19DT05GSUdfTUVUSE9ELmdldFByb2plY3RzLm1vY2tSZXR1cm5WYWx1ZShbXSk7XG4gICAgYXdhaXQgY29uZmlndXJlKE1PQ0tfQ09OVEVYVCk7XG5cbiAgICBleHBlY3QoY29uZmlndXJlUHJvamVjdFdhbGtUaHJvdWdoKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIGV4cGVjdChNT0NLX0NPTkZJR19NRVRIT0QuYWRkUHJvamVjdCkubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICBleHBlY3QoTU9DS19DT05GSUdfTUVUSE9ELnNhdmUpLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgZXhwZWN0KGFkZCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoTU9DS19DT05URVhUKTtcbiAgfSk7XG59KTtcbiJdfQ==