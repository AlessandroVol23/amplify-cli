4bda0a158a9b3a46f963d67279e7d27e






jest.mock('inquirer');
jest.mock('../../../src/utils');const inquirer = require('inquirer');const { getFrontEndHandler } = require('../../../src/utils');const { AmplifyCodeGenNotSupportedError } = require('../../../src/errors');const askCodegenTargetLanguage = require('../../../src/walkthrough/questions/languageTarget');

describe('askCodegenTargetLanguage', () => {
  const mockContext = {
    print: {
      info: jest.fn() } };


  it('should prompt when the front end framework is iOS', async () => {
    getFrontEndHandler.mockReturnValue('ios');
    const targetLanguage = await askCodegenTargetLanguage(mockContext);
    expect(targetLanguage).toEqual('swift');
    expect(getFrontEndHandler).toHaveBeenCalledWith(mockContext);
  });

  it('should throw error if the front end handler is for unsupported front end handlers', async () => {
    getFrontEndHandler.mockReturnValue('android');
    try {
      await askCodegenTargetLanguage(mockContext);
    } catch (e) {
      expect(e).toBeInstanceOf(AmplifyCodeGenNotSupportedError);
      expect(getFrontEndHandler).toHaveBeenCalledWith(mockContext);
    }
  });

  it('should allow user to select the language target when front end is javascript', async () => {
    getFrontEndHandler.mockReturnValue('javascript');
    inquirer.prompt.mockReturnValue({ target: 'typescript' });
    await askCodegenTargetLanguage(mockContext);
    expect(inquirer.prompt).toHaveBeenCalled();

    const questions = inquirer.prompt.mock.calls[0][0];
    expect(questions[0].type).toEqual('list');
    expect(questions[0].name).toEqual('target');
    expect(questions[0].choices).toEqual(['javascript', 'typescript', 'flow']);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxhbmd1YWdlVGFyZ2V0LnRlc3QuanMiXSwibmFtZXMiOlsiamVzdCIsIm1vY2siLCJpbnF1aXJlciIsInJlcXVpcmUiLCJnZXRGcm9udEVuZEhhbmRsZXIiLCJBbXBsaWZ5Q29kZUdlbk5vdFN1cHBvcnRlZEVycm9yIiwiYXNrQ29kZWdlblRhcmdldExhbmd1YWdlIiwiZGVzY3JpYmUiLCJtb2NrQ29udGV4dCIsInByaW50IiwiaW5mbyIsImZuIiwiaXQiLCJtb2NrUmV0dXJuVmFsdWUiLCJ0YXJnZXRMYW5ndWFnZSIsImV4cGVjdCIsInRvRXF1YWwiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsImUiLCJ0b0JlSW5zdGFuY2VPZiIsInByb21wdCIsInRhcmdldCIsInRvSGF2ZUJlZW5DYWxsZWQiLCJxdWVzdGlvbnMiLCJjYWxscyIsInR5cGUiLCJuYW1lIiwiY2hvaWNlcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBTUFBLEtBQUtDLElBQUwsQ0FBVSxVQUFWO0FBQ0FELEtBQUtDLElBQUwsQ0FBVSxvQkFBVixFQVBBLE1BQU1DLFdBQVdDLFFBQVEsVUFBUixDQUFqQixDQUVBLE1BQU0sRUFBRUMsa0JBQUYsS0FBeUJELFFBQVEsb0JBQVIsQ0FBL0IsQ0FDQSxNQUFNLEVBQUVFLCtCQUFGLEtBQXNDRixRQUFRLHFCQUFSLENBQTVDLENBQ0EsTUFBTUcsMkJBQTJCSCxRQUFRLG1EQUFSLENBQWpDOztBQUtBSSxTQUFTLDBCQUFULEVBQXFDLE1BQU07QUFDekMsUUFBTUMsY0FBYztBQUNsQkMsV0FBTztBQUNMQyxZQUFNVixLQUFLVyxFQUFMLEVBREQsRUFEVyxFQUFwQjs7O0FBS0FDLEtBQUcsbURBQUgsRUFBd0QsWUFBWTtBQUNsRVIsdUJBQW1CUyxlQUFuQixDQUFtQyxLQUFuQztBQUNBLFVBQU1DLGlCQUFpQixNQUFNUix5QkFBeUJFLFdBQXpCLENBQTdCO0FBQ0FPLFdBQU9ELGNBQVAsRUFBdUJFLE9BQXZCLENBQStCLE9BQS9CO0FBQ0FELFdBQU9YLGtCQUFQLEVBQTJCYSxvQkFBM0IsQ0FBZ0RULFdBQWhEO0FBQ0QsR0FMRDs7QUFPQUksS0FBRyxtRkFBSCxFQUF3RixZQUFZO0FBQ2xHUix1QkFBbUJTLGVBQW5CLENBQW1DLFNBQW5DO0FBQ0EsUUFBSTtBQUNGLFlBQU1QLHlCQUF5QkUsV0FBekIsQ0FBTjtBQUNELEtBRkQsQ0FFRSxPQUFPVSxDQUFQLEVBQVU7QUFDVkgsYUFBT0csQ0FBUCxFQUFVQyxjQUFWLENBQXlCZCwrQkFBekI7QUFDQVUsYUFBT1gsa0JBQVAsRUFBMkJhLG9CQUEzQixDQUFnRFQsV0FBaEQ7QUFDRDtBQUNGLEdBUkQ7O0FBVUFJLEtBQUcsOEVBQUgsRUFBbUYsWUFBWTtBQUM3RlIsdUJBQW1CUyxlQUFuQixDQUFtQyxZQUFuQztBQUNBWCxhQUFTa0IsTUFBVCxDQUFnQlAsZUFBaEIsQ0FBZ0MsRUFBRVEsUUFBUSxZQUFWLEVBQWhDO0FBQ0EsVUFBTWYseUJBQXlCRSxXQUF6QixDQUFOO0FBQ0FPLFdBQU9iLFNBQVNrQixNQUFoQixFQUF3QkUsZ0JBQXhCOztBQUVBLFVBQU1DLFlBQVlyQixTQUFTa0IsTUFBVCxDQUFnQm5CLElBQWhCLENBQXFCdUIsS0FBckIsQ0FBMkIsQ0FBM0IsRUFBOEIsQ0FBOUIsQ0FBbEI7QUFDQVQsV0FBT1EsVUFBVSxDQUFWLEVBQWFFLElBQXBCLEVBQTBCVCxPQUExQixDQUFrQyxNQUFsQztBQUNBRCxXQUFPUSxVQUFVLENBQVYsRUFBYUcsSUFBcEIsRUFBMEJWLE9BQTFCLENBQWtDLFFBQWxDO0FBQ0FELFdBQU9RLFVBQVUsQ0FBVixFQUFhSSxPQUFwQixFQUE2QlgsT0FBN0IsQ0FBcUMsQ0FBQyxZQUFELEVBQWUsWUFBZixFQUE2QixNQUE3QixDQUFyQztBQUNELEdBVkQ7QUFXRCxDQWxDRCIsImZpbGUiOiJsYW5ndWFnZVRhcmdldC50ZXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgaW5xdWlyZXIgPSByZXF1aXJlKCdpbnF1aXJlcicpO1xuXG5jb25zdCB7IGdldEZyb250RW5kSGFuZGxlciB9ID0gcmVxdWlyZSgnLi4vLi4vLi4vc3JjL3V0aWxzJyk7XG5jb25zdCB7IEFtcGxpZnlDb2RlR2VuTm90U3VwcG9ydGVkRXJyb3IgfSA9IHJlcXVpcmUoJy4uLy4uLy4uL3NyYy9lcnJvcnMnKTtcbmNvbnN0IGFza0NvZGVnZW5UYXJnZXRMYW5ndWFnZSA9IHJlcXVpcmUoJy4uLy4uLy4uL3NyYy93YWxrdGhyb3VnaC9xdWVzdGlvbnMvbGFuZ3VhZ2VUYXJnZXQnKTtcblxuamVzdC5tb2NrKCdpbnF1aXJlcicpO1xuamVzdC5tb2NrKCcuLi8uLi8uLi9zcmMvdXRpbHMnKTtcblxuZGVzY3JpYmUoJ2Fza0NvZGVnZW5UYXJnZXRMYW5ndWFnZScsICgpID0+IHtcbiAgY29uc3QgbW9ja0NvbnRleHQgPSB7XG4gICAgcHJpbnQ6IHtcbiAgICAgIGluZm86IGplc3QuZm4oKSxcbiAgICB9LFxuICB9O1xuICBpdCgnc2hvdWxkIHByb21wdCB3aGVuIHRoZSBmcm9udCBlbmQgZnJhbWV3b3JrIGlzIGlPUycsIGFzeW5jICgpID0+IHtcbiAgICBnZXRGcm9udEVuZEhhbmRsZXIubW9ja1JldHVyblZhbHVlKCdpb3MnKTtcbiAgICBjb25zdCB0YXJnZXRMYW5ndWFnZSA9IGF3YWl0IGFza0NvZGVnZW5UYXJnZXRMYW5ndWFnZShtb2NrQ29udGV4dCk7XG4gICAgZXhwZWN0KHRhcmdldExhbmd1YWdlKS50b0VxdWFsKCdzd2lmdCcpO1xuICAgIGV4cGVjdChnZXRGcm9udEVuZEhhbmRsZXIpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKG1vY2tDb250ZXh0KTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCB0aHJvdyBlcnJvciBpZiB0aGUgZnJvbnQgZW5kIGhhbmRsZXIgaXMgZm9yIHVuc3VwcG9ydGVkIGZyb250IGVuZCBoYW5kbGVycycsIGFzeW5jICgpID0+IHtcbiAgICBnZXRGcm9udEVuZEhhbmRsZXIubW9ja1JldHVyblZhbHVlKCdhbmRyb2lkJyk7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IGFza0NvZGVnZW5UYXJnZXRMYW5ndWFnZShtb2NrQ29udGV4dCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgZXhwZWN0KGUpLnRvQmVJbnN0YW5jZU9mKEFtcGxpZnlDb2RlR2VuTm90U3VwcG9ydGVkRXJyb3IpO1xuICAgICAgZXhwZWN0KGdldEZyb250RW5kSGFuZGxlcikudG9IYXZlQmVlbkNhbGxlZFdpdGgobW9ja0NvbnRleHQpO1xuICAgIH1cbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBhbGxvdyB1c2VyIHRvIHNlbGVjdCB0aGUgbGFuZ3VhZ2UgdGFyZ2V0IHdoZW4gZnJvbnQgZW5kIGlzIGphdmFzY3JpcHQnLCBhc3luYyAoKSA9PiB7XG4gICAgZ2V0RnJvbnRFbmRIYW5kbGVyLm1vY2tSZXR1cm5WYWx1ZSgnamF2YXNjcmlwdCcpO1xuICAgIGlucXVpcmVyLnByb21wdC5tb2NrUmV0dXJuVmFsdWUoeyB0YXJnZXQ6ICd0eXBlc2NyaXB0JyB9KTtcbiAgICBhd2FpdCBhc2tDb2RlZ2VuVGFyZ2V0TGFuZ3VhZ2UobW9ja0NvbnRleHQpO1xuICAgIGV4cGVjdChpbnF1aXJlci5wcm9tcHQpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcblxuICAgIGNvbnN0IHF1ZXN0aW9ucyA9IGlucXVpcmVyLnByb21wdC5tb2NrLmNhbGxzWzBdWzBdO1xuICAgIGV4cGVjdChxdWVzdGlvbnNbMF0udHlwZSkudG9FcXVhbCgnbGlzdCcpO1xuICAgIGV4cGVjdChxdWVzdGlvbnNbMF0ubmFtZSkudG9FcXVhbCgndGFyZ2V0Jyk7XG4gICAgZXhwZWN0KHF1ZXN0aW9uc1swXS5jaG9pY2VzKS50b0VxdWFsKFsnamF2YXNjcmlwdCcsICd0eXBlc2NyaXB0JywgJ2Zsb3cnXSk7XG4gIH0pO1xufSk7XG4iXX0=