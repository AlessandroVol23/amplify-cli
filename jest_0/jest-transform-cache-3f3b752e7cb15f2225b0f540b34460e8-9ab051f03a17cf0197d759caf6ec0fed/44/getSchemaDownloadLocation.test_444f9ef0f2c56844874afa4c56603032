412a1abe621a9cf0f26f886e79a56a2b






jest.mock('../../src/utils/getAndroidResDir');
jest.mock('../../src/utils/getFrontEndHandler');const { join, dirname } = require('path');const getSchemaDownloadLocation = require('../../src/utils/getSchemaDownloadLocation');const getAndroidResDir = require('../../src/utils/getAndroidResDir');const getFrontendHandler = require('../../src/utils/getFrontEndHandler');

let mockContext;
const mockBackEndPath = 'MOCK_BACKEND_DIR';
const mockResDir = 'MOCK_RES_DIR/Res';
const mockAPIName = 'FooAPI';
const mockGetBackendDirPath = jest.fn();
describe('getSchemaDownloadLocation', () => {
  beforeEach(() => {
    jest.resetAllMocks();

    mockGetBackendDirPath.mockReturnValue(mockBackEndPath);

    getAndroidResDir.mockImplementation(() => {
      throw new Error();
    });
    getFrontendHandler.mockReturnValue('javascript');
    mockContext = {
      amplify: {
        pathManager: {
          getBackendDirPath: mockGetBackendDirPath } } };



  });

  it('should use the src/graphql directory when used in JS frontend', () => {
    const downloadLocation = getSchemaDownloadLocation(mockContext, mockAPIName);
    expect(downloadLocation).toEqual(join('src', 'graphql', 'schema.json'));
  });

  it('should use the graphql directory when used in iOS frontend', () => {
    getFrontendHandler.mockReturnValue('iOS');
    const downloadLocation = getSchemaDownloadLocation(mockContext, mockAPIName);
    expect(downloadLocation).toEqual(join('graphql', 'schema.json'));
  });

  it('should use main directory in Android', () => {
    getAndroidResDir.mockReturnValue(mockResDir);
    const downloadLocation = getSchemaDownloadLocation(mockContext, mockAPIName);
    expect(downloadLocation).toEqual(join(dirname(mockResDir), 'graphql', 'schema.json'));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdldFNjaGVtYURvd25sb2FkTG9jYXRpb24udGVzdC5qcyJdLCJuYW1lcyI6WyJqZXN0IiwibW9jayIsImpvaW4iLCJkaXJuYW1lIiwicmVxdWlyZSIsImdldFNjaGVtYURvd25sb2FkTG9jYXRpb24iLCJnZXRBbmRyb2lkUmVzRGlyIiwiZ2V0RnJvbnRlbmRIYW5kbGVyIiwibW9ja0NvbnRleHQiLCJtb2NrQmFja0VuZFBhdGgiLCJtb2NrUmVzRGlyIiwibW9ja0FQSU5hbWUiLCJtb2NrR2V0QmFja2VuZERpclBhdGgiLCJmbiIsImRlc2NyaWJlIiwiYmVmb3JlRWFjaCIsInJlc2V0QWxsTW9ja3MiLCJtb2NrUmV0dXJuVmFsdWUiLCJtb2NrSW1wbGVtZW50YXRpb24iLCJFcnJvciIsImFtcGxpZnkiLCJwYXRoTWFuYWdlciIsImdldEJhY2tlbmREaXJQYXRoIiwiaXQiLCJkb3dubG9hZExvY2F0aW9uIiwiZXhwZWN0IiwidG9FcXVhbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBTUFBLEtBQUtDLElBQUwsQ0FBVSxrQ0FBVjtBQUNBRCxLQUFLQyxJQUFMLENBQVUsb0NBQVYsRUFQQSxNQUFNLEVBQUVDLElBQUYsRUFBUUMsT0FBUixLQUFvQkMsUUFBUSxNQUFSLENBQTFCLENBRUEsTUFBTUMsNEJBQTRCRCxRQUFRLDJDQUFSLENBQWxDLENBQ0EsTUFBTUUsbUJBQW1CRixRQUFRLGtDQUFSLENBQXpCLENBQ0EsTUFBTUcscUJBQXFCSCxRQUFRLG9DQUFSLENBQTNCOztBQUtBLElBQUlJLFdBQUo7QUFDQSxNQUFNQyxrQkFBa0Isa0JBQXhCO0FBQ0EsTUFBTUMsYUFBYSxrQkFBbkI7QUFDQSxNQUFNQyxjQUFjLFFBQXBCO0FBQ0EsTUFBTUMsd0JBQXdCWixLQUFLYSxFQUFMLEVBQTlCO0FBQ0FDLFNBQVMsMkJBQVQsRUFBc0MsTUFBTTtBQUMxQ0MsYUFBVyxNQUFNO0FBQ2ZmLFNBQUtnQixhQUFMOztBQUVBSiwwQkFBc0JLLGVBQXRCLENBQXNDUixlQUF0Qzs7QUFFQUgscUJBQWlCWSxrQkFBakIsQ0FBb0MsTUFBTTtBQUN4QyxZQUFNLElBQUlDLEtBQUosRUFBTjtBQUNELEtBRkQ7QUFHQVosdUJBQW1CVSxlQUFuQixDQUFtQyxZQUFuQztBQUNBVCxrQkFBYztBQUNaWSxlQUFTO0FBQ1BDLHFCQUFhO0FBQ1hDLDZCQUFtQlYscUJBRFIsRUFETixFQURHLEVBQWQ7Ozs7QUFPRCxHQWhCRDs7QUFrQkFXLEtBQUcsK0RBQUgsRUFBb0UsTUFBTTtBQUN4RSxVQUFNQyxtQkFBbUJuQiwwQkFBMEJHLFdBQTFCLEVBQXVDRyxXQUF2QyxDQUF6QjtBQUNBYyxXQUFPRCxnQkFBUCxFQUF5QkUsT0FBekIsQ0FBaUN4QixLQUFLLEtBQUwsRUFBWSxTQUFaLEVBQXVCLGFBQXZCLENBQWpDO0FBQ0QsR0FIRDs7QUFLQXFCLEtBQUcsNERBQUgsRUFBaUUsTUFBTTtBQUNyRWhCLHVCQUFtQlUsZUFBbkIsQ0FBbUMsS0FBbkM7QUFDQSxVQUFNTyxtQkFBbUJuQiwwQkFBMEJHLFdBQTFCLEVBQXVDRyxXQUF2QyxDQUF6QjtBQUNBYyxXQUFPRCxnQkFBUCxFQUF5QkUsT0FBekIsQ0FBaUN4QixLQUFLLFNBQUwsRUFBZ0IsYUFBaEIsQ0FBakM7QUFDRCxHQUpEOztBQU1BcUIsS0FBRyxzQ0FBSCxFQUEyQyxNQUFNO0FBQy9DakIscUJBQWlCVyxlQUFqQixDQUFpQ1AsVUFBakM7QUFDQSxVQUFNYyxtQkFBbUJuQiwwQkFBMEJHLFdBQTFCLEVBQXVDRyxXQUF2QyxDQUF6QjtBQUNBYyxXQUFPRCxnQkFBUCxFQUF5QkUsT0FBekIsQ0FBaUN4QixLQUFLQyxRQUFRTyxVQUFSLENBQUwsRUFBMEIsU0FBMUIsRUFBcUMsYUFBckMsQ0FBakM7QUFDRCxHQUpEO0FBS0QsQ0FuQ0QiLCJmaWxlIjoiZ2V0U2NoZW1hRG93bmxvYWRMb2NhdGlvbi50ZXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBqb2luLCBkaXJuYW1lIH0gPSByZXF1aXJlKCdwYXRoJyk7XG5cbmNvbnN0IGdldFNjaGVtYURvd25sb2FkTG9jYXRpb24gPSByZXF1aXJlKCcuLi8uLi9zcmMvdXRpbHMvZ2V0U2NoZW1hRG93bmxvYWRMb2NhdGlvbicpO1xuY29uc3QgZ2V0QW5kcm9pZFJlc0RpciA9IHJlcXVpcmUoJy4uLy4uL3NyYy91dGlscy9nZXRBbmRyb2lkUmVzRGlyJyk7XG5jb25zdCBnZXRGcm9udGVuZEhhbmRsZXIgPSByZXF1aXJlKCcuLi8uLi9zcmMvdXRpbHMvZ2V0RnJvbnRFbmRIYW5kbGVyJyk7XG5cbmplc3QubW9jaygnLi4vLi4vc3JjL3V0aWxzL2dldEFuZHJvaWRSZXNEaXInKTtcbmplc3QubW9jaygnLi4vLi4vc3JjL3V0aWxzL2dldEZyb250RW5kSGFuZGxlcicpO1xuXG5sZXQgbW9ja0NvbnRleHQ7XG5jb25zdCBtb2NrQmFja0VuZFBhdGggPSAnTU9DS19CQUNLRU5EX0RJUic7XG5jb25zdCBtb2NrUmVzRGlyID0gJ01PQ0tfUkVTX0RJUi9SZXMnO1xuY29uc3QgbW9ja0FQSU5hbWUgPSAnRm9vQVBJJztcbmNvbnN0IG1vY2tHZXRCYWNrZW5kRGlyUGF0aCA9IGplc3QuZm4oKTtcbmRlc2NyaWJlKCdnZXRTY2hlbWFEb3dubG9hZExvY2F0aW9uJywgKCkgPT4ge1xuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBqZXN0LnJlc2V0QWxsTW9ja3MoKTtcblxuICAgIG1vY2tHZXRCYWNrZW5kRGlyUGF0aC5tb2NrUmV0dXJuVmFsdWUobW9ja0JhY2tFbmRQYXRoKTtcblxuICAgIGdldEFuZHJvaWRSZXNEaXIubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IHtcbiAgICAgIHRocm93IG5ldyBFcnJvcigpO1xuICAgIH0pO1xuICAgIGdldEZyb250ZW5kSGFuZGxlci5tb2NrUmV0dXJuVmFsdWUoJ2phdmFzY3JpcHQnKTtcbiAgICBtb2NrQ29udGV4dCA9IHtcbiAgICAgIGFtcGxpZnk6IHtcbiAgICAgICAgcGF0aE1hbmFnZXI6IHtcbiAgICAgICAgICBnZXRCYWNrZW5kRGlyUGF0aDogbW9ja0dldEJhY2tlbmREaXJQYXRoLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9O1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHVzZSB0aGUgc3JjL2dyYXBocWwgZGlyZWN0b3J5IHdoZW4gdXNlZCBpbiBKUyBmcm9udGVuZCcsICgpID0+IHtcbiAgICBjb25zdCBkb3dubG9hZExvY2F0aW9uID0gZ2V0U2NoZW1hRG93bmxvYWRMb2NhdGlvbihtb2NrQ29udGV4dCwgbW9ja0FQSU5hbWUpO1xuICAgIGV4cGVjdChkb3dubG9hZExvY2F0aW9uKS50b0VxdWFsKGpvaW4oJ3NyYycsICdncmFwaHFsJywgJ3NjaGVtYS5qc29uJykpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHVzZSB0aGUgZ3JhcGhxbCBkaXJlY3Rvcnkgd2hlbiB1c2VkIGluIGlPUyBmcm9udGVuZCcsICgpID0+IHtcbiAgICBnZXRGcm9udGVuZEhhbmRsZXIubW9ja1JldHVyblZhbHVlKCdpT1MnKTtcbiAgICBjb25zdCBkb3dubG9hZExvY2F0aW9uID0gZ2V0U2NoZW1hRG93bmxvYWRMb2NhdGlvbihtb2NrQ29udGV4dCwgbW9ja0FQSU5hbWUpO1xuICAgIGV4cGVjdChkb3dubG9hZExvY2F0aW9uKS50b0VxdWFsKGpvaW4oJ2dyYXBocWwnLCAnc2NoZW1hLmpzb24nKSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgdXNlIG1haW4gZGlyZWN0b3J5IGluIEFuZHJvaWQnLCAoKSA9PiB7XG4gICAgZ2V0QW5kcm9pZFJlc0Rpci5tb2NrUmV0dXJuVmFsdWUobW9ja1Jlc0Rpcik7XG4gICAgY29uc3QgZG93bmxvYWRMb2NhdGlvbiA9IGdldFNjaGVtYURvd25sb2FkTG9jYXRpb24obW9ja0NvbnRleHQsIG1vY2tBUElOYW1lKTtcbiAgICBleHBlY3QoZG93bmxvYWRMb2NhdGlvbikudG9FcXVhbChqb2luKGRpcm5hbWUobW9ja1Jlc0RpciksICdncmFwaHFsJywgJ3NjaGVtYS5qc29uJykpO1xuICB9KTtcbn0pO1xuIl19