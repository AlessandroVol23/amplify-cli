aa6a3b7c8a61ba49f8d787e7eaa3b49b
















jest.mock('glob-all');
jest.mock('amplify-graphql-types-generator');
jest.mock('../../src/codegen-config');
jest.mock('../../src/utils');
jest.mock('fs-jetpack');const { sync } = require('glob-all');const path = require('path');const { generate } = require('amplify-graphql-types-generator');const jetpack = require('fs-jetpack');const loadConfig = require('../../src/codegen-config');const generateTypes = require('../../src/commands/types');const constants = require('../../src/constants');const { downloadIntrospectionSchemaWithProgress, getFrontEndHandler } = require('../../src/utils');const MOCK_CONTEXT = { print: { info: jest.fn() } };

const MOCK_INCLUDE_PATH = 'MOCK_INCLUDE';
const MOCK_EXCLUDE_PATH = 'MOCK_EXCLUDE';
const MOCK_QUERIES = ['q1.gql', 'q2.gql'];
const MOCK_SCHEMA = 'INTROSPECTION_SCHEMA.JSON';
const MOCK_TARGET = 'TYPE_SCRIPT_OR_FLOW_OR_ANY_OTHER_LANGUAGE';
const MOCK_GENERATED_FILE_NAME = 'API.TS';
const MOCK_API_ID = 'MOCK_API_ID';
const MOCK_REGION = 'MOCK_AWS_REGION';

const MOCK_PROJECT = {
  excludes: [MOCK_EXCLUDE_PATH],
  includes: [MOCK_INCLUDE_PATH],
  schema: MOCK_SCHEMA,
  amplifyExtension: {
    generatedFileName: MOCK_GENERATED_FILE_NAME,
    codeGenTarget: MOCK_TARGET,
    graphQLApiId: MOCK_API_ID,
    region: MOCK_REGION } };


sync.mockReturnValue(MOCK_QUERIES);

getFrontEndHandler.mockReturnValue('javascript');

describe('command - types', () => {
  beforeEach(() => {
    jest.clearAllMocks();
    jetpack.exists.mockReturnValue(true);
    getFrontEndHandler.mockReturnValue('javascript');
    loadConfig.mockReturnValue({
      getProjects: jest.fn().mockReturnValue([MOCK_PROJECT]) });

  });
  it('should generate types', async () => {
    const forceDownload = false;
    await generateTypes(MOCK_CONTEXT, forceDownload);
    expect(getFrontEndHandler).toHaveBeenCalledWith(MOCK_CONTEXT);
    expect(loadConfig).toHaveBeenCalledWith(MOCK_CONTEXT);
    expect(sync).toHaveBeenCalledWith([MOCK_INCLUDE_PATH, `!${MOCK_EXCLUDE_PATH}`]);
    expect(jetpack.exists).toHaveBeenCalledWith(path.resolve(MOCK_SCHEMA));
    expect(generate).toHaveBeenCalledWith(
    MOCK_QUERIES,
    path.resolve(MOCK_SCHEMA),
    MOCK_GENERATED_FILE_NAME,
    '',
    MOCK_TARGET,
    '',
    { addTypename: true });

  });

  it('should not generate type if the frontend is android', async () => {
    const forceDownload = false;
    getFrontEndHandler.mockReturnValue('android');
    await generateTypes(MOCK_CONTEXT, forceDownload);
    expect(generate).not.toHaveBeenCalled();
  });

  it('should download the schema if forceDownload flag is passed', async () => {
    const forceDownload = true;
    await generateTypes(MOCK_CONTEXT, forceDownload);
    expect(downloadIntrospectionSchemaWithProgress).toHaveBeenCalledWith(
    MOCK_CONTEXT,
    MOCK_API_ID,
    MOCK_SCHEMA,
    MOCK_REGION);

  });

  it('should download the schema if the schema file is missing', async () => {
    jetpack.exists.mockReturnValue(false);
    const forceDownload = false;
    await generateTypes(MOCK_CONTEXT, forceDownload);
    expect(downloadIntrospectionSchemaWithProgress).toHaveBeenCalledWith(
    MOCK_CONTEXT,
    MOCK_API_ID,
    MOCK_SCHEMA,
    MOCK_REGION);

  });

  it('should show a warning if there are no projects configured', async () => {
    loadConfig.mockReturnValue({
      getProjects: jest.fn().mockReturnValue([]) });

    await generateTypes(MOCK_CONTEXT, false);
    expect(MOCK_CONTEXT.print.info).toHaveBeenCalledWith(constants.ERROR_CODEGEN_NO_API_CONFIGURED);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInR5cGVzLnRlc3QuanMiXSwibmFtZXMiOlsiamVzdCIsIm1vY2siLCJzeW5jIiwicmVxdWlyZSIsInBhdGgiLCJnZW5lcmF0ZSIsImpldHBhY2siLCJsb2FkQ29uZmlnIiwiZ2VuZXJhdGVUeXBlcyIsImNvbnN0YW50cyIsImRvd25sb2FkSW50cm9zcGVjdGlvblNjaGVtYVdpdGhQcm9ncmVzcyIsImdldEZyb250RW5kSGFuZGxlciIsIk1PQ0tfQ09OVEVYVCIsInByaW50IiwiaW5mbyIsImZuIiwiTU9DS19JTkNMVURFX1BBVEgiLCJNT0NLX0VYQ0xVREVfUEFUSCIsIk1PQ0tfUVVFUklFUyIsIk1PQ0tfU0NIRU1BIiwiTU9DS19UQVJHRVQiLCJNT0NLX0dFTkVSQVRFRF9GSUxFX05BTUUiLCJNT0NLX0FQSV9JRCIsIk1PQ0tfUkVHSU9OIiwiTU9DS19QUk9KRUNUIiwiZXhjbHVkZXMiLCJpbmNsdWRlcyIsInNjaGVtYSIsImFtcGxpZnlFeHRlbnNpb24iLCJnZW5lcmF0ZWRGaWxlTmFtZSIsImNvZGVHZW5UYXJnZXQiLCJncmFwaFFMQXBpSWQiLCJyZWdpb24iLCJtb2NrUmV0dXJuVmFsdWUiLCJkZXNjcmliZSIsImJlZm9yZUVhY2giLCJjbGVhckFsbE1vY2tzIiwiZXhpc3RzIiwiZ2V0UHJvamVjdHMiLCJpdCIsImZvcmNlRG93bmxvYWQiLCJleHBlY3QiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsInJlc29sdmUiLCJhZGRUeXBlbmFtZSIsIm5vdCIsInRvSGF2ZUJlZW5DYWxsZWQiLCJFUlJPUl9DT0RFR0VOX05PX0FQSV9DT05GSUdVUkVEIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBZ0JBQSxLQUFLQyxJQUFMLENBQVUsVUFBVjtBQUNBRCxLQUFLQyxJQUFMLENBQVUsaUNBQVY7QUFDQUQsS0FBS0MsSUFBTCxDQUFVLDBCQUFWO0FBQ0FELEtBQUtDLElBQUwsQ0FBVSxpQkFBVjtBQUNBRCxLQUFLQyxJQUFMLENBQVUsWUFBVixFQXBC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O0FBT0FQLEtBQUcsNERBQUgsRUFBaUUsWUFBWTtBQUMzRSxVQUFNQyxnQkFBZ0IsSUFBdEI7QUFDQSxVQUFNaEMsY0FBY0ksWUFBZCxFQUE0QjRCLGFBQTVCLENBQU47QUFDQUMsV0FBTy9CLHVDQUFQLEVBQWdEZ0Msb0JBQWhEO0FBQ0U5QixnQkFERjtBQUVFVSxlQUZGO0FBR0VILGVBSEY7QUFJRUksZUFKRjs7QUFNRCxHQVREOztBQVdBZ0IsS0FBRywwREFBSCxFQUErRCxZQUFZO0FBQ3pFakMsWUFBUStCLE1BQVIsQ0FBZUosZUFBZixDQUErQixLQUEvQjtBQUNBLFVBQU1PLGdCQUFnQixLQUF0QjtBQUNBLFVBQU1oQyxjQUFjSSxZQUFkLEVBQTRCNEIsYUFBNUIsQ0FBTjtBQUNBQyxXQUFPL0IsdUNBQVAsRUFBZ0RnQyxvQkFBaEQ7QUFDRTlCLGdCQURGO0FBRUVVLGVBRkY7QUFHRUgsZUFIRjtBQUlFSSxlQUpGOztBQU1ELEdBVkQ7O0FBWUFnQixLQUFHLDJEQUFILEVBQWdFLFlBQVk7QUFDMUVoQyxlQUFXMEIsZUFBWCxDQUEyQjtBQUN6QkssbUJBQWF0QyxLQUFLZSxFQUFMLEdBQVVrQixlQUFWLENBQTBCLEVBQTFCLENBRFksRUFBM0I7O0FBR0EsVUFBTXpCLGNBQWNJLFlBQWQsRUFBNEIsS0FBNUIsQ0FBTjtBQUNBNkIsV0FBTzdCLGFBQWFDLEtBQWIsQ0FBbUJDLElBQTFCLEVBQWdDNEIsb0JBQWhDLENBQXFEakMsVUFBVXNDLCtCQUEvRDtBQUNELEdBTkQ7QUFPRCxDQWhFRCIsImZpbGUiOiJ0eXBlcy50ZXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBzeW5jIH0gPSByZXF1aXJlKCdnbG9iLWFsbCcpO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IHsgZ2VuZXJhdGUgfSA9IHJlcXVpcmUoJ2FtcGxpZnktZ3JhcGhxbC10eXBlcy1nZW5lcmF0b3InKTtcbmNvbnN0IGpldHBhY2sgPSByZXF1aXJlKCdmcy1qZXRwYWNrJyk7XG5cbmNvbnN0IGxvYWRDb25maWcgPSByZXF1aXJlKCcuLi8uLi9zcmMvY29kZWdlbi1jb25maWcnKTtcbmNvbnN0IGdlbmVyYXRlVHlwZXMgPSByZXF1aXJlKCcuLi8uLi9zcmMvY29tbWFuZHMvdHlwZXMnKTtcbmNvbnN0IGNvbnN0YW50cyA9IHJlcXVpcmUoJy4uLy4uL3NyYy9jb25zdGFudHMnKTtcbmNvbnN0IHsgZG93bmxvYWRJbnRyb3NwZWN0aW9uU2NoZW1hV2l0aFByb2dyZXNzLCBnZXRGcm9udEVuZEhhbmRsZXIgfSA9IHJlcXVpcmUoJy4uLy4uL3NyYy91dGlscycpO1xuXG5jb25zdCBNT0NLX0NPTlRFWFQgPSB7XG4gIHByaW50OiB7XG4gICAgaW5mbzogamVzdC5mbigpLFxuICB9LFxufTtcblxuamVzdC5tb2NrKCdnbG9iLWFsbCcpO1xuamVzdC5tb2NrKCdhbXBsaWZ5LWdyYXBocWwtdHlwZXMtZ2VuZXJhdG9yJyk7XG5qZXN0Lm1vY2soJy4uLy4uL3NyYy9jb2RlZ2VuLWNvbmZpZycpO1xuamVzdC5tb2NrKCcuLi8uLi9zcmMvdXRpbHMnKTtcbmplc3QubW9jaygnZnMtamV0cGFjaycpO1xuXG5jb25zdCBNT0NLX0lOQ0xVREVfUEFUSCA9ICdNT0NLX0lOQ0xVREUnO1xuY29uc3QgTU9DS19FWENMVURFX1BBVEggPSAnTU9DS19FWENMVURFJztcbmNvbnN0IE1PQ0tfUVVFUklFUyA9IFsncTEuZ3FsJywgJ3EyLmdxbCddO1xuY29uc3QgTU9DS19TQ0hFTUEgPSAnSU5UUk9TUEVDVElPTl9TQ0hFTUEuSlNPTic7XG5jb25zdCBNT0NLX1RBUkdFVCA9ICdUWVBFX1NDUklQVF9PUl9GTE9XX09SX0FOWV9PVEhFUl9MQU5HVUFHRSc7XG5jb25zdCBNT0NLX0dFTkVSQVRFRF9GSUxFX05BTUUgPSAnQVBJLlRTJztcbmNvbnN0IE1PQ0tfQVBJX0lEID0gJ01PQ0tfQVBJX0lEJztcbmNvbnN0IE1PQ0tfUkVHSU9OID0gJ01PQ0tfQVdTX1JFR0lPTic7XG5cbmNvbnN0IE1PQ0tfUFJPSkVDVCA9IHtcbiAgZXhjbHVkZXM6IFtNT0NLX0VYQ0xVREVfUEFUSF0sXG4gIGluY2x1ZGVzOiBbTU9DS19JTkNMVURFX1BBVEhdLFxuICBzY2hlbWE6IE1PQ0tfU0NIRU1BLFxuICBhbXBsaWZ5RXh0ZW5zaW9uOiB7XG4gICAgZ2VuZXJhdGVkRmlsZU5hbWU6IE1PQ0tfR0VORVJBVEVEX0ZJTEVfTkFNRSxcbiAgICBjb2RlR2VuVGFyZ2V0OiBNT0NLX1RBUkdFVCxcbiAgICBncmFwaFFMQXBpSWQ6IE1PQ0tfQVBJX0lELFxuICAgIHJlZ2lvbjogTU9DS19SRUdJT04sXG4gIH0sXG59O1xuc3luYy5tb2NrUmV0dXJuVmFsdWUoTU9DS19RVUVSSUVTKTtcblxuZ2V0RnJvbnRFbmRIYW5kbGVyLm1vY2tSZXR1cm5WYWx1ZSgnamF2YXNjcmlwdCcpO1xuXG5kZXNjcmliZSgnY29tbWFuZCAtIHR5cGVzJywgKCkgPT4ge1xuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgICBqZXRwYWNrLmV4aXN0cy5tb2NrUmV0dXJuVmFsdWUodHJ1ZSk7XG4gICAgZ2V0RnJvbnRFbmRIYW5kbGVyLm1vY2tSZXR1cm5WYWx1ZSgnamF2YXNjcmlwdCcpO1xuICAgIGxvYWRDb25maWcubW9ja1JldHVyblZhbHVlKHtcbiAgICAgIGdldFByb2plY3RzOiBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKFtNT0NLX1BST0pFQ1RdKSxcbiAgICB9KTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgZ2VuZXJhdGUgdHlwZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgZm9yY2VEb3dubG9hZCA9IGZhbHNlO1xuICAgIGF3YWl0IGdlbmVyYXRlVHlwZXMoTU9DS19DT05URVhULCBmb3JjZURvd25sb2FkKTtcbiAgICBleHBlY3QoZ2V0RnJvbnRFbmRIYW5kbGVyKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChNT0NLX0NPTlRFWFQpO1xuICAgIGV4cGVjdChsb2FkQ29uZmlnKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChNT0NLX0NPTlRFWFQpO1xuICAgIGV4cGVjdChzeW5jKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChbTU9DS19JTkNMVURFX1BBVEgsIGAhJHtNT0NLX0VYQ0xVREVfUEFUSH1gXSk7XG4gICAgZXhwZWN0KGpldHBhY2suZXhpc3RzKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChwYXRoLnJlc29sdmUoTU9DS19TQ0hFTUEpKTtcbiAgICBleHBlY3QoZ2VuZXJhdGUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgTU9DS19RVUVSSUVTLFxuICAgICAgcGF0aC5yZXNvbHZlKE1PQ0tfU0NIRU1BKSxcbiAgICAgIE1PQ0tfR0VORVJBVEVEX0ZJTEVfTkFNRSxcbiAgICAgICcnLFxuICAgICAgTU9DS19UQVJHRVQsXG4gICAgICAnJyxcbiAgICAgIHsgYWRkVHlwZW5hbWU6IHRydWUgfSxcbiAgICApO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIG5vdCBnZW5lcmF0ZSB0eXBlIGlmIHRoZSBmcm9udGVuZCBpcyBhbmRyb2lkJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGZvcmNlRG93bmxvYWQgPSBmYWxzZTtcbiAgICBnZXRGcm9udEVuZEhhbmRsZXIubW9ja1JldHVyblZhbHVlKCdhbmRyb2lkJyk7XG4gICAgYXdhaXQgZ2VuZXJhdGVUeXBlcyhNT0NLX0NPTlRFWFQsIGZvcmNlRG93bmxvYWQpO1xuICAgIGV4cGVjdChnZW5lcmF0ZSkubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBkb3dubG9hZCB0aGUgc2NoZW1hIGlmIGZvcmNlRG93bmxvYWQgZmxhZyBpcyBwYXNzZWQnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgZm9yY2VEb3dubG9hZCA9IHRydWU7XG4gICAgYXdhaXQgZ2VuZXJhdGVUeXBlcyhNT0NLX0NPTlRFWFQsIGZvcmNlRG93bmxvYWQpO1xuICAgIGV4cGVjdChkb3dubG9hZEludHJvc3BlY3Rpb25TY2hlbWFXaXRoUHJvZ3Jlc3MpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgTU9DS19DT05URVhULFxuICAgICAgTU9DS19BUElfSUQsXG4gICAgICBNT0NLX1NDSEVNQSxcbiAgICAgIE1PQ0tfUkVHSU9OLFxuICAgICk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgZG93bmxvYWQgdGhlIHNjaGVtYSBpZiB0aGUgc2NoZW1hIGZpbGUgaXMgbWlzc2luZycsIGFzeW5jICgpID0+IHtcbiAgICBqZXRwYWNrLmV4aXN0cy5tb2NrUmV0dXJuVmFsdWUoZmFsc2UpO1xuICAgIGNvbnN0IGZvcmNlRG93bmxvYWQgPSBmYWxzZTtcbiAgICBhd2FpdCBnZW5lcmF0ZVR5cGVzKE1PQ0tfQ09OVEVYVCwgZm9yY2VEb3dubG9hZCk7XG4gICAgZXhwZWN0KGRvd25sb2FkSW50cm9zcGVjdGlvblNjaGVtYVdpdGhQcm9ncmVzcykudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICBNT0NLX0NPTlRFWFQsXG4gICAgICBNT0NLX0FQSV9JRCxcbiAgICAgIE1PQ0tfU0NIRU1BLFxuICAgICAgTU9DS19SRUdJT04sXG4gICAgKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBzaG93IGEgd2FybmluZyBpZiB0aGVyZSBhcmUgbm8gcHJvamVjdHMgY29uZmlndXJlZCcsIGFzeW5jICgpID0+IHtcbiAgICBsb2FkQ29uZmlnLm1vY2tSZXR1cm5WYWx1ZSh7XG4gICAgICBnZXRQcm9qZWN0czogamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZShbXSksXG4gICAgfSk7XG4gICAgYXdhaXQgZ2VuZXJhdGVUeXBlcyhNT0NLX0NPTlRFWFQsIGZhbHNlKTtcbiAgICBleHBlY3QoTU9DS19DT05URVhULnByaW50LmluZm8pLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGNvbnN0YW50cy5FUlJPUl9DT0RFR0VOX05PX0FQSV9DT05GSUdVUkVEKTtcbiAgfSk7XG59KTtcbiJdfQ==