0e25a14b95690c8fe3c7f617b6cbadef




jest.mock('inquirer');const inquirer = require('inquirer');const askForProject = require('../../../src/walkthrough/questions/selectProject');

describe('Select project', () => {
  const mockContext = 'CONTEXT';
  const mockProjects = [{ name: 'proj1', value: 'prj-1' }, { name: 'Proj2', value: 'prj2' }];
  const selectedProject = 'prj2';

  beforeEach(() => {
    jest.resetAllMocks();
    inquirer.prompt.mockReturnValue({
      projectName: selectedProject });

  });

  it('should show a prompt and allow user to select projects', async () => {
    const answer = await askForProject(mockContext, mockProjects);
    expect(answer).toEqual(selectedProject);
    const promptParam = inquirer.prompt.mock.calls[0][0];
    expect(promptParam[0].type).toEqual('list');
    expect(promptParam[0].name).toEqual('projectName');
    expect(promptParam[0].choices).toEqual(mockProjects);
  });

  it('should not prompt when there is a single project', async () => {
    const answer = await askForProject(mockContext, [mockProjects[0]]);
    expect(answer).toEqual(mockProjects[0].value);
    expect(inquirer.prompt).not.toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlbGVjdFByb2plY3QudGVzdC5qcyJdLCJuYW1lcyI6WyJqZXN0IiwibW9jayIsImlucXVpcmVyIiwicmVxdWlyZSIsImFza0ZvclByb2plY3QiLCJkZXNjcmliZSIsIm1vY2tDb250ZXh0IiwibW9ja1Byb2plY3RzIiwibmFtZSIsInZhbHVlIiwic2VsZWN0ZWRQcm9qZWN0IiwiYmVmb3JlRWFjaCIsInJlc2V0QWxsTW9ja3MiLCJwcm9tcHQiLCJtb2NrUmV0dXJuVmFsdWUiLCJwcm9qZWN0TmFtZSIsIml0IiwiYW5zd2VyIiwiZXhwZWN0IiwidG9FcXVhbCIsInByb21wdFBhcmFtIiwiY2FsbHMiLCJ0eXBlIiwiY2hvaWNlcyIsIm5vdCIsInRvSGF2ZUJlZW5DYWxsZWQiXSwibWFwcGluZ3MiOiI7Ozs7QUFJQUEsS0FBS0MsSUFBTCxDQUFVLFVBQVYsRUFKQSxNQUFNQyxXQUFXQyxRQUFRLFVBQVIsQ0FBakIsQ0FFQSxNQUFNQyxnQkFBZ0JELFFBQVEsa0RBQVIsQ0FBdEI7O0FBSUFFLFNBQVMsZ0JBQVQsRUFBMkIsTUFBTTtBQUMvQixRQUFNQyxjQUFjLFNBQXBCO0FBQ0EsUUFBTUMsZUFBZSxDQUFDLEVBQUVDLE1BQU0sT0FBUixFQUFpQkMsT0FBTyxPQUF4QixFQUFELEVBQW9DLEVBQUVELE1BQU0sT0FBUixFQUFpQkMsT0FBTyxNQUF4QixFQUFwQyxDQUFyQjtBQUNBLFFBQU1DLGtCQUFrQixNQUF4Qjs7QUFFQUMsYUFBVyxNQUFNO0FBQ2ZYLFNBQUtZLGFBQUw7QUFDQVYsYUFBU1csTUFBVCxDQUFnQkMsZUFBaEIsQ0FBZ0M7QUFDOUJDLG1CQUFhTCxlQURpQixFQUFoQzs7QUFHRCxHQUxEOztBQU9BTSxLQUFHLHdEQUFILEVBQTZELFlBQVk7QUFDdkUsVUFBTUMsU0FBUyxNQUFNYixjQUFjRSxXQUFkLEVBQTJCQyxZQUEzQixDQUFyQjtBQUNBVyxXQUFPRCxNQUFQLEVBQWVFLE9BQWYsQ0FBdUJULGVBQXZCO0FBQ0EsVUFBTVUsY0FBY2xCLFNBQVNXLE1BQVQsQ0FBZ0JaLElBQWhCLENBQXFCb0IsS0FBckIsQ0FBMkIsQ0FBM0IsRUFBOEIsQ0FBOUIsQ0FBcEI7QUFDQUgsV0FBT0UsWUFBWSxDQUFaLEVBQWVFLElBQXRCLEVBQTRCSCxPQUE1QixDQUFvQyxNQUFwQztBQUNBRCxXQUFPRSxZQUFZLENBQVosRUFBZVosSUFBdEIsRUFBNEJXLE9BQTVCLENBQW9DLGFBQXBDO0FBQ0FELFdBQU9FLFlBQVksQ0FBWixFQUFlRyxPQUF0QixFQUErQkosT0FBL0IsQ0FBdUNaLFlBQXZDO0FBQ0QsR0FQRDs7QUFTQVMsS0FBRyxrREFBSCxFQUF1RCxZQUFZO0FBQ2pFLFVBQU1DLFNBQVMsTUFBTWIsY0FBY0UsV0FBZCxFQUEyQixDQUFDQyxhQUFhLENBQWIsQ0FBRCxDQUEzQixDQUFyQjtBQUNBVyxXQUFPRCxNQUFQLEVBQWVFLE9BQWYsQ0FBdUJaLGFBQWEsQ0FBYixFQUFnQkUsS0FBdkM7QUFDQVMsV0FBT2hCLFNBQVNXLE1BQWhCLEVBQXdCVyxHQUF4QixDQUE0QkMsZ0JBQTVCO0FBQ0QsR0FKRDtBQUtELENBMUJEIiwiZmlsZSI6InNlbGVjdFByb2plY3QudGVzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGlucXVpcmVyID0gcmVxdWlyZSgnaW5xdWlyZXInKTtcblxuY29uc3QgYXNrRm9yUHJvamVjdCA9IHJlcXVpcmUoJy4uLy4uLy4uL3NyYy93YWxrdGhyb3VnaC9xdWVzdGlvbnMvc2VsZWN0UHJvamVjdCcpO1xuXG5qZXN0Lm1vY2soJ2lucXVpcmVyJyk7XG5cbmRlc2NyaWJlKCdTZWxlY3QgcHJvamVjdCcsICgpID0+IHtcbiAgY29uc3QgbW9ja0NvbnRleHQgPSAnQ09OVEVYVCc7XG4gIGNvbnN0IG1vY2tQcm9qZWN0cyA9IFt7IG5hbWU6ICdwcm9qMScsIHZhbHVlOiAncHJqLTEnIH0sIHsgbmFtZTogJ1Byb2oyJywgdmFsdWU6ICdwcmoyJyB9XTtcbiAgY29uc3Qgc2VsZWN0ZWRQcm9qZWN0ID0gJ3ByajInO1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGplc3QucmVzZXRBbGxNb2NrcygpO1xuICAgIGlucXVpcmVyLnByb21wdC5tb2NrUmV0dXJuVmFsdWUoe1xuICAgICAgcHJvamVjdE5hbWU6IHNlbGVjdGVkUHJvamVjdCxcbiAgICB9KTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBzaG93IGEgcHJvbXB0IGFuZCBhbGxvdyB1c2VyIHRvIHNlbGVjdCBwcm9qZWN0cycsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBhbnN3ZXIgPSBhd2FpdCBhc2tGb3JQcm9qZWN0KG1vY2tDb250ZXh0LCBtb2NrUHJvamVjdHMpO1xuICAgIGV4cGVjdChhbnN3ZXIpLnRvRXF1YWwoc2VsZWN0ZWRQcm9qZWN0KTtcbiAgICBjb25zdCBwcm9tcHRQYXJhbSA9IGlucXVpcmVyLnByb21wdC5tb2NrLmNhbGxzWzBdWzBdO1xuICAgIGV4cGVjdChwcm9tcHRQYXJhbVswXS50eXBlKS50b0VxdWFsKCdsaXN0Jyk7XG4gICAgZXhwZWN0KHByb21wdFBhcmFtWzBdLm5hbWUpLnRvRXF1YWwoJ3Byb2plY3ROYW1lJyk7XG4gICAgZXhwZWN0KHByb21wdFBhcmFtWzBdLmNob2ljZXMpLnRvRXF1YWwobW9ja1Byb2plY3RzKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBub3QgcHJvbXB0IHdoZW4gdGhlcmUgaXMgYSBzaW5nbGUgcHJvamVjdCcsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBhbnN3ZXIgPSBhd2FpdCBhc2tGb3JQcm9qZWN0KG1vY2tDb250ZXh0LCBbbW9ja1Byb2plY3RzWzBdXSk7XG4gICAgZXhwZWN0KGFuc3dlcikudG9FcXVhbChtb2NrUHJvamVjdHNbMF0udmFsdWUpO1xuICAgIGV4cGVjdChpbnF1aXJlci5wcm9tcHQpLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gIH0pO1xufSk7XG4iXX0=