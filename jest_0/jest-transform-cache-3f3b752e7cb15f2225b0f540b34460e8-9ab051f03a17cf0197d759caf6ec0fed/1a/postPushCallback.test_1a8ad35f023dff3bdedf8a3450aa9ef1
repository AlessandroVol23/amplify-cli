e1bed86123ec7a8a292946b4701d8785















jest.mock('../../src/codegen-config');
jest.mock('../../src/utils');const loadConfig = require('../../src/codegen-config');const { downloadIntrospectionSchema, getAppSyncAPIDetails, getSchemaDownloadLocation } = require('../../src/utils');const postPushCallback = require('../../src/callbacks/postPushCallback');const MOCK_CONTEXT = { print: { info: jest.fn() } };

const MOCK_PROJECT_NAME = 'MOCK_PROJECT';
const MOCK_API_ID = 'MOCK_API_ID';
const MOCK_API_ENDPOINT = 'MOCK_API_ENDPOINT';

const MOCK_SELECTED_PROJECT = {
  projectName: MOCK_PROJECT_NAME,
  id: MOCK_API_ID,
  endpoint: MOCK_API_ENDPOINT };

const MOCK_PROJECTS = [MOCK_SELECTED_PROJECT];
const MOCK_SCHEMA_DOWNLOAD_LOCATION = 'MOCK_SCHEMA_DOWNLOAD_MOCK_SCHEMA_DOWNLOAD_LOCATION';
const MOCK_SCHEMA_DOWNLOAD_PATH = 'MOCK_SCHEMA_DOWNLOAD_PATH';
const MOCK_GRAPHQL_CONFIG = {
  gqlConfig: {
    amplifyExtension: {},
    projectName: MOCK_PROJECT_NAME },

  shouldGenerateDocs: true };


const LOAD_CONFIG_METHODS = {
  addProject: jest.fn(),
  save: jest.fn() };


describe('Callback - Post Push update AppSync API', () => {
  beforeEach(() => {
    jest.resetAllMocks();
    loadConfig.mockReturnValue(LOAD_CONFIG_METHODS);
    getAppSyncAPIDetails.mockReturnValue(MOCK_PROJECTS);
    getSchemaDownloadLocation.mockReturnValue(MOCK_SCHEMA_DOWNLOAD_LOCATION);
    downloadIntrospectionSchema.mockReturnValue(MOCK_SCHEMA_DOWNLOAD_PATH);
  });

  it('should update project configuration and generate code', async () => {
    await postPushCallback(MOCK_CONTEXT, { ...MOCK_GRAPHQL_CONFIG });
    expect(loadConfig).toHaveBeenCalledWith(MOCK_CONTEXT);
    expect(getAppSyncAPIDetails).toHaveBeenCalledWith(MOCK_CONTEXT);
    expect(getSchemaDownloadLocation).toHaveBeenCalledWith(MOCK_CONTEXT, MOCK_PROJECT_NAME);
    expect(downloadIntrospectionSchema).toHaveBeenCalledWith(
    MOCK_CONTEXT,
    MOCK_API_ID,
    MOCK_SCHEMA_DOWNLOAD_LOCATION);

    expect(LOAD_CONFIG_METHODS.addProject).toHaveBeenCalled();
    const newProject = LOAD_CONFIG_METHODS.addProject.mock.calls[0][0];
    expect(newProject).toEqual({
      ...MOCK_GRAPHQL_CONFIG.gqlConfig,
      amplifyExtension: {
        ...MOCK_GRAPHQL_CONFIG.gqlConfig.amplifyExtension,
        graphQLApiId: MOCK_API_ID },

      schema: MOCK_SCHEMA_DOWNLOAD_PATH,
      endpoint: MOCK_API_ENDPOINT });

  });

  it('should not save codegen config when graphQLConfig is missing', async () => {
    await postPushCallback(MOCK_CONTEXT, null);
    expect(loadConfig).not.toHaveBeenCalled();
    expect(getAppSyncAPIDetails).not.toHaveBeenCalled();
    expect(getSchemaDownloadLocation).not.toHaveBeenCalled();
    expect(downloadIntrospectionSchema).not.toHaveBeenCalled();
    expect(LOAD_CONFIG_METHODS.addProject).not.toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBvc3RQdXNoQ2FsbGJhY2sudGVzdC5qcyJdLCJuYW1lcyI6WyJqZXN0IiwibW9jayIsImxvYWRDb25maWciLCJyZXF1aXJlIiwiZG93bmxvYWRJbnRyb3NwZWN0aW9uU2NoZW1hIiwiZ2V0QXBwU3luY0FQSURldGFpbHMiLCJnZXRTY2hlbWFEb3dubG9hZExvY2F0aW9uIiwicG9zdFB1c2hDYWxsYmFjayIsIk1PQ0tfQ09OVEVYVCIsInByaW50IiwiaW5mbyIsImZuIiwiTU9DS19QUk9KRUNUX05BTUUiLCJNT0NLX0FQSV9JRCIsIk1PQ0tfQVBJX0VORFBPSU5UIiwiTU9DS19TRUxFQ1RFRF9QUk9KRUNUIiwicHJvamVjdE5hbWUiLCJpZCIsImVuZHBvaW50IiwiTU9DS19QUk9KRUNUUyIsIk1PQ0tfU0NIRU1BX0RPV05MT0FEX0xPQ0FUSU9OIiwiTU9DS19TQ0hFTUFfRE9XTkxPQURfUEFUSCIsIk1PQ0tfR1JBUEhRTF9DT05GSUciLCJncWxDb25maWciLCJhbXBsaWZ5RXh0ZW5zaW9uIiwic2hvdWxkR2VuZXJhdGVEb2NzIiwiTE9BRF9DT05GSUdfTUVUSE9EUyIsImFkZFByb2plY3QiLCJzYXZlIiwiZGVzY3JpYmUiLCJiZWZvcmVFYWNoIiwicmVzZXRBbGxNb2NrcyIsIm1vY2tSZXR1cm5WYWx1ZSIsIml0IiwiZXhwZWN0IiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJ0b0hhdmVCZWVuQ2FsbGVkIiwibmV3UHJvamVjdCIsImNhbGxzIiwidG9FcXVhbCIsImdyYXBoUUxBcGlJZCIsInNjaGVtYSIsIm5vdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBZUFBLEtBQUtDLElBQUwsQ0FBVSwwQkFBVjtBQUNBRCxLQUFLQyxJQUFMLENBQVUsaUJBQVYsRUFoQkEsTUFBTUMsYUFBYUMsUUFBUSwwQkFBUixDQUFuQixDQUNBLE1BQU0sRUFDSkMsMkJBREksRUFFSkMsb0JBRkksRUFHSkMseUJBSEksS0FJRkgsUUFBUSxpQkFBUixDQUpKLENBTUEs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aWcgPSByZXF1aXJlKCcuLi8uLi9zcmMvY29kZWdlbi1jb25maWcnKTtcbmNvbnN0IHtcbiAgZG93bmxvYWRJbnRyb3NwZWN0aW9uU2NoZW1hLFxuICBnZXRBcHBTeW5jQVBJRGV0YWlscyxcbiAgZ2V0U2NoZW1hRG93bmxvYWRMb2NhdGlvbixcbn0gPSByZXF1aXJlKCcuLi8uLi9zcmMvdXRpbHMnKTtcblxuY29uc3QgcG9zdFB1c2hDYWxsYmFjayA9IHJlcXVpcmUoJy4uLy4uL3NyYy9jYWxsYmFja3MvcG9zdFB1c2hDYWxsYmFjaycpO1xuXG5jb25zdCBNT0NLX0NPTlRFWFQgPSB7XG4gIHByaW50OiB7XG4gICAgaW5mbzogamVzdC5mbigpLFxuICB9LFxufTtcblxuamVzdC5tb2NrKCcuLi8uLi9zcmMvY29kZWdlbi1jb25maWcnKTtcbmplc3QubW9jaygnLi4vLi4vc3JjL3V0aWxzJyk7XG5cbmNvbnN0IE1PQ0tfUFJPSkVDVF9OQU1FID0gJ01PQ0tfUFJPSkVDVCc7XG5jb25zdCBNT0NLX0FQSV9JRCA9ICdNT0NLX0FQSV9JRCc7XG5jb25zdCBNT0NLX0FQSV9FTkRQT0lOVCA9ICdNT0NLX0FQSV9FTkRQT0lOVCc7XG5cbmNvbnN0IE1PQ0tfU0VMRUNURURfUFJPSkVDVCA9IHtcbiAgcHJvamVjdE5hbWU6IE1PQ0tfUFJPSkVDVF9OQU1FLFxuICBpZDogTU9DS19BUElfSUQsXG4gIGVuZHBvaW50OiBNT0NLX0FQSV9FTkRQT0lOVCxcbn07XG5jb25zdCBNT0NLX1BST0pFQ1RTID0gW01PQ0tfU0VMRUNURURfUFJPSkVDVF07XG5jb25zdCBNT0NLX1NDSEVNQV9ET1dOTE9BRF9MT0NBVElPTiA9ICdNT0NLX1NDSEVNQV9ET1dOTE9BRF9NT0NLX1NDSEVNQV9ET1dOTE9BRF9MT0NBVElPTic7XG5jb25zdCBNT0NLX1NDSEVNQV9ET1dOTE9BRF9QQVRIID0gJ01PQ0tfU0NIRU1BX0RPV05MT0FEX1BBVEgnO1xuY29uc3QgTU9DS19HUkFQSFFMX0NPTkZJRyA9IHtcbiAgZ3FsQ29uZmlnOiB7XG4gICAgYW1wbGlmeUV4dGVuc2lvbjoge30sXG4gICAgcHJvamVjdE5hbWU6IE1PQ0tfUFJPSkVDVF9OQU1FLFxuICB9LFxuICBzaG91bGRHZW5lcmF0ZURvY3M6IHRydWUsXG59O1xuXG5jb25zdCBMT0FEX0NPTkZJR19NRVRIT0RTID0ge1xuICBhZGRQcm9qZWN0OiBqZXN0LmZuKCksXG4gIHNhdmU6IGplc3QuZm4oKSxcbn07XG5cbmRlc2NyaWJlKCdDYWxsYmFjayAtIFBvc3QgUHVzaCB1cGRhdGUgQXBwU3luYyBBUEknLCAoKSA9PiB7XG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGplc3QucmVzZXRBbGxNb2NrcygpO1xuICAgIGxvYWRDb25maWcubW9ja1JldHVyblZhbHVlKExPQURfQ09ORklHX01FVEhPRFMpO1xuICAgIGdldEFwcFN5bmNBUElEZXRhaWxzLm1vY2tSZXR1cm5WYWx1ZShNT0NLX1BST0pFQ1RTKTtcbiAgICBnZXRTY2hlbWFEb3dubG9hZExvY2F0aW9uLm1vY2tSZXR1cm5WYWx1ZShNT0NLX1NDSEVNQV9ET1dOTE9BRF9MT0NBVElPTik7XG4gICAgZG93bmxvYWRJbnRyb3NwZWN0aW9uU2NoZW1hLm1vY2tSZXR1cm5WYWx1ZShNT0NLX1NDSEVNQV9ET1dOTE9BRF9QQVRIKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCB1cGRhdGUgcHJvamVjdCBjb25maWd1cmF0aW9uIGFuZCBnZW5lcmF0ZSBjb2RlJywgYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IHBvc3RQdXNoQ2FsbGJhY2soTU9DS19DT05URVhULCB7IC4uLk1PQ0tfR1JBUEhRTF9DT05GSUcgfSk7XG4gICAgZXhwZWN0KGxvYWRDb25maWcpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKE1PQ0tfQ09OVEVYVCk7XG4gICAgZXhwZWN0KGdldEFwcFN5bmNBUElEZXRhaWxzKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChNT0NLX0NPTlRFWFQpO1xuICAgIGV4cGVjdChnZXRTY2hlbWFEb3dubG9hZExvY2F0aW9uKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChNT0NLX0NPTlRFWFQsIE1PQ0tfUFJPSkVDVF9OQU1FKTtcbiAgICBleHBlY3QoZG93bmxvYWRJbnRyb3NwZWN0aW9uU2NoZW1hKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgIE1PQ0tfQ09OVEVYVCxcbiAgICAgIE1PQ0tfQVBJX0lELFxuICAgICAgTU9DS19TQ0hFTUFfRE9XTkxPQURfTE9DQVRJT04sXG4gICAgKTtcbiAgICBleHBlY3QoTE9BRF9DT05GSUdfTUVUSE9EUy5hZGRQcm9qZWN0KS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgY29uc3QgbmV3UHJvamVjdCA9IExPQURfQ09ORklHX01FVEhPRFMuYWRkUHJvamVjdC5tb2NrLmNhbGxzWzBdWzBdO1xuICAgIGV4cGVjdChuZXdQcm9qZWN0KS50b0VxdWFsKHtcbiAgICAgIC4uLk1PQ0tfR1JBUEhRTF9DT05GSUcuZ3FsQ29uZmlnLFxuICAgICAgYW1wbGlmeUV4dGVuc2lvbjoge1xuICAgICAgICAuLi5NT0NLX0dSQVBIUUxfQ09ORklHLmdxbENvbmZpZy5hbXBsaWZ5RXh0ZW5zaW9uLFxuICAgICAgICBncmFwaFFMQXBpSWQ6IE1PQ0tfQVBJX0lELFxuICAgICAgfSxcbiAgICAgIHNjaGVtYTogTU9DS19TQ0hFTUFfRE9XTkxPQURfUEFUSCxcbiAgICAgIGVuZHBvaW50OiBNT0NLX0FQSV9FTkRQT0lOVCxcbiAgICB9KTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBub3Qgc2F2ZSBjb2RlZ2VuIGNvbmZpZyB3aGVuIGdyYXBoUUxDb25maWcgaXMgbWlzc2luZycsIGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBwb3N0UHVzaENhbGxiYWNrKE1PQ0tfQ09OVEVYVCwgbnVsbCk7XG4gICAgZXhwZWN0KGxvYWRDb25maWcpLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgZXhwZWN0KGdldEFwcFN5bmNBUElEZXRhaWxzKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIGV4cGVjdChnZXRTY2hlbWFEb3dubG9hZExvY2F0aW9uKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIGV4cGVjdChkb3dubG9hZEludHJvc3BlY3Rpb25TY2hlbWEpLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgZXhwZWN0KExPQURfQ09ORklHX01FVEhPRFMuYWRkUHJvamVjdCkubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgfSk7XG59KTtcbiJdfQ==