78d5bcf990f43a7914f4fefad6e2dcea




jest.mock('inquirer');const inquirer = require('inquirer');const askCodegneQueryFilePattern = require('../../../src/walkthrough/questions/queryFilePattern');

describe('askCodegneQueryFilePattern', () => {
  const includePattern = 'src/**/*.gql';
  inquirer.prompt.mockReturnValue({ includePattern });
  it('should ask user for query file pattern', async () => {
    const answer = await askCodegneQueryFilePattern();
    expect(answer).toEqual([includePattern]);
    const questions = inquirer.prompt.mock.calls[0][0];
    expect(questions[0].name).toEqual('includePattern');
    expect(questions[0].type).toEqual('input');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInF1ZXJ5RmlsZVBhdHRlcm4udGVzdC5qcyJdLCJuYW1lcyI6WyJqZXN0IiwibW9jayIsImlucXVpcmVyIiwicmVxdWlyZSIsImFza0NvZGVnbmVRdWVyeUZpbGVQYXR0ZXJuIiwiZGVzY3JpYmUiLCJpbmNsdWRlUGF0dGVybiIsInByb21wdCIsIm1vY2tSZXR1cm5WYWx1ZSIsIml0IiwiYW5zd2VyIiwiZXhwZWN0IiwidG9FcXVhbCIsInF1ZXN0aW9ucyIsImNhbGxzIiwibmFtZSIsInR5cGUiXSwibWFwcGluZ3MiOiI7Ozs7QUFJQUEsS0FBS0MsSUFBTCxDQUFVLFVBQVYsRUFKQSxNQUFNQyxXQUFXQyxRQUFRLFVBQVIsQ0FBakIsQ0FFQSxNQUFNQyw2QkFBNkJELFFBQVEscURBQVIsQ0FBbkM7O0FBSUFFLFNBQVMsNEJBQVQsRUFBdUMsTUFBTTtBQUMzQyxRQUFNQyxpQkFBaUIsY0FBdkI7QUFDQUosV0FBU0ssTUFBVCxDQUFnQkMsZUFBaEIsQ0FBZ0MsRUFBRUYsY0FBRixFQUFoQztBQUNBRyxLQUFHLHdDQUFILEVBQTZDLFlBQVk7QUFDdkQsVUFBTUMsU0FBUyxNQUFNTiw0QkFBckI7QUFDQU8sV0FBT0QsTUFBUCxFQUFlRSxPQUFmLENBQXVCLENBQUNOLGNBQUQsQ0FBdkI7QUFDQSxVQUFNTyxZQUFZWCxTQUFTSyxNQUFULENBQWdCTixJQUFoQixDQUFxQmEsS0FBckIsQ0FBMkIsQ0FBM0IsRUFBOEIsQ0FBOUIsQ0FBbEI7QUFDQUgsV0FBT0UsVUFBVSxDQUFWLEVBQWFFLElBQXBCLEVBQTBCSCxPQUExQixDQUFrQyxnQkFBbEM7QUFDQUQsV0FBT0UsVUFBVSxDQUFWLEVBQWFHLElBQXBCLEVBQTBCSixPQUExQixDQUFrQyxPQUFsQztBQUNELEdBTkQ7QUFPRCxDQVZEIiwiZmlsZSI6InF1ZXJ5RmlsZVBhdHRlcm4udGVzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGlucXVpcmVyID0gcmVxdWlyZSgnaW5xdWlyZXInKTtcblxuY29uc3QgYXNrQ29kZWduZVF1ZXJ5RmlsZVBhdHRlcm4gPSByZXF1aXJlKCcuLi8uLi8uLi9zcmMvd2Fsa3Rocm91Z2gvcXVlc3Rpb25zL3F1ZXJ5RmlsZVBhdHRlcm4nKTtcblxuamVzdC5tb2NrKCdpbnF1aXJlcicpO1xuXG5kZXNjcmliZSgnYXNrQ29kZWduZVF1ZXJ5RmlsZVBhdHRlcm4nLCAoKSA9PiB7XG4gIGNvbnN0IGluY2x1ZGVQYXR0ZXJuID0gJ3NyYy8qKi8qLmdxbCc7XG4gIGlucXVpcmVyLnByb21wdC5tb2NrUmV0dXJuVmFsdWUoeyBpbmNsdWRlUGF0dGVybiB9KTtcbiAgaXQoJ3Nob3VsZCBhc2sgdXNlciBmb3IgcXVlcnkgZmlsZSBwYXR0ZXJuJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGFuc3dlciA9IGF3YWl0IGFza0NvZGVnbmVRdWVyeUZpbGVQYXR0ZXJuKCk7XG4gICAgZXhwZWN0KGFuc3dlcikudG9FcXVhbChbaW5jbHVkZVBhdHRlcm5dKTtcbiAgICBjb25zdCBxdWVzdGlvbnMgPSBpbnF1aXJlci5wcm9tcHQubW9jay5jYWxsc1swXVswXTtcbiAgICBleHBlY3QocXVlc3Rpb25zWzBdLm5hbWUpLnRvRXF1YWwoJ2luY2x1ZGVQYXR0ZXJuJyk7XG4gICAgZXhwZWN0KHF1ZXN0aW9uc1swXS50eXBlKS50b0VxdWFsKCdpbnB1dCcpO1xuICB9KTtcbn0pO1xuIl19