0da05837faed2dd2e34115b19c2649d0











jest.mock('../../src/walkthrough/add');
jest.mock('../../src/walkthrough/questions/generateCode');const addWalkthrough = require('../../src/walkthrough/add');const askShouldGenerateCode = require('../../src/walkthrough/questions/generateCode');const prePushAddCallback = require('../../src/callbacks/prePushAddCallback');const MOCK_CONTEXT = { exeInfo: {}, print: { info: jest.fn() } };

const MOCK_RESOURCE_NAME = 'MOCK_API_NAME';
const MOCK_INCLUDE_PATTERN = 'MOCK_INCLUDE';
const MOCK_EXCLUDE_PATTERN = 'MOCK_EXCLUDE';
const MOCK_TARGET = 'TYPE_SCRIPT_OR_FLOW_OR_ANY_OTHER_LANGUAGE';
const MOCK_GENERATED_FILE_NAME = 'API.TS';
const MOCK_DOCS_FILE_PATH = 'MOCK_DOCS_FILE_PATH';
const SHOULD_GENERATE_DOC = 'YES';

const MOCK_ANSWERS = {
  includePattern: MOCK_INCLUDE_PATTERN,
  excludePattern: MOCK_EXCLUDE_PATTERN,
  target: MOCK_TARGET,
  generatedFileName: MOCK_GENERATED_FILE_NAME,
  docsFilePath: MOCK_DOCS_FILE_PATH,
  shouldGenerateDocs: SHOULD_GENERATE_DOC };


describe('callback - prePushAddCallback', () => {
  beforeEach(() => {
    jest.resetAllMocks();
    addWalkthrough.mockReturnValue(MOCK_ANSWERS);
    askShouldGenerateCode.mockReturnValue(true);
  });

  it('should walkthrough add questions', async () => {
    const { gqlConfig, shouldGenerateDocs } = await prePushAddCallback(
    MOCK_CONTEXT,
    MOCK_RESOURCE_NAME);


    expect(gqlConfig).toEqual({
      projectName: MOCK_RESOURCE_NAME,
      includes: MOCK_INCLUDE_PATTERN,
      excludes: MOCK_EXCLUDE_PATTERN,
      amplifyExtension: {
        codeGenTarget: MOCK_TARGET,
        generatedFileName: MOCK_GENERATED_FILE_NAME,
        docsFilePath: MOCK_DOCS_FILE_PATH } });



    expect(shouldGenerateDocs).toBe(SHOULD_GENERATE_DOC);
  });

  it('should not ask any question if user declines codeGeneration', async () => {
    askShouldGenerateCode.mockReturnValue(false);
    const result = await prePushAddCallback(MOCK_CONTEXT, MOCK_RESOURCE_NAME);
    expect(result).toBeUndefined();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByZVB1c2hBZGRDYWxsYmFjay50ZXN0LmpzIl0sIm5hbWVzIjpbImplc3QiLCJtb2NrIiwiYWRkV2Fsa3Rocm91Z2giLCJyZXF1aXJlIiwiYXNrU2hvdWxkR2VuZXJhdGVDb2RlIiwicHJlUHVzaEFkZENhbGxiYWNrIiwiTU9DS19DT05URVhUIiwiZXhlSW5mbyIsInByaW50IiwiaW5mbyIsImZuIiwiTU9DS19SRVNPVVJDRV9OQU1FIiwiTU9DS19JTkNMVURFX1BBVFRFUk4iLCJNT0NLX0VYQ0xVREVfUEFUVEVSTiIsIk1PQ0tfVEFSR0VUIiwiTU9DS19HRU5FUkFURURfRklMRV9OQU1FIiwiTU9DS19ET0NTX0ZJTEVfUEFUSCIsIlNIT1VMRF9HRU5FUkFURV9ET0MiLCJNT0NLX0FOU1dFUlMiLCJpbmNsdWRlUGF0dGVybiIsImV4Y2x1ZGVQYXR0ZXJuIiwidGFyZ2V0IiwiZ2VuZXJhdGVkRmlsZU5hbWUiLCJkb2NzRmlsZVBhdGgiLCJzaG91bGRHZW5lcmF0ZURvY3MiLCJkZXNjcmliZSIsImJlZm9yZUVhY2giLCJyZXNldEFsbE1vY2tzIiwibW9ja1JldHVyblZhbHVlIiwiaXQiLCJncWxDb25maWciLCJleHBlY3QiLCJ0b0VxdWFsIiwicHJvamVjdE5hbWUiLCJpbmNsdWRlcyIsImV4Y2x1ZGVzIiwiYW1wbGlmeUV4dGVuc2lvbiIsImNvZGVHZW5UYXJnZXQiLCJ0b0JlIiwicmVzdWx0IiwidG9CZVVuZGVmaW5lZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFXQUEsS0FBS0MsSUFBTCxDQUFVLDJCQUFWO0FBQ0FELEtBQUtDLElBQUwsQ0FBVSw4Q0FBVixFQVpBLE1BQU1DLGlCQUFpQkMsUUFBUSwyQkFBUixDQUF2QixDQUNBLE1BQU1DLHdCQUF3QkQsUUFBUSw4Q0FBUixDQUE5QixDQUVBLE1BQU1FLHFCQUFxQkYsUUFBUSx3Q0FBUixDQUEzQixDQUVBLE1BQU1HLGVBQWUsRUFDbkJDLFNBQVMsRUFEVSxFQUVuQkMsT0FBTyxFQUNMQyxNQUFNVCxLQUFLVSxFQUFMLEVBREQsRUFGWSxFQUFyQjs7QUFTQSxNQUFNQyxxQkFBcUIsZUFBM0I7QUFDQSxNQUFNQyx1QkFBdUIsY0FBN0I7QUFDQSxNQUFNQyx1QkFBdUIsY0FBN0I7QUFDQSxNQUFNQyxjQUFjLDJDQUFwQjtBQUNBLE1BQU1DLDJCQUEyQixRQUFqQztBQUNBLE1BQU1DLHNCQUFzQixxQkFBNUI7QUFDQSxNQUFNQyxzQkFBc0IsS0FBNUI7O0FBRUEsTUFBTUMsZUFBZTtBQUNuQkMsa0JBQWdCUCxvQkFERztBQUVuQlEsa0JBQWdCUCxvQkFGRztBQUduQlEsVUFBUVAsV0FIVztBQUluQlEscUJBQW1CUCx3QkFKQTtBQUtuQlEsZ0JBQWNQLG1CQUxLO0FBTW5CUSxzQkFBb0JQLG1CQU5ELEVBQXJCOzs7QUFTQVEsU0FBUywrQkFBVCxFQUEwQyxNQUFNO0FBQzlDQyxhQUFXLE1BQU07QUFDZjFCLFNBQUsyQixhQUFMO0FBQ0F6QixtQkFBZTBCLGVBQWYsQ0FBK0JWLFlBQS9CO0FBQ0FkLDBCQUFzQndCLGVBQXRCLENBQXNDLElBQXRDO0FBQ0QsR0FKRDs7QUFNQUMsS0FBRyxrQ0FBSCxFQUF1QyxZQUFZO0FBQ2pELFVBQU0sRUFBRUMsU0FBRixFQUFhTixrQkFBYixLQUFvQyxNQUFNbkI7QUFDOUNDLGdCQUQ4QztBQUU5Q0ssc0JBRjhDLENBQWhEOzs7QUFLQW9CLFdBQU9ELFNBQVAsRUFBa0JFLE9BQWxCLENBQTBCO0FBQ3hCQyxtQkFBYXRCLGtCQURXO0FBRXhCdUIsZ0JBQVV0QixvQkFGYztBQUd4QnVCLGdCQUFVdEIsb0JBSGM7QUFJeEJ1Qix3QkFBa0I7QUFDaEJDLHVCQUFldkIsV0FEQztBQUVoQlEsMkJBQW1CUCx3QkFGSDtBQUdoQlEsc0JBQWNQLG1CQUhFLEVBSk0sRUFBMUI7Ozs7QUFXQWUsV0FBT1Asa0JBQVAsRUFBMkJjLElBQTNCLENBQWdDckIsbUJBQWhDO0FBQ0QsR0FsQkQ7O0FBb0JBWSxLQUFHLDZEQUFILEVBQWtFLFlBQVk7QUFDNUV6QiwwQkFBc0J3QixlQUF0QixDQUFzQyxLQUF0QztBQUNBLFVBQU1XLFNBQVMsTUFBTWxDLG1CQUFtQkMsWUFBbkIsRUFBaUNLLGtCQUFqQyxDQUFyQjtBQUNBb0IsV0FBT1EsTUFBUCxFQUFlQyxhQUFmO0FBQ0QsR0FKRDtBQUtELENBaENEIiwiZmlsZSI6InByZVB1c2hBZGRDYWxsYmFjay50ZXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgYWRkV2Fsa3Rocm91Z2ggPSByZXF1aXJlKCcuLi8uLi9zcmMvd2Fsa3Rocm91Z2gvYWRkJyk7XG5jb25zdCBhc2tTaG91bGRHZW5lcmF0ZUNvZGUgPSByZXF1aXJlKCcuLi8uLi9zcmMvd2Fsa3Rocm91Z2gvcXVlc3Rpb25zL2dlbmVyYXRlQ29kZScpO1xuXG5jb25zdCBwcmVQdXNoQWRkQ2FsbGJhY2sgPSByZXF1aXJlKCcuLi8uLi9zcmMvY2FsbGJhY2tzL3ByZVB1c2hBZGRDYWxsYmFjaycpO1xuXG5jb25zdCBNT0NLX0NPTlRFWFQgPSB7XG4gIGV4ZUluZm86IHt9LFxuICBwcmludDoge1xuICAgIGluZm86IGplc3QuZm4oKSxcbiAgfSxcbn07XG5qZXN0Lm1vY2soJy4uLy4uL3NyYy93YWxrdGhyb3VnaC9hZGQnKTtcbmplc3QubW9jaygnLi4vLi4vc3JjL3dhbGt0aHJvdWdoL3F1ZXN0aW9ucy9nZW5lcmF0ZUNvZGUnKTtcblxuY29uc3QgTU9DS19SRVNPVVJDRV9OQU1FID0gJ01PQ0tfQVBJX05BTUUnO1xuY29uc3QgTU9DS19JTkNMVURFX1BBVFRFUk4gPSAnTU9DS19JTkNMVURFJztcbmNvbnN0IE1PQ0tfRVhDTFVERV9QQVRURVJOID0gJ01PQ0tfRVhDTFVERSc7XG5jb25zdCBNT0NLX1RBUkdFVCA9ICdUWVBFX1NDUklQVF9PUl9GTE9XX09SX0FOWV9PVEhFUl9MQU5HVUFHRSc7XG5jb25zdCBNT0NLX0dFTkVSQVRFRF9GSUxFX05BTUUgPSAnQVBJLlRTJztcbmNvbnN0IE1PQ0tfRE9DU19GSUxFX1BBVEggPSAnTU9DS19ET0NTX0ZJTEVfUEFUSCc7XG5jb25zdCBTSE9VTERfR0VORVJBVEVfRE9DID0gJ1lFUyc7XG5cbmNvbnN0IE1PQ0tfQU5TV0VSUyA9IHtcbiAgaW5jbHVkZVBhdHRlcm46IE1PQ0tfSU5DTFVERV9QQVRURVJOLFxuICBleGNsdWRlUGF0dGVybjogTU9DS19FWENMVURFX1BBVFRFUk4sXG4gIHRhcmdldDogTU9DS19UQVJHRVQsXG4gIGdlbmVyYXRlZEZpbGVOYW1lOiBNT0NLX0dFTkVSQVRFRF9GSUxFX05BTUUsXG4gIGRvY3NGaWxlUGF0aDogTU9DS19ET0NTX0ZJTEVfUEFUSCxcbiAgc2hvdWxkR2VuZXJhdGVEb2NzOiBTSE9VTERfR0VORVJBVEVfRE9DLFxufTtcblxuZGVzY3JpYmUoJ2NhbGxiYWNrIC0gcHJlUHVzaEFkZENhbGxiYWNrJywgKCkgPT4ge1xuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBqZXN0LnJlc2V0QWxsTW9ja3MoKTtcbiAgICBhZGRXYWxrdGhyb3VnaC5tb2NrUmV0dXJuVmFsdWUoTU9DS19BTlNXRVJTKTtcbiAgICBhc2tTaG91bGRHZW5lcmF0ZUNvZGUubW9ja1JldHVyblZhbHVlKHRydWUpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHdhbGt0aHJvdWdoIGFkZCBxdWVzdGlvbnMnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgeyBncWxDb25maWcsIHNob3VsZEdlbmVyYXRlRG9jcyB9ID0gYXdhaXQgcHJlUHVzaEFkZENhbGxiYWNrKFxuICAgICAgTU9DS19DT05URVhULFxuICAgICAgTU9DS19SRVNPVVJDRV9OQU1FLFxuICAgICk7XG5cbiAgICBleHBlY3QoZ3FsQ29uZmlnKS50b0VxdWFsKHtcbiAgICAgIHByb2plY3ROYW1lOiBNT0NLX1JFU09VUkNFX05BTUUsXG4gICAgICBpbmNsdWRlczogTU9DS19JTkNMVURFX1BBVFRFUk4sXG4gICAgICBleGNsdWRlczogTU9DS19FWENMVURFX1BBVFRFUk4sXG4gICAgICBhbXBsaWZ5RXh0ZW5zaW9uOiB7XG4gICAgICAgIGNvZGVHZW5UYXJnZXQ6IE1PQ0tfVEFSR0VULFxuICAgICAgICBnZW5lcmF0ZWRGaWxlTmFtZTogTU9DS19HRU5FUkFURURfRklMRV9OQU1FLFxuICAgICAgICBkb2NzRmlsZVBhdGg6IE1PQ0tfRE9DU19GSUxFX1BBVEgsXG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgZXhwZWN0KHNob3VsZEdlbmVyYXRlRG9jcykudG9CZShTSE9VTERfR0VORVJBVEVfRE9DKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBub3QgYXNrIGFueSBxdWVzdGlvbiBpZiB1c2VyIGRlY2xpbmVzIGNvZGVHZW5lcmF0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgIGFza1Nob3VsZEdlbmVyYXRlQ29kZS5tb2NrUmV0dXJuVmFsdWUoZmFsc2UpO1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHByZVB1c2hBZGRDYWxsYmFjayhNT0NLX0NPTlRFWFQsIE1PQ0tfUkVTT1VSQ0VfTkFNRSk7XG4gICAgZXhwZWN0KHJlc3VsdCkudG9CZVVuZGVmaW5lZCgpO1xuICB9KTtcbn0pO1xuIl19