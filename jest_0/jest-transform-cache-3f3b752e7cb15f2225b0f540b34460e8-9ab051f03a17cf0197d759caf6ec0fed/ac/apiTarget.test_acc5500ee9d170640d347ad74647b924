c5edf3ab4db686d7f2b3765167cf1860




jest.mock('inquirer');const inquirer = require('inquirer');const askAppSyncAPITarget = require('../../../src/walkthrough/questions/apiTarget');

describe('askAppSyncAPITarget', () => {
  const mockContext = 'MOCK_CONTEXT';
  const selectedAPI = 'appsync-selected-api';
  const appSyncAPIs = [{ name: 'api1', id: selectedAPI }, { name: 'api2', id: 'non-selected-api' }];

  beforeEach(() => {
    jest.resetAllMocks();
    inquirer.prompt.mockReturnValue({ apiId: selectedAPI });
  });

  it('should show a list of APIs', async () => {
    const api = await askAppSyncAPITarget(mockContext, appSyncAPIs, selectedAPI);
    expect(api).toEqual(selectedAPI);
    const promptParams = inquirer.prompt.mock.calls[0][0];
    const expectedChoices = appSyncAPIs.map(a => ({ name: a.name, value: a.id }));
    expect(promptParams[0].choices).toEqual(expectedChoices);
    expect(promptParams[0].type).toEqual('list');
  });

  it('should not prompt if there is only one API available', async () => {
    const api = await askAppSyncAPITarget(mockContext, [appSyncAPIs[0]], selectedAPI);
    expect(api).toEqual(appSyncAPIs[0].id);
    expect(inquirer.prompt).not.toHaveBeenCalled();
  });

  it('should use the selected API as default value for choice', async () => {
    await askAppSyncAPITarget(mockContext, appSyncAPIs, selectedAPI);
    const promptParams = inquirer.prompt.mock.calls[0][0];
    expect(promptParams[0].default).toEqual(selectedAPI);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaVRhcmdldC50ZXN0LmpzIl0sIm5hbWVzIjpbImplc3QiLCJtb2NrIiwiaW5xdWlyZXIiLCJyZXF1aXJlIiwiYXNrQXBwU3luY0FQSVRhcmdldCIsImRlc2NyaWJlIiwibW9ja0NvbnRleHQiLCJzZWxlY3RlZEFQSSIsImFwcFN5bmNBUElzIiwibmFtZSIsImlkIiwiYmVmb3JlRWFjaCIsInJlc2V0QWxsTW9ja3MiLCJwcm9tcHQiLCJtb2NrUmV0dXJuVmFsdWUiLCJhcGlJZCIsIml0IiwiYXBpIiwiZXhwZWN0IiwidG9FcXVhbCIsInByb21wdFBhcmFtcyIsImNhbGxzIiwiZXhwZWN0ZWRDaG9pY2VzIiwibWFwIiwiYSIsInZhbHVlIiwiY2hvaWNlcyIsInR5cGUiLCJub3QiLCJ0b0hhdmVCZWVuQ2FsbGVkIiwiZGVmYXVsdCJdLCJtYXBwaW5ncyI6Ijs7OztBQUlBQSxLQUFLQyxJQUFMLENBQVUsVUFBVixFQUpBLE1BQU1DLFdBQVdDLFFBQVEsVUFBUixDQUFqQixDQUVBLE1BQU1DLHNCQUFzQkQsUUFBUSw4Q0FBUixDQUE1Qjs7QUFJQUUsU0FBUyxxQkFBVCxFQUFnQyxNQUFNO0FBQ3BDLFFBQU1DLGNBQWMsY0FBcEI7QUFDQSxRQUFNQyxjQUFjLHNCQUFwQjtBQUNBLFFBQU1DLGNBQWMsQ0FBQyxFQUFFQyxNQUFNLE1BQVIsRUFBZ0JDLElBQUlILFdBQXBCLEVBQUQsRUFBb0MsRUFBRUUsTUFBTSxNQUFSLEVBQWdCQyxJQUFJLGtCQUFwQixFQUFwQyxDQUFwQjs7QUFFQUMsYUFBVyxNQUFNO0FBQ2ZYLFNBQUtZLGFBQUw7QUFDQVYsYUFBU1csTUFBVCxDQUFnQkMsZUFBaEIsQ0FBZ0MsRUFBRUMsT0FBT1IsV0FBVCxFQUFoQztBQUNELEdBSEQ7O0FBS0FTLEtBQUcsNEJBQUgsRUFBaUMsWUFBWTtBQUMzQyxVQUFNQyxNQUFNLE1BQU1iLG9CQUFvQkUsV0FBcEIsRUFBaUNFLFdBQWpDLEVBQThDRCxXQUE5QyxDQUFsQjtBQUNBVyxXQUFPRCxHQUFQLEVBQVlFLE9BQVosQ0FBb0JaLFdBQXBCO0FBQ0EsVUFBTWEsZUFBZWxCLFNBQVNXLE1BQVQsQ0FBZ0JaLElBQWhCLENBQXFCb0IsS0FBckIsQ0FBMkIsQ0FBM0IsRUFBOEIsQ0FBOUIsQ0FBckI7QUFDQSxVQUFNQyxrQkFBa0JkLFlBQVllLEdBQVosQ0FBZ0JDLE1BQU0sRUFBRWYsTUFBTWUsRUFBRWYsSUFBVixFQUFnQmdCLE9BQU9ELEVBQUVkLEVBQXpCLEVBQU4sQ0FBaEIsQ0FBeEI7QUFDQVEsV0FBT0UsYUFBYSxDQUFiLEVBQWdCTSxPQUF2QixFQUFnQ1AsT0FBaEMsQ0FBd0NHLGVBQXhDO0FBQ0FKLFdBQU9FLGFBQWEsQ0FBYixFQUFnQk8sSUFBdkIsRUFBNkJSLE9BQTdCLENBQXFDLE1BQXJDO0FBQ0QsR0FQRDs7QUFTQUgsS0FBRyxzREFBSCxFQUEyRCxZQUFZO0FBQ3JFLFVBQU1DLE1BQU0sTUFBTWIsb0JBQW9CRSxXQUFwQixFQUFpQyxDQUFDRSxZQUFZLENBQVosQ0FBRCxDQUFqQyxFQUFtREQsV0FBbkQsQ0FBbEI7QUFDQVcsV0FBT0QsR0FBUCxFQUFZRSxPQUFaLENBQW9CWCxZQUFZLENBQVosRUFBZUUsRUFBbkM7QUFDQVEsV0FBT2hCLFNBQVNXLE1BQWhCLEVBQXdCZSxHQUF4QixDQUE0QkMsZ0JBQTVCO0FBQ0QsR0FKRDs7QUFNQWIsS0FBRyx5REFBSCxFQUE4RCxZQUFZO0FBQ3hFLFVBQU1aLG9CQUFvQkUsV0FBcEIsRUFBaUNFLFdBQWpDLEVBQThDRCxXQUE5QyxDQUFOO0FBQ0EsVUFBTWEsZUFBZWxCLFNBQVNXLE1BQVQsQ0FBZ0JaLElBQWhCLENBQXFCb0IsS0FBckIsQ0FBMkIsQ0FBM0IsRUFBOEIsQ0FBOUIsQ0FBckI7QUFDQUgsV0FBT0UsYUFBYSxDQUFiLEVBQWdCVSxPQUF2QixFQUFnQ1gsT0FBaEMsQ0FBd0NaLFdBQXhDO0FBQ0QsR0FKRDtBQUtELENBOUJEIiwiZmlsZSI6ImFwaVRhcmdldC50ZXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgaW5xdWlyZXIgPSByZXF1aXJlKCdpbnF1aXJlcicpO1xuXG5jb25zdCBhc2tBcHBTeW5jQVBJVGFyZ2V0ID0gcmVxdWlyZSgnLi4vLi4vLi4vc3JjL3dhbGt0aHJvdWdoL3F1ZXN0aW9ucy9hcGlUYXJnZXQnKTtcblxuamVzdC5tb2NrKCdpbnF1aXJlcicpO1xuXG5kZXNjcmliZSgnYXNrQXBwU3luY0FQSVRhcmdldCcsICgpID0+IHtcbiAgY29uc3QgbW9ja0NvbnRleHQgPSAnTU9DS19DT05URVhUJztcbiAgY29uc3Qgc2VsZWN0ZWRBUEkgPSAnYXBwc3luYy1zZWxlY3RlZC1hcGknO1xuICBjb25zdCBhcHBTeW5jQVBJcyA9IFt7IG5hbWU6ICdhcGkxJywgaWQ6IHNlbGVjdGVkQVBJIH0sIHsgbmFtZTogJ2FwaTInLCBpZDogJ25vbi1zZWxlY3RlZC1hcGknIH1dO1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGplc3QucmVzZXRBbGxNb2NrcygpO1xuICAgIGlucXVpcmVyLnByb21wdC5tb2NrUmV0dXJuVmFsdWUoeyBhcGlJZDogc2VsZWN0ZWRBUEkgfSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgc2hvdyBhIGxpc3Qgb2YgQVBJcycsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBhcGkgPSBhd2FpdCBhc2tBcHBTeW5jQVBJVGFyZ2V0KG1vY2tDb250ZXh0LCBhcHBTeW5jQVBJcywgc2VsZWN0ZWRBUEkpO1xuICAgIGV4cGVjdChhcGkpLnRvRXF1YWwoc2VsZWN0ZWRBUEkpO1xuICAgIGNvbnN0IHByb21wdFBhcmFtcyA9IGlucXVpcmVyLnByb21wdC5tb2NrLmNhbGxzWzBdWzBdO1xuICAgIGNvbnN0IGV4cGVjdGVkQ2hvaWNlcyA9IGFwcFN5bmNBUElzLm1hcChhID0+ICh7IG5hbWU6IGEubmFtZSwgdmFsdWU6IGEuaWQgfSkpO1xuICAgIGV4cGVjdChwcm9tcHRQYXJhbXNbMF0uY2hvaWNlcykudG9FcXVhbChleHBlY3RlZENob2ljZXMpO1xuICAgIGV4cGVjdChwcm9tcHRQYXJhbXNbMF0udHlwZSkudG9FcXVhbCgnbGlzdCcpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIG5vdCBwcm9tcHQgaWYgdGhlcmUgaXMgb25seSBvbmUgQVBJIGF2YWlsYWJsZScsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBhcGkgPSBhd2FpdCBhc2tBcHBTeW5jQVBJVGFyZ2V0KG1vY2tDb250ZXh0LCBbYXBwU3luY0FQSXNbMF1dLCBzZWxlY3RlZEFQSSk7XG4gICAgZXhwZWN0KGFwaSkudG9FcXVhbChhcHBTeW5jQVBJc1swXS5pZCk7XG4gICAgZXhwZWN0KGlucXVpcmVyLnByb21wdCkubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCB1c2UgdGhlIHNlbGVjdGVkIEFQSSBhcyBkZWZhdWx0IHZhbHVlIGZvciBjaG9pY2UnLCBhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgYXNrQXBwU3luY0FQSVRhcmdldChtb2NrQ29udGV4dCwgYXBwU3luY0FQSXMsIHNlbGVjdGVkQVBJKTtcbiAgICBjb25zdCBwcm9tcHRQYXJhbXMgPSBpbnF1aXJlci5wcm9tcHQubW9jay5jYWxsc1swXVswXTtcbiAgICBleHBlY3QocHJvbXB0UGFyYW1zWzBdLmRlZmF1bHQpLnRvRXF1YWwoc2VsZWN0ZWRBUEkpO1xuICB9KTtcbn0pO1xuIl19