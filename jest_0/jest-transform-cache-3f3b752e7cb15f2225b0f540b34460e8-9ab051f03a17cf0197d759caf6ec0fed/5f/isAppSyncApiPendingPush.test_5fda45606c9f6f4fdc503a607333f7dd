4f713597b4c4e7ebe554741c07e1187a
const isAppSyncApiPendingPush = require('../../src/utils/isAppSyncApiPendingPush');

const mockGetResourceStatus = jest.fn();
const MOCK_CONTEXT = {
  amplify: {
    getResourceStatus: mockGetResourceStatus } };



let resourceStatus = {};
describe('isAppSyncApiPendingPush', () => {
  beforeEach(() => {
    jest.resetAllMocks();
    resourceStatus = {
      resourcesToBeCreated: [],
      resourcesToBeUpdated: [],
      resourcesToBeDeleted: [] };

    mockGetResourceStatus.mockReturnValue(resourceStatus);
  });

  it('should return false if there is a resource to be created', async () => {
    const status = await isAppSyncApiPendingPush(MOCK_CONTEXT);
    expect(status).toBeFalsy();
  });

  it('should return false if pending push is a non AppSync resource', async () => {
    resourceStatus.resourcesToBeCreated = [
    {
      service: 'something else' }];


    resourceStatus.resourcesToBeUpdated = [
    {
      service: 'something else' }];


    resourceStatus.resourcesToBeDeleted = [
    {
      service: 'something else' }];



    const status = await isAppSyncApiPendingPush(MOCK_CONTEXT);
    expect(status).toBeFalsy();
  });

  it('should return true if resourcesToBeCreated contains AppSync resource', async () => {
    resourceStatus.resourcesToBeCreated = [
    {
      service: 'AppSync' }];



    const status = await isAppSyncApiPendingPush(MOCK_CONTEXT);
    expect(status).toBeTruthy();
  });

  it('should return true if resourcesToBeUpdated contains AppSync resource', async () => {
    resourceStatus.resourcesToBeUpdated = [
    {
      service: 'AppSync' }];



    const status = await isAppSyncApiPendingPush(MOCK_CONTEXT);
    expect(status).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlzQXBwU3luY0FwaVBlbmRpbmdQdXNoLnRlc3QuanMiXSwibmFtZXMiOlsiaXNBcHBTeW5jQXBpUGVuZGluZ1B1c2giLCJyZXF1aXJlIiwibW9ja0dldFJlc291cmNlU3RhdHVzIiwiamVzdCIsImZuIiwiTU9DS19DT05URVhUIiwiYW1wbGlmeSIsImdldFJlc291cmNlU3RhdHVzIiwicmVzb3VyY2VTdGF0dXMiLCJkZXNjcmliZSIsImJlZm9yZUVhY2giLCJyZXNldEFsbE1vY2tzIiwicmVzb3VyY2VzVG9CZUNyZWF0ZWQiLCJyZXNvdXJjZXNUb0JlVXBkYXRlZCIsInJlc291cmNlc1RvQmVEZWxldGVkIiwibW9ja1JldHVyblZhbHVlIiwiaXQiLCJzdGF0dXMiLCJleHBlY3QiLCJ0b0JlRmFsc3kiLCJzZXJ2aWNlIiwidG9CZVRydXRoeSJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsMEJBQTBCQyxRQUFRLHlDQUFSLENBQWhDOztBQUVBLE1BQU1DLHdCQUF3QkMsS0FBS0MsRUFBTCxFQUE5QjtBQUNBLE1BQU1DLGVBQWU7QUFDbkJDLFdBQVM7QUFDUEMsdUJBQW1CTCxxQkFEWixFQURVLEVBQXJCOzs7O0FBTUEsSUFBSU0saUJBQWlCLEVBQXJCO0FBQ0FDLFNBQVMseUJBQVQsRUFBb0MsTUFBTTtBQUN4Q0MsYUFBVyxNQUFNO0FBQ2ZQLFNBQUtRLGFBQUw7QUFDQUgscUJBQWlCO0FBQ2ZJLDRCQUFzQixFQURQO0FBRWZDLDRCQUFzQixFQUZQO0FBR2ZDLDRCQUFzQixFQUhQLEVBQWpCOztBQUtBWiwwQkFBc0JhLGVBQXRCLENBQXNDUCxjQUF0QztBQUNELEdBUkQ7O0FBVUFRLEtBQUcsMERBQUgsRUFBK0QsWUFBWTtBQUN6RSxVQUFNQyxTQUFTLE1BQU1qQix3QkFBd0JLLFlBQXhCLENBQXJCO0FBQ0FhLFdBQU9ELE1BQVAsRUFBZUUsU0FBZjtBQUNELEdBSEQ7O0FBS0FILEtBQUcsK0RBQUgsRUFBb0UsWUFBWTtBQUM5RVIsbUJBQWVJLG9CQUFmLEdBQXNDO0FBQ3BDO0FBQ0VRLGVBQVMsZ0JBRFgsRUFEb0MsQ0FBdEM7OztBQUtBWixtQkFBZUssb0JBQWYsR0FBc0M7QUFDcEM7QUFDRU8sZUFBUyxnQkFEWCxFQURvQyxDQUF0Qzs7O0FBS0FaLG1CQUFlTSxvQkFBZixHQUFzQztBQUNwQztBQUNFTSxlQUFTLGdCQURYLEVBRG9DLENBQXRDOzs7O0FBTUEsVUFBTUgsU0FBUyxNQUFNakIsd0JBQXdCSyxZQUF4QixDQUFyQjtBQUNBYSxXQUFPRCxNQUFQLEVBQWVFLFNBQWY7QUFDRCxHQW5CRDs7QUFxQkFILEtBQUcsc0VBQUgsRUFBMkUsWUFBWTtBQUNyRlIsbUJBQWVJLG9CQUFmLEdBQXNDO0FBQ3BDO0FBQ0VRLGVBQVMsU0FEWCxFQURvQyxDQUF0Qzs7OztBQU1BLFVBQU1ILFNBQVMsTUFBTWpCLHdCQUF3QkssWUFBeEIsQ0FBckI7QUFDQWEsV0FBT0QsTUFBUCxFQUFlSSxVQUFmO0FBQ0QsR0FURDs7QUFXQUwsS0FBRyxzRUFBSCxFQUEyRSxZQUFZO0FBQ3JGUixtQkFBZUssb0JBQWYsR0FBc0M7QUFDcEM7QUFDRU8sZUFBUyxTQURYLEVBRG9DLENBQXRDOzs7O0FBTUEsVUFBTUgsU0FBUyxNQUFNakIsd0JBQXdCSyxZQUF4QixDQUFyQjtBQUNBYSxXQUFPRCxNQUFQLEVBQWVJLFVBQWY7QUFDRCxHQVREO0FBVUQsQ0ExREQiLCJmaWxlIjoiaXNBcHBTeW5jQXBpUGVuZGluZ1B1c2gudGVzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGlzQXBwU3luY0FwaVBlbmRpbmdQdXNoID0gcmVxdWlyZSgnLi4vLi4vc3JjL3V0aWxzL2lzQXBwU3luY0FwaVBlbmRpbmdQdXNoJyk7XG5cbmNvbnN0IG1vY2tHZXRSZXNvdXJjZVN0YXR1cyA9IGplc3QuZm4oKTtcbmNvbnN0IE1PQ0tfQ09OVEVYVCA9IHtcbiAgYW1wbGlmeToge1xuICAgIGdldFJlc291cmNlU3RhdHVzOiBtb2NrR2V0UmVzb3VyY2VTdGF0dXMsXG4gIH0sXG59O1xuXG5sZXQgcmVzb3VyY2VTdGF0dXMgPSB7fTtcbmRlc2NyaWJlKCdpc0FwcFN5bmNBcGlQZW5kaW5nUHVzaCcsICgpID0+IHtcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgamVzdC5yZXNldEFsbE1vY2tzKCk7XG4gICAgcmVzb3VyY2VTdGF0dXMgPSB7XG4gICAgICByZXNvdXJjZXNUb0JlQ3JlYXRlZDogW10sXG4gICAgICByZXNvdXJjZXNUb0JlVXBkYXRlZDogW10sXG4gICAgICByZXNvdXJjZXNUb0JlRGVsZXRlZDogW10sXG4gICAgfTtcbiAgICBtb2NrR2V0UmVzb3VyY2VTdGF0dXMubW9ja1JldHVyblZhbHVlKHJlc291cmNlU3RhdHVzKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCByZXR1cm4gZmFsc2UgaWYgdGhlcmUgaXMgYSByZXNvdXJjZSB0byBiZSBjcmVhdGVkJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHN0YXR1cyA9IGF3YWl0IGlzQXBwU3luY0FwaVBlbmRpbmdQdXNoKE1PQ0tfQ09OVEVYVCk7XG4gICAgZXhwZWN0KHN0YXR1cykudG9CZUZhbHN5KCk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgcmV0dXJuIGZhbHNlIGlmIHBlbmRpbmcgcHVzaCBpcyBhIG5vbiBBcHBTeW5jIHJlc291cmNlJywgYXN5bmMgKCkgPT4ge1xuICAgIHJlc291cmNlU3RhdHVzLnJlc291cmNlc1RvQmVDcmVhdGVkID0gW1xuICAgICAge1xuICAgICAgICBzZXJ2aWNlOiAnc29tZXRoaW5nIGVsc2UnLFxuICAgICAgfSxcbiAgICBdO1xuICAgIHJlc291cmNlU3RhdHVzLnJlc291cmNlc1RvQmVVcGRhdGVkID0gW1xuICAgICAge1xuICAgICAgICBzZXJ2aWNlOiAnc29tZXRoaW5nIGVsc2UnLFxuICAgICAgfSxcbiAgICBdO1xuICAgIHJlc291cmNlU3RhdHVzLnJlc291cmNlc1RvQmVEZWxldGVkID0gW1xuICAgICAge1xuICAgICAgICBzZXJ2aWNlOiAnc29tZXRoaW5nIGVsc2UnLFxuICAgICAgfSxcbiAgICBdO1xuXG4gICAgY29uc3Qgc3RhdHVzID0gYXdhaXQgaXNBcHBTeW5jQXBpUGVuZGluZ1B1c2goTU9DS19DT05URVhUKTtcbiAgICBleHBlY3Qoc3RhdHVzKS50b0JlRmFsc3koKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCByZXR1cm4gdHJ1ZSBpZiByZXNvdXJjZXNUb0JlQ3JlYXRlZCBjb250YWlucyBBcHBTeW5jIHJlc291cmNlJywgYXN5bmMgKCkgPT4ge1xuICAgIHJlc291cmNlU3RhdHVzLnJlc291cmNlc1RvQmVDcmVhdGVkID0gW1xuICAgICAge1xuICAgICAgICBzZXJ2aWNlOiAnQXBwU3luYycsXG4gICAgICB9LFxuICAgIF07XG5cbiAgICBjb25zdCBzdGF0dXMgPSBhd2FpdCBpc0FwcFN5bmNBcGlQZW5kaW5nUHVzaChNT0NLX0NPTlRFWFQpO1xuICAgIGV4cGVjdChzdGF0dXMpLnRvQmVUcnV0aHkoKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCByZXR1cm4gdHJ1ZSBpZiByZXNvdXJjZXNUb0JlVXBkYXRlZCBjb250YWlucyBBcHBTeW5jIHJlc291cmNlJywgYXN5bmMgKCkgPT4ge1xuICAgIHJlc291cmNlU3RhdHVzLnJlc291cmNlc1RvQmVVcGRhdGVkID0gW1xuICAgICAge1xuICAgICAgICBzZXJ2aWNlOiAnQXBwU3luYycsXG4gICAgICB9LFxuICAgIF07XG5cbiAgICBjb25zdCBzdGF0dXMgPSBhd2FpdCBpc0FwcFN5bmNBcGlQZW5kaW5nUHVzaChNT0NLX0NPTlRFWFQpO1xuICAgIGV4cGVjdChzdGF0dXMpLnRvQmVUcnV0aHkoKTtcbiAgfSk7XG59KTtcbiJdfQ==