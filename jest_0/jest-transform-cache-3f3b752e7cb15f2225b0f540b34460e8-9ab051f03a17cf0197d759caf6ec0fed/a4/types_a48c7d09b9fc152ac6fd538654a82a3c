62f95bf3f2b7645f824d4e1af6170ef1
/* istanbul ignore next */var cov_n7ul8gt6t = function () {var path = '/c/Users/Sandro/repo/amplify-cli/packages/amplify-codegen/src/commands/types.js',hash = 'fc5a59ecf8bbd2a694b42deef32675c085c23b3d',Function = function () {}.constructor,global = new Function('return this')(),gcv = '__coverage__',coverageData = { path: '/c/Users/Sandro/repo/amplify-cli/packages/amplify-codegen/src/commands/types.js', statementMap: { '0': { start: { line: 1, column: 13 }, end: { line: 1, column: 32 } }, '1': { start: { line: 2, column: 13 }, end: { line: 2, column: 28 } }, '2': { start: { line: 3, column: 21 }, end: { line: 3, column: 63 } }, '3': { start: { line: 4, column: 12 }, end: { line: 4, column: 26 } }, '4': { start: { line: 5, column: 16 }, end: { line: 5, column: 37 } }, '5': { start: { line: 7, column: 18 }, end: { line: 7, column: 41 } }, '6': { start: { line: 8, column: 19 }, end: { line: 8, column: 47 } }, '7': { start: { line: 9, column: 72 }, end: { line: 9, column: 91 } }, '8': { start: { line: 12, column: 19 }, end: { line: 12, column: 46 } }, '9': { start: { line: 13, column: 2 }, end: { line: 48, column: 3 } }, '10': { start: { line: 14, column: 19 }, end: { line: 14, column: 38 } }, '11': { start: { line: 15, column: 21 }, end: { line: 15, column: 41 } }, '12': { start: { line: 17, column: 4 }, end: { line: 20, column: 5 } }, '13': { start: { line: 18, column: 6 }, end: { line: 18, column: 68 } }, '14': { start: { line: 19, column: 6 }, end: { line: 19, column: 13 } }, '15': { start: { line: 22, column: 4 }, end: { line: 47, column: 7 } }, '16': { start: { line: 23, column: 23 }, end: { line: 23, column: 65 } }, '17': { start: { line: 23, column: 51 }, end: { line: 23, column: 64 } }, '18': { start: { line: 24, column: 27 }, end: { line: 24, column: 39 } }, '19': { start: { line: 25, column: 22 }, end: { line: 25, column: 63 } }, '20': { start: { line: 26, column: 21 }, end: { line: 26, column: 45 } }, '21': { start: { line: 27, column: 21 }, end: { line: 27, column: 59 } }, '22': { start: { line: 28, column: 21 }, end: { line: 28, column: 55 } }, '23': { start: { line: 30, column: 6 }, end: { line: 32, column: 7 } }, '24': { start: { line: 31, column: 8 }, end: { line: 31, column: 15 } }, '25': { start: { line: 33, column: 6 }, end: { line: 40, column: 7 } }, '26': { start: { line: 34, column: 8 }, end: { line: 39, column: 10 } }, '27': { start: { line: 41, column: 29 }, end: { line: 41, column: 85 } }, '28': { start: { line: 42, column: 6 }, end: { line: 42, column: 29 } }, '29': { start: { line: 43, column: 6 }, end: { line: 45, column: 9 } }, '30': { start: { line: 46, column: 6 }, end: { line: 46, column: 93 } }, '31': { start: { line: 51, column: 0 }, end: { line: 51, column: 31 } } }, fnMap: { '0': { name: 'generateTypes', decl: { start: { line: 11, column: 15 }, end: { line: 11, column: 28 } }, loc: { start: { line: 11, column: 59 }, end: { line: 49, column: 1 } }, line: 11 }, '1': { name: '(anonymous_1)', decl: { start: { line: 22, column: 21 }, end: { line: 22, column: 22 } }, loc: { start: { line: 22, column: 36 }, end: { line: 47, column: 5 } }, line: 22 }, '2': { name: '(anonymous_2)', decl: { start: { line: 23, column: 40 }, end: { line: 23, column: 41 } }, loc: { start: { line: 23, column: 51 }, end: { line: 23, column: 64 } }, line: 23 } }, branchMap: { '0': { loc: { start: { line: 13, column: 2 }, end: { line: 48, column: 3 } }, type: 'if', locations: [{ start: { line: 13, column: 2 }, end: { line: 48, column: 3 } }, { start: { line: 13, column: 2 }, end: { line: 48, column: 3 } }], line: 13 }, '1': { loc: { start: { line: 17, column: 4 }, end: { line: 20, column: 5 } }, type: 'if', locations: [{ start: { line: 17, column: 4 }, end: { line: 20, column: 5 } }, { start: { line: 17, column: 4 }, end: { line: 20, column: 5 } }], line: 17 }, '2': { loc: { start: { line: 30, column: 6 }, end: { line: 32, column: 7 } }, type: 'if', locations: [{ start: { line: 30, column: 6 }, end: { line: 32, column: 7 } }, { start: { line: 30, column: 6 }, end: { line: 32, column: 7 } }], line: 30 }, '3': { loc: { start: { line: 30, column: 10 }, end: { line: 30, column: 34 } }, type: 'binary-expr', locations: [{ start: { line: 30, column: 10 }, end: { line: 30, column: 17 } }, { start: { line: 30, column: 21 }, end: { line: 30, column: 34 } }], line: 30 }, '4': { loc: { start: { line: 33, column: 6 }, end: { line: 40, column: 7 } }, type: 'if', locations: [{ start: { line: 33, column: 6 }, end: { line: 40, column: 7 } }, { start: { line: 33, column: 6 }, end: { line: 40, column: 7 } }], line: 33 }, '5': { loc: { start: { line: 33, column: 10 }, end: { line: 33, column: 66 } }, type: 'binary-expr', locations: [{ start: { line: 33, column: 10 }, end: { line: 33, column: 29 } }, { start: { line: 33, column: 33 }, end: { line: 33, column: 66 } }], line: 33 } }, s: { '0': 0, '1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 0, '7': 0, '8': 0, '9': 0, '10': 0, '11': 0, '12': 0, '13': 0, '14': 0, '15': 0, '16': 0, '17': 0, '18': 0, '19': 0, '20': 0, '21': 0, '22': 0, '23': 0, '24': 0, '25': 0, '26': 0, '27': 0, '28': 0, '29': 0, '30': 0, '31': 0 }, f: { '0': 0, '1': 0, '2': 0 }, b: { '0': [0, 0], '1': [0, 0], '2': [0, 0], '3': [0, 0], '4': [0, 0], '5': [0, 0] }, _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c' },coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {return coverage[path];}coverageData.hash = hash;return coverage[path] = coverageData;}();const glob = /* istanbul ignore next */(cov_n7ul8gt6t.s[0]++, require('glob-all'));
const path = /* istanbul ignore next */(cov_n7ul8gt6t.s[1]++, require('path'));
const { generate } = /* istanbul ignore next */(cov_n7ul8gt6t.s[2]++, require('amplify-graphql-types-generator'));
const Ora = /* istanbul ignore next */(cov_n7ul8gt6t.s[3]++, require('ora'));
const jetpack = /* istanbul ignore next */(cov_n7ul8gt6t.s[4]++, require('fs-jetpack'));

const constants = /* istanbul ignore next */(cov_n7ul8gt6t.s[5]++, require('../constants'));
const loadConfig = /* istanbul ignore next */(cov_n7ul8gt6t.s[6]++, require('../codegen-config'));
const { downloadIntrospectionSchemaWithProgress, getFrontEndHandler } = /* istanbul ignore next */(cov_n7ul8gt6t.s[7]++, require('../utils'));

async function generateTypes(context, forceDownloadSchema) {/* istanbul ignore next */cov_n7ul8gt6t.f[0]++;
  const frontend = /* istanbul ignore next */(cov_n7ul8gt6t.s[8]++, getFrontEndHandler(context)); /* istanbul ignore next */cov_n7ul8gt6t.s[9]++;
  if (frontend !== 'android') {/* istanbul ignore next */cov_n7ul8gt6t.b[0][0]++;
    const config = /* istanbul ignore next */(cov_n7ul8gt6t.s[10]++, loadConfig(context));
    const projects = /* istanbul ignore next */(cov_n7ul8gt6t.s[11]++, config.getProjects()); /* istanbul ignore next */cov_n7ul8gt6t.s[12]++;

    if (!projects.length) {/* istanbul ignore next */cov_n7ul8gt6t.b[1][0]++;cov_n7ul8gt6t.s[13]++;
      context.print.info(constants.ERROR_CODEGEN_NO_API_CONFIGURED); /* istanbul ignore next */cov_n7ul8gt6t.s[14]++;
      return;
    } else /* istanbul ignore next */{cov_n7ul8gt6t.b[1][1]++;}cov_n7ul8gt6t.s[15]++;

    projects.forEach(async cfg => {/* istanbul ignore next */cov_n7ul8gt6t.f[1]++;
      const excludes = /* istanbul ignore next */(cov_n7ul8gt6t.s[16]++, cfg.excludes.map(pattern => {/* istanbul ignore next */cov_n7ul8gt6t.f[2]++;cov_n7ul8gt6t.s[17]++;return `!${pattern}`;}));
      const includeFiles = /* istanbul ignore next */(cov_n7ul8gt6t.s[18]++, cfg.includes);
      const queries = /* istanbul ignore next */(cov_n7ul8gt6t.s[19]++, glob.sync([...includeFiles, ...excludes]));
      const schema = /* istanbul ignore next */(cov_n7ul8gt6t.s[20]++, path.resolve(cfg.schema));
      const output = /* istanbul ignore next */(cov_n7ul8gt6t.s[21]++, cfg.amplifyExtension.generatedFileName);
      const target = /* istanbul ignore next */(cov_n7ul8gt6t.s[22]++, cfg.amplifyExtension.codeGenTarget); /* istanbul ignore next */cov_n7ul8gt6t.s[23]++;

      if ( /* istanbul ignore next */(cov_n7ul8gt6t.b[3][0]++, !output) || /* istanbul ignore next */(cov_n7ul8gt6t.b[3][1]++, output === '')) {/* istanbul ignore next */cov_n7ul8gt6t.b[2][0]++;cov_n7ul8gt6t.s[24]++;
        return;
      } else /* istanbul ignore next */{cov_n7ul8gt6t.b[2][1]++;}cov_n7ul8gt6t.s[25]++;
      if ( /* istanbul ignore next */(cov_n7ul8gt6t.b[5][0]++, forceDownloadSchema) || /* istanbul ignore next */(cov_n7ul8gt6t.b[5][1]++, jetpack.exists(schema) !== 'file')) {/* istanbul ignore next */cov_n7ul8gt6t.b[4][0]++;cov_n7ul8gt6t.s[26]++;
        await downloadIntrospectionSchemaWithProgress(
        context,
        cfg.amplifyExtension.graphQLApiId,
        cfg.schema,
        cfg.amplifyExtension.region);

      } else /* istanbul ignore next */{cov_n7ul8gt6t.b[4][1]++;}
      const codeGenSpinner = /* istanbul ignore next */(cov_n7ul8gt6t.s[27]++, new Ora(constants.INFO_MESSAGE_CODEGEN_GENERATE_STARTED)); /* istanbul ignore next */cov_n7ul8gt6t.s[28]++;
      codeGenSpinner.start(); /* istanbul ignore next */cov_n7ul8gt6t.s[29]++;
      generate(queries, schema, output, '', target, '', {
        addTypename: true }); /* istanbul ignore next */cov_n7ul8gt6t.s[30]++;

      codeGenSpinner.succeed(`${constants.INFO_MESSAGE_CODEGEN_GENERATE_SUCCESS} ${output}`);
    });
  } else /* istanbul ignore next */{cov_n7ul8gt6t.b[0][1]++;}
} /* istanbul ignore next */cov_n7ul8gt6t.s[31]++;

module.exports = generateTypes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInR5cGVzLmpzIl0sIm5hbWVzIjpbImdsb2IiLCJyZXF1aXJlIiwicGF0aCIsImdlbmVyYXRlIiwiT3JhIiwiamV0cGFjayIsImNvbnN0YW50cyIsImxvYWRDb25maWciLCJkb3dubG9hZEludHJvc3BlY3Rpb25TY2hlbWFXaXRoUHJvZ3Jlc3MiLCJnZXRGcm9udEVuZEhhbmRsZXIiLCJnZW5lcmF0ZVR5cGVzIiwiY29udGV4dCIsImZvcmNlRG93bmxvYWRTY2hlbWEiLCJmcm9udGVuZCIsImNvbmZpZyIsInByb2plY3RzIiwiZ2V0UHJvamVjdHMiLCJsZW5ndGgiLCJwcmludCIsImluZm8iLCJFUlJPUl9DT0RFR0VOX05PX0FQSV9DT05GSUdVUkVEIiwiZm9yRWFjaCIsImNmZyIsImV4Y2x1ZGVzIiwibWFwIiwicGF0dGVybiIsImluY2x1ZGVGaWxlcyIsImluY2x1ZGVzIiwicXVlcmllcyIsInN5bmMiLCJzY2hlbWEiLCJyZXNvbHZlIiwib3V0cHV0IiwiYW1wbGlmeUV4dGVuc2lvbiIsImdlbmVyYXRlZEZpbGVOYW1lIiwidGFyZ2V0IiwiY29kZUdlblRhcmdldCIsImV4aXN0cyIsImdyYXBoUUxBcGlJZCIsInJlZ2lvbiIsImNvZGVHZW5TcGlubmVyIiwiSU5GT19NRVNTQUdFX0NPREVHRU5fR0VORVJBVEVfU1RBUlRFRCIsInN0YXJ0IiwiYWRkVHlwZW5hbWUiLCJzdWNjZWVkIiwiSU5GT19NRVNTQUdFX0NPREVHRU5fR0VORVJBVEVfU1VDQ0VTUyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI0M0tBQUEsTUFBTUEsd0RBQU9DLFFBQVEsVUFBUixDQUFQLENBQU47QUFDQSxNQUFNQyx3REFBT0QsUUFBUSxNQUFSLENBQVAsQ0FBTjtBQUNBLE1BQU0sRUFBRUUsUUFBRixzREFBZUYsUUFBUSxpQ0FBUixDQUFmLENBQU47QUFDQSxNQUFNRyx1REFBTUgsUUFBUSxLQUFSLENBQU4sQ0FBTjtBQUNBLE1BQU1JLDJEQUFVSixRQUFRLFlBQVIsQ0FBVixDQUFOOztBQUVBLE1BQU1LLDZEQUFZTCxRQUFRLGNBQVIsQ0FBWixDQUFOO0FBQ0EsTUFBTU0sOERBQWFOLFFBQVEsbUJBQVIsQ0FBYixDQUFOO0FBQ0EsTUFBTSxFQUFFTyx1Q0FBRixFQUEyQ0Msa0JBQTNDLHNEQUFrRVIsUUFBUSxVQUFSLENBQWxFLENBQU47O0FBRUEsZUFBZVMsYUFBZixDQUE2QkMsT0FBN0IsRUFBc0NDLG1CQUF0QyxFQUEyRDtBQUN6RCxRQUFNQyw0REFBV0osbUJBQW1CRSxPQUFuQixDQUFYLENBQU4sQ0FEeUQ7QUFFekQsTUFBSUUsYUFBYSxTQUFqQixFQUE0QjtBQUMxQixVQUFNQywyREFBU1AsV0FBV0ksT0FBWCxDQUFULENBQU47QUFDQSxVQUFNSSw2REFBV0QsT0FBT0UsV0FBUCxFQUFYLENBQU4sQ0FGMEI7O0FBSTFCLFFBQUksQ0FBQ0QsU0FBU0UsTUFBZCxFQUFzQjtBQUNwQk4sY0FBUU8sS0FBUixDQUFjQyxJQUFkLENBQW1CYixVQUFVYywrQkFBN0IsRUFEb0I7QUFFcEI7QUFDRCxLQUhELDBEQUowQjs7QUFTMUJMLGFBQVNNLE9BQVQsQ0FBaUIsTUFBT0MsR0FBUCxJQUFlO0FBQzlCLFlBQU1DLDZEQUFXRCxJQUFJQyxRQUFKLENBQWFDLEdBQWIsQ0FBaUJDLFdBQVcsNkVBQUMsSUFBR0EsT0FBUSxFQUFaLENBQWEsQ0FBekMsQ0FBWCxDQUFOO0FBQ0EsWUFBTUMsaUVBQWVKLElBQUlLLFFBQW5CLENBQU47QUFDQSxZQUFNQyw0REFBVTVCLEtBQUs2QixJQUFMLENBQVUsQ0FBQyxHQUFHSCxZQUFKLEVBQWtCLEdBQUdILFFBQXJCLENBQVYsQ0FBVixDQUFOO0FBQ0EsWUFBTU8sMkRBQVM1QixLQUFLNkIsT0FBTCxDQUFhVCxJQUFJUSxNQUFqQixDQUFULENBQU47QUFDQSxZQUFNRSwyREFBU1YsSUFBSVcsZ0JBQUosQ0FBcUJDLGlCQUE5QixDQUFOO0FBQ0EsWUFBTUMsMkRBQVNiLElBQUlXLGdCQUFKLENBQXFCRyxhQUE5QixDQUFOLENBTjhCOztBQVE5QixVQUFJLHNEQUFDSixNQUFELHlEQUFXQSxXQUFXLEVBQXRCLENBQUosRUFBOEI7QUFDNUI7QUFDRCxPQUZELDBEQVI4QjtBQVc5QixVQUFJLGlJQUF1QjNCLFFBQVFnQyxNQUFSLENBQWVQLE1BQWYsTUFBMkIsTUFBbEQsQ0FBSixFQUE4RDtBQUM1RCxjQUFNdEI7QUFDSkcsZUFESTtBQUVKVyxZQUFJVyxnQkFBSixDQUFxQkssWUFGakI7QUFHSmhCLFlBQUlRLE1BSEE7QUFJSlIsWUFBSVcsZ0JBQUosQ0FBcUJNLE1BSmpCLENBQU47O0FBTUQsT0FQRDtBQVFBLFlBQU1DLG1FQUFpQixJQUFJcEMsR0FBSixDQUFRRSxVQUFVbUMscUNBQWxCLENBQWpCLENBQU4sQ0FuQjhCO0FBb0I5QkQscUJBQWVFLEtBQWYsR0FwQjhCO0FBcUI5QnZDLGVBQVN5QixPQUFULEVBQWtCRSxNQUFsQixFQUEwQkUsTUFBMUIsRUFBa0MsRUFBbEMsRUFBc0NHLE1BQXRDLEVBQThDLEVBQTlDLEVBQWtEO0FBQ2hEUSxxQkFBYSxJQURtQyxFQUFsRCxFQXJCOEI7O0FBd0I5QkgscUJBQWVJLE9BQWYsQ0FBd0IsR0FBRXRDLFVBQVV1QyxxQ0FBc0MsSUFBR2IsTUFBTyxFQUFwRjtBQUNELEtBekJEO0FBMEJELEdBbkNEO0FBb0NELEM7O0FBRURjLE9BQU9DLE9BQVAsR0FBaUJyQyxhQUFqQiIsImZpbGUiOiJ0eXBlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGdsb2IgPSByZXF1aXJlKCdnbG9iLWFsbCcpO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IHsgZ2VuZXJhdGUgfSA9IHJlcXVpcmUoJ2FtcGxpZnktZ3JhcGhxbC10eXBlcy1nZW5lcmF0b3InKTtcbmNvbnN0IE9yYSA9IHJlcXVpcmUoJ29yYScpO1xuY29uc3QgamV0cGFjayA9IHJlcXVpcmUoJ2ZzLWpldHBhY2snKTtcblxuY29uc3QgY29uc3RhbnRzID0gcmVxdWlyZSgnLi4vY29uc3RhbnRzJyk7XG5jb25zdCBsb2FkQ29uZmlnID0gcmVxdWlyZSgnLi4vY29kZWdlbi1jb25maWcnKTtcbmNvbnN0IHsgZG93bmxvYWRJbnRyb3NwZWN0aW9uU2NoZW1hV2l0aFByb2dyZXNzLCBnZXRGcm9udEVuZEhhbmRsZXIgfSA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbmFzeW5jIGZ1bmN0aW9uIGdlbmVyYXRlVHlwZXMoY29udGV4dCwgZm9yY2VEb3dubG9hZFNjaGVtYSkge1xuICBjb25zdCBmcm9udGVuZCA9IGdldEZyb250RW5kSGFuZGxlcihjb250ZXh0KTtcbiAgaWYgKGZyb250ZW5kICE9PSAnYW5kcm9pZCcpIHtcbiAgICBjb25zdCBjb25maWcgPSBsb2FkQ29uZmlnKGNvbnRleHQpO1xuICAgIGNvbnN0IHByb2plY3RzID0gY29uZmlnLmdldFByb2plY3RzKCk7XG5cbiAgICBpZiAoIXByb2plY3RzLmxlbmd0aCkge1xuICAgICAgY29udGV4dC5wcmludC5pbmZvKGNvbnN0YW50cy5FUlJPUl9DT0RFR0VOX05PX0FQSV9DT05GSUdVUkVEKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBwcm9qZWN0cy5mb3JFYWNoKGFzeW5jIChjZmcpID0+IHtcbiAgICAgIGNvbnN0IGV4Y2x1ZGVzID0gY2ZnLmV4Y2x1ZGVzLm1hcChwYXR0ZXJuID0+IGAhJHtwYXR0ZXJufWApO1xuICAgICAgY29uc3QgaW5jbHVkZUZpbGVzID0gY2ZnLmluY2x1ZGVzO1xuICAgICAgY29uc3QgcXVlcmllcyA9IGdsb2Iuc3luYyhbLi4uaW5jbHVkZUZpbGVzLCAuLi5leGNsdWRlc10pO1xuICAgICAgY29uc3Qgc2NoZW1hID0gcGF0aC5yZXNvbHZlKGNmZy5zY2hlbWEpO1xuICAgICAgY29uc3Qgb3V0cHV0ID0gY2ZnLmFtcGxpZnlFeHRlbnNpb24uZ2VuZXJhdGVkRmlsZU5hbWU7XG4gICAgICBjb25zdCB0YXJnZXQgPSBjZmcuYW1wbGlmeUV4dGVuc2lvbi5jb2RlR2VuVGFyZ2V0O1xuXG4gICAgICBpZiAoIW91dHB1dCB8fCBvdXRwdXQgPT09ICcnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChmb3JjZURvd25sb2FkU2NoZW1hIHx8IGpldHBhY2suZXhpc3RzKHNjaGVtYSkgIT09ICdmaWxlJykge1xuICAgICAgICBhd2FpdCBkb3dubG9hZEludHJvc3BlY3Rpb25TY2hlbWFXaXRoUHJvZ3Jlc3MoXG4gICAgICAgICAgY29udGV4dCxcbiAgICAgICAgICBjZmcuYW1wbGlmeUV4dGVuc2lvbi5ncmFwaFFMQXBpSWQsXG4gICAgICAgICAgY2ZnLnNjaGVtYSxcbiAgICAgICAgICBjZmcuYW1wbGlmeUV4dGVuc2lvbi5yZWdpb24sXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBjb25zdCBjb2RlR2VuU3Bpbm5lciA9IG5ldyBPcmEoY29uc3RhbnRzLklORk9fTUVTU0FHRV9DT0RFR0VOX0dFTkVSQVRFX1NUQVJURUQpO1xuICAgICAgY29kZUdlblNwaW5uZXIuc3RhcnQoKTtcbiAgICAgIGdlbmVyYXRlKHF1ZXJpZXMsIHNjaGVtYSwgb3V0cHV0LCAnJywgdGFyZ2V0LCAnJywge1xuICAgICAgICBhZGRUeXBlbmFtZTogdHJ1ZSxcbiAgICAgIH0pO1xuICAgICAgY29kZUdlblNwaW5uZXIuc3VjY2VlZChgJHtjb25zdGFudHMuSU5GT19NRVNTQUdFX0NPREVHRU5fR0VORVJBVEVfU1VDQ0VTU30gJHtvdXRwdXR9YCk7XG4gICAgfSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZW5lcmF0ZVR5cGVzO1xuIl19