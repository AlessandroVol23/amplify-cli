2016d6d75e15af1a29c5ff13b876aae6



jest.mock('../../src/utils/getAppSyncAPIs');const getAppSyncDetail = require('../../src/utils/getAppSyncAPIDetails');const getAppSyncAPIs = require('../../src/utils/getAppSyncAPIs');

describe('getAppSyncDetail', () => {
  const getProjectMeta = jest.fn();
  const context = {
    amplify: {
      getProjectMeta } };



  const mockProjectMeta = { api: ['api1', 'api2'] };

  const mockAppSyncAPIs = [
  {
    name: 'api1',
    output: {
      GraphQLAPIEndpointOutput: 'http://appsync.aws.com/api1',
      GraphQLAPIIdOutput: 'some-random-id',
      securityType: 'AWS_IAM' } }];




  it('should get the project meta from context', () => {
    getProjectMeta.mockReturnValueOnce(mockProjectMeta);
    getAppSyncAPIs.mockReturnValueOnce(mockAppSyncAPIs);
    const expectedResult = [
    {
      name: mockAppSyncAPIs[0].name,
      endpoint: mockAppSyncAPIs[0].output.GraphQLAPIEndpointOutput,
      id: mockAppSyncAPIs[0].output.GraphQLAPIIdOutput,
      securityType: mockAppSyncAPIs[0].output.securityType }];


    expect(getAppSyncDetail(context)).toEqual(expectedResult);
    expect(getProjectMeta).toHaveBeenCalled();
    expect(getAppSyncAPIs).toHaveBeenCalledWith(mockProjectMeta.api);
  });

  it('should return an empty list when there are no app sync APIs included in the project', () => {
    getProjectMeta.mockReturnValueOnce(mockProjectMeta);
    getAppSyncAPIs.mockReturnValueOnce([]);
    expect(getAppSyncDetail(context)).toHaveLength(0);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdldEFwcFN5bmNBUElEZXRhaWwudGVzdC5qcyJdLCJuYW1lcyI6WyJqZXN0IiwibW9jayIsImdldEFwcFN5bmNEZXRhaWwiLCJyZXF1aXJlIiwiZ2V0QXBwU3luY0FQSXMiLCJkZXNjcmliZSIsImdldFByb2plY3RNZXRhIiwiZm4iLCJjb250ZXh0IiwiYW1wbGlmeSIsIm1vY2tQcm9qZWN0TWV0YSIsImFwaSIsIm1vY2tBcHBTeW5jQVBJcyIsIm5hbWUiLCJvdXRwdXQiLCJHcmFwaFFMQVBJRW5kcG9pbnRPdXRwdXQiLCJHcmFwaFFMQVBJSWRPdXRwdXQiLCJzZWN1cml0eVR5cGUiLCJpdCIsIm1vY2tSZXR1cm5WYWx1ZU9uY2UiLCJleHBlY3RlZFJlc3VsdCIsImVuZHBvaW50IiwiaWQiLCJleHBlY3QiLCJ0b0VxdWFsIiwidG9IYXZlQmVlbkNhbGxlZCIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwidG9IYXZlTGVuZ3RoIl0sIm1hcHBpbmdzIjoiOzs7QUFHQUEsS0FBS0MsSUFBTCxDQUFVLGdDQUFWLEVBSEEsTUFBTUMsbUJBQW1CQyxRQUFRLHNDQUFSLENBQXpCLENBQ0EsTUFBTUMsaUJBQWlCRCxRQUFRLGdDQUFSLENBQXZCOztBQUlBRSxTQUFTLGtCQUFULEVBQTZCLE1BQU07QUFDakMsUUFBTUMsaUJBQWlCTixLQUFLTyxFQUFMLEVBQXZCO0FBQ0EsUUFBTUMsVUFBVTtBQUNkQyxhQUFTO0FBQ1BILG9CQURPLEVBREssRUFBaEI7Ozs7QUFNQSxRQUFNSSxrQkFBa0IsRUFBRUMsS0FBSyxDQUFDLE1BQUQsRUFBUyxNQUFULENBQVAsRUFBeEI7O0FBRUEsUUFBTUMsa0JBQWtCO0FBQ3RCO0FBQ0VDLFVBQU0sTUFEUjtBQUVFQyxZQUFRO0FBQ05DLGdDQUEwQiw2QkFEcEI7QUFFTkMsMEJBQW9CLGdCQUZkO0FBR05DLG9CQUFjLFNBSFIsRUFGVixFQURzQixDQUF4Qjs7Ozs7QUFXQUMsS0FBRywwQ0FBSCxFQUErQyxNQUFNO0FBQ25EWixtQkFBZWEsbUJBQWYsQ0FBbUNULGVBQW5DO0FBQ0FOLG1CQUFlZSxtQkFBZixDQUFtQ1AsZUFBbkM7QUFDQSxVQUFNUSxpQkFBaUI7QUFDckI7QUFDRVAsWUFBTUQsZ0JBQWdCLENBQWhCLEVBQW1CQyxJQUQzQjtBQUVFUSxnQkFBVVQsZ0JBQWdCLENBQWhCLEVBQW1CRSxNQUFuQixDQUEwQkMsd0JBRnRDO0FBR0VPLFVBQUlWLGdCQUFnQixDQUFoQixFQUFtQkUsTUFBbkIsQ0FBMEJFLGtCQUhoQztBQUlFQyxvQkFBY0wsZ0JBQWdCLENBQWhCLEVBQW1CRSxNQUFuQixDQUEwQkcsWUFKMUMsRUFEcUIsQ0FBdkI7OztBQVFBTSxXQUFPckIsaUJBQWlCTSxPQUFqQixDQUFQLEVBQWtDZ0IsT0FBbEMsQ0FBMENKLGNBQTFDO0FBQ0FHLFdBQU9qQixjQUFQLEVBQXVCbUIsZ0JBQXZCO0FBQ0FGLFdBQU9uQixjQUFQLEVBQXVCc0Isb0JBQXZCLENBQTRDaEIsZ0JBQWdCQyxHQUE1RDtBQUNELEdBZEQ7O0FBZ0JBTyxLQUFHLHFGQUFILEVBQTBGLE1BQU07QUFDOUZaLG1CQUFlYSxtQkFBZixDQUFtQ1QsZUFBbkM7QUFDQU4sbUJBQWVlLG1CQUFmLENBQW1DLEVBQW5DO0FBQ0FJLFdBQU9yQixpQkFBaUJNLE9BQWpCLENBQVAsRUFBa0NtQixZQUFsQyxDQUErQyxDQUEvQztBQUNELEdBSkQ7QUFLRCxDQTFDRCIsImZpbGUiOiJnZXRBcHBTeW5jQVBJRGV0YWlsLnRlc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBnZXRBcHBTeW5jRGV0YWlsID0gcmVxdWlyZSgnLi4vLi4vc3JjL3V0aWxzL2dldEFwcFN5bmNBUElEZXRhaWxzJyk7XG5jb25zdCBnZXRBcHBTeW5jQVBJcyA9IHJlcXVpcmUoJy4uLy4uL3NyYy91dGlscy9nZXRBcHBTeW5jQVBJcycpO1xuXG5qZXN0Lm1vY2soJy4uLy4uL3NyYy91dGlscy9nZXRBcHBTeW5jQVBJcycpO1xuXG5kZXNjcmliZSgnZ2V0QXBwU3luY0RldGFpbCcsICgpID0+IHtcbiAgY29uc3QgZ2V0UHJvamVjdE1ldGEgPSBqZXN0LmZuKCk7XG4gIGNvbnN0IGNvbnRleHQgPSB7XG4gICAgYW1wbGlmeToge1xuICAgICAgZ2V0UHJvamVjdE1ldGEsXG4gICAgfSxcbiAgfTtcblxuICBjb25zdCBtb2NrUHJvamVjdE1ldGEgPSB7IGFwaTogWydhcGkxJywgJ2FwaTInXSB9O1xuXG4gIGNvbnN0IG1vY2tBcHBTeW5jQVBJcyA9IFtcbiAgICB7XG4gICAgICBuYW1lOiAnYXBpMScsXG4gICAgICBvdXRwdXQ6IHtcbiAgICAgICAgR3JhcGhRTEFQSUVuZHBvaW50T3V0cHV0OiAnaHR0cDovL2FwcHN5bmMuYXdzLmNvbS9hcGkxJyxcbiAgICAgICAgR3JhcGhRTEFQSUlkT3V0cHV0OiAnc29tZS1yYW5kb20taWQnLFxuICAgICAgICBzZWN1cml0eVR5cGU6ICdBV1NfSUFNJyxcbiAgICAgIH0sXG4gICAgfSxcbiAgXTtcblxuICBpdCgnc2hvdWxkIGdldCB0aGUgcHJvamVjdCBtZXRhIGZyb20gY29udGV4dCcsICgpID0+IHtcbiAgICBnZXRQcm9qZWN0TWV0YS5tb2NrUmV0dXJuVmFsdWVPbmNlKG1vY2tQcm9qZWN0TWV0YSk7XG4gICAgZ2V0QXBwU3luY0FQSXMubW9ja1JldHVyblZhbHVlT25jZShtb2NrQXBwU3luY0FQSXMpO1xuICAgIGNvbnN0IGV4cGVjdGVkUmVzdWx0ID0gW1xuICAgICAge1xuICAgICAgICBuYW1lOiBtb2NrQXBwU3luY0FQSXNbMF0ubmFtZSxcbiAgICAgICAgZW5kcG9pbnQ6IG1vY2tBcHBTeW5jQVBJc1swXS5vdXRwdXQuR3JhcGhRTEFQSUVuZHBvaW50T3V0cHV0LFxuICAgICAgICBpZDogbW9ja0FwcFN5bmNBUElzWzBdLm91dHB1dC5HcmFwaFFMQVBJSWRPdXRwdXQsXG4gICAgICAgIHNlY3VyaXR5VHlwZTogbW9ja0FwcFN5bmNBUElzWzBdLm91dHB1dC5zZWN1cml0eVR5cGUsXG4gICAgICB9LFxuICAgIF07XG4gICAgZXhwZWN0KGdldEFwcFN5bmNEZXRhaWwoY29udGV4dCkpLnRvRXF1YWwoZXhwZWN0ZWRSZXN1bHQpO1xuICAgIGV4cGVjdChnZXRQcm9qZWN0TWV0YSkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIGV4cGVjdChnZXRBcHBTeW5jQVBJcykudG9IYXZlQmVlbkNhbGxlZFdpdGgobW9ja1Byb2plY3RNZXRhLmFwaSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgcmV0dXJuIGFuIGVtcHR5IGxpc3Qgd2hlbiB0aGVyZSBhcmUgbm8gYXBwIHN5bmMgQVBJcyBpbmNsdWRlZCBpbiB0aGUgcHJvamVjdCcsICgpID0+IHtcbiAgICBnZXRQcm9qZWN0TWV0YS5tb2NrUmV0dXJuVmFsdWVPbmNlKG1vY2tQcm9qZWN0TWV0YSk7XG4gICAgZ2V0QXBwU3luY0FQSXMubW9ja1JldHVyblZhbHVlT25jZShbXSk7XG4gICAgZXhwZWN0KGdldEFwcFN5bmNEZXRhaWwoY29udGV4dCkpLnRvSGF2ZUxlbmd0aCgwKTtcbiAgfSk7XG59KTtcbiJdfQ==