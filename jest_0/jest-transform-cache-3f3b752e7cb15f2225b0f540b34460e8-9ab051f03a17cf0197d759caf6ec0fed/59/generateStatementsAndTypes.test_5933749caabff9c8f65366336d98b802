fc6035954971103544e65bb60d074e39


















jest.mock('../../src/commands/types');
jest.mock('../../src/commands/statements');
jest.mock('../../src/codegen-config');
jest.mock('../../src/utils');const loadConfig = require('../../src/codegen-config');const generateStatements = require('../../src/commands/statements');const generateTypes = require('../../src/commands/types');const generateStatementsAndTypes = require('../../src/commands/generateStatementsAndType');const { AmplifyCodeGenNoAppSyncAPIAvailableError } = require('../../src/errors');const constants = require('../../src/constants');const { downloadIntrospectionSchemaWithProgress, isAppSyncApiPendingPush } = require('../../src/utils');const MOCK_CONTEXT = { print: { info: jest.fn() } };

const MOCK_INCLUDE_PATH = 'MOCK_INCLUDE';
const MOCK_STATEMENTS_PATH = 'MOCK_STATEMENTS_PATH';
const MOCK_SCHEMA = 'INTROSPECTION_SCHEMA.JSON';
const MOCK_TARGET = 'TYPE_SCRIPT_OR_FLOW_OR_ANY_OTHER_LANGUAGE';
const MOCK_GENERATED_FILE_NAME = 'API.TS';
const MOCK_API_ID = 'MOCK_API_ID';
const MOCK_REGION = 'MOCK_AWS_REGION';

const MOCK_PROJECT = {
  includes: [MOCK_INCLUDE_PATH],
  schema: MOCK_SCHEMA,
  amplifyExtension: {
    generatedFileName: MOCK_GENERATED_FILE_NAME,
    codeGenTarget: MOCK_TARGET,
    graphQLApiId: MOCK_API_ID,
    docsFilePath: MOCK_STATEMENTS_PATH,
    region: MOCK_REGION } };



describe('command - generateStatementsAndTypes', () => {
  beforeEach(() => {
    jest.clearAllMocks();

    loadConfig.mockReturnValue({
      getProjects: jest.fn().mockReturnValue([MOCK_PROJECT]) });

  });

  it('should generate statements and types', async () => {
    const forceDownload = false;
    await generateStatementsAndTypes(MOCK_CONTEXT, forceDownload);
    expect(loadConfig).toHaveBeenCalledWith(MOCK_CONTEXT);
    expect(generateStatements).toHaveBeenCalledWith(MOCK_CONTEXT, false, undefined);
    expect(generateTypes).toHaveBeenCalledWith(MOCK_CONTEXT, false);
  });

  it('should download the schema if forceDownload flag is passed', async () => {
    const forceDownload = true;
    await generateStatementsAndTypes(MOCK_CONTEXT, forceDownload);
    expect(downloadIntrospectionSchemaWithProgress).toHaveBeenCalledWith(
    MOCK_CONTEXT,
    MOCK_API_ID,
    MOCK_SCHEMA,
    MOCK_REGION);

  });

  it('should show a warning if there are no projects configured', async () => {
    loadConfig.mockReturnValue({
      getProjects: jest.fn().mockReturnValue([]) });

    await expect(generateStatementsAndTypes(MOCK_CONTEXT, false)).rejects.toBeInstanceOf(
    AmplifyCodeGenNoAppSyncAPIAvailableError);

  });

  it('should show a warning if the project has local change which is pending push', async () => {
    isAppSyncApiPendingPush.mockReturnValue(true);
    await generateStatementsAndTypes(MOCK_CONTEXT, false);
    expect(MOCK_CONTEXT.print.info).toHaveBeenCalledWith(constants.MSG_CODEGEN_PENDING_API_PUSH);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdlbmVyYXRlU3RhdGVtZW50c0FuZFR5cGVzLnRlc3QuanMiXSwibmFtZXMiOlsiamVzdCIsIm1vY2siLCJsb2FkQ29uZmlnIiwicmVxdWlyZSIsImdlbmVyYXRlU3RhdGVtZW50cyIsImdlbmVyYXRlVHlwZXMiLCJnZW5lcmF0ZVN0YXRlbWVudHNBbmRUeXBlcyIsIkFtcGxpZnlDb2RlR2VuTm9BcHBTeW5jQVBJQXZhaWxhYmxlRXJyb3IiLCJjb25zdGFudHMiLCJkb3dubG9hZEludHJvc3BlY3Rpb25TY2hlbWFXaXRoUHJvZ3Jlc3MiLCJpc0FwcFN5bmNBcGlQZW5kaW5nUHVzaCIsIk1PQ0tfQ09OVEVYVCIsInByaW50IiwiaW5mbyIsImZuIiwiTU9DS19JTkNMVURFX1BBVEgiLCJNT0NLX1NUQVRFTUVOVFNfUEFUSCIsIk1PQ0tfU0NIRU1BIiwiTU9DS19UQVJHRVQiLCJNT0NLX0dFTkVSQVRFRF9GSUxFX05BTUUiLCJNT0NLX0FQSV9JRCIsIk1PQ0tfUkVHSU9OIiwiTU9DS19QUk9KRUNUIiwiaW5jbHVkZXMiLCJzY2hlbWEiLCJhbXBsaWZ5RXh0ZW5zaW9uIiwiZ2VuZXJhdGVkRmlsZU5hbWUiLCJjb2RlR2VuVGFyZ2V0IiwiZ3JhcGhRTEFwaUlkIiwiZG9jc0ZpbGVQYXRoIiwicmVnaW9uIiwiZGVzY3JpYmUiLCJiZWZvcmVFYWNoIiwiY2xlYXJBbGxNb2NrcyIsIm1vY2tSZXR1cm5WYWx1ZSIsImdldFByb2plY3RzIiwiaXQiLCJmb3JjZURvd25sb2FkIiwiZXhwZWN0IiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJ1bmRlZmluZWQiLCJyZWplY3RzIiwidG9CZUluc3RhbmNlT2YiLCJNU0dfQ09ERUdFTl9QRU5ESU5HX0FQSV9QVVNIIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFrQkFBLEtBQUtDLElBQUwsQ0FBVSwwQkFBVjtBQUNBRCxLQUFLQyxJQUFMLENBQVUsK0JBQVY7QUFDQUQsS0FBS0MsSUFBTCxDQUFVLDBCQUFWO0FB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Q0ExQ0QiLCJmaWxlIjoiZ2VuZXJhdGVTdGF0ZW1lbnRzQW5kVHlwZXMudGVzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGxvYWRDb25maWcgPSByZXF1aXJlKCcuLi8uLi9zcmMvY29kZWdlbi1jb25maWcnKTtcbmNvbnN0IGdlbmVyYXRlU3RhdGVtZW50cyA9IHJlcXVpcmUoJy4uLy4uL3NyYy9jb21tYW5kcy9zdGF0ZW1lbnRzJyk7XG5jb25zdCBnZW5lcmF0ZVR5cGVzID0gcmVxdWlyZSgnLi4vLi4vc3JjL2NvbW1hbmRzL3R5cGVzJyk7XG5jb25zdCBnZW5lcmF0ZVN0YXRlbWVudHNBbmRUeXBlcyA9IHJlcXVpcmUoJy4uLy4uL3NyYy9jb21tYW5kcy9nZW5lcmF0ZVN0YXRlbWVudHNBbmRUeXBlJyk7XG5jb25zdCB7IEFtcGxpZnlDb2RlR2VuTm9BcHBTeW5jQVBJQXZhaWxhYmxlRXJyb3IgfSA9IHJlcXVpcmUoJy4uLy4uL3NyYy9lcnJvcnMnKTtcbmNvbnN0IGNvbnN0YW50cyA9IHJlcXVpcmUoJy4uLy4uL3NyYy9jb25zdGFudHMnKTtcblxuY29uc3Qge1xuICBkb3dubG9hZEludHJvc3BlY3Rpb25TY2hlbWFXaXRoUHJvZ3Jlc3MsXG4gIGlzQXBwU3luY0FwaVBlbmRpbmdQdXNoLFxufSA9IHJlcXVpcmUoJy4uLy4uL3NyYy91dGlscycpO1xuXG5jb25zdCBNT0NLX0NPTlRFWFQgPSB7XG4gIHByaW50OiB7XG4gICAgaW5mbzogamVzdC5mbigpLFxuICB9LFxufTtcblxuamVzdC5tb2NrKCcuLi8uLi9zcmMvY29tbWFuZHMvdHlwZXMnKTtcbmplc3QubW9jaygnLi4vLi4vc3JjL2NvbW1hbmRzL3N0YXRlbWVudHMnKTtcbmplc3QubW9jaygnLi4vLi4vc3JjL2NvZGVnZW4tY29uZmlnJyk7XG5qZXN0Lm1vY2soJy4uLy4uL3NyYy91dGlscycpO1xuXG5jb25zdCBNT0NLX0lOQ0xVREVfUEFUSCA9ICdNT0NLX0lOQ0xVREUnO1xuY29uc3QgTU9DS19TVEFURU1FTlRTX1BBVEggPSAnTU9DS19TVEFURU1FTlRTX1BBVEgnO1xuY29uc3QgTU9DS19TQ0hFTUEgPSAnSU5UUk9TUEVDVElPTl9TQ0hFTUEuSlNPTic7XG5jb25zdCBNT0NLX1RBUkdFVCA9ICdUWVBFX1NDUklQVF9PUl9GTE9XX09SX0FOWV9PVEhFUl9MQU5HVUFHRSc7XG5jb25zdCBNT0NLX0dFTkVSQVRFRF9GSUxFX05BTUUgPSAnQVBJLlRTJztcbmNvbnN0IE1PQ0tfQVBJX0lEID0gJ01PQ0tfQVBJX0lEJztcbmNvbnN0IE1PQ0tfUkVHSU9OID0gJ01PQ0tfQVdTX1JFR0lPTic7XG5cbmNvbnN0IE1PQ0tfUFJPSkVDVCA9IHtcbiAgaW5jbHVkZXM6IFtNT0NLX0lOQ0xVREVfUEFUSF0sXG4gIHNjaGVtYTogTU9DS19TQ0hFTUEsXG4gIGFtcGxpZnlFeHRlbnNpb246IHtcbiAgICBnZW5lcmF0ZWRGaWxlTmFtZTogTU9DS19HRU5FUkFURURfRklMRV9OQU1FLFxuICAgIGNvZGVHZW5UYXJnZXQ6IE1PQ0tfVEFSR0VULFxuICAgIGdyYXBoUUxBcGlJZDogTU9DS19BUElfSUQsXG4gICAgZG9jc0ZpbGVQYXRoOiBNT0NLX1NUQVRFTUVOVFNfUEFUSCxcbiAgICByZWdpb246IE1PQ0tfUkVHSU9OLFxuICB9LFxufTtcblxuZGVzY3JpYmUoJ2NvbW1hbmQgLSBnZW5lcmF0ZVN0YXRlbWVudHNBbmRUeXBlcycsICgpID0+IHtcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG5cbiAgICBsb2FkQ29uZmlnLm1vY2tSZXR1cm5WYWx1ZSh7XG4gICAgICBnZXRQcm9qZWN0czogamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZShbTU9DS19QUk9KRUNUXSksXG4gICAgfSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgZ2VuZXJhdGUgc3RhdGVtZW50cyBhbmQgdHlwZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgZm9yY2VEb3dubG9hZCA9IGZhbHNlO1xuICAgIGF3YWl0IGdlbmVyYXRlU3RhdGVtZW50c0FuZFR5cGVzKE1PQ0tfQ09OVEVYVCwgZm9yY2VEb3dubG9hZCk7XG4gICAgZXhwZWN0KGxvYWRDb25maWcpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKE1PQ0tfQ09OVEVYVCk7XG4gICAgZXhwZWN0KGdlbmVyYXRlU3RhdGVtZW50cykudG9IYXZlQmVlbkNhbGxlZFdpdGgoTU9DS19DT05URVhULCBmYWxzZSwgdW5kZWZpbmVkKTtcbiAgICBleHBlY3QoZ2VuZXJhdGVUeXBlcykudG9IYXZlQmVlbkNhbGxlZFdpdGgoTU9DS19DT05URVhULCBmYWxzZSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgZG93bmxvYWQgdGhlIHNjaGVtYSBpZiBmb3JjZURvd25sb2FkIGZsYWcgaXMgcGFzc2VkJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGZvcmNlRG93bmxvYWQgPSB0cnVlO1xuICAgIGF3YWl0IGdlbmVyYXRlU3RhdGVtZW50c0FuZFR5cGVzKE1PQ0tfQ09OVEVYVCwgZm9yY2VEb3dubG9hZCk7XG4gICAgZXhwZWN0KGRvd25sb2FkSW50cm9zcGVjdGlvblNjaGVtYVdpdGhQcm9ncmVzcykudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICBNT0NLX0NPTlRFWFQsXG4gICAgICBNT0NLX0FQSV9JRCxcbiAgICAgIE1PQ0tfU0NIRU1BLFxuICAgICAgTU9DS19SRUdJT04sXG4gICAgKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBzaG93IGEgd2FybmluZyBpZiB0aGVyZSBhcmUgbm8gcHJvamVjdHMgY29uZmlndXJlZCcsIGFzeW5jICgpID0+IHtcbiAgICBsb2FkQ29uZmlnLm1vY2tSZXR1cm5WYWx1ZSh7XG4gICAgICBnZXRQcm9qZWN0czogamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZShbXSksXG4gICAgfSk7XG4gICAgYXdhaXQgZXhwZWN0KGdlbmVyYXRlU3RhdGVtZW50c0FuZFR5cGVzKE1PQ0tfQ09OVEVYVCwgZmFsc2UpKS5yZWplY3RzLnRvQmVJbnN0YW5jZU9mKFxuICAgICAgQW1wbGlmeUNvZGVHZW5Ob0FwcFN5bmNBUElBdmFpbGFibGVFcnJvcixcbiAgICApO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHNob3cgYSB3YXJuaW5nIGlmIHRoZSBwcm9qZWN0IGhhcyBsb2NhbCBjaGFuZ2Ugd2hpY2ggaXMgcGVuZGluZyBwdXNoJywgYXN5bmMgKCkgPT4ge1xuICAgIGlzQXBwU3luY0FwaVBlbmRpbmdQdXNoLm1vY2tSZXR1cm5WYWx1ZSh0cnVlKTtcbiAgICBhd2FpdCBnZW5lcmF0ZVN0YXRlbWVudHNBbmRUeXBlcyhNT0NLX0NPTlRFWFQsIGZhbHNlKTtcbiAgICBleHBlY3QoTU9DS19DT05URVhULnByaW50LmluZm8pLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGNvbnN0YW50cy5NU0dfQ09ERUdFTl9QRU5ESU5HX0FQSV9QVVNIKTtcbiAgfSk7XG59KTtcbiJdfQ==