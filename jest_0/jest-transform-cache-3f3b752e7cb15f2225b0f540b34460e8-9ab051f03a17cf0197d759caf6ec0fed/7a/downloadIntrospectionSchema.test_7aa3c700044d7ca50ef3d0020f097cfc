8c0f5fc596f6e6c7927d77d6c34e7759





jest.mock('fs-jetpack');const jetpack = require('fs-jetpack');const path = require('path');const downloadIntrospectionSchema = require('../../src/utils/downloadIntrospectionSchema');

describe('downloadIntrospectionSchema', () => {
  const mockExecuteProviderUtils = jest.fn();
  const mockGetEnvInfo = jest.fn();

  const mockIntroSchema = 'MOCK_INTROSPECTION_SCHEMA';
  const mockProjectPath = '/User/someone/Documents/Project/amplify-test';
  const mockContext = {
    amplify: {
      executeProviderUtils: mockExecuteProviderUtils,
      getEnvInfo: mockGetEnvInfo } };



  const mockApiId = 'mock-api-123';
  const mockDownloadDirectory = 'MOCK_DOWNLOAD_DIRECTORY';

  beforeEach(() => {
    jest.resetAllMocks();
    mockExecuteProviderUtils.mockReturnValue(mockIntroSchema);
    mockGetEnvInfo.mockReturnValue({
      projectPath: mockProjectPath });

  });
  it('should download the schema', async () => {
    const introSchemaPath = await downloadIntrospectionSchema(
    mockContext,
    mockApiId,
    path.join(mockDownloadDirectory, 'schema.json'));

    expect(mockExecuteProviderUtils).toHaveBeenCalledWith(
    mockContext,
    'awscloudformation',
    'getIntrospectionSchema',
    { apiId: mockApiId });

    expect(jetpack.dir).toHaveBeenCalledWith(mockDownloadDirectory);
    const expectedIntrospectionFileName = path.join(mockDownloadDirectory, 'schema.json');
    expect(jetpack.write).toHaveBeenCalledWith(expectedIntrospectionFileName, mockIntroSchema);

    expect(introSchemaPath).toEqual(path.relative(mockProjectPath, expectedIntrospectionFileName));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRvd25sb2FkSW50cm9zcGVjdGlvblNjaGVtYS50ZXN0LmpzIl0sIm5hbWVzIjpbImplc3QiLCJtb2NrIiwiamV0cGFjayIsInJlcXVpcmUiLCJwYXRoIiwiZG93bmxvYWRJbnRyb3NwZWN0aW9uU2NoZW1hIiwiZGVzY3JpYmUiLCJtb2NrRXhlY3V0ZVByb3ZpZGVyVXRpbHMiLCJmbiIsIm1vY2tHZXRFbnZJbmZvIiwibW9ja0ludHJvU2NoZW1hIiwibW9ja1Byb2plY3RQYXRoIiwibW9ja0NvbnRleHQiLCJhbXBsaWZ5IiwiZXhlY3V0ZVByb3ZpZGVyVXRpbHMiLCJnZXRFbnZJbmZvIiwibW9ja0FwaUlkIiwibW9ja0Rvd25sb2FkRGlyZWN0b3J5IiwiYmVmb3JlRWFjaCIsInJlc2V0QWxsTW9ja3MiLCJtb2NrUmV0dXJuVmFsdWUiLCJwcm9qZWN0UGF0aCIsIml0IiwiaW50cm9TY2hlbWFQYXRoIiwiam9pbiIsImV4cGVjdCIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwiYXBpSWQiLCJkaXIiLCJleHBlY3RlZEludHJvc3BlY3Rpb25GaWxlTmFtZSIsIndyaXRlIiwidG9FcXVhbCIsInJlbGF0aXZlIl0sIm1hcHBpbmdzIjoiOzs7OztBQUtBQSxLQUFLQyxJQUFMLENBQVUsWUFBVixFQUxBLE1BQU1DLFVBQVVDLFFBQVEsWUFBUixDQUFoQixDQUNBLE1BQU1DLE9BQU9ELFFBQVEsTUFBUixDQUFiLENBRUEsTUFBTUUsOEJBQThCRixRQUFRLDZDQUFSLENBQXBDOztBQUlBRyxTQUFTLDZCQUFULEVBQXdDLE1BQU07QUFDNUMsUUFBTUMsMkJBQTJCUCxLQUFLUSxFQUFMLEVBQWpDO0FBQ0EsUUFBTUMsaUJBQWlCVCxLQUFLUSxFQUFMLEVBQXZCOztBQUVBLFFBQU1FLGtCQUFrQiwyQkFBeEI7QUFDQSxRQUFNQyxrQkFBa0IsOENBQXhCO0FBQ0EsUUFBTUMsY0FBYztBQUNsQkMsYUFBUztBQUNQQyw0QkFBc0JQLHdCQURmO0FBRVBRLGtCQUFZTixjQUZMLEVBRFMsRUFBcEI7Ozs7QUFPQSxRQUFNTyxZQUFZLGNBQWxCO0FBQ0EsUUFBTUMsd0JBQXdCLHlCQUE5Qjs7QUFFQUMsYUFBVyxNQUFNO0FBQ2ZsQixTQUFLbUIsYUFBTDtBQUNBWiw2QkFBeUJhLGVBQXpCLENBQXlDVixlQUF6QztBQUNBRCxtQkFBZVcsZUFBZixDQUErQjtBQUM3QkMsbUJBQWFWLGVBRGdCLEVBQS9COztBQUdELEdBTkQ7QUFPQVcsS0FBRyw0QkFBSCxFQUFpQyxZQUFZO0FBQzNDLFVBQU1DLGtCQUFrQixNQUFNbEI7QUFDNUJPLGVBRDRCO0FBRTVCSSxhQUY0QjtBQUc1QlosU0FBS29CLElBQUwsQ0FBVVAscUJBQVYsRUFBaUMsYUFBakMsQ0FINEIsQ0FBOUI7O0FBS0FRLFdBQU9sQix3QkFBUCxFQUFpQ21CLG9CQUFqQztBQUNFZCxlQURGO0FBRUUsdUJBRkY7QUFHRSw0QkFIRjtBQUlFLE1BQUVlLE9BQU9YLFNBQVQsRUFKRjs7QUFNQVMsV0FBT3ZCLFFBQVEwQixHQUFmLEVBQW9CRixvQkFBcEIsQ0FBeUNULHFCQUF6QztBQUNBLFVBQU1ZLGdDQUFnQ3pCLEtBQUtvQixJQUFMLENBQVVQLHFCQUFWLEVBQWlDLGFBQWpDLENBQXRDO0FBQ0FRLFdBQU92QixRQUFRNEIsS0FBZixFQUFzQkosb0JBQXRCLENBQTJDRyw2QkFBM0MsRUFBMEVuQixlQUExRTs7QUFFQWUsV0FBT0YsZUFBUCxFQUF3QlEsT0FBeEIsQ0FBZ0MzQixLQUFLNEIsUUFBTCxDQUFjckIsZUFBZCxFQUErQmtCLDZCQUEvQixDQUFoQztBQUNELEdBakJEO0FBa0JELENBekNEIiwiZmlsZSI6ImRvd25sb2FkSW50cm9zcGVjdGlvblNjaGVtYS50ZXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgamV0cGFjayA9IHJlcXVpcmUoJ2ZzLWpldHBhY2snKTtcbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5cbmNvbnN0IGRvd25sb2FkSW50cm9zcGVjdGlvblNjaGVtYSA9IHJlcXVpcmUoJy4uLy4uL3NyYy91dGlscy9kb3dubG9hZEludHJvc3BlY3Rpb25TY2hlbWEnKTtcblxuamVzdC5tb2NrKCdmcy1qZXRwYWNrJyk7XG5cbmRlc2NyaWJlKCdkb3dubG9hZEludHJvc3BlY3Rpb25TY2hlbWEnLCAoKSA9PiB7XG4gIGNvbnN0IG1vY2tFeGVjdXRlUHJvdmlkZXJVdGlscyA9IGplc3QuZm4oKTtcbiAgY29uc3QgbW9ja0dldEVudkluZm8gPSBqZXN0LmZuKCk7XG5cbiAgY29uc3QgbW9ja0ludHJvU2NoZW1hID0gJ01PQ0tfSU5UUk9TUEVDVElPTl9TQ0hFTUEnO1xuICBjb25zdCBtb2NrUHJvamVjdFBhdGggPSAnL1VzZXIvc29tZW9uZS9Eb2N1bWVudHMvUHJvamVjdC9hbXBsaWZ5LXRlc3QnO1xuICBjb25zdCBtb2NrQ29udGV4dCA9IHtcbiAgICBhbXBsaWZ5OiB7XG4gICAgICBleGVjdXRlUHJvdmlkZXJVdGlsczogbW9ja0V4ZWN1dGVQcm92aWRlclV0aWxzLFxuICAgICAgZ2V0RW52SW5mbzogbW9ja0dldEVudkluZm8sXG5cbiAgICB9LFxuICB9O1xuICBjb25zdCBtb2NrQXBpSWQgPSAnbW9jay1hcGktMTIzJztcbiAgY29uc3QgbW9ja0Rvd25sb2FkRGlyZWN0b3J5ID0gJ01PQ0tfRE9XTkxPQURfRElSRUNUT1JZJztcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBqZXN0LnJlc2V0QWxsTW9ja3MoKTtcbiAgICBtb2NrRXhlY3V0ZVByb3ZpZGVyVXRpbHMubW9ja1JldHVyblZhbHVlKG1vY2tJbnRyb1NjaGVtYSk7XG4gICAgbW9ja0dldEVudkluZm8ubW9ja1JldHVyblZhbHVlKHtcbiAgICAgIHByb2plY3RQYXRoOiBtb2NrUHJvamVjdFBhdGgsXG4gICAgfSk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIGRvd25sb2FkIHRoZSBzY2hlbWEnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgaW50cm9TY2hlbWFQYXRoID0gYXdhaXQgZG93bmxvYWRJbnRyb3NwZWN0aW9uU2NoZW1hKFxuICAgICAgbW9ja0NvbnRleHQsXG4gICAgICBtb2NrQXBpSWQsXG4gICAgICBwYXRoLmpvaW4obW9ja0Rvd25sb2FkRGlyZWN0b3J5LCAnc2NoZW1hLmpzb24nKSxcbiAgICApO1xuICAgIGV4cGVjdChtb2NrRXhlY3V0ZVByb3ZpZGVyVXRpbHMpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgbW9ja0NvbnRleHQsXG4gICAgICAnYXdzY2xvdWRmb3JtYXRpb24nLFxuICAgICAgJ2dldEludHJvc3BlY3Rpb25TY2hlbWEnLFxuICAgICAgeyBhcGlJZDogbW9ja0FwaUlkIH0sXG4gICAgKTtcbiAgICBleHBlY3QoamV0cGFjay5kaXIpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKG1vY2tEb3dubG9hZERpcmVjdG9yeSk7XG4gICAgY29uc3QgZXhwZWN0ZWRJbnRyb3NwZWN0aW9uRmlsZU5hbWUgPSBwYXRoLmpvaW4obW9ja0Rvd25sb2FkRGlyZWN0b3J5LCAnc2NoZW1hLmpzb24nKTtcbiAgICBleHBlY3QoamV0cGFjay53cml0ZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoZXhwZWN0ZWRJbnRyb3NwZWN0aW9uRmlsZU5hbWUsIG1vY2tJbnRyb1NjaGVtYSk7XG5cbiAgICBleHBlY3QoaW50cm9TY2hlbWFQYXRoKS50b0VxdWFsKHBhdGgucmVsYXRpdmUobW9ja1Byb2plY3RQYXRoLCBleHBlY3RlZEludHJvc3BlY3Rpb25GaWxlTmFtZSkpO1xuICB9KTtcbn0pO1xuIl19